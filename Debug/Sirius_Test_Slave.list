
Sirius_Test_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009050  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080091e8  080091e8  000191e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800920c  0800920c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800920c  0800920c  0001920c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009214  08009214  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009214  08009214  00019214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800921c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  2000007c  08009298  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a48  08009298  00020a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ecc  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e95  00000000  00000000  00038fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  0003ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f54  00000000  00000000  0003e230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bcb1  00000000  00000000  0003f184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bcca  00000000  00000000  0005ae35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092c90  00000000  00000000  00076aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005670  00000000  00000000  00109790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0010ee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080091d0 	.word	0x080091d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	080091d0 	.word	0x080091d0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	f5ad 6da2 	sub.w	sp, sp, #1296	; 0x510
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fd5a 	bl	8000fa4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f864 	bl	80005bc <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004f4:	f000 f8d4 	bl	80006a0 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f9fa 	bl	80008f0 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80004fc:	f000 f8f6 	bl	80006ec <_ZL12MX_I2C1_Initv>
  MX_I2S2_Init();
 8000500:	f000 f928 	bl	8000754 <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 8000504:	f000 f95a 	bl	80007bc <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8000508:	f000 f98c 	bl	8000824 <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 800050c:	f008 fa0c 	bl	8008928 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f9c0 	bl	8000894 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  //char command[] = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n";
  //char command[] = "$GPGSA,A,3,23,29,07,08,09,18,26,28,,,,,1.94,1.18,1.54,1*0D";
  char command[] = "$GPGGA";
 8000514:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <main+0xd0>)
 8000516:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800051a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800051e:	6018      	str	r0, [r3, #0]
 8000520:	3304      	adds	r3, #4
 8000522:	8019      	strh	r1, [r3, #0]
 8000524:	3302      	adds	r3, #2
 8000526:	0c0a      	lsrs	r2, r1, #16
 8000528:	701a      	strb	r2, [r3, #0]
  char buffer[1024];
  uint8_t rxBuffer[256];
  memset(buffer, 0, sizeof(buffer));
 800052a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800052e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f008 fdbb 	bl	80090b0 <memset>
  memset(rxBuffer, 0, sizeof(rxBuffer));
 800053a:	463b      	mov	r3, r7
 800053c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f008 fdb4 	bl	80090b0 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	int transmitCode = HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), 5000);
 8000548:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff fe43 	bl	80001d8 <strlen>
 8000552:	4603      	mov	r3, r0
 8000554:	b29a      	uxth	r2, r3
 8000556:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 800055a:	f241 3388 	movw	r3, #5000	; 0x1388
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <main+0xd4>)
 8000560:	f004 f9a4 	bl	80048ac <HAL_UART_Transmit>
 8000564:	4603      	mov	r3, r0
 8000566:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
	int returnCode = HAL_UART_Receive(&huart2, (uint8_t*)buffer, sizeof(buffer) - 1, 5000);
 800056a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800056e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000572:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <main+0xd4>)
 8000578:	f004 fa2a 	bl	80049d0 <HAL_UART_Receive>
 800057c:	4603      	mov	r3, r0
 800057e:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
	if (HAL_UART_Receive(&huart2, (uint8_t*)buffer, sizeof(buffer) - 1, 10000) == HAL_OK) {
 8000582:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8000586:	f242 7310 	movw	r3, #10000	; 0x2710
 800058a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <main+0xd4>)
 8000590:	f004 fa1e 	bl	80049d0 <HAL_UART_Receive>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	bf0c      	ite	eq
 800059a:	2301      	moveq	r3, #1
 800059c:	2300      	movne	r3, #0
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d000      	beq.n	80005a6 <main+0xc2>
	  __NOP();
 80005a4:	bf00      	nop
	}
    /* USER CODE END WHILE */
	MX_USB_HOST_Process();
 80005a6:	f008 f9e5 	bl	8008974 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

	HAL_Delay(5000);
 80005aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80005ae:	f000 fd6b 	bl	8001088 <HAL_Delay>

    // HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 5000);
    // HAL_UART_Receive(&huart2, RX_Data, sizeof(RX_Data), 1000);
    // HAL_Delay(2000);
  }
 80005b2:	e7c9      	b.n	8000548 <main+0x64>
 80005b4:	080091e8 	.word	0x080091e8
 80005b8:	200001d4 	.word	0x200001d4

080005bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f008 fd70 	bl	80090b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <_Z18SystemClock_Configv+0xdc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <_Z18SystemClock_Configv+0xdc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <_Z18SystemClock_Configv+0xdc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <_Z18SystemClock_Configv+0xe0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a25      	ldr	r2, [pc, #148]	; (800069c <_Z18SystemClock_Configv+0xe0>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <_Z18SystemClock_Configv+0xe0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000630:	23c0      	movs	r3, #192	; 0xc0
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000634:	2304      	movs	r3, #4
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fa75 	bl	8003b30 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000656:	f000 fa19 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000666:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2103      	movs	r1, #3
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fcd2 	bl	8004020 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	bf14      	ite	ne
 8000682:	2301      	movne	r3, #1
 8000684:	2300      	moveq	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800068c:	f000 f9fe 	bl	8000a8c <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	; 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006b6:	2301      	movs	r3, #1
 80006b8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006ba:	23c8      	movs	r3, #200	; 0xc8
 80006bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006be:	2305      	movs	r3, #5
 80006c0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 fec9 	bl	8004460 <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 80006de:	f000 f9d5 	bl	8000a8c <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 80006f2:	4a16      	ldr	r2, [pc, #88]	; (800074c <_ZL12MX_I2C1_Initv+0x60>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 80006f8:	4a15      	ldr	r2, [pc, #84]	; (8000750 <_ZL12MX_I2C1_Initv+0x64>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4807      	ldr	r0, [pc, #28]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 800072a:	f002 fc1d 	bl	8002f68 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	bf14      	ite	ne
 8000734:	2301      	movne	r3, #1
 8000736:	2300      	moveq	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800073e:	f000 f9a5 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000098 	.word	0x20000098
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 800075a:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <_ZL12MX_I2S2_Initv+0x60>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <_ZL12MX_I2S2_Initv+0x64>)
 800077c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 800078c:	2201      	movs	r2, #1
 800078e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000790:	4807      	ldr	r0, [pc, #28]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 8000792:	f002 fd2d 	bl	80031f0 <HAL_I2S_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	bf14      	ite	ne
 800079c:	2301      	movne	r3, #1
 800079e:	2300      	moveq	r3, #0
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <_ZL12MX_I2S2_Initv+0x56>
  {
    Error_Handler();
 80007a6:	f000 f971 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000ec 	.word	0x200000ec
 80007b4:	40003800 	.word	0x40003800
 80007b8:	00017700 	.word	0x00017700

080007bc <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <_ZL12MX_I2S3_Initv+0x60>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007e4:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <_ZL12MX_I2S3_Initv+0x64>)
 80007e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007fc:	f002 fcf8 	bl	80031f0 <HAL_I2S_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	bf14      	ite	ne
 8000806:	2301      	movne	r3, #1
 8000808:	2300      	moveq	r3, #0
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8000810:	f000 f93c 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000134 	.word	0x20000134
 800081c:	40003c00 	.word	0x40003c00
 8000820:	00017700 	.word	0x00017700

08000824 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 800082a:	4a19      	ldr	r2, [pc, #100]	; (8000890 <_ZL12MX_SPI1_Initv+0x6c>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 800084e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000852:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000862:	2200      	movs	r2, #0
 8000864:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000868:	220a      	movs	r2, #10
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 800086e:	f003 ff47 	bl	8004700 <HAL_SPI_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2300      	moveq	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <_ZL12MX_SPI1_Initv+0x62>
  {
    Error_Handler();
 8000882:	f000 f903 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000017c 	.word	0x2000017c
 8000890:	40013000 	.word	0x40013000

08000894 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <_ZL19MX_USART2_UART_Initv+0x58>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008cc:	f003 ffa1 	bl	8004812 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	bf14      	ite	ne
 80008d6:	2301      	movne	r3, #1
 80008d8:	2300      	moveq	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80008e0:	f000 f8d4 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200001d4 	.word	0x200001d4
 80008ec:	40004400 	.word	0x40004400

080008f0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	4b5b      	ldr	r3, [pc, #364]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a5a      	ldr	r2, [pc, #360]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b58      	ldr	r3, [pc, #352]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	4b54      	ldr	r3, [pc, #336]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a53      	ldr	r2, [pc, #332]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b51      	ldr	r3, [pc, #324]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b4d      	ldr	r3, [pc, #308]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a4c      	ldr	r2, [pc, #304]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b46      	ldr	r3, [pc, #280]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a45      	ldr	r2, [pc, #276]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b43      	ldr	r3, [pc, #268]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b3f      	ldr	r3, [pc, #252]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a3e      	ldr	r2, [pc, #248]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b38      	ldr	r3, [pc, #224]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a37      	ldr	r2, [pc, #220]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <_ZL12MX_GPIO_Initv+0x188>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2108      	movs	r1, #8
 80009b2:	4832      	ldr	r0, [pc, #200]	; (8000a7c <_ZL12MX_GPIO_Initv+0x18c>)
 80009b4:	f000 feb4 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2101      	movs	r1, #1
 80009bc:	4830      	ldr	r0, [pc, #192]	; (8000a80 <_ZL12MX_GPIO_Initv+0x190>)
 80009be:	f000 feaf 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c2:	2200      	movs	r2, #0
 80009c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009c8:	482e      	ldr	r0, [pc, #184]	; (8000a84 <_ZL12MX_GPIO_Initv+0x194>)
 80009ca:	f000 fea9 	bl	8001720 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009ce:	2304      	movs	r3, #4
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4826      	ldr	r0, [pc, #152]	; (8000a7c <_ZL12MX_GPIO_Initv+0x18c>)
 80009e2:	f000 fd19 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009e6:	2308      	movs	r3, #8
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	481f      	ldr	r0, [pc, #124]	; (8000a7c <_ZL12MX_GPIO_Initv+0x18c>)
 80009fe:	f000 fd0b 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a02:	2332      	movs	r3, #50	; 0x32
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a06:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4819      	ldr	r0, [pc, #100]	; (8000a7c <_ZL12MX_GPIO_Initv+0x18c>)
 8000a18:	f000 fcfe 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4813      	ldr	r0, [pc, #76]	; (8000a80 <_ZL12MX_GPIO_Initv+0x190>)
 8000a34:	f000 fcf0 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480e      	ldr	r0, [pc, #56]	; (8000a88 <_ZL12MX_GPIO_Initv+0x198>)
 8000a4e:	f000 fce3 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a52:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a56:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <_ZL12MX_GPIO_Initv+0x194>)
 8000a6c:	f000 fcd4 	bl	8001418 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	bf00      	nop
 8000a72:	3730      	adds	r7, #48	; 0x30
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40020800 	.word	0x40020800
 8000a84:	40020c00 	.word	0x40020c00
 8000a88:	40020000 	.word	0x40020000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f000 fbca 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <HAL_I2C_MspInit+0x84>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12c      	bne.n	8000b64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2c:	2312      	movs	r3, #18
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	480c      	ldr	r0, [pc, #48]	; (8000b74 <HAL_I2C_MspInit+0x8c>)
 8000b44:	f000 fc68 	bl	8001418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_I2C_MspInit+0x88>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020400 	.word	0x40020400

08000b78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a59      	ldr	r2, [pc, #356]	; (8000cfc <HAL_I2S_MspInit+0x184>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d15b      	bne.n	8000c52 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
 8000b9e:	4b58      	ldr	r3, [pc, #352]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a57      	ldr	r2, [pc, #348]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b55      	ldr	r3, [pc, #340]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	623b      	str	r3, [r7, #32]
 8000bb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	4b51      	ldr	r3, [pc, #324]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a50      	ldr	r2, [pc, #320]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b4e      	ldr	r3, [pc, #312]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	61fb      	str	r3, [r7, #28]
 8000bd0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	4b4a      	ldr	r3, [pc, #296]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a49      	ldr	r2, [pc, #292]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b47      	ldr	r3, [pc, #284]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
 8000bec:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000bfe:	2306      	movs	r3, #6
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	483e      	ldr	r0, [pc, #248]	; (8000d04 <HAL_I2S_MspInit+0x18c>)
 8000c0a:	f000 fc05 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c0e:	2308      	movs	r3, #8
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c1e:	2305      	movs	r3, #5
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4836      	ldr	r0, [pc, #216]	; (8000d04 <HAL_I2S_MspInit+0x18c>)
 8000c2a:	f000 fbf5 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c40:	2305      	movs	r3, #5
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	482f      	ldr	r0, [pc, #188]	; (8000d08 <HAL_I2S_MspInit+0x190>)
 8000c4c:	f000 fbe4 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c50:	e04f      	b.n	8000cf2 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a2d      	ldr	r2, [pc, #180]	; (8000d0c <HAL_I2S_MspInit+0x194>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d14a      	bne.n	8000cf2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a26      	ldr	r2, [pc, #152]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
 8000c88:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_I2S_MspInit+0x188>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cc0:	2306      	movs	r3, #6
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4811      	ldr	r0, [pc, #68]	; (8000d10 <HAL_I2S_MspInit+0x198>)
 8000ccc:	f000 fba4 	bl	8001418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cd0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce2:	2306      	movs	r3, #6
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_I2S_MspInit+0x18c>)
 8000cee:	f000 fb93 	bl	8001418 <HAL_GPIO_Init>
}
 8000cf2:	bf00      	nop
 8000cf4:	3738      	adds	r7, #56	; 0x38
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40003800 	.word	0x40003800
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020800 	.word	0x40020800
 8000d08:	40020400 	.word	0x40020400
 8000d0c:	40003c00 	.word	0x40003c00
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <HAL_SPI_MspInit+0x84>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d12b      	bne.n	8000d8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d6e:	23e0      	movs	r3, #224	; 0xe0
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_SPI_MspInit+0x8c>)
 8000d8a:	f000 fb45 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40013000 	.word	0x40013000
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <HAL_UART_MspInit+0x94>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d133      	bne.n	8000e2e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_UART_MspInit+0x98>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <HAL_UART_MspInit+0x98>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_UART_MspInit+0x98>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_UART_MspInit+0x98>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <HAL_UART_MspInit+0x98>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_UART_MspInit+0x98>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000dfe:	2360      	movs	r3, #96	; 0x60
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0e:	2307      	movs	r3, #7
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4809      	ldr	r0, [pc, #36]	; (8000e40 <HAL_UART_MspInit+0x9c>)
 8000e1a:	f000 fafd 	bl	8001418 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	2026      	movs	r0, #38	; 0x26
 8000e24:	f000 fa2f 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e28:	2026      	movs	r0, #38	; 0x26
 8000e2a:	f000 fa48 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40004400 	.word	0x40004400
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020c00 	.word	0x40020c00

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f8da 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <USART2_IRQHandler+0x10>)
 8000e9e:	f003 fe39 	bl	8004b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001d4 	.word	0x200001d4

08000eac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <OTG_FS_IRQHandler+0x10>)
 8000eb2:	f000 feb9 	bl	8001c28 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200005fc 	.word	0x200005fc

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f008 f8f6 	bl	80090e0 <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20020000 	.word	0x20020000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000218 	.word	0x20000218
 8000f28:	20000a48 	.word	0x20000a48

08000f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:
 8000f5e:	58d4      	ldr	r4, [r2, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:
 8000f64:	18c4      	adds	r4, r0, r3
 8000f66:	428c      	cmp	r4, r1
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:
 8000f76:	42a2      	cmp	r2, r4
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>
 8000f7a:	f7ff ffd7 	bl	8000f2c <SystemInit>
 8000f7e:	f008 f8b5 	bl	80090ec <__libc_init_array>
 8000f82:	f7ff faaf 	bl	80004e4 <main>
 8000f86:	4770      	bx	lr
 8000f88:	20020000 	.word	0x20020000
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	2000007c 	.word	0x2000007c
 8000f94:	0800921c 	.word	0x0800921c
 8000f98:	2000007c 	.word	0x2000007c
 8000f9c:	20000a48 	.word	0x20000a48

08000fa0 <ADC_IRQHandler>:
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>
	...

08000fa4 <HAL_Init>:
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_Init+0x40>)
 8000fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_Init+0x40>)
 8000fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_Init+0x40>)
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f94f 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f808 	bl	8000fe8 <HAL_InitTick>
 8000fd8:	f7ff fd5e 	bl	8000a98 <HAL_MspInit>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023c00 	.word	0x40023c00

08000fe8 <HAL_InitTick>:
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f967 	bl	80012da <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 f92f 	bl	8001286 <HAL_NVIC_SetPriority>
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
 8001032:	2301      	movs	r3, #1
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000008 	.word	0x20000008
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	2000021c 	.word	0x2000021c

08001070 <HAL_GetTick>:
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	2000021c 	.word	0x2000021c

08001088 <HAL_Delay>:
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008

080010d0 <__NVIC_SetPriorityGrouping>:
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
 800121c:	4313      	orrs	r3, r2
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff29 	bl	80010d0 <__NVIC_SetPriorityGrouping>
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	f7ff ff3e 	bl	8001118 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff8e 	bl	80011c4 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff31 	bl	8001134 <__NVIC_EnableIRQ>
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa2 	bl	800122c <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_DMA_Abort>:
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	f7ff feb6 	bl	8001070 <HAL_GetTick>
 8001304:	60b8      	str	r0, [r7, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d008      	beq.n	8001324 <HAL_DMA_Abort+0x32>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	655a      	str	r2, [r3, #84]	; 0x54
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001320:	2301      	movs	r3, #1
 8001322:	e052      	b.n	80013ca <HAL_DMA_Abort+0xd8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0216 	bic.w	r2, r2, #22
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	2b00      	cmp	r3, #0
 800134a:	d103      	bne.n	8001354 <HAL_DMA_Abort+0x62>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001350:	2b00      	cmp	r3, #0
 8001352:	d007      	beq.n	8001364 <HAL_DMA_Abort+0x72>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0208 	bic.w	r2, r2, #8
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e013      	b.n	800139e <HAL_DMA_Abort+0xac>
 8001376:	f7ff fe7b 	bl	8001070 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b05      	cmp	r3, #5
 8001382:	d90c      	bls.n	800139e <HAL_DMA_Abort+0xac>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2220      	movs	r2, #32
 8001388:	655a      	str	r2, [r3, #84]	; 0x54
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2203      	movs	r2, #3
 800138e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800139a:	2303      	movs	r3, #3
 800139c:	e015      	b.n	80013ca <HAL_DMA_Abort+0xd8>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e4      	bne.n	8001376 <HAL_DMA_Abort+0x84>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b0:	223f      	movs	r2, #63	; 0x3f
 80013b2:	409a      	lsls	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80013c8:	2300      	movs	r3, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_DMA_Abort_IT>:
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d004      	beq.n	80013f0 <HAL_DMA_Abort_IT+0x1e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	655a      	str	r2, [r3, #84]	; 0x54
 80013ec:	2301      	movs	r3, #1
 80013ee:	e00c      	b.n	800140a <HAL_DMA_Abort_IT+0x38>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2205      	movs	r2, #5
 80013f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	2300      	movs	r3, #0
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <HAL_GPIO_Init>:
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e159      	b.n	80016e8 <HAL_GPIO_Init+0x2d0>
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8148 	bne.w	80016e2 <HAL_GPIO_Init+0x2ca>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a2 	beq.w	80016e2 <HAL_GPIO_Init+0x2ca>
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b57      	ldr	r3, [pc, #348]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a56      	ldr	r2, [pc, #344]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b54      	ldr	r3, [pc, #336]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4a52      	ldr	r2, [pc, #328]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a49      	ldr	r2, [pc, #292]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d019      	beq.n	800161a <HAL_GPIO_Init+0x202>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_GPIO_Init+0x2f4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0x1fe>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a47      	ldr	r2, [pc, #284]	; (8001710 <HAL_GPIO_Init+0x2f8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00d      	beq.n	8001612 <HAL_GPIO_Init+0x1fa>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_GPIO_Init+0x2fc>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x1f6>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a45      	ldr	r2, [pc, #276]	; (8001718 <HAL_GPIO_Init+0x300>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_GPIO_Init+0x1f2>
 8001606:	2304      	movs	r3, #4
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x204>
 800160a:	2307      	movs	r3, #7
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x204>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x204>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x204>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x204>
 800161a:	2300      	movs	r3, #0
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f002 0203 	and.w	r2, r2, #3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4093      	lsls	r3, r2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	4935      	ldr	r1, [pc, #212]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_GPIO_Init+0x304>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x246>
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <HAL_GPIO_Init+0x304>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_GPIO_Init+0x304>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x270>
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	4a24      	ldr	r2, [pc, #144]	; (800171c <HAL_GPIO_Init+0x304>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_GPIO_Init+0x304>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x29a>
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	4a1a      	ldr	r2, [pc, #104]	; (800171c <HAL_GPIO_Init+0x304>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6053      	str	r3, [r2, #4]
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_GPIO_Init+0x304>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2c4>
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_GPIO_Init+0x304>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	f67f aea2 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	40020c00 	.word	0x40020c00
 8001718:	40021000 	.word	0x40021000
 800171c:	40013c00 	.word	0x40013c00

08001720 <HAL_GPIO_WritePin>:
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
 800173c:	e003      	b.n	8001746 <HAL_GPIO_WritePin+0x26>
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	041a      	lsls	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	619a      	str	r2, [r3, #24]
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_HCD_Init>:
 8001752:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001754:	b08f      	sub	sp, #60	; 0x3c
 8001756:	af0a      	add	r7, sp, #40	; 0x28
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_HCD_Init+0x12>
 8001760:	2301      	movs	r3, #1
 8001762:	e054      	b.n	800180e <HAL_HCD_Init+0xbc>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <HAL_HCD_Init+0x32>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f007 f930 	bl	80089e4 <HAL_HCD_MspInit>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2203      	movs	r2, #3
 8001788:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <HAL_HCD_Init+0x4c>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 f95c 	bl	8005a60 <USB_DisableGlobalInt>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	687e      	ldr	r6, [r7, #4]
 80017b0:	466d      	mov	r5, sp
 80017b2:	f106 0410 	add.w	r4, r6, #16
 80017b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80017c6:	1d33      	adds	r3, r6, #4
 80017c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ca:	6838      	ldr	r0, [r7, #0]
 80017cc:	f004 f8d6 	bl	800597c <USB_CoreInit>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	4618      	mov	r0, r3
 80017d8:	f004 f953 	bl	8005a82 <USB_SetCurrentMode>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	687e      	ldr	r6, [r7, #4]
 80017e4:	466d      	mov	r5, sp
 80017e6:	f106 0410 	add.w	r4, r6, #16
 80017ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80017fa:	1d33      	adds	r3, r6, #4
 80017fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fe:	6838      	ldr	r0, [r7, #0]
 8001800:	f004 fadc 	bl	8005dbc <USB_HostInit>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 800180c:	2300      	movs	r3, #0
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001816 <HAL_HCD_HC_Init>:
 8001816:	b590      	push	{r4, r7, lr}
 8001818:	b089      	sub	sp, #36	; 0x24
 800181a:	af04      	add	r7, sp, #16
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	4608      	mov	r0, r1
 8001820:	4611      	mov	r1, r2
 8001822:	461a      	mov	r2, r3
 8001824:	4603      	mov	r3, r0
 8001826:	70fb      	strb	r3, [r7, #3]
 8001828:	460b      	mov	r3, r1
 800182a:	70bb      	strb	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	707b      	strb	r3, [r7, #1]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_HCD_HC_Init+0x28>
 800183a:	2302      	movs	r3, #2
 800183c:	e076      	b.n	800192c <HAL_HCD_HC_Init+0x116>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	212c      	movs	r1, #44	; 0x2c
 800184c:	fb01 f303 	mul.w	r3, r1, r3
 8001850:	4413      	add	r3, r2
 8001852:	333d      	adds	r3, #61	; 0x3d
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	212c      	movs	r1, #44	; 0x2c
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	3338      	adds	r3, #56	; 0x38
 8001866:	787a      	ldrb	r2, [r7, #1]
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	212c      	movs	r1, #44	; 0x2c
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	3340      	adds	r3, #64	; 0x40
 8001878:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800187a:	801a      	strh	r2, [r3, #0]
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	212c      	movs	r1, #44	; 0x2c
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4413      	add	r3, r2
 8001888:	3339      	adds	r3, #57	; 0x39
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	212c      	movs	r1, #44	; 0x2c
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	4413      	add	r3, r2
 800189a:	333f      	adds	r3, #63	; 0x3f
 800189c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	78ba      	ldrb	r2, [r7, #2]
 80018a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018aa:	b2d0      	uxtb	r0, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	333a      	adds	r3, #58	; 0x3a
 80018b8:	4602      	mov	r2, r0
 80018ba:	701a      	strb	r2, [r3, #0]
 80018bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da09      	bge.n	80018d8 <HAL_HCD_HC_Init+0xc2>
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	333b      	adds	r3, #59	; 0x3b
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e008      	b.n	80018ea <HAL_HCD_HC_Init+0xd4>
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	333b      	adds	r3, #59	; 0x3b
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	212c      	movs	r1, #44	; 0x2c
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	333c      	adds	r3, #60	; 0x3c
 80018f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	787c      	ldrb	r4, [r7, #1]
 8001904:	78ba      	ldrb	r2, [r7, #2]
 8001906:	78f9      	ldrb	r1, [r7, #3]
 8001908:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	4623      	mov	r3, r4
 800191a:	f004 fbd5 	bl	80060c8 <USB_HC_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	73fb      	strb	r3, [r7, #15]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bd90      	pop	{r4, r7, pc}

08001934 <HAL_HCD_HC_Halt>:
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	70fb      	strb	r3, [r7, #3]
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_HCD_HC_Halt+0x1e>
 800194e:	2302      	movs	r3, #2
 8001950:	e00f      	b.n	8001972 <HAL_HCD_HC_Halt+0x3e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f004 fe25 	bl	80065b2 <USB_HC_Halt>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_HCD_HC_SubmitRequest>:
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	4608      	mov	r0, r1
 8001986:	4611      	mov	r1, r2
 8001988:	461a      	mov	r2, r3
 800198a:	4603      	mov	r3, r0
 800198c:	70fb      	strb	r3, [r7, #3]
 800198e:	460b      	mov	r3, r1
 8001990:	70bb      	strb	r3, [r7, #2]
 8001992:	4613      	mov	r3, r2
 8001994:	707b      	strb	r3, [r7, #1]
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	333b      	adds	r3, #59	; 0x3b
 80019a4:	78ba      	ldrb	r2, [r7, #2]
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	333f      	adds	r3, #63	; 0x3f
 80019b6:	787a      	ldrb	r2, [r7, #1]
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	7c3b      	ldrb	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d112      	bne.n	80019e6 <HAL_HCD_HC_SubmitRequest+0x6a>
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	212c      	movs	r1, #44	; 0x2c
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	3342      	adds	r3, #66	; 0x42
 80019ce:	2203      	movs	r2, #3
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	212c      	movs	r1, #44	; 0x2c
 80019d8:	fb01 f303 	mul.w	r3, r1, r3
 80019dc:	4413      	add	r3, r2
 80019de:	333d      	adds	r3, #61	; 0x3d
 80019e0:	7f3a      	ldrb	r2, [r7, #28]
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e008      	b.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x7c>
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	3342      	adds	r3, #66	; 0x42
 80019f4:	2202      	movs	r2, #2
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	f200 80c6 	bhi.w	8001b8c <HAL_HCD_HC_SubmitRequest+0x210>
 8001a00:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a06:	bf00      	nop
 8001a08:	08001a19 	.word	0x08001a19
 8001a0c:	08001b79 	.word	0x08001b79
 8001a10:	08001a7d 	.word	0x08001a7d
 8001a14:	08001afb 	.word	0x08001afb
 8001a18:	7c3b      	ldrb	r3, [r7, #16]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	f040 80b8 	bne.w	8001b90 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a20:	78bb      	ldrb	r3, [r7, #2]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 80b4 	bne.w	8001b90 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a28:	8b3b      	ldrh	r3, [r7, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d108      	bne.n	8001a40 <HAL_HCD_HC_SubmitRequest+0xc4>
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	212c      	movs	r1, #44	; 0x2c
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	3355      	adds	r3, #85	; 0x55
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	212c      	movs	r1, #44	; 0x2c
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3355      	adds	r3, #85	; 0x55
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_HCD_HC_SubmitRequest+0xec>
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	212c      	movs	r1, #44	; 0x2c
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	3342      	adds	r3, #66	; 0x42
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e093      	b.n	8001b90 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	212c      	movs	r1, #44	; 0x2c
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	3342      	adds	r3, #66	; 0x42
 8001a76:	2202      	movs	r2, #2
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	e089      	b.n	8001b90 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a7c:	78bb      	ldrb	r3, [r7, #2]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d11d      	bne.n	8001abe <HAL_HCD_HC_SubmitRequest+0x142>
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	212c      	movs	r1, #44	; 0x2c
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3355      	adds	r3, #85	; 0x55
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_HCD_HC_SubmitRequest+0x12e>
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	212c      	movs	r1, #44	; 0x2c
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3342      	adds	r3, #66	; 0x42
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	e073      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x216>
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	212c      	movs	r1, #44	; 0x2c
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3342      	adds	r3, #66	; 0x42
 8001ab8:	2202      	movs	r2, #2
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	e069      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x216>
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	3354      	adds	r3, #84	; 0x54
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_HCD_HC_SubmitRequest+0x16a>
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3342      	adds	r3, #66	; 0x42
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e055      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x216>
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	212c      	movs	r1, #44	; 0x2c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	3342      	adds	r3, #66	; 0x42
 8001af4:	2202      	movs	r2, #2
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	e04b      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x216>
 8001afa:	78bb      	ldrb	r3, [r7, #2]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d11d      	bne.n	8001b3c <HAL_HCD_HC_SubmitRequest+0x1c0>
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3355      	adds	r3, #85	; 0x55
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d109      	bne.n	8001b28 <HAL_HCD_HC_SubmitRequest+0x1ac>
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	212c      	movs	r1, #44	; 0x2c
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3342      	adds	r3, #66	; 0x42
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	e034      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x216>
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3342      	adds	r3, #66	; 0x42
 8001b36:	2202      	movs	r2, #2
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	e02a      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x216>
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3354      	adds	r3, #84	; 0x54
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d109      	bne.n	8001b64 <HAL_HCD_HC_SubmitRequest+0x1e8>
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3342      	adds	r3, #66	; 0x42
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	e016      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x216>
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3342      	adds	r3, #66	; 0x42
 8001b72:	2202      	movs	r2, #2
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e00c      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x216>
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3342      	adds	r3, #66	; 0x42
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e002      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x216>
 8001b8c:	bf00      	nop
 8001b8e:	e000      	b.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x216>
 8001b90:	bf00      	nop
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	212c      	movs	r1, #44	; 0x2c
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3344      	adds	r3, #68	; 0x44
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	8b3a      	ldrh	r2, [r7, #24]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	202c      	movs	r0, #44	; 0x2c
 8001bac:	fb00 f303 	mul.w	r3, r0, r3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	334c      	adds	r3, #76	; 0x4c
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	212c      	movs	r1, #44	; 0x2c
 8001bbc:	fb01 f303 	mul.w	r3, r1, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3360      	adds	r3, #96	; 0x60
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	212c      	movs	r1, #44	; 0x2c
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3350      	adds	r3, #80	; 0x50
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	212c      	movs	r1, #44	; 0x2c
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	3339      	adds	r3, #57	; 0x39
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	212c      	movs	r1, #44	; 0x2c
 8001bf2:	fb01 f303 	mul.w	r3, r1, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3361      	adds	r3, #97	; 0x61
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	222c      	movs	r2, #44	; 0x2c
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	3338      	adds	r3, #56	; 0x38
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	18d1      	adds	r1, r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	f004 fb78 	bl	800630c <USB_HC_StartXfer>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop

08001c28 <HAL_HCD_IRQHandler>:
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 f879 	bl	8005d36 <USB_GetMode>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	f040 80f6 	bne.w	8001e38 <HAL_HCD_IRQHandler+0x210>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f004 f85d 	bl	8005d10 <USB_ReadInterrupts>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80ec 	beq.w	8001e36 <HAL_HCD_IRQHandler+0x20e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 f854 	bl	8005d10 <USB_ReadInterrupts>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c72:	d104      	bne.n	8001c7e <HAL_HCD_IRQHandler+0x56>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c7c:	615a      	str	r2, [r3, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f004 f844 	bl	8005d10 <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c92:	d104      	bne.n	8001c9e <HAL_HCD_IRQHandler+0x76>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c9c:	615a      	str	r2, [r3, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 f834 	bl	8005d10 <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cb2:	d104      	bne.n	8001cbe <HAL_HCD_IRQHandler+0x96>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cbc:	615a      	str	r2, [r3, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 f824 	bl	8005d10 <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d103      	bne.n	8001cda <HAL_HCD_IRQHandler+0xb2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	615a      	str	r2, [r3, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 f816 	bl	8005d10 <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cee:	d11c      	bne.n	8001d2a <HAL_HCD_IRQHandler+0x102>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cf8:	615a      	str	r2, [r3, #20]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10f      	bne.n	8001d2a <HAL_HCD_IRQHandler+0x102>
 8001d0a:	2110      	movs	r1, #16
 8001d0c:	6938      	ldr	r0, [r7, #16]
 8001d0e:	f003 ff05 	bl	8005b1c <USB_FlushTxFifo>
 8001d12:	6938      	ldr	r0, [r7, #16]
 8001d14:	f003 ff36 	bl	8005b84 <USB_FlushRxFifo>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 f90c 	bl	8005f3c <USB_InitFSLSPClkSel>
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f006 fedb 	bl	8008ae0 <HAL_HCD_Disconnect_Callback>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 ffee 	bl	8005d10 <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3e:	d102      	bne.n	8001d46 <HAL_HCD_IRQHandler+0x11e>
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f001 f89e 	bl	8002e82 <HCD_Port_IRQHandler>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 ffe0 	bl	8005d10 <USB_ReadInterrupts>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d106      	bne.n	8001d68 <HAL_HCD_IRQHandler+0x140>
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f006 fea4 	bl	8008aa8 <HAL_HCD_SOF_Callback>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2208      	movs	r2, #8
 8001d66:	615a      	str	r2, [r3, #20]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 ffcf 	bl	8005d10 <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b10      	cmp	r3, #16
 8001d7a:	d101      	bne.n	8001d80 <HAL_HCD_IRQHandler+0x158>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_HCD_IRQHandler+0x15a>
 8001d80:	2300      	movs	r3, #0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d012      	beq.n	8001dac <HAL_HCD_IRQHandler+0x184>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0210 	bic.w	r2, r2, #16
 8001d94:	619a      	str	r2, [r3, #24]
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 ffa1 	bl	8002cde <HCD_RXQLVL_IRQHandler>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0210 	orr.w	r2, r2, #16
 8001daa:	619a      	str	r2, [r3, #24]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 ffad 	bl	8005d10 <USB_ReadInterrupts>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dc0:	d13a      	bne.n	8001e38 <HAL_HCD_IRQHandler+0x210>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 fbe2 	bl	8006590 <USB_HC_ReadInterrupt>
 8001dcc:	60b8      	str	r0, [r7, #8]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e025      	b.n	8001e20 <HAL_HCD_IRQHandler+0x1f8>
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d018      	beq.n	8001e1a <HAL_HCD_IRQHandler+0x1f2>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dfe:	d106      	bne.n	8001e0e <HAL_HCD_IRQHandler+0x1e6>
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8ab 	bl	8001f62 <HCD_HC_IN_IRQHandler>
 8001e0c:	e005      	b.n	8001e1a <HAL_HCD_IRQHandler+0x1f2>
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4619      	mov	r1, r3
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fbf9 	bl	800260c <HCD_HC_OUT_IRQHandler>
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3d4      	bcc.n	8001dd4 <HAL_HCD_IRQHandler+0x1ac>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	e000      	b.n	8001e38 <HAL_HCD_IRQHandler+0x210>
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_HCD_Start>:
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_HCD_Start+0x16>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e013      	b.n	8001e7c <HAL_HCD_Start+0x3e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2101      	movs	r1, #1
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 f8ce 	bl	8006004 <USB_DriveVbus>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 fde6 	bl	8005a3e <USB_EnableGlobalInt>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_HCD_Stop>:
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_HCD_Stop+0x16>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e00d      	b.n	8001eb6 <HAL_HCD_Stop+0x32>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f004 fcbc 	bl	8006824 <USB_StopHost>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_HCD_ResetPort>:
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 f870 	bl	8005fb0 <USB_ResetPort>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_HCD_HC_GetURBState>:
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	70fb      	strb	r3, [r7, #3]
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3360      	adds	r3, #96	; 0x60
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_HCD_HC_GetXferCount>:
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3350      	adds	r3, #80	; 0x50
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HAL_HCD_GetCurrentFrame>:
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 f8b4 	bl	80060a4 <USB_GetCurrentFrame>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_HCD_GetCurrentSpeed>:
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 f88f 	bl	8006076 <USB_GetHostSpeed>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HCD_HC_IN_IRQHandler>:
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	70fb      	strb	r3, [r7, #3]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d11a      	bne.n	8001fc8 <HCD_HC_IN_IRQHandler+0x66>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	6093      	str	r3, [r2, #8]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	212c      	movs	r1, #44	; 0x2c
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	3361      	adds	r3, #97	; 0x61
 8001fb2:	2206      	movs	r2, #6
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 faf6 	bl	80065b2 <USB_HC_Halt>
 8001fc6:	e0af      	b.n	8002128 <HCD_HC_IN_IRQHandler+0x1c6>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fde:	d11b      	bne.n	8002018 <HCD_HC_IN_IRQHandler+0xb6>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fec:	461a      	mov	r2, r3
 8001fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff2:	6093      	str	r3, [r2, #8]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3361      	adds	r3, #97	; 0x61
 8002002:	2207      	movs	r2, #7
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f004 face 	bl	80065b2 <USB_HC_Halt>
 8002016:	e087      	b.n	8002128 <HCD_HC_IN_IRQHandler+0x1c6>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b20      	cmp	r3, #32
 800202c:	d109      	bne.n	8002042 <HCD_HC_IN_IRQHandler+0xe0>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203a:	461a      	mov	r2, r3
 800203c:	2320      	movs	r3, #32
 800203e:	6093      	str	r3, [r2, #8]
 8002040:	e072      	b.n	8002128 <HCD_HC_IN_IRQHandler+0x1c6>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b08      	cmp	r3, #8
 8002056:	d11a      	bne.n	800208e <HCD_HC_IN_IRQHandler+0x12c>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	015a      	lsls	r2, r3, #5
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4413      	add	r3, r2
 8002060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002064:	461a      	mov	r2, r3
 8002066:	2308      	movs	r3, #8
 8002068:	6093      	str	r3, [r2, #8]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	3361      	adds	r3, #97	; 0x61
 8002078:	2205      	movs	r2, #5
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f004 fa93 	bl	80065b2 <USB_HC_Halt>
 800208c:	e04c      	b.n	8002128 <HCD_HC_IN_IRQHandler+0x1c6>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a4:	d11b      	bne.n	80020de <HCD_HC_IN_IRQHandler+0x17c>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b2:	461a      	mov	r2, r3
 80020b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b8:	6093      	str	r3, [r2, #8]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	3361      	adds	r3, #97	; 0x61
 80020c8:	2208      	movs	r2, #8
 80020ca:	701a      	strb	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	4611      	mov	r1, r2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f004 fa6b 	bl	80065b2 <USB_HC_Halt>
 80020dc:	e024      	b.n	8002128 <HCD_HC_IN_IRQHandler+0x1c6>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b80      	cmp	r3, #128	; 0x80
 80020f2:	d119      	bne.n	8002128 <HCD_HC_IN_IRQHandler+0x1c6>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002100:	461a      	mov	r2, r3
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	6093      	str	r3, [r2, #8]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3361      	adds	r3, #97	; 0x61
 8002114:	2206      	movs	r2, #6
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f004 fa45 	bl	80065b2 <USB_HC_Halt>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800213e:	d112      	bne.n	8002166 <HCD_HC_IN_IRQHandler+0x204>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f004 fa31 	bl	80065b2 <USB_HC_Halt>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	461a      	mov	r2, r3
 800215e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002162:	6093      	str	r3, [r2, #8]
 8002164:	e24e      	b.n	8002604 <HCD_HC_IN_IRQHandler+0x6a2>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	f040 80df 	bne.w	800233c <HCD_HC_IN_IRQHandler+0x3da>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d019      	beq.n	80021ba <HCD_HC_IN_IRQHandler+0x258>
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3348      	adds	r3, #72	; 0x48
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	0159      	lsls	r1, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	440b      	add	r3, r1
 800219e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a8:	1ad2      	subs	r2, r2, r3
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	202c      	movs	r0, #44	; 0x2c
 80021b0:	fb00 f303 	mul.w	r3, r0, r3
 80021b4:	440b      	add	r3, r1
 80021b6:	3350      	adds	r3, #80	; 0x50
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3361      	adds	r3, #97	; 0x61
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	335c      	adds	r3, #92	; 0x5c
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	461a      	mov	r2, r3
 80021ec:	2301      	movs	r3, #1
 80021ee:	6093      	str	r3, [r2, #8]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	212c      	movs	r1, #44	; 0x2c
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	333f      	adds	r3, #63	; 0x3f
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d009      	beq.n	8002218 <HCD_HC_IN_IRQHandler+0x2b6>
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	333f      	adds	r3, #63	; 0x3f
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d111      	bne.n	800223c <HCD_HC_IN_IRQHandler+0x2da>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f004 f9c5 	bl	80065b2 <USB_HC_Halt>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4413      	add	r3, r2
 8002230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002234:	461a      	mov	r2, r3
 8002236:	2310      	movs	r3, #16
 8002238:	6093      	str	r3, [r2, #8]
 800223a:	e03a      	b.n	80022b2 <HCD_HC_IN_IRQHandler+0x350>
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	333f      	adds	r3, #63	; 0x3f
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d009      	beq.n	8002264 <HCD_HC_IN_IRQHandler+0x302>
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	333f      	adds	r3, #63	; 0x3f
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d126      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x350>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	0151      	lsls	r1, r2, #5
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	440a      	add	r2, r1
 800227a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800227e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3360      	adds	r3, #96	; 0x60
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	b2d9      	uxtb	r1, r3
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	202c      	movs	r0, #44	; 0x2c
 80022a0:	fb00 f303 	mul.w	r3, r0, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3360      	adds	r3, #96	; 0x60
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f006 fc25 	bl	8008afc <HAL_HCD_HC_NotifyURBChange_Callback>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d12b      	bne.n	8002312 <HCD_HC_IN_IRQHandler+0x3b0>
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3348      	adds	r3, #72	; 0x48
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	202c      	movs	r0, #44	; 0x2c
 80022d0:	fb00 f202 	mul.w	r2, r0, r2
 80022d4:	440a      	add	r2, r1
 80022d6:	3240      	adds	r2, #64	; 0x40
 80022d8:	8812      	ldrh	r2, [r2, #0]
 80022da:	fbb3 f3f2 	udiv	r3, r3, r2
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 818e 	beq.w	8002604 <HCD_HC_IN_IRQHandler+0x6a2>
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3354      	adds	r3, #84	; 0x54
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	f083 0301 	eor.w	r3, r3, #1
 80022fc:	b2d8      	uxtb	r0, r3
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	212c      	movs	r1, #44	; 0x2c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	3354      	adds	r3, #84	; 0x54
 800230c:	4602      	mov	r2, r0
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e178      	b.n	8002604 <HCD_HC_IN_IRQHandler+0x6a2>
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	3354      	adds	r3, #84	; 0x54
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2d8      	uxtb	r0, r3
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	3354      	adds	r3, #84	; 0x54
 8002336:	4602      	mov	r2, r0
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	e163      	b.n	8002604 <HCD_HC_IN_IRQHandler+0x6a2>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b02      	cmp	r3, #2
 8002350:	f040 80f6 	bne.w	8002540 <HCD_HC_IN_IRQHandler+0x5de>
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3361      	adds	r3, #97	; 0x61
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d109      	bne.n	800237c <HCD_HC_IN_IRQHandler+0x41a>
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3360      	adds	r3, #96	; 0x60
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
 800237a:	e0c9      	b.n	8002510 <HCD_HC_IN_IRQHandler+0x5ae>
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	3361      	adds	r3, #97	; 0x61
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b05      	cmp	r3, #5
 800238e:	d109      	bne.n	80023a4 <HCD_HC_IN_IRQHandler+0x442>
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3360      	adds	r3, #96	; 0x60
 800239e:	2205      	movs	r2, #5
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	e0b5      	b.n	8002510 <HCD_HC_IN_IRQHandler+0x5ae>
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3361      	adds	r3, #97	; 0x61
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b06      	cmp	r3, #6
 80023b6:	d009      	beq.n	80023cc <HCD_HC_IN_IRQHandler+0x46a>
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3361      	adds	r3, #97	; 0x61
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d150      	bne.n	800246e <HCD_HC_IN_IRQHandler+0x50c>
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	335c      	adds	r3, #92	; 0x5c
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	202c      	movs	r0, #44	; 0x2c
 80023e4:	fb00 f303 	mul.w	r3, r0, r3
 80023e8:	440b      	add	r3, r1
 80023ea:	335c      	adds	r3, #92	; 0x5c
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	335c      	adds	r3, #92	; 0x5c
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d912      	bls.n	8002428 <HCD_HC_IN_IRQHandler+0x4c6>
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	335c      	adds	r3, #92	; 0x5c
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	212c      	movs	r1, #44	; 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	3360      	adds	r3, #96	; 0x60
 8002422:	2204      	movs	r2, #4
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	e073      	b.n	8002510 <HCD_HC_IN_IRQHandler+0x5ae>
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	212c      	movs	r1, #44	; 0x2c
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4413      	add	r3, r2
 8002434:	3360      	adds	r3, #96	; 0x60
 8002436:	2202      	movs	r2, #2
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e050      	b.n	8002510 <HCD_HC_IN_IRQHandler+0x5ae>
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	212c      	movs	r1, #44	; 0x2c
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	3361      	adds	r3, #97	; 0x61
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d122      	bne.n	80024c8 <HCD_HC_IN_IRQHandler+0x566>
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	3360      	adds	r3, #96	; 0x60
 8002490:	2202      	movs	r2, #2
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	461a      	mov	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e023      	b.n	8002510 <HCD_HC_IN_IRQHandler+0x5ae>
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3361      	adds	r3, #97	; 0x61
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b07      	cmp	r3, #7
 80024da:	d119      	bne.n	8002510 <HCD_HC_IN_IRQHandler+0x5ae>
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	335c      	adds	r3, #92	; 0x5c
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	202c      	movs	r0, #44	; 0x2c
 80024f4:	fb00 f303 	mul.w	r3, r0, r3
 80024f8:	440b      	add	r3, r1
 80024fa:	335c      	adds	r3, #92	; 0x5c
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	3360      	adds	r3, #96	; 0x60
 800250c:	2204      	movs	r2, #4
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	461a      	mov	r2, r3
 800251e:	2302      	movs	r3, #2
 8002520:	6093      	str	r3, [r2, #8]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	b2d9      	uxtb	r1, r3
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	202c      	movs	r0, #44	; 0x2c
 800252c:	fb00 f303 	mul.w	r3, r0, r3
 8002530:	4413      	add	r3, r2
 8002532:	3360      	adds	r3, #96	; 0x60
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f006 fadf 	bl	8008afc <HAL_HCD_HC_NotifyURBChange_Callback>
 800253e:	e061      	b.n	8002604 <HCD_HC_IN_IRQHandler+0x6a2>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4413      	add	r3, r2
 8002548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b10      	cmp	r3, #16
 8002554:	d156      	bne.n	8002604 <HCD_HC_IN_IRQHandler+0x6a2>
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	333f      	adds	r3, #63	; 0x3f
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b03      	cmp	r3, #3
 8002568:	d111      	bne.n	800258e <HCD_HC_IN_IRQHandler+0x62c>
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f004 f813 	bl	80065b2 <USB_HC_Halt>
 800258c:	e031      	b.n	80025f2 <HCD_HC_IN_IRQHandler+0x690>
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	333f      	adds	r3, #63	; 0x3f
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <HCD_HC_IN_IRQHandler+0x654>
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	333f      	adds	r3, #63	; 0x3f
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d11d      	bne.n	80025f2 <HCD_HC_IN_IRQHandler+0x690>
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	335c      	adds	r3, #92	; 0x5c
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d110      	bne.n	80025f2 <HCD_HC_IN_IRQHandler+0x690>
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	3361      	adds	r3, #97	; 0x61
 80025de:	2203      	movs	r2, #3
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 ffe0 	bl	80065b2 <USB_HC_Halt>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	461a      	mov	r2, r3
 8002600:	2310      	movs	r3, #16
 8002602:	6093      	str	r3, [r2, #8]
 8002604:	bf00      	nop
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HCD_HC_OUT_IRQHandler>:
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	70fb      	strb	r3, [r7, #3]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b04      	cmp	r3, #4
 800263a:	d11a      	bne.n	8002672 <HCD_HC_OUT_IRQHandler+0x66>
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	461a      	mov	r2, r3
 800264a:	2304      	movs	r3, #4
 800264c:	6093      	str	r3, [r2, #8]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	3361      	adds	r3, #97	; 0x61
 800265c:	2206      	movs	r2, #6
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f003 ffa1 	bl	80065b2 <USB_HC_Halt>
 8002670:	e331      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b20      	cmp	r3, #32
 8002686:	d12e      	bne.n	80026e6 <HCD_HC_OUT_IRQHandler+0xda>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	461a      	mov	r2, r3
 8002696:	2320      	movs	r3, #32
 8002698:	6093      	str	r3, [r2, #8]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	333d      	adds	r3, #61	; 0x3d
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	f040 8313 	bne.w	8002cd6 <HCD_HC_OUT_IRQHandler+0x6ca>
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	333d      	adds	r3, #61	; 0x3d
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3360      	adds	r3, #96	; 0x60
 80026d0:	2202      	movs	r2, #2
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 ff67 	bl	80065b2 <USB_HC_Halt>
 80026e4:	e2f7      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x6ca>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026fc:	d112      	bne.n	8002724 <HCD_HC_OUT_IRQHandler+0x118>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	461a      	mov	r2, r3
 800270c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002710:	6093      	str	r3, [r2, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f003 ff48 	bl	80065b2 <USB_HC_Halt>
 8002722:	e2d8      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b01      	cmp	r3, #1
 8002738:	d140      	bne.n	80027bc <HCD_HC_OUT_IRQHandler+0x1b0>
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	335c      	adds	r3, #92	; 0x5c
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	2b40      	cmp	r3, #64	; 0x40
 8002760:	d111      	bne.n	8002786 <HCD_HC_OUT_IRQHandler+0x17a>
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	333d      	adds	r3, #61	; 0x3d
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	2340      	movs	r3, #64	; 0x40
 8002784:	6093      	str	r3, [r2, #8]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	461a      	mov	r2, r3
 8002794:	2301      	movs	r3, #1
 8002796:	6093      	str	r3, [r2, #8]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	3361      	adds	r3, #97	; 0x61
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 fefc 	bl	80065b2 <USB_HC_Halt>
 80027ba:	e28c      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x6ca>
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d12c      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x220>
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3361      	adds	r3, #97	; 0x61
 80027e0:	2204      	movs	r2, #4
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	333d      	adds	r3, #61	; 0x3d
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	335c      	adds	r3, #92	; 0x5c
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f003 fecd 	bl	80065b2 <USB_HC_Halt>
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	461a      	mov	r2, r3
 8002826:	2340      	movs	r3, #64	; 0x40
 8002828:	6093      	str	r3, [r2, #8]
 800282a:	e254      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x6ca>
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b08      	cmp	r3, #8
 8002840:	d11a      	bne.n	8002878 <HCD_HC_OUT_IRQHandler+0x26c>
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284e:	461a      	mov	r2, r3
 8002850:	2308      	movs	r3, #8
 8002852:	6093      	str	r3, [r2, #8]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3361      	adds	r3, #97	; 0x61
 8002862:	2205      	movs	r2, #5
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f003 fe9e 	bl	80065b2 <USB_HC_Halt>
 8002876:	e22e      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b10      	cmp	r3, #16
 800288c:	d140      	bne.n	8002910 <HCD_HC_OUT_IRQHandler+0x304>
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	335c      	adds	r3, #92	; 0x5c
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3361      	adds	r3, #97	; 0x61
 80028ae:	2203      	movs	r2, #3
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	333d      	adds	r3, #61	; 0x3d
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d112      	bne.n	80028ec <HCD_HC_OUT_IRQHandler+0x2e0>
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	333c      	adds	r3, #60	; 0x3c
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d108      	bne.n	80028ec <HCD_HC_OUT_IRQHandler+0x2e0>
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	333d      	adds	r3, #61	; 0x3d
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 fe5b 	bl	80065b2 <USB_HC_Halt>
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	461a      	mov	r2, r3
 800290a:	2310      	movs	r3, #16
 800290c:	6093      	str	r3, [r2, #8]
 800290e:	e1e2      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b80      	cmp	r3, #128	; 0x80
 8002924:	d164      	bne.n	80029f0 <HCD_HC_OUT_IRQHandler+0x3e4>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d111      	bne.n	8002952 <HCD_HC_OUT_IRQHandler+0x346>
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3361      	adds	r3, #97	; 0x61
 800293c:	2206      	movs	r2, #6
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f003 fe31 	bl	80065b2 <USB_HC_Halt>
 8002950:	e044      	b.n	80029dc <HCD_HC_OUT_IRQHandler+0x3d0>
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	335c      	adds	r3, #92	; 0x5c
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	202c      	movs	r0, #44	; 0x2c
 800296a:	fb00 f303 	mul.w	r3, r0, r3
 800296e:	440b      	add	r3, r1
 8002970:	335c      	adds	r3, #92	; 0x5c
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	335c      	adds	r3, #92	; 0x5c
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d920      	bls.n	80029ca <HCD_HC_OUT_IRQHandler+0x3be>
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	335c      	adds	r3, #92	; 0x5c
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3360      	adds	r3, #96	; 0x60
 80029a8:	2204      	movs	r2, #4
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	b2d9      	uxtb	r1, r3
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	202c      	movs	r0, #44	; 0x2c
 80029b6:	fb00 f303 	mul.w	r3, r0, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3360      	adds	r3, #96	; 0x60
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f006 f89a 	bl	8008afc <HAL_HCD_HC_NotifyURBChange_Callback>
 80029c8:	e008      	b.n	80029dc <HCD_HC_OUT_IRQHandler+0x3d0>
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3360      	adds	r3, #96	; 0x60
 80029d8:	2202      	movs	r2, #2
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	461a      	mov	r2, r3
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	6093      	str	r3, [r2, #8]
 80029ee:	e172      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x6ca>
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a06:	d11b      	bne.n	8002a40 <HCD_HC_OUT_IRQHandler+0x434>
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3361      	adds	r3, #97	; 0x61
 8002a16:	2208      	movs	r2, #8
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 fdc4 	bl	80065b2 <USB_HC_Halt>
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	461a      	mov	r2, r3
 8002a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a3c:	6093      	str	r3, [r2, #8]
 8002a3e:	e14a      	b.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	f040 813f 	bne.w	8002cd6 <HCD_HC_OUT_IRQHandler+0x6ca>
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3361      	adds	r3, #97	; 0x61
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d17d      	bne.n	8002b68 <HCD_HC_OUT_IRQHandler+0x55c>
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3360      	adds	r3, #96	; 0x60
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	333f      	adds	r3, #63	; 0x3f
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d00a      	beq.n	8002aa8 <HCD_HC_OUT_IRQHandler+0x49c>
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	333f      	adds	r3, #63	; 0x3f
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	f040 8100 	bne.w	8002ca8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d113      	bne.n	8002ad8 <HCD_HC_OUT_IRQHandler+0x4cc>
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3355      	adds	r3, #85	; 0x55
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	f083 0301 	eor.w	r3, r3, #1
 8002ac4:	b2d8      	uxtb	r0, r3
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3355      	adds	r3, #85	; 0x55
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	f040 80e3 	bne.w	8002ca8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	334c      	adds	r3, #76	; 0x4c
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80d8 	beq.w	8002ca8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	334c      	adds	r3, #76	; 0x4c
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	202c      	movs	r0, #44	; 0x2c
 8002b0e:	fb00 f202 	mul.w	r2, r0, r2
 8002b12:	440a      	add	r2, r1
 8002b14:	3240      	adds	r2, #64	; 0x40
 8002b16:	8812      	ldrh	r2, [r2, #0]
 8002b18:	4413      	add	r3, r2
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	202c      	movs	r0, #44	; 0x2c
 8002b22:	fb00 f202 	mul.w	r2, r0, r2
 8002b26:	440a      	add	r2, r1
 8002b28:	3240      	adds	r2, #64	; 0x40
 8002b2a:	8812      	ldrh	r2, [r2, #0]
 8002b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80b5 	beq.w	8002ca8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3355      	adds	r3, #85	; 0x55
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	f083 0301 	eor.w	r3, r3, #1
 8002b52:	b2d8      	uxtb	r0, r3
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3355      	adds	r3, #85	; 0x55
 8002b62:	4602      	mov	r2, r0
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	e09f      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3361      	adds	r3, #97	; 0x61
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d109      	bne.n	8002b90 <HCD_HC_OUT_IRQHandler+0x584>
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3360      	adds	r3, #96	; 0x60
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	e08b      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3361      	adds	r3, #97	; 0x61
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d109      	bne.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x5ac>
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3360      	adds	r3, #96	; 0x60
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	e077      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3361      	adds	r3, #97	; 0x61
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	d109      	bne.n	8002be0 <HCD_HC_OUT_IRQHandler+0x5d4>
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3360      	adds	r3, #96	; 0x60
 8002bda:	2205      	movs	r2, #5
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	e063      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3361      	adds	r3, #97	; 0x61
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b06      	cmp	r3, #6
 8002bf2:	d009      	beq.n	8002c08 <HCD_HC_OUT_IRQHandler+0x5fc>
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3361      	adds	r3, #97	; 0x61
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d14f      	bne.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	335c      	adds	r3, #92	; 0x5c
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	202c      	movs	r0, #44	; 0x2c
 8002c20:	fb00 f303 	mul.w	r3, r0, r3
 8002c24:	440b      	add	r3, r1
 8002c26:	335c      	adds	r3, #92	; 0x5c
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	335c      	adds	r3, #92	; 0x5c
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d912      	bls.n	8002c64 <HCD_HC_OUT_IRQHandler+0x658>
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	335c      	adds	r3, #92	; 0x5c
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3360      	adds	r3, #96	; 0x60
 8002c5e:	2204      	movs	r2, #4
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e021      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3360      	adds	r3, #96	; 0x60
 8002c72:	2202      	movs	r2, #2
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	6093      	str	r3, [r2, #8]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	b2d9      	uxtb	r1, r3
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	202c      	movs	r0, #44	; 0x2c
 8002cc4:	fb00 f303 	mul.w	r3, r0, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3360      	adds	r3, #96	; 0x60
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f005 ff13 	bl	8008afc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cd6:	bf00      	nop
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HCD_RXQLVL_IRQHandler>:
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b08a      	sub	sp, #40	; 0x28
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	623b      	str	r3, [r7, #32]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	0c5b      	lsrs	r3, r3, #17
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d004      	beq.n	8002d24 <HCD_RXQLVL_IRQHandler+0x46>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	f000 80a9 	beq.w	8002e74 <HCD_RXQLVL_IRQHandler+0x196>
 8002d22:	e0aa      	b.n	8002e7a <HCD_RXQLVL_IRQHandler+0x19c>
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80a6 	beq.w	8002e78 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3344      	adds	r3, #68	; 0x44
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 809b 	beq.w	8002e78 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3350      	adds	r3, #80	; 0x50
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	441a      	add	r2, r3
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	202c      	movs	r0, #44	; 0x2c
 8002d5c:	fb00 f303 	mul.w	r3, r0, r3
 8002d60:	440b      	add	r3, r1
 8002d62:	334c      	adds	r3, #76	; 0x4c
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d87a      	bhi.n	8002e60 <HCD_RXQLVL_IRQHandler+0x182>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3344      	adds	r3, #68	; 0x44
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	b292      	uxth	r2, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f002 ff6c 	bl	8005c60 <USB_ReadPacket>
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3344      	adds	r3, #68	; 0x44
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	441a      	add	r2, r3
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	202c      	movs	r0, #44	; 0x2c
 8002da2:	fb00 f303 	mul.w	r3, r0, r3
 8002da6:	440b      	add	r3, r1
 8002da8:	3344      	adds	r3, #68	; 0x44
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	3350      	adds	r3, #80	; 0x50
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	441a      	add	r2, r3
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	202c      	movs	r0, #44	; 0x2c
 8002dc6:	fb00 f303 	mul.w	r3, r0, r3
 8002dca:	440b      	add	r3, r1
 8002dcc:	3350      	adds	r3, #80	; 0x50
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	0cdb      	lsrs	r3, r3, #19
 8002de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	3340      	adds	r3, #64	; 0x40
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d13c      	bne.n	8002e78 <HCD_RXQLVL_IRQHandler+0x19a>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d039      	beq.n	8002e78 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	461a      	mov	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	3354      	adds	r3, #84	; 0x54
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f083 0301 	eor.w	r3, r3, #1
 8002e4a:	b2d8      	uxtb	r0, r3
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3354      	adds	r3, #84	; 0x54
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e00b      	b.n	8002e78 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3360      	adds	r3, #96	; 0x60
 8002e6e:	2204      	movs	r2, #4
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e001      	b.n	8002e78 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e74:	bf00      	nop
 8002e76:	e000      	b.n	8002e7a <HCD_RXQLVL_IRQHandler+0x19c>
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	3728      	adds	r7, #40	; 0x28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HCD_Port_IRQHandler>:
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d10b      	bne.n	8002ed2 <HCD_Port_IRQHandler+0x50>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d102      	bne.n	8002eca <HCD_Port_IRQHandler+0x48>
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f005 fdfd 	bl	8008ac4 <HAL_HCD_Connect_Callback>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f043 0302 	orr.w	r3, r3, #2
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d132      	bne.n	8002f42 <HCD_Port_IRQHandler+0xc0>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f043 0308 	orr.w	r3, r3, #8
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d126      	bne.n	8002f3c <HCD_Port_IRQHandler+0xba>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d113      	bne.n	8002f1e <HCD_Port_IRQHandler+0x9c>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002efc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f00:	d106      	bne.n	8002f10 <HCD_Port_IRQHandler+0x8e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2102      	movs	r1, #2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 f817 	bl	8005f3c <USB_InitFSLSPClkSel>
 8002f0e:	e011      	b.n	8002f34 <HCD_Port_IRQHandler+0xb2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 f810 	bl	8005f3c <USB_InitFSLSPClkSel>
 8002f1c:	e00a      	b.n	8002f34 <HCD_Port_IRQHandler+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d106      	bne.n	8002f34 <HCD_Port_IRQHandler+0xb2>
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f32:	6053      	str	r3, [r2, #4]
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f005 fdef 	bl	8008b18 <HAL_HCD_PortEnabled_Callback>
 8002f3a:	e002      	b.n	8002f42 <HCD_Port_IRQHandler+0xc0>
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f005 fdf9 	bl	8008b34 <HAL_HCD_PortDisabled_Callback>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d103      	bne.n	8002f54 <HCD_Port_IRQHandler+0xd2>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f043 0320 	orr.w	r3, r3, #32
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	bf00      	nop
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_I2C_Init>:
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_I2C_Init+0x12>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e12b      	b.n	80031d2 <HAL_I2C_Init+0x26a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_I2C_Init+0x2c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fd fdaa 	bl	8000ae8 <HAL_I2C_MspInit>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	; 0x24
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f001 fa20 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4a81      	ldr	r2, [pc, #516]	; (80031dc <HAL_I2C_Init+0x274>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d807      	bhi.n	8002fec <HAL_I2C_Init+0x84>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a80      	ldr	r2, [pc, #512]	; (80031e0 <HAL_I2C_Init+0x278>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bf94      	ite	ls
 8002fe4:	2301      	movls	r3, #1
 8002fe6:	2300      	movhi	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e006      	b.n	8002ffa <HAL_I2C_Init+0x92>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a7d      	ldr	r2, [pc, #500]	; (80031e4 <HAL_I2C_Init+0x27c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	bf94      	ite	ls
 8002ff4:	2301      	movls	r3, #1
 8002ff6:	2300      	movhi	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Init+0x9a>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0e7      	b.n	80031d2 <HAL_I2C_Init+0x26a>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a78      	ldr	r2, [pc, #480]	; (80031e8 <HAL_I2C_Init+0x280>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0c9b      	lsrs	r3, r3, #18
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a6a      	ldr	r2, [pc, #424]	; (80031dc <HAL_I2C_Init+0x274>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d802      	bhi.n	800303c <HAL_I2C_Init+0xd4>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3301      	adds	r3, #1
 800303a:	e009      	b.n	8003050 <HAL_I2C_Init+0xe8>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	4a69      	ldr	r2, [pc, #420]	; (80031ec <HAL_I2C_Init+0x284>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	099b      	lsrs	r3, r3, #6
 800304e:	3301      	adds	r3, #1
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	430b      	orrs	r3, r1
 8003056:	6213      	str	r3, [r2, #32]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	495c      	ldr	r1, [pc, #368]	; (80031dc <HAL_I2C_Init+0x274>)
 800306c:	428b      	cmp	r3, r1
 800306e:	d819      	bhi.n	80030a4 <HAL_I2C_Init+0x13c>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e59      	subs	r1, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fbb1 f3f3 	udiv	r3, r1, r3
 800307e:	1c59      	adds	r1, r3, #1
 8003080:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003084:	400b      	ands	r3, r1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_I2C_Init+0x138>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1e59      	subs	r1, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fbb1 f3f3 	udiv	r3, r1, r3
 8003098:	3301      	adds	r3, #1
 800309a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309e:	e051      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030a0:	2304      	movs	r3, #4
 80030a2:	e04f      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d111      	bne.n	80030d0 <HAL_I2C_Init+0x168>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1e58      	subs	r0, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	440b      	add	r3, r1
 80030ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	e012      	b.n	80030f6 <HAL_I2C_Init+0x18e>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e58      	subs	r0, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	0099      	lsls	r1, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Init+0x196>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e022      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10e      	bne.n	8003124 <HAL_I2C_Init+0x1bc>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1e58      	subs	r0, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6859      	ldr	r1, [r3, #4]
 800310e:	460b      	mov	r3, r1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	440b      	add	r3, r1
 8003114:	fbb0 f3f3 	udiv	r3, r0, r3
 8003118:	3301      	adds	r3, #1
 800311a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003122:	e00f      	b.n	8003144 <HAL_I2C_Init+0x1dc>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1e58      	subs	r0, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6859      	ldr	r1, [r3, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	0099      	lsls	r1, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	fbb0 f3f3 	udiv	r3, r0, r3
 800313a:	3301      	adds	r3, #1
 800313c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	6809      	ldr	r1, [r1, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	61cb      	str	r3, [r1, #28]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003172:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6911      	ldr	r1, [r2, #16]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68d2      	ldr	r2, [r2, #12]
 800317e:	4311      	orrs	r1, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	430b      	orrs	r3, r1
 8003186:	6093      	str	r3, [r2, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	60da      	str	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d0:	2300      	movs	r3, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	000186a0 	.word	0x000186a0
 80031e0:	001e847f 	.word	0x001e847f
 80031e4:	003d08ff 	.word	0x003d08ff
 80031e8:	431bde83 	.word	0x431bde83
 80031ec:	10624dd3 	.word	0x10624dd3

080031f0 <HAL_I2S_Init>:
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_I2S_Init+0x12>
 80031fe:	2301      	movs	r3, #1
 8003200:	e128      	b.n	8003454 <HAL_I2S_Init+0x264>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <HAL_I2S_Init+0x32>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a90      	ldr	r2, [pc, #576]	; (800345c <HAL_I2S_Init+0x26c>)
 800321a:	635a      	str	r2, [r3, #52]	; 0x34
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7fd fcab 	bl	8000b78 <HAL_I2S_MspInit>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003238:	f023 030f 	bic.w	r3, r3, #15
 800323c:	61d3      	str	r3, [r2, #28]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2202      	movs	r2, #2
 8003244:	621a      	str	r2, [r3, #32]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d060      	beq.n	8003310 <HAL_I2S_Init+0x120>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d102      	bne.n	800325c <HAL_I2S_Init+0x6c>
 8003256:	2310      	movs	r3, #16
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	e001      	b.n	8003260 <HAL_I2S_Init+0x70>
 800325c:	2320      	movs	r3, #32
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b20      	cmp	r3, #32
 8003266:	d802      	bhi.n	800326e <HAL_I2S_Init+0x7e>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	2001      	movs	r0, #1
 8003270:	f001 f9e6 	bl	8004640 <HAL_RCCEx_GetPeriphCLKFreq>
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327e:	d125      	bne.n	80032cc <HAL_I2S_Init+0xdc>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_I2S_Init+0xba>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	461a      	mov	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	3305      	adds	r3, #5
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	e01f      	b.n	80032ea <HAL_I2S_Init+0xfa>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	461a      	mov	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	3305      	adds	r3, #5
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	e00e      	b.n	80032ea <HAL_I2S_Init+0xfa>
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	461a      	mov	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	3305      	adds	r3, #5
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4a5c      	ldr	r2, [pc, #368]	; (8003460 <HAL_I2S_Init+0x270>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	08db      	lsrs	r3, r3, #3
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	e003      	b.n	8003318 <HAL_I2S_Init+0x128>
 8003310:	2302      	movs	r3, #2
 8003312:	61fb      	str	r3, [r7, #28]
 8003314:	2300      	movs	r3, #0
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d902      	bls.n	8003324 <HAL_I2S_Init+0x134>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2bff      	cmp	r3, #255	; 0xff
 8003322:	d907      	bls.n	8003334 <HAL_I2S_Init+0x144>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	f043 0210 	orr.w	r2, r3, #16
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	645a      	str	r2, [r3, #68]	; 0x44
 8003330:	2301      	movs	r3, #1
 8003332:	e08f      	b.n	8003454 <HAL_I2S_Init+0x264>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	ea42 0103 	orr.w	r1, r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	430a      	orrs	r2, r1
 8003346:	621a      	str	r2, [r3, #32]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003352:	f023 030f 	bic.w	r3, r3, #15
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6851      	ldr	r1, [r2, #4]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6892      	ldr	r2, [r2, #8]
 800335e:	4311      	orrs	r1, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	68d2      	ldr	r2, [r2, #12]
 8003364:	4311      	orrs	r1, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6992      	ldr	r2, [r2, #24]
 800336a:	430a      	orrs	r2, r1
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003376:	61da      	str	r2, [r3, #28]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d161      	bne.n	8003444 <HAL_I2S_Init+0x254>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a38      	ldr	r2, [pc, #224]	; (8003464 <HAL_I2S_Init+0x274>)
 8003384:	635a      	str	r2, [r3, #52]	; 0x34
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a37      	ldr	r2, [pc, #220]	; (8003468 <HAL_I2S_Init+0x278>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_I2S_Init+0x1a4>
 8003390:	4b36      	ldr	r3, [pc, #216]	; (800346c <HAL_I2S_Init+0x27c>)
 8003392:	e001      	b.n	8003398 <HAL_I2S_Init+0x1a8>
 8003394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	4932      	ldr	r1, [pc, #200]	; (8003468 <HAL_I2S_Init+0x278>)
 80033a0:	428a      	cmp	r2, r1
 80033a2:	d101      	bne.n	80033a8 <HAL_I2S_Init+0x1b8>
 80033a4:	4a31      	ldr	r2, [pc, #196]	; (800346c <HAL_I2S_Init+0x27c>)
 80033a6:	e001      	b.n	80033ac <HAL_I2S_Init+0x1bc>
 80033a8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033b0:	f023 030f 	bic.w	r3, r3, #15
 80033b4:	61d3      	str	r3, [r2, #28]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2b      	ldr	r2, [pc, #172]	; (8003468 <HAL_I2S_Init+0x278>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d101      	bne.n	80033c4 <HAL_I2S_Init+0x1d4>
 80033c0:	4b2a      	ldr	r3, [pc, #168]	; (800346c <HAL_I2S_Init+0x27c>)
 80033c2:	e001      	b.n	80033c8 <HAL_I2S_Init+0x1d8>
 80033c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c8:	2202      	movs	r2, #2
 80033ca:	621a      	str	r2, [r3, #32]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a25      	ldr	r2, [pc, #148]	; (8003468 <HAL_I2S_Init+0x278>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <HAL_I2S_Init+0x1ea>
 80033d6:	4b25      	ldr	r3, [pc, #148]	; (800346c <HAL_I2S_Init+0x27c>)
 80033d8:	e001      	b.n	80033de <HAL_I2S_Init+0x1ee>
 80033da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	817b      	strh	r3, [r7, #10]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ea:	d003      	beq.n	80033f4 <HAL_I2S_Init+0x204>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d103      	bne.n	80033fc <HAL_I2S_Init+0x20c>
 80033f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	e001      	b.n	8003400 <HAL_I2S_Init+0x210>
 80033fc:	2300      	movs	r3, #0
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	b29b      	uxth	r3, r3
 800340a:	4313      	orrs	r3, r2
 800340c:	b29a      	uxth	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	b29b      	uxth	r3, r3
 8003414:	4313      	orrs	r3, r2
 8003416:	b29a      	uxth	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	b29b      	uxth	r3, r3
 800341e:	4313      	orrs	r3, r2
 8003420:	b29a      	uxth	r2, r3
 8003422:	897b      	ldrh	r3, [r7, #10]
 8003424:	4313      	orrs	r3, r2
 8003426:	b29b      	uxth	r3, r3
 8003428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800342c:	817b      	strh	r3, [r7, #10]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a0d      	ldr	r2, [pc, #52]	; (8003468 <HAL_I2S_Init+0x278>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d101      	bne.n	800343c <HAL_I2S_Init+0x24c>
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_I2S_Init+0x27c>)
 800343a:	e001      	b.n	8003440 <HAL_I2S_Init+0x250>
 800343c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003440:	897a      	ldrh	r2, [r7, #10]
 8003442:	61da      	str	r2, [r3, #28]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003452:	2300      	movs	r3, #0
 8003454:	4618      	mov	r0, r3
 8003456:	3720      	adds	r7, #32
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	08003567 	.word	0x08003567
 8003460:	cccccccd 	.word	0xcccccccd
 8003464:	0800367d 	.word	0x0800367d
 8003468:	40003800 	.word	0x40003800
 800346c:	40003400 	.word	0x40003400

08003470 <HAL_I2S_TxCpltCallback>:
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_I2S_RxCpltCallback>:
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_I2S_ErrorCallback>:
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <I2S_Transmit_IT>:
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	881a      	ldrh	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	1c9a      	adds	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10e      	bne.n	8003500 <I2S_Transmit_IT+0x54>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ffb8 	bl	8003470 <HAL_I2S_TxCpltCallback>
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <I2S_Receive_IT>:
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351a:	b292      	uxth	r2, r2
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	1c9a      	adds	r2, r3, #2
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	865a      	strh	r2, [r3, #50]	; 0x32
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10e      	bne.n	800355e <I2S_Receive_IT+0x56>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff93 	bl	8003484 <HAL_I2S_RxCpltCallback>
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <I2S_IRQHandler>:
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b04      	cmp	r3, #4
 8003580:	d13a      	bne.n	80035f8 <I2S_IRQHandler+0x92>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d109      	bne.n	80035a0 <I2S_IRQHandler+0x3a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b40      	cmp	r3, #64	; 0x40
 8003598:	d102      	bne.n	80035a0 <I2S_IRQHandler+0x3a>
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ffb4 	bl	8003508 <I2S_Receive_IT>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b40      	cmp	r3, #64	; 0x40
 80035a8:	d126      	bne.n	80035f8 <I2S_IRQHandler+0x92>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d11f      	bne.n	80035f8 <I2S_IRQHandler+0x92>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f043 0202 	orr.w	r2, r3, #2
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff ff50 	bl	8003498 <HAL_I2S_ErrorCallback>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b03      	cmp	r3, #3
 8003602:	d136      	bne.n	8003672 <I2S_IRQHandler+0x10c>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b02      	cmp	r3, #2
 800360c:	d109      	bne.n	8003622 <I2S_IRQHandler+0xbc>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003618:	2b80      	cmp	r3, #128	; 0x80
 800361a:	d102      	bne.n	8003622 <I2S_IRQHandler+0xbc>
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff45 	bl	80034ac <I2S_Transmit_IT>
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b08      	cmp	r3, #8
 800362a:	d122      	bne.n	8003672 <I2S_IRQHandler+0x10c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b20      	cmp	r3, #32
 8003638:	d11b      	bne.n	8003672 <I2S_IRQHandler+0x10c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	f043 0204 	orr.w	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	645a      	str	r2, [r3, #68]	; 0x44
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff ff13 	bl	8003498 <HAL_I2S_ErrorCallback>
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_I2SEx_FullDuplex_IRQHandler>:
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a92      	ldr	r2, [pc, #584]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003696:	4b92      	ldr	r3, [pc, #584]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003698:	e001      	b.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800369a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a8b      	ldr	r2, [pc, #556]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036b4:	4b8a      	ldr	r3, [pc, #552]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036b6:	e001      	b.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c8:	d004      	beq.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f040 8099 	bne.w	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d107      	bne.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f925 	bl	8003938 <I2SEx_TxISR_I2S>
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d107      	bne.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f9c8 	bl	8003a98 <I2SEx_RxISR_I2SExt>
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d13a      	bne.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d035      	beq.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a6e      	ldr	r2, [pc, #440]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003726:	4b6e      	ldr	r3, [pc, #440]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003728:	e001      	b.n	800372e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800372a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4969      	ldr	r1, [pc, #420]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003736:	428b      	cmp	r3, r1
 8003738:	d101      	bne.n	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800373a:	4b69      	ldr	r3, [pc, #420]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800373c:	e001      	b.n	8003742 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800373e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003742:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f043 0202 	orr.w	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fe88 	bl	8003498 <HAL_I2S_ErrorCallback>
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b08      	cmp	r3, #8
 8003790:	f040 80c3 	bne.w	800391a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80bd 	beq.w	800391a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a49      	ldr	r2, [pc, #292]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d101      	bne.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037ba:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037bc:	e001      	b.n	80037c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4944      	ldr	r1, [pc, #272]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ca:	428b      	cmp	r3, r1
 80037cc:	d101      	bne.n	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037ce:	4b44      	ldr	r3, [pc, #272]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037d0:	e001      	b.n	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	2300      	movs	r3, #0
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f043 0204 	orr.w	r2, r3, #4
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fe4a 	bl	8003498 <HAL_I2S_ErrorCallback>
 8003804:	e089      	b.n	800391a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b02      	cmp	r3, #2
 800380e:	d107      	bne.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8be 	bl	800399c <I2SEx_TxISR_I2SExt>
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d107      	bne.n	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f8fd 	bl	8003a34 <I2SEx_RxISR_I2S>
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b40      	cmp	r3, #64	; 0x40
 8003842:	d12f      	bne.n	80038a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d02a      	beq.n	80038a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d101      	bne.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003868:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800386a:	e001      	b.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800386c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4919      	ldr	r1, [pc, #100]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003878:	428b      	cmp	r3, r1
 800387a:	d101      	bne.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800387c:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800387e:	e001      	b.n	8003884 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003884:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f043 0202 	orr.w	r2, r3, #2
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff fdfa 	bl	8003498 <HAL_I2S_ErrorCallback>
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d136      	bne.n	800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d031      	beq.n	800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a07      	ldr	r2, [pc, #28]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038c2:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038c4:	e001      	b.n	80038ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4902      	ldr	r1, [pc, #8]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038d2:	428b      	cmp	r3, r1
 80038d4:	d106      	bne.n	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80038d6:	4b02      	ldr	r3, [pc, #8]	; (80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038d8:	e006      	b.n	80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80038da:	bf00      	nop
 80038dc:	40003800 	.word	0x40003800
 80038e0:	40003400 	.word	0x40003400
 80038e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f043 0204 	orr.w	r2, r3, #4
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	645a      	str	r2, [r3, #68]	; 0x44
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff fdc0 	bl	8003498 <HAL_I2S_ErrorCallback>
 8003918:	e000      	b.n	800391c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800391a:	bf00      	nop
 800391c:	bf00      	nop
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_I2SEx_TxRxCpltCallback>:
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <I2SEx_TxISR_I2S>:
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	1c99      	adds	r1, r3, #2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6251      	str	r1, [r2, #36]	; 0x24
 800394a:	881a      	ldrh	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d113      	bne.n	8003992 <I2SEx_TxISR_I2S+0x5a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d106      	bne.n	8003992 <I2SEx_TxISR_I2S+0x5a>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ffc9 	bl	8003924 <HAL_I2SEx_TxRxCpltCallback>
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <I2SEx_TxISR_I2SExt>:
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	1c99      	adds	r1, r3, #2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6251      	str	r1, [r2, #36]	; 0x24
 80039ae:	8819      	ldrh	r1, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <I2SEx_TxISR_I2SExt+0x90>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <I2SEx_TxISR_I2SExt+0x22>
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <I2SEx_TxISR_I2SExt+0x94>)
 80039bc:	e001      	b.n	80039c2 <I2SEx_TxISR_I2SExt+0x26>
 80039be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c2:	460a      	mov	r2, r1
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d121      	bne.n	8003a22 <I2SEx_TxISR_I2SExt+0x86>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <I2SEx_TxISR_I2SExt+0x90>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <I2SEx_TxISR_I2SExt+0x50>
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <I2SEx_TxISR_I2SExt+0x94>)
 80039ea:	e001      	b.n	80039f0 <I2SEx_TxISR_I2SExt+0x54>
 80039ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	490d      	ldr	r1, [pc, #52]	; (8003a2c <I2SEx_TxISR_I2SExt+0x90>)
 80039f8:	428b      	cmp	r3, r1
 80039fa:	d101      	bne.n	8003a00 <I2SEx_TxISR_I2SExt+0x64>
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <I2SEx_TxISR_I2SExt+0x94>)
 80039fe:	e001      	b.n	8003a04 <I2SEx_TxISR_I2SExt+0x68>
 8003a00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <I2SEx_TxISR_I2SExt+0x86>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff ff81 	bl	8003924 <HAL_I2SEx_TxRxCpltCallback>
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40003800 	.word	0x40003800
 8003a30:	40003400 	.word	0x40003400

08003a34 <I2SEx_RxISR_I2S>:
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68d8      	ldr	r0, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	1c99      	adds	r1, r3, #2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a4c:	b282      	uxth	r2, r0
 8003a4e:	801a      	strh	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	865a      	strh	r2, [r3, #50]	; 0x32
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d113      	bne.n	8003a90 <I2SEx_RxISR_I2S+0x5c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a76:	605a      	str	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <I2SEx_RxISR_I2S+0x5c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff ff4a 	bl	8003924 <HAL_I2SEx_TxRxCpltCallback>
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <I2SEx_RxISR_I2SExt>:
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <I2SEx_RxISR_I2SExt+0x90>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <I2SEx_RxISR_I2SExt+0x16>
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <I2SEx_RxISR_I2SExt+0x94>)
 8003aac:	e001      	b.n	8003ab2 <I2SEx_RxISR_I2SExt+0x1a>
 8003aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab2:	68d8      	ldr	r0, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	1c99      	adds	r1, r3, #2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003abe:	b282      	uxth	r2, r0
 8003ac0:	801a      	strh	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	865a      	strh	r2, [r3, #50]	; 0x32
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d121      	bne.n	8003b1e <I2SEx_RxISR_I2SExt+0x86>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <I2SEx_RxISR_I2SExt+0x90>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d101      	bne.n	8003ae8 <I2SEx_RxISR_I2SExt+0x50>
 8003ae4:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <I2SEx_RxISR_I2SExt+0x94>)
 8003ae6:	e001      	b.n	8003aec <I2SEx_RxISR_I2SExt+0x54>
 8003ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	490d      	ldr	r1, [pc, #52]	; (8003b28 <I2SEx_RxISR_I2SExt+0x90>)
 8003af4:	428b      	cmp	r3, r1
 8003af6:	d101      	bne.n	8003afc <I2SEx_RxISR_I2SExt+0x64>
 8003af8:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <I2SEx_RxISR_I2SExt+0x94>)
 8003afa:	e001      	b.n	8003b00 <I2SEx_RxISR_I2SExt+0x68>
 8003afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d106      	bne.n	8003b1e <I2SEx_RxISR_I2SExt+0x86>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff03 	bl	8003924 <HAL_I2SEx_TxRxCpltCallback>
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40003800 	.word	0x40003800
 8003b2c:	40003400 	.word	0x40003400

08003b30 <HAL_RCC_OscConfig>:
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_OscConfig+0x12>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e267      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d075      	beq.n	8003c3a <HAL_RCC_OscConfig+0x10a>
 8003b4e:	4b88      	ldr	r3, [pc, #544]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d00c      	beq.n	8003b74 <HAL_RCC_OscConfig+0x44>
 8003b5a:	4b85      	ldr	r3, [pc, #532]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d112      	bne.n	8003b8c <HAL_RCC_OscConfig+0x5c>
 8003b66:	4b82      	ldr	r3, [pc, #520]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b72:	d10b      	bne.n	8003b8c <HAL_RCC_OscConfig+0x5c>
 8003b74:	4b7e      	ldr	r3, [pc, #504]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d05b      	beq.n	8003c38 <HAL_RCC_OscConfig+0x108>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d157      	bne.n	8003c38 <HAL_RCC_OscConfig+0x108>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e242      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b94:	d106      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x74>
 8003b96:	4b76      	ldr	r3, [pc, #472]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a75      	ldr	r2, [pc, #468]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e01d      	b.n	8003be0 <HAL_RCC_OscConfig+0xb0>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x98>
 8003bae:	4b70      	ldr	r3, [pc, #448]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a6f      	ldr	r2, [pc, #444]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b6d      	ldr	r3, [pc, #436]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6c      	ldr	r2, [pc, #432]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0xb0>
 8003bc8:	4b69      	ldr	r3, [pc, #420]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a68      	ldr	r2, [pc, #416]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b66      	ldr	r3, [pc, #408]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a65      	ldr	r2, [pc, #404]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <HAL_RCC_OscConfig+0xe0>
 8003be8:	f7fd fa42 	bl	8001070 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0xd2>
 8003bf0:	f7fd fa3e 	bl	8001070 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0xd2>
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e207      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003c02:	4b5b      	ldr	r3, [pc, #364]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xc0>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x10a>
 8003c10:	f7fd fa2e 	bl	8001070 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0xfa>
 8003c18:	f7fd fa2a 	bl	8001070 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0xfa>
 8003c26:	2303      	movs	r3, #3
 8003c28:	e1f3      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003c2a:	4b51      	ldr	r3, [pc, #324]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0xe8>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x10a>
 8003c38:	bf00      	nop
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d063      	beq.n	8003d0e <HAL_RCC_OscConfig+0x1de>
 8003c46:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_RCC_OscConfig+0x13a>
 8003c52:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d11c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x168>
 8003c5e:	4b44      	ldr	r3, [pc, #272]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <HAL_RCC_OscConfig+0x168>
 8003c6a:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_RCC_OscConfig+0x152>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x152>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e1c7      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003c82:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4937      	ldr	r1, [pc, #220]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
 8003c96:	e03a      	b.n	8003d0e <HAL_RCC_OscConfig+0x1de>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x1b2>
 8003ca0:	4b34      	ldr	r3, [pc, #208]	; (8003d74 <HAL_RCC_OscConfig+0x244>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	f7fd f9e3 	bl	8001070 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x190>
 8003cae:	f7fd f9df 	bl	8001070 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x190>
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e1a8      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003cc0:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x17e>
 8003ccc:	4b28      	ldr	r3, [pc, #160]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4925      	ldr	r1, [pc, #148]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]
 8003ce0:	e015      	b.n	8003d0e <HAL_RCC_OscConfig+0x1de>
 8003ce2:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <HAL_RCC_OscConfig+0x244>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f7fd f9c2 	bl	8001070 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x1d2>
 8003cf0:	f7fd f9be 	bl	8001070 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x1d2>
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e187      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003d02:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x1c0>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d036      	beq.n	8003d88 <HAL_RCC_OscConfig+0x258>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d016      	beq.n	8003d50 <HAL_RCC_OscConfig+0x220>
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <HAL_RCC_OscConfig+0x248>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	f7fd f9a2 	bl	8001070 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x212>
 8003d30:	f7fd f99e 	bl	8001070 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x212>
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e167      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_OscConfig+0x240>)
 8003d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x200>
 8003d4e:	e01b      	b.n	8003d88 <HAL_RCC_OscConfig+0x258>
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_RCC_OscConfig+0x248>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	f7fd f98b 	bl	8001070 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]
 8003d5c:	e00e      	b.n	8003d7c <HAL_RCC_OscConfig+0x24c>
 8003d5e:	f7fd f987 	bl	8001070 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d907      	bls.n	8003d7c <HAL_RCC_OscConfig+0x24c>
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e150      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003d70:	40023800 	.word	0x40023800
 8003d74:	42470000 	.word	0x42470000
 8003d78:	42470e80 	.word	0x42470e80
 8003d7c:	4b88      	ldr	r3, [pc, #544]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1ea      	bne.n	8003d5e <HAL_RCC_OscConfig+0x22e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8097 	beq.w	8003ec4 <HAL_RCC_OscConfig+0x394>
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]
 8003d9a:	4b81      	ldr	r3, [pc, #516]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10f      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x296>
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	4b7d      	ldr	r3, [pc, #500]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4a7c      	ldr	r2, [pc, #496]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db4:	6413      	str	r3, [r2, #64]	; 0x40
 8003db6:	4b7a      	ldr	r3, [pc, #488]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	75fb      	strb	r3, [r7, #23]
 8003dc6:	4b77      	ldr	r3, [pc, #476]	; (8003fa4 <HAL_RCC_OscConfig+0x474>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d118      	bne.n	8003e04 <HAL_RCC_OscConfig+0x2d4>
 8003dd2:	4b74      	ldr	r3, [pc, #464]	; (8003fa4 <HAL_RCC_OscConfig+0x474>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a73      	ldr	r2, [pc, #460]	; (8003fa4 <HAL_RCC_OscConfig+0x474>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	f7fd f947 	bl	8001070 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x2c8>
 8003de6:	f7fd f943 	bl	8001070 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x2c8>
 8003df4:	2303      	movs	r3, #3
 8003df6:	e10c      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003df8:	4b6a      	ldr	r3, [pc, #424]	; (8003fa4 <HAL_RCC_OscConfig+0x474>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x2b6>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCC_OscConfig+0x2ea>
 8003e0c:	4b64      	ldr	r3, [pc, #400]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	4a63      	ldr	r2, [pc, #396]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
 8003e18:	e01c      	b.n	8003e54 <HAL_RCC_OscConfig+0x324>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b05      	cmp	r3, #5
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x30c>
 8003e22:	4b5f      	ldr	r3, [pc, #380]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a5e      	ldr	r2, [pc, #376]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003e28:	f043 0304 	orr.w	r3, r3, #4
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2e:	4b5c      	ldr	r3, [pc, #368]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	4a5b      	ldr	r2, [pc, #364]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3a:	e00b      	b.n	8003e54 <HAL_RCC_OscConfig+0x324>
 8003e3c:	4b58      	ldr	r3, [pc, #352]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	4a57      	ldr	r2, [pc, #348]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	6713      	str	r3, [r2, #112]	; 0x70
 8003e48:	4b55      	ldr	r3, [pc, #340]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	4a54      	ldr	r2, [pc, #336]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	f023 0304 	bic.w	r3, r3, #4
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d015      	beq.n	8003e88 <HAL_RCC_OscConfig+0x358>
 8003e5c:	f7fd f908 	bl	8001070 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]
 8003e62:	e00a      	b.n	8003e7a <HAL_RCC_OscConfig+0x34a>
 8003e64:	f7fd f904 	bl	8001070 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x34a>
 8003e76:	2303      	movs	r3, #3
 8003e78:	e0cb      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003e7a:	4b49      	ldr	r3, [pc, #292]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0ee      	beq.n	8003e64 <HAL_RCC_OscConfig+0x334>
 8003e86:	e014      	b.n	8003eb2 <HAL_RCC_OscConfig+0x382>
 8003e88:	f7fd f8f2 	bl	8001070 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCC_OscConfig+0x376>
 8003e90:	f7fd f8ee 	bl	8001070 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x376>
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e0b5      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003ea6:	4b3e      	ldr	r3, [pc, #248]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1ee      	bne.n	8003e90 <HAL_RCC_OscConfig+0x360>
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d105      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x394>
 8003eb8:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	4a38      	ldr	r2, [pc, #224]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80a1 	beq.w	8004010 <HAL_RCC_OscConfig+0x4e0>
 8003ece:	4b34      	ldr	r3, [pc, #208]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d05c      	beq.n	8003f94 <HAL_RCC_OscConfig+0x464>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d141      	bne.n	8003f66 <HAL_RCC_OscConfig+0x436>
 8003ee2:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <HAL_RCC_OscConfig+0x478>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	f7fd f8c2 	bl	8001070 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x3d2>
 8003ef0:	f7fd f8be 	bl	8001070 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x3d2>
 8003efe:	2303      	movs	r3, #3
 8003f00:	e087      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003f02:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x3c0>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69da      	ldr	r2, [r3, #28]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	019b      	lsls	r3, r3, #6
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	085b      	lsrs	r3, r3, #1
 8003f26:	3b01      	subs	r3, #1
 8003f28:	041b      	lsls	r3, r3, #16
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	061b      	lsls	r3, r3, #24
 8003f32:	491b      	ldr	r1, [pc, #108]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <HAL_RCC_OscConfig+0x478>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	f7fd f897 	bl	8001070 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x428>
 8003f46:	f7fd f893 	bl	8001070 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x428>
 8003f54:	2303      	movs	r3, #3
 8003f56:	e05c      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003f58:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x416>
 8003f64:	e054      	b.n	8004010 <HAL_RCC_OscConfig+0x4e0>
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <HAL_RCC_OscConfig+0x478>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	f7fd f880 	bl	8001070 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x456>
 8003f74:	f7fd f87c 	bl	8001070 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x456>
 8003f82:	2303      	movs	r3, #3
 8003f84:	e045      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCC_OscConfig+0x470>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x444>
 8003f92:	e03d      	b.n	8004010 <HAL_RCC_OscConfig+0x4e0>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_OscConfig+0x47c>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e038      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40007000 	.word	0x40007000
 8003fa8:	42470060 	.word	0x42470060
 8003fac:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCC_OscConfig+0x4ec>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d028      	beq.n	800400c <HAL_RCC_OscConfig+0x4dc>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d121      	bne.n	800400c <HAL_RCC_OscConfig+0x4dc>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d11a      	bne.n	800400c <HAL_RCC_OscConfig+0x4dc>
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fdc:	4013      	ands	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fe2:	0192      	lsls	r2, r2, #6
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d111      	bne.n	800400c <HAL_RCC_OscConfig+0x4dc>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d107      	bne.n	800400c <HAL_RCC_OscConfig+0x4dc>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	061b      	lsls	r3, r3, #24
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_OscConfig+0x4e0>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x4e2>
 8004010:	2300      	movs	r3, #0
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800

08004020 <HAL_RCC_ClockConfig>:
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x14>
 8004030:	2301      	movs	r3, #1
 8004032:	e0cc      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
 8004034:	4b68      	ldr	r3, [pc, #416]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d90c      	bls.n	800405c <HAL_RCC_ClockConfig+0x3c>
 8004042:	4b65      	ldr	r3, [pc, #404]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_ClockConfig+0x3c>
 8004058:	2301      	movs	r3, #1
 800405a:	e0b8      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d020      	beq.n	80040aa <HAL_RCC_ClockConfig+0x8a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_ClockConfig+0x60>
 8004074:	4b59      	ldr	r3, [pc, #356]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4a58      	ldr	r2, [pc, #352]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800407e:	6093      	str	r3, [r2, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_RCC_ClockConfig+0x78>
 800408c:	4b53      	ldr	r3, [pc, #332]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004096:	6093      	str	r3, [r2, #8]
 8004098:	4b50      	ldr	r3, [pc, #320]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	494d      	ldr	r1, [pc, #308]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d044      	beq.n	8004140 <HAL_RCC_ClockConfig+0x120>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0xae>
 80040be:	4b47      	ldr	r3, [pc, #284]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d119      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e07f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d003      	beq.n	80040de <HAL_RCC_ClockConfig+0xbe>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xce>
 80040de:	4b3f      	ldr	r3, [pc, #252]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e06f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
 80040ee:	4b3b      	ldr	r3, [pc, #236]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e067      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
 80040fe:	4b37      	ldr	r3, [pc, #220]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f023 0203 	bic.w	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4934      	ldr	r1, [pc, #208]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	4313      	orrs	r3, r2
 800410e:	608b      	str	r3, [r1, #8]
 8004110:	f7fc ffae 	bl	8001070 <HAL_GetTick>
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	e00a      	b.n	800412e <HAL_RCC_ClockConfig+0x10e>
 8004118:	f7fc ffaa 	bl	8001070 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_ClockConfig+0x10e>
 800412a:	2303      	movs	r3, #3
 800412c:	e04f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
 800412e:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 020c 	and.w	r2, r3, #12
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	429a      	cmp	r2, r3
 800413e:	d1eb      	bne.n	8004118 <HAL_RCC_ClockConfig+0xf8>
 8004140:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d20c      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x148>
 800414e:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_ClockConfig+0x148>
 8004164:	2301      	movs	r3, #1
 8004166:	e032      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCC_ClockConfig+0x166>
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4916      	ldr	r1, [pc, #88]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x186>
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	490e      	ldr	r1, [pc, #56]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
 80041a6:	f000 f821 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 80041aa:	4602      	mov	r2, r0
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	490a      	ldr	r1, [pc, #40]	; (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 80041b8:	5ccb      	ldrb	r3, [r1, r3]
 80041ba:	fa22 f303 	lsr.w	r3, r2, r3
 80041be:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fc ff0e 	bl	8000fe8 <HAL_InitTick>
 80041cc:	2300      	movs	r3, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023c00 	.word	0x40023c00
 80041dc:	40023800 	.word	0x40023800
 80041e0:	080091f4 	.word	0x080091f4
 80041e4:	20000000 	.word	0x20000000
 80041e8:	20000004 	.word	0x20000004

080041ec <HAL_RCC_GetSysClockFreq>:
 80041ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f0:	b094      	sub	sp, #80	; 0x50
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	2300      	movs	r3, #0
 80041f6:	647b      	str	r3, [r7, #68]	; 0x44
 80041f8:	2300      	movs	r3, #0
 80041fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041fc:	2300      	movs	r3, #0
 80041fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004200:	2300      	movs	r3, #0
 8004202:	64bb      	str	r3, [r7, #72]	; 0x48
 8004204:	4b79      	ldr	r3, [pc, #484]	; (80043ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b08      	cmp	r3, #8
 800420e:	d00d      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x40>
 8004210:	2b08      	cmp	r3, #8
 8004212:	f200 80e1 	bhi.w	80043d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x34>
 800421a:	2b04      	cmp	r3, #4
 800421c:	d003      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0x3a>
 800421e:	e0db      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004220:	4b73      	ldr	r3, [pc, #460]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004222:	64bb      	str	r3, [r7, #72]	; 0x48
 8004224:	e0db      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x1f2>
 8004226:	4b73      	ldr	r3, [pc, #460]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004228:	64bb      	str	r3, [r7, #72]	; 0x48
 800422a:	e0d8      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x1f2>
 800422c:	4b6f      	ldr	r3, [pc, #444]	; (80043ec <HAL_RCC_GetSysClockFreq+0x200>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004234:	647b      	str	r3, [r7, #68]	; 0x44
 8004236:	4b6d      	ldr	r3, [pc, #436]	; (80043ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d063      	beq.n	800430a <HAL_RCC_GetSysClockFreq+0x11e>
 8004242:	4b6a      	ldr	r3, [pc, #424]	; (80043ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	2200      	movs	r2, #0
 800424a:	63bb      	str	r3, [r7, #56]	; 0x38
 800424c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
 8004256:	2300      	movs	r3, #0
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
 800425a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800425e:	4622      	mov	r2, r4
 8004260:	462b      	mov	r3, r5
 8004262:	f04f 0000 	mov.w	r0, #0
 8004266:	f04f 0100 	mov.w	r1, #0
 800426a:	0159      	lsls	r1, r3, #5
 800426c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004270:	0150      	lsls	r0, r2, #5
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4621      	mov	r1, r4
 8004278:	1a51      	subs	r1, r2, r1
 800427a:	6139      	str	r1, [r7, #16]
 800427c:	4629      	mov	r1, r5
 800427e:	eb63 0301 	sbc.w	r3, r3, r1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004290:	4659      	mov	r1, fp
 8004292:	018b      	lsls	r3, r1, #6
 8004294:	4651      	mov	r1, sl
 8004296:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800429a:	4651      	mov	r1, sl
 800429c:	018a      	lsls	r2, r1, #6
 800429e:	4651      	mov	r1, sl
 80042a0:	ebb2 0801 	subs.w	r8, r2, r1
 80042a4:	4659      	mov	r1, fp
 80042a6:	eb63 0901 	sbc.w	r9, r3, r1
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042be:	4690      	mov	r8, r2
 80042c0:	4699      	mov	r9, r3
 80042c2:	4623      	mov	r3, r4
 80042c4:	eb18 0303 	adds.w	r3, r8, r3
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	462b      	mov	r3, r5
 80042cc:	eb49 0303 	adc.w	r3, r9, r3
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042de:	4629      	mov	r1, r5
 80042e0:	024b      	lsls	r3, r1, #9
 80042e2:	4621      	mov	r1, r4
 80042e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042e8:	4621      	mov	r1, r4
 80042ea:	024a      	lsls	r2, r1, #9
 80042ec:	4610      	mov	r0, r2
 80042ee:	4619      	mov	r1, r3
 80042f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f2:	2200      	movs	r2, #0
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042fc:	f7fb ff74 	bl	80001e8 <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4613      	mov	r3, r2
 8004306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004308:	e058      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x1d0>
 800430a:	4b38      	ldr	r3, [pc, #224]	; (80043ec <HAL_RCC_GetSysClockFreq+0x200>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	099b      	lsrs	r3, r3, #6
 8004310:	2200      	movs	r2, #0
 8004312:	4618      	mov	r0, r3
 8004314:	4611      	mov	r1, r2
 8004316:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800431a:	623b      	str	r3, [r7, #32]
 800431c:	2300      	movs	r3, #0
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
 8004320:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004324:	4642      	mov	r2, r8
 8004326:	464b      	mov	r3, r9
 8004328:	f04f 0000 	mov.w	r0, #0
 800432c:	f04f 0100 	mov.w	r1, #0
 8004330:	0159      	lsls	r1, r3, #5
 8004332:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004336:	0150      	lsls	r0, r2, #5
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4641      	mov	r1, r8
 800433e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004342:	4649      	mov	r1, r9
 8004344:	eb63 0b01 	sbc.w	fp, r3, r1
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004354:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004358:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800435c:	ebb2 040a 	subs.w	r4, r2, sl
 8004360:	eb63 050b 	sbc.w	r5, r3, fp
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	00eb      	lsls	r3, r5, #3
 800436e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004372:	00e2      	lsls	r2, r4, #3
 8004374:	4614      	mov	r4, r2
 8004376:	461d      	mov	r5, r3
 8004378:	4643      	mov	r3, r8
 800437a:	18e3      	adds	r3, r4, r3
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	464b      	mov	r3, r9
 8004380:	eb45 0303 	adc.w	r3, r5, r3
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004392:	4629      	mov	r1, r5
 8004394:	028b      	lsls	r3, r1, #10
 8004396:	4621      	mov	r1, r4
 8004398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800439c:	4621      	mov	r1, r4
 800439e:	028a      	lsls	r2, r1, #10
 80043a0:	4610      	mov	r0, r2
 80043a2:	4619      	mov	r1, r3
 80043a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a6:	2200      	movs	r2, #0
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	61fa      	str	r2, [r7, #28]
 80043ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043b0:	f7fb ff1a 	bl	80001e8 <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4613      	mov	r3, r2
 80043ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_RCC_GetSysClockFreq+0x200>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	3301      	adds	r3, #1
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	643b      	str	r3, [r7, #64]	; 0x40
 80043cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80043d6:	e002      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x1f2>
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043da:	64bb      	str	r3, [r7, #72]	; 0x48
 80043dc:	bf00      	nop
 80043de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e0:	4618      	mov	r0, r3
 80043e2:	3750      	adds	r7, #80	; 0x50
 80043e4:	46bd      	mov	sp, r7
 80043e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ea:	bf00      	nop
 80043ec:	40023800 	.word	0x40023800
 80043f0:	00f42400 	.word	0x00f42400
 80043f4:	007a1200 	.word	0x007a1200

080043f8 <HAL_RCC_GetHCLKFreq>:
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4b03      	ldr	r3, [pc, #12]	; (800440c <HAL_RCC_GetHCLKFreq+0x14>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000000 	.word	0x20000000

08004410 <HAL_RCC_GetPCLK1Freq>:
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
 8004414:	f7ff fff0 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0a9b      	lsrs	r3, r3, #10
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4903      	ldr	r1, [pc, #12]	; (8004434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40023800 	.word	0x40023800
 8004434:	08009204 	.word	0x08009204

08004438 <HAL_RCC_GetPCLK2Freq>:
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
 800443c:	f7ff ffdc 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	0b5b      	lsrs	r3, r3, #13
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4903      	ldr	r1, [pc, #12]	; (800445c <HAL_RCC_GetPCLK2Freq+0x24>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40023800 	.word	0x40023800
 800445c:	08009204 	.word	0x08009204

08004460 <HAL_RCCEx_PeriphCLKConfig>:
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d105      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d038      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004488:	4b68      	ldr	r3, [pc, #416]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	f7fc fdef 	bl	8001070 <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]
 8004494:	e008      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004496:	f7fc fdeb 	bl	8001070 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80044a4:	2303      	movs	r3, #3
 80044a6:	e0bd      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80044a8:	4b61      	ldr	r3, [pc, #388]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f0      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x36>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	019b      	lsls	r3, r3, #6
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	071b      	lsls	r3, r3, #28
 80044c6:	495a      	ldr	r1, [pc, #360]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80044ce:	4b57      	ldr	r3, [pc, #348]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	f7fc fdcc 	bl	8001070 <HAL_GetTick>
 80044d8:	6178      	str	r0, [r7, #20]
 80044da:	e008      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80044dc:	f7fc fdc8 	bl	8001070 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80044ea:	2303      	movs	r3, #3
 80044ec:	e09a      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80044ee:	4b50      	ldr	r3, [pc, #320]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8083 	beq.w	800460e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	4b48      	ldr	r3, [pc, #288]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	4a47      	ldr	r2, [pc, #284]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004516:	6413      	str	r3, [r2, #64]	; 0x40
 8004518:	4b45      	ldr	r3, [pc, #276]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4b43      	ldr	r3, [pc, #268]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a42      	ldr	r2, [pc, #264]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800452a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	f7fc fd9e 	bl	8001070 <HAL_GetTick>
 8004534:	6178      	str	r0, [r7, #20]
 8004536:	e008      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004538:	f7fc fd9a 	bl	8001070 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004546:	2303      	movs	r3, #3
 8004548:	e06c      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 800454a:	4b3a      	ldr	r3, [pc, #232]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f0      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004556:	4b36      	ldr	r3, [pc, #216]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d02f      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	429a      	cmp	r2, r3
 8004572:	d028      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004574:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	4b2e      	ldr	r3, [pc, #184]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004580:	2201      	movs	r2, #1
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	4b2c      	ldr	r3, [pc, #176]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	4a29      	ldr	r2, [pc, #164]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
 8004590:	4b27      	ldr	r3, [pc, #156]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b01      	cmp	r3, #1
 800459a:	d114      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800459c:	f7fc fd68 	bl	8001070 <HAL_GetTick>
 80045a0:	6178      	str	r0, [r7, #20]
 80045a2:	e00a      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80045a4:	f7fc fd64 	bl	8001070 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80045b6:	2303      	movs	r3, #3
 80045b8:	e034      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80045ba:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0ee      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d2:	d10d      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80045d4:	4b16      	ldr	r3, [pc, #88]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e8:	4911      	ldr	r1, [pc, #68]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
 80045ee:	e005      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4a0e      	ldr	r2, [pc, #56]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045fa:	6093      	str	r3, [r2, #8]
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004608:	4909      	ldr	r1, [pc, #36]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460a:	4313      	orrs	r3, r2
 800460c:	670b      	str	r3, [r1, #112]	; 0x70
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	7d1a      	ldrb	r2, [r3, #20]
 800461e:	4b07      	ldr	r3, [pc, #28]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	2300      	movs	r3, #0
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	42470068 	.word	0x42470068
 8004630:	40023800 	.word	0x40023800
 8004634:	40007000 	.word	0x40007000
 8004638:	42470e40 	.word	0x42470e40
 800463c:	424711e0 	.word	0x424711e0

08004640 <HAL_RCCEx_GetPeriphCLKFreq>:
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	2300      	movs	r3, #0
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	2300      	movs	r3, #0
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d140      	bne.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800465e:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d131      	bne.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8004674:	4b1f      	ldr	r3, [pc, #124]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	e031      	b.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004686:	d109      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800468a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004692:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	e008      	b.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 800469c:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800469e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a6:	4a15      	ldr	r2, [pc, #84]	; (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b4:	099b      	lsrs	r3, r3, #6
 80046b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	fb02 f303 	mul.w	r3, r2, r3
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c8:	0f1b      	lsrs	r3, r3, #28
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e002      	b.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	4618      	mov	r0, r3
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800
 80046f4:	00bb8000 	.word	0x00bb8000
 80046f8:	007a1200 	.word	0x007a1200
 80046fc:	00f42400 	.word	0x00f42400

08004700 <HAL_SPI_Init>:
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_SPI_Init+0x12>
 800470e:	2301      	movs	r3, #1
 8004710:	e07b      	b.n	800480a <HAL_SPI_Init+0x10a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b00      	cmp	r3, #0
 8004718:	d108      	bne.n	800472c <HAL_SPI_Init+0x2c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004722:	d009      	beq.n	8004738 <HAL_SPI_Init+0x38>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	61da      	str	r2, [r3, #28]
 800472a:	e005      	b.n	8004738 <HAL_SPI_Init+0x38>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	611a      	str	r2, [r3, #16]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	615a      	str	r2, [r3, #20]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	629a      	str	r2, [r3, #40]	; 0x28
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_SPI_Init+0x58>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc fade 	bl	8000d14 <HAL_SPI_MspInit>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047bc:	ea42 0103 	orr.w	r1, r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	f003 0104 	and.w	r1, r3, #4
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	f003 0210 	and.w	r2, r3, #16
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f8:	61da      	str	r2, [r3, #28]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	655a      	str	r2, [r3, #84]	; 0x54
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004808:	2300      	movs	r3, #0
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_UART_Init>:
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_UART_Init+0x12>
 8004820:	2301      	movs	r3, #1
 8004822:	e03f      	b.n	80048a4 <HAL_UART_Init+0x92>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <HAL_UART_Init+0x2c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7fc fab3 	bl	8000da4 <HAL_UART_MspInit>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2224      	movs	r2, #36	; 0x24
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fe1c 	bl	8005494 <UART_SetConfig>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800486a:	611a      	str	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800487a:	615a      	str	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800488a:	60da      	str	r2, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a2:	2300      	movs	r3, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_UART_Transmit>:
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	80fb      	strh	r3, [r7, #6]
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d17c      	bne.n	80049c6 <HAL_UART_Transmit+0x11a>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_UART_Transmit+0x2c>
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_UART_Transmit+0x30>
 80048d8:	2301      	movs	r3, #1
 80048da:	e075      	b.n	80049c8 <HAL_UART_Transmit+0x11c>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Transmit+0x3e>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e06e      	b.n	80049c8 <HAL_UART_Transmit+0x11c>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2221      	movs	r2, #33	; 0x21
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004900:	f7fc fbb6 	bl	8001070 <HAL_GetTick>
 8004904:	6178      	str	r0, [r7, #20]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	849a      	strh	r2, [r3, #36]	; 0x24
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	84da      	strh	r2, [r3, #38]	; 0x26
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491a:	d108      	bne.n	800492e <HAL_UART_Transmit+0x82>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d104      	bne.n	800492e <HAL_UART_Transmit+0x82>
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	61bb      	str	r3, [r7, #24]
 800492c:	e003      	b.n	8004936 <HAL_UART_Transmit+0x8a>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800493e:	e02a      	b.n	8004996 <HAL_UART_Transmit+0xea>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2200      	movs	r2, #0
 8004948:	2180      	movs	r1, #128	; 0x80
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fb9a 	bl	8005084 <UART_WaitOnFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_UART_Transmit+0xae>
 8004956:	2303      	movs	r3, #3
 8004958:	e036      	b.n	80049c8 <HAL_UART_Transmit+0x11c>
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10b      	bne.n	8004978 <HAL_UART_Transmit+0xcc>
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800496e:	605a      	str	r2, [r3, #4]
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	3302      	adds	r3, #2
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	e007      	b.n	8004988 <HAL_UART_Transmit+0xdc>
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	781a      	ldrb	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3301      	adds	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	84da      	strh	r2, [r3, #38]	; 0x26
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1cf      	bne.n	8004940 <HAL_UART_Transmit+0x94>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2200      	movs	r2, #0
 80049a8:	2140      	movs	r1, #64	; 0x40
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fb6a 	bl	8005084 <UART_WaitOnFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_UART_Transmit+0x10e>
 80049b6:	2303      	movs	r3, #3
 80049b8:	e006      	b.n	80049c8 <HAL_UART_Transmit+0x11c>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049c2:	2300      	movs	r3, #0
 80049c4:	e000      	b.n	80049c8 <HAL_UART_Transmit+0x11c>
 80049c6:	2302      	movs	r3, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	3720      	adds	r7, #32
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_UART_Receive>:
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08a      	sub	sp, #40	; 0x28
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	4613      	mov	r3, r2
 80049de:	80fb      	strh	r3, [r7, #6]
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	f040 808c 	bne.w	8004b0a <HAL_UART_Receive+0x13a>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_UART_Receive+0x2e>
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Receive+0x32>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e084      	b.n	8004b0c <HAL_UART_Receive+0x13c>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_UART_Receive+0x40>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e07d      	b.n	8004b0c <HAL_UART_Receive+0x13c>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2222      	movs	r2, #34	; 0x22
 8004a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a2c:	f7fc fb20 	bl	8001070 <HAL_GetTick>
 8004a30:	6178      	str	r0, [r7, #20]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a46:	d108      	bne.n	8004a5a <HAL_UART_Receive+0x8a>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <HAL_UART_Receive+0x8a>
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	e003      	b.n	8004a62 <HAL_UART_Receive+0x92>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a6a:	e043      	b.n	8004af4 <HAL_UART_Receive+0x124>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2200      	movs	r2, #0
 8004a74:	2120      	movs	r1, #32
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fb04 	bl	8005084 <UART_WaitOnFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_UART_Receive+0xb6>
 8004a82:	2303      	movs	r3, #3
 8004a84:	e042      	b.n	8004b0c <HAL_UART_Receive+0x13c>
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10c      	bne.n	8004aa6 <HAL_UART_Receive+0xd6>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	801a      	strh	r2, [r3, #0]
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	e01f      	b.n	8004ae6 <HAL_UART_Receive+0x116>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aae:	d007      	beq.n	8004ac0 <HAL_UART_Receive+0xf0>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <HAL_UART_Receive+0xfe>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d106      	bne.n	8004ace <HAL_UART_Receive+0xfe>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	e008      	b.n	8004ae0 <HAL_UART_Receive+0x110>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1b6      	bne.n	8004a6c <HAL_UART_Receive+0x9c>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b06:	2300      	movs	r3, #0
 8004b08:	e000      	b.n	8004b0c <HAL_UART_Receive+0x13c>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3720      	adds	r7, #32
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_UART_IRQHandler>:
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b0ba      	sub	sp, #232	; 0xe8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b40:	2300      	movs	r3, #0
 8004b42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <HAL_UART_IRQHandler+0x66>
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_UART_IRQHandler+0x66>
 8004b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_UART_IRQHandler+0x66>
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fbd3 	bl	800531e <UART_Receive_IT>
 8004b78:	e256      	b.n	8005028 <HAL_UART_IRQHandler+0x514>
 8004b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80de 	beq.w	8004d40 <HAL_UART_IRQHandler+0x22c>
 8004b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <HAL_UART_IRQHandler+0x8a>
 8004b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80d1 	beq.w	8004d40 <HAL_UART_IRQHandler+0x22c>
 8004b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <HAL_UART_IRQHandler+0xae>
 8004baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_UART_IRQHandler+0xae>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f043 0201 	orr.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
 8004bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <HAL_UART_IRQHandler+0xd2>
 8004bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_UART_IRQHandler+0xd2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f043 0202 	orr.w	r2, r3, #2
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <HAL_UART_IRQHandler+0xf6>
 8004bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <HAL_UART_IRQHandler+0xf6>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f043 0204 	orr.w	r2, r3, #4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40
 8004c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d011      	beq.n	8004c3a <HAL_UART_IRQHandler+0x126>
 8004c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d105      	bne.n	8004c2e <HAL_UART_IRQHandler+0x11a>
 8004c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <HAL_UART_IRQHandler+0x126>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f043 0208 	orr.w	r2, r3, #8
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 81ed 	beq.w	800501e <HAL_UART_IRQHandler+0x50a>
 8004c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_UART_IRQHandler+0x14e>
 8004c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_UART_IRQHandler+0x14e>
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fb5e 	bl	800531e <UART_Receive_IT>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	bf0c      	ite	eq
 8004c70:	2301      	moveq	r3, #1
 8004c72:	2300      	movne	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <HAL_UART_IRQHandler+0x17a>
 8004c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d04f      	beq.n	8004d2e <HAL_UART_IRQHandler+0x21a>
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa66 	bl	8005160 <UART_EndRxTransfer>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b40      	cmp	r3, #64	; 0x40
 8004ca0:	d141      	bne.n	8004d26 <HAL_UART_IRQHandler+0x212>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3314      	adds	r3, #20
 8004ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3314      	adds	r3, #20
 8004cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1d9      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x18e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d013      	beq.n	8004d1e <HAL_UART_IRQHandler+0x20a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	4a7d      	ldr	r2, [pc, #500]	; (8004ef0 <HAL_UART_IRQHandler+0x3dc>)
 8004cfc:	651a      	str	r2, [r3, #80]	; 0x50
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fc fb65 	bl	80013d2 <HAL_DMA_Abort_IT>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d016      	beq.n	8004d3c <HAL_UART_IRQHandler+0x228>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4798      	blx	r3
 8004d1c:	e00e      	b.n	8004d3c <HAL_UART_IRQHandler+0x228>
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f99a 	bl	8005058 <HAL_UART_ErrorCallback>
 8004d24:	e00a      	b.n	8004d3c <HAL_UART_IRQHandler+0x228>
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f996 	bl	8005058 <HAL_UART_ErrorCallback>
 8004d2c:	e006      	b.n	8004d3c <HAL_UART_IRQHandler+0x228>
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f992 	bl	8005058 <HAL_UART_ErrorCallback>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40
 8004d3a:	e170      	b.n	800501e <HAL_UART_IRQHandler+0x50a>
 8004d3c:	bf00      	nop
 8004d3e:	e16e      	b.n	800501e <HAL_UART_IRQHandler+0x50a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	f040 814a 	bne.w	8004fde <HAL_UART_IRQHandler+0x4ca>
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 8143 	beq.w	8004fde <HAL_UART_IRQHandler+0x4ca>
 8004d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 813c 	beq.w	8004fde <HAL_UART_IRQHandler+0x4ca>
 8004d66:	2300      	movs	r3, #0
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	f040 80b4 	bne.w	8004ef4 <HAL_UART_IRQHandler+0x3e0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8004d98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8140 	beq.w	8005022 <HAL_UART_IRQHandler+0x50e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004daa:	429a      	cmp	r2, r3
 8004dac:	f080 8139 	bcs.w	8005022 <HAL_UART_IRQHandler+0x50e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004db6:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc2:	f000 8088 	beq.w	8004ed6 <HAL_UART_IRQHandler+0x3c2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	330c      	adds	r3, #12
 8004dee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004df2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004df6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1d9      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x2b2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	677b      	str	r3, [r7, #116]	; 0x74
 8004e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	673b      	str	r3, [r7, #112]	; 0x70
 8004e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3314      	adds	r3, #20
 8004e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e1      	bne.n	8004e12 <HAL_UART_IRQHandler+0x2fe>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3314      	adds	r3, #20
 8004e54:	663b      	str	r3, [r7, #96]	; 0x60
 8004e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3314      	adds	r3, #20
 8004e6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e3      	bne.n	8004e4e <HAL_UART_IRQHandler+0x33a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea6:	f023 0310 	bic.w	r3, r3, #16
 8004eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004eb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004eba:	657b      	str	r3, [r7, #84]	; 0x54
 8004ebc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ebe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e3      	bne.n	8004e94 <HAL_UART_IRQHandler+0x380>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fc fa0e 	bl	80012f2 <HAL_DMA_Abort>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f8c0 	bl	800506c <HAL_UARTEx_RxEventCallback>
 8004eec:	e099      	b.n	8005022 <HAL_UART_IRQHandler+0x50e>
 8004eee:	bf00      	nop
 8004ef0:	08005227 	.word	0x08005227
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 808b 	beq.w	8005026 <HAL_UART_IRQHandler+0x512>
 8004f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8086 	beq.w	8005026 <HAL_UART_IRQHandler+0x512>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	330c      	adds	r3, #12
 8004f20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f3e:	647a      	str	r2, [r7, #68]	; 0x44
 8004f40:	643b      	str	r3, [r7, #64]	; 0x40
 8004f42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e3      	bne.n	8004f1a <HAL_UART_IRQHandler+0x406>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3314      	adds	r3, #20
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	623b      	str	r3, [r7, #32]
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f023 0301 	bic.w	r3, r3, #1
 8004f68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3314      	adds	r3, #20
 8004f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f76:	633a      	str	r2, [r7, #48]	; 0x30
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e3      	bne.n	8004f52 <HAL_UART_IRQHandler+0x43e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	330c      	adds	r3, #12
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0310 	bic.w	r3, r3, #16
 8004fae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004fbc:	61fa      	str	r2, [r7, #28]
 8004fbe:	61bb      	str	r3, [r7, #24]
 8004fc0:	69b9      	ldr	r1, [r7, #24]
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e3      	bne.n	8004f98 <HAL_UART_IRQHandler+0x484>
 8004fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f848 	bl	800506c <HAL_UARTEx_RxEventCallback>
 8004fdc:	e023      	b.n	8005026 <HAL_UART_IRQHandler+0x512>
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <HAL_UART_IRQHandler+0x4ea>
 8004fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_UART_IRQHandler+0x4ea>
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f929 	bl	800524e <UART_Transmit_IT>
 8004ffc:	e014      	b.n	8005028 <HAL_UART_IRQHandler+0x514>
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00e      	beq.n	8005028 <HAL_UART_IRQHandler+0x514>
 800500a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d008      	beq.n	8005028 <HAL_UART_IRQHandler+0x514>
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f969 	bl	80052ee <UART_EndTransmit_IT>
 800501c:	e004      	b.n	8005028 <HAL_UART_IRQHandler+0x514>
 800501e:	bf00      	nop
 8005020:	e002      	b.n	8005028 <HAL_UART_IRQHandler+0x514>
 8005022:	bf00      	nop
 8005024:	e000      	b.n	8005028 <HAL_UART_IRQHandler+0x514>
 8005026:	bf00      	nop
 8005028:	37e8      	adds	r7, #232	; 0xe8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop

08005030 <HAL_UART_TxCpltCallback>:
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_UART_RxCpltCallback>:
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_UART_ErrorCallback>:
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_UARTEx_RxEventCallback>:
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <UART_WaitOnFlagUntilTimeout>:
 8005084:	b580      	push	{r7, lr}
 8005086:	b090      	sub	sp, #64	; 0x40
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	71fb      	strb	r3, [r7, #7]
 8005094:	e050      	b.n	8005138 <UART_WaitOnFlagUntilTimeout+0xb4>
 8005096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d04c      	beq.n	8005138 <UART_WaitOnFlagUntilTimeout+0xb4>
 800509e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80050a4:	f7fb ffe4 	bl	8001070 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d241      	bcs.n	8005138 <UART_WaitOnFlagUntilTimeout+0xb4>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050d4:	637a      	str	r2, [r7, #52]	; 0x34
 80050d6:	633b      	str	r3, [r7, #48]	; 0x30
 80050d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e5      	bne.n	80050b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3314      	adds	r3, #20
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f023 0301 	bic.w	r3, r3, #1
 80050fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005108:	623a      	str	r2, [r7, #32]
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	69f9      	ldr	r1, [r7, #28]
 800510e:	6a3a      	ldr	r2, [r7, #32]
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e5      	bne.n	80050e8 <UART_WaitOnFlagUntilTimeout+0x64>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005134:	2303      	movs	r3, #3
 8005136:	e00f      	b.n	8005158 <UART_WaitOnFlagUntilTimeout+0xd4>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	4013      	ands	r3, r2
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	429a      	cmp	r2, r3
 8005154:	d09f      	beq.n	8005096 <UART_WaitOnFlagUntilTimeout+0x12>
 8005156:	2300      	movs	r3, #0
 8005158:	4618      	mov	r0, r3
 800515a:	3740      	adds	r7, #64	; 0x40
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <UART_EndRxTransfer>:
 8005160:	b480      	push	{r7}
 8005162:	b095      	sub	sp, #84	; 0x54
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
 8005170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800517e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005188:	643a      	str	r2, [r7, #64]	; 0x40
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800518e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	63bb      	str	r3, [r7, #56]	; 0x38
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_EndRxTransfer+0x8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3314      	adds	r3, #20
 80051a2:	623b      	str	r3, [r7, #32]
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	61fb      	str	r3, [r7, #28]
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3314      	adds	r3, #20
 80051ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e5      	bne.n	800519c <UART_EndRxTransfer+0x3c>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d119      	bne.n	800520c <UART_EndRxTransfer+0xac>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	330c      	adds	r3, #12
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	60bb      	str	r3, [r7, #8]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f023 0310 	bic.w	r3, r3, #16
 80051ee:	647b      	str	r3, [r7, #68]	; 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051f8:	61ba      	str	r2, [r7, #24]
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	6979      	ldr	r1, [r7, #20]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e5      	bne.n	80051d8 <UART_EndRxTransfer+0x78>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
 800521a:	bf00      	nop
 800521c:	3754      	adds	r7, #84	; 0x54
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <UART_DMAAbortOnError>:
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	85da      	strh	r2, [r3, #46]	; 0x2e
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	84da      	strh	r2, [r3, #38]	; 0x26
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7ff ff09 	bl	8005058 <HAL_UART_ErrorCallback>
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <UART_Transmit_IT>:
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b21      	cmp	r3, #33	; 0x21
 8005260:	d13e      	bne.n	80052e0 <UART_Transmit_IT+0x92>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	d114      	bne.n	8005296 <UART_Transmit_IT+0x48>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d110      	bne.n	8005296 <UART_Transmit_IT+0x48>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005288:	605a      	str	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	1c9a      	adds	r2, r3, #2
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	621a      	str	r2, [r3, #32]
 8005294:	e008      	b.n	80052a8 <UART_Transmit_IT+0x5a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	1c59      	adds	r1, r3, #1
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6211      	str	r1, [r2, #32]
 80052a0:	781a      	ldrb	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	605a      	str	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	4619      	mov	r1, r3
 80052b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10f      	bne.n	80052dc <UART_Transmit_IT+0x8e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ca:	60da      	str	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052da:	60da      	str	r2, [r3, #12]
 80052dc:	2300      	movs	r3, #0
 80052de:	e000      	b.n	80052e2 <UART_Transmit_IT+0x94>
 80052e0:	2302      	movs	r3, #2
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <UART_EndTransmit_IT>:
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff fe8e 	bl	8005030 <HAL_UART_TxCpltCallback>
 8005314:	2300      	movs	r3, #0
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <UART_Receive_IT>:
 800531e:	b580      	push	{r7, lr}
 8005320:	b08c      	sub	sp, #48	; 0x30
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b22      	cmp	r3, #34	; 0x22
 8005330:	f040 80ab 	bne.w	800548a <UART_Receive_IT+0x16c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533c:	d117      	bne.n	800536e <UART_Receive_IT+0x50>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d113      	bne.n	800536e <UART_Receive_IT+0x50>
 8005346:	2300      	movs	r3, #0
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535c:	b29a      	uxth	r2, r3
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	801a      	strh	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	1c9a      	adds	r2, r3, #2
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	629a      	str	r2, [r3, #40]	; 0x28
 800536c:	e026      	b.n	80053bc <UART_Receive_IT+0x9e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005374:	2300      	movs	r3, #0
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005380:	d007      	beq.n	8005392 <UART_Receive_IT+0x74>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <UART_Receive_IT+0x82>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <UART_Receive_IT+0x82>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e008      	b.n	80053b2 <UART_Receive_IT+0x94>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	4619      	mov	r1, r3
 80053ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d15a      	bne.n	8005486 <UART_Receive_IT+0x168>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0220 	bic.w	r2, r2, #32
 80053de:	60da      	str	r2, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053ee:	60da      	str	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	615a      	str	r2, [r3, #20]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	2b01      	cmp	r3, #1
 800540e:	d135      	bne.n	800547c <UART_Receive_IT+0x15e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	330c      	adds	r3, #12
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	613b      	str	r3, [r7, #16]
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f023 0310 	bic.w	r3, r3, #16
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005436:	623a      	str	r2, [r7, #32]
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	69f9      	ldr	r1, [r7, #28]
 800543c:	6a3a      	ldr	r2, [r7, #32]
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e5      	bne.n	8005416 <UART_Receive_IT+0xf8>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b10      	cmp	r3, #16
 8005456:	d10a      	bne.n	800546e <UART_Receive_IT+0x150>
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff fdf9 	bl	800506c <HAL_UARTEx_RxEventCallback>
 800547a:	e002      	b.n	8005482 <UART_Receive_IT+0x164>
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7ff fde1 	bl	8005044 <HAL_UART_RxCpltCallback>
 8005482:	2300      	movs	r3, #0
 8005484:	e002      	b.n	800548c <UART_Receive_IT+0x16e>
 8005486:	2300      	movs	r3, #0
 8005488:	e000      	b.n	800548c <UART_Receive_IT+0x16e>
 800548a:	2302      	movs	r3, #2
 800548c:	4618      	mov	r0, r3
 800548e:	3730      	adds	r7, #48	; 0x30
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <UART_SetConfig>:
 8005494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005498:	b0c0      	sub	sp, #256	; 0x100
 800549a:	af00      	add	r7, sp, #0
 800549c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b0:	68d9      	ldr	r1, [r3, #12]
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	ea40 0301 	orr.w	r3, r0, r1
 80054bc:	6113      	str	r3, [r2, #16]
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054ec:	f021 010c 	bic.w	r1, r1, #12
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054fa:	430b      	orrs	r3, r1
 80054fc:	60d3      	str	r3, [r2, #12]
 80054fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800550a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550e:	6999      	ldr	r1, [r3, #24]
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	ea40 0301 	orr.w	r3, r0, r1
 800551a:	6153      	str	r3, [r2, #20]
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b8f      	ldr	r3, [pc, #572]	; (8005760 <UART_SetConfig+0x2cc>)
 8005524:	429a      	cmp	r2, r3
 8005526:	d005      	beq.n	8005534 <UART_SetConfig+0xa0>
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4b8d      	ldr	r3, [pc, #564]	; (8005764 <UART_SetConfig+0x2d0>)
 8005530:	429a      	cmp	r2, r3
 8005532:	d104      	bne.n	800553e <UART_SetConfig+0xaa>
 8005534:	f7fe ff80 	bl	8004438 <HAL_RCC_GetPCLK2Freq>
 8005538:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800553c:	e003      	b.n	8005546 <UART_SetConfig+0xb2>
 800553e:	f7fe ff67 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 8005542:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005550:	f040 810c 	bne.w	800576c <UART_SetConfig+0x2d8>
 8005554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005558:	2200      	movs	r2, #0
 800555a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800555e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005566:	4622      	mov	r2, r4
 8005568:	462b      	mov	r3, r5
 800556a:	1891      	adds	r1, r2, r2
 800556c:	65b9      	str	r1, [r7, #88]	; 0x58
 800556e:	415b      	adcs	r3, r3
 8005570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005576:	4621      	mov	r1, r4
 8005578:	eb12 0801 	adds.w	r8, r2, r1
 800557c:	4629      	mov	r1, r5
 800557e:	eb43 0901 	adc.w	r9, r3, r1
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800558e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005596:	4690      	mov	r8, r2
 8005598:	4699      	mov	r9, r3
 800559a:	4623      	mov	r3, r4
 800559c:	eb18 0303 	adds.w	r3, r8, r3
 80055a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055a4:	462b      	mov	r3, r5
 80055a6:	eb49 0303 	adc.w	r3, r9, r3
 80055aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055c2:	460b      	mov	r3, r1
 80055c4:	18db      	adds	r3, r3, r3
 80055c6:	653b      	str	r3, [r7, #80]	; 0x50
 80055c8:	4613      	mov	r3, r2
 80055ca:	eb42 0303 	adc.w	r3, r2, r3
 80055ce:	657b      	str	r3, [r7, #84]	; 0x54
 80055d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055d8:	f7fa fe06 	bl	80001e8 <__aeabi_uldivmod>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4b61      	ldr	r3, [pc, #388]	; (8005768 <UART_SetConfig+0x2d4>)
 80055e2:	fba3 2302 	umull	r2, r3, r3, r2
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	011c      	lsls	r4, r3, #4
 80055ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80055f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80055fc:	4642      	mov	r2, r8
 80055fe:	464b      	mov	r3, r9
 8005600:	1891      	adds	r1, r2, r2
 8005602:	64b9      	str	r1, [r7, #72]	; 0x48
 8005604:	415b      	adcs	r3, r3
 8005606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800560c:	4641      	mov	r1, r8
 800560e:	eb12 0a01 	adds.w	sl, r2, r1
 8005612:	4649      	mov	r1, r9
 8005614:	eb43 0b01 	adc.w	fp, r3, r1
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	f04f 0300 	mov.w	r3, #0
 8005620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800562c:	4692      	mov	sl, r2
 800562e:	469b      	mov	fp, r3
 8005630:	4643      	mov	r3, r8
 8005632:	eb1a 0303 	adds.w	r3, sl, r3
 8005636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800563a:	464b      	mov	r3, r9
 800563c:	eb4b 0303 	adc.w	r3, fp, r3
 8005640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005650:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005658:	460b      	mov	r3, r1
 800565a:	18db      	adds	r3, r3, r3
 800565c:	643b      	str	r3, [r7, #64]	; 0x40
 800565e:	4613      	mov	r3, r2
 8005660:	eb42 0303 	adc.w	r3, r2, r3
 8005664:	647b      	str	r3, [r7, #68]	; 0x44
 8005666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800566a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800566e:	f7fa fdbb 	bl	80001e8 <__aeabi_uldivmod>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	4611      	mov	r1, r2
 8005678:	4b3b      	ldr	r3, [pc, #236]	; (8005768 <UART_SetConfig+0x2d4>)
 800567a:	fba3 2301 	umull	r2, r3, r3, r1
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	2264      	movs	r2, #100	; 0x64
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	1acb      	subs	r3, r1, r3
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800568e:	4b36      	ldr	r3, [pc, #216]	; (8005768 <UART_SetConfig+0x2d4>)
 8005690:	fba3 2302 	umull	r2, r3, r3, r2
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800569c:	441c      	add	r4, r3
 800569e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056b0:	4642      	mov	r2, r8
 80056b2:	464b      	mov	r3, r9
 80056b4:	1891      	adds	r1, r2, r2
 80056b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80056b8:	415b      	adcs	r3, r3
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056c0:	4641      	mov	r1, r8
 80056c2:	1851      	adds	r1, r2, r1
 80056c4:	6339      	str	r1, [r7, #48]	; 0x30
 80056c6:	4649      	mov	r1, r9
 80056c8:	414b      	adcs	r3, r1
 80056ca:	637b      	str	r3, [r7, #52]	; 0x34
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80056d8:	4659      	mov	r1, fp
 80056da:	00cb      	lsls	r3, r1, #3
 80056dc:	4651      	mov	r1, sl
 80056de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056e2:	4651      	mov	r1, sl
 80056e4:	00ca      	lsls	r2, r1, #3
 80056e6:	4610      	mov	r0, r2
 80056e8:	4619      	mov	r1, r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	4642      	mov	r2, r8
 80056ee:	189b      	adds	r3, r3, r2
 80056f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056f4:	464b      	mov	r3, r9
 80056f6:	460a      	mov	r2, r1
 80056f8:	eb42 0303 	adc.w	r3, r2, r3
 80056fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800570c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005714:	460b      	mov	r3, r1
 8005716:	18db      	adds	r3, r3, r3
 8005718:	62bb      	str	r3, [r7, #40]	; 0x28
 800571a:	4613      	mov	r3, r2
 800571c:	eb42 0303 	adc.w	r3, r2, r3
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800572a:	f7fa fd5d 	bl	80001e8 <__aeabi_uldivmod>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <UART_SetConfig+0x2d4>)
 8005734:	fba3 1302 	umull	r1, r3, r3, r2
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	2164      	movs	r1, #100	; 0x64
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	3332      	adds	r3, #50	; 0x32
 8005746:	4a08      	ldr	r2, [pc, #32]	; (8005768 <UART_SetConfig+0x2d4>)
 8005748:	fba2 2303 	umull	r2, r3, r2, r3
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	f003 0207 	and.w	r2, r3, #7
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4422      	add	r2, r4
 800575a:	609a      	str	r2, [r3, #8]
 800575c:	e106      	b.n	800596c <UART_SetConfig+0x4d8>
 800575e:	bf00      	nop
 8005760:	40011000 	.word	0x40011000
 8005764:	40011400 	.word	0x40011400
 8005768:	51eb851f 	.word	0x51eb851f
 800576c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005770:	2200      	movs	r2, #0
 8005772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005776:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800577a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800577e:	4642      	mov	r2, r8
 8005780:	464b      	mov	r3, r9
 8005782:	1891      	adds	r1, r2, r2
 8005784:	6239      	str	r1, [r7, #32]
 8005786:	415b      	adcs	r3, r3
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
 800578a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800578e:	4641      	mov	r1, r8
 8005790:	1854      	adds	r4, r2, r1
 8005792:	4649      	mov	r1, r9
 8005794:	eb43 0501 	adc.w	r5, r3, r1
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	00eb      	lsls	r3, r5, #3
 80057a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057a6:	00e2      	lsls	r2, r4, #3
 80057a8:	4614      	mov	r4, r2
 80057aa:	461d      	mov	r5, r3
 80057ac:	4643      	mov	r3, r8
 80057ae:	18e3      	adds	r3, r4, r3
 80057b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057b4:	464b      	mov	r3, r9
 80057b6:	eb45 0303 	adc.w	r3, r5, r3
 80057ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80057da:	4629      	mov	r1, r5
 80057dc:	008b      	lsls	r3, r1, #2
 80057de:	4621      	mov	r1, r4
 80057e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057e4:	4621      	mov	r1, r4
 80057e6:	008a      	lsls	r2, r1, #2
 80057e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80057ec:	f7fa fcfc 	bl	80001e8 <__aeabi_uldivmod>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4b60      	ldr	r3, [pc, #384]	; (8005978 <UART_SetConfig+0x4e4>)
 80057f6:	fba3 2302 	umull	r2, r3, r3, r2
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	011c      	lsls	r4, r3, #4
 80057fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005802:	2200      	movs	r2, #0
 8005804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800580c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005810:	4642      	mov	r2, r8
 8005812:	464b      	mov	r3, r9
 8005814:	1891      	adds	r1, r2, r2
 8005816:	61b9      	str	r1, [r7, #24]
 8005818:	415b      	adcs	r3, r3
 800581a:	61fb      	str	r3, [r7, #28]
 800581c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005820:	4641      	mov	r1, r8
 8005822:	1851      	adds	r1, r2, r1
 8005824:	6139      	str	r1, [r7, #16]
 8005826:	4649      	mov	r1, r9
 8005828:	414b      	adcs	r3, r1
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005838:	4659      	mov	r1, fp
 800583a:	00cb      	lsls	r3, r1, #3
 800583c:	4651      	mov	r1, sl
 800583e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005842:	4651      	mov	r1, sl
 8005844:	00ca      	lsls	r2, r1, #3
 8005846:	4610      	mov	r0, r2
 8005848:	4619      	mov	r1, r3
 800584a:	4603      	mov	r3, r0
 800584c:	4642      	mov	r2, r8
 800584e:	189b      	adds	r3, r3, r2
 8005850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005854:	464b      	mov	r3, r9
 8005856:	460a      	mov	r2, r1
 8005858:	eb42 0303 	adc.w	r3, r2, r3
 800585c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	67bb      	str	r3, [r7, #120]	; 0x78
 800586a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005878:	4649      	mov	r1, r9
 800587a:	008b      	lsls	r3, r1, #2
 800587c:	4641      	mov	r1, r8
 800587e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005882:	4641      	mov	r1, r8
 8005884:	008a      	lsls	r2, r1, #2
 8005886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800588a:	f7fa fcad 	bl	80001e8 <__aeabi_uldivmod>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	4611      	mov	r1, r2
 8005894:	4b38      	ldr	r3, [pc, #224]	; (8005978 <UART_SetConfig+0x4e4>)
 8005896:	fba3 2301 	umull	r2, r3, r3, r1
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	2264      	movs	r2, #100	; 0x64
 800589e:	fb02 f303 	mul.w	r3, r2, r3
 80058a2:	1acb      	subs	r3, r1, r3
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	3332      	adds	r3, #50	; 0x32
 80058a8:	4a33      	ldr	r2, [pc, #204]	; (8005978 <UART_SetConfig+0x4e4>)
 80058aa:	fba2 2303 	umull	r2, r3, r2, r3
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b4:	441c      	add	r4, r3
 80058b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ba:	2200      	movs	r2, #0
 80058bc:	673b      	str	r3, [r7, #112]	; 0x70
 80058be:	677a      	str	r2, [r7, #116]	; 0x74
 80058c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058c4:	4642      	mov	r2, r8
 80058c6:	464b      	mov	r3, r9
 80058c8:	1891      	adds	r1, r2, r2
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	415b      	adcs	r3, r3
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058d4:	4641      	mov	r1, r8
 80058d6:	1851      	adds	r1, r2, r1
 80058d8:	6039      	str	r1, [r7, #0]
 80058da:	4649      	mov	r1, r9
 80058dc:	414b      	adcs	r3, r1
 80058de:	607b      	str	r3, [r7, #4]
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058ec:	4659      	mov	r1, fp
 80058ee:	00cb      	lsls	r3, r1, #3
 80058f0:	4651      	mov	r1, sl
 80058f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058f6:	4651      	mov	r1, sl
 80058f8:	00ca      	lsls	r2, r1, #3
 80058fa:	4610      	mov	r0, r2
 80058fc:	4619      	mov	r1, r3
 80058fe:	4603      	mov	r3, r0
 8005900:	4642      	mov	r2, r8
 8005902:	189b      	adds	r3, r3, r2
 8005904:	66bb      	str	r3, [r7, #104]	; 0x68
 8005906:	464b      	mov	r3, r9
 8005908:	460a      	mov	r2, r1
 800590a:	eb42 0303 	adc.w	r3, r2, r3
 800590e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	663b      	str	r3, [r7, #96]	; 0x60
 800591a:	667a      	str	r2, [r7, #100]	; 0x64
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005928:	4649      	mov	r1, r9
 800592a:	008b      	lsls	r3, r1, #2
 800592c:	4641      	mov	r1, r8
 800592e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005932:	4641      	mov	r1, r8
 8005934:	008a      	lsls	r2, r1, #2
 8005936:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800593a:	f7fa fc55 	bl	80001e8 <__aeabi_uldivmod>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	4b0d      	ldr	r3, [pc, #52]	; (8005978 <UART_SetConfig+0x4e4>)
 8005944:	fba3 1302 	umull	r1, r3, r3, r2
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	2164      	movs	r1, #100	; 0x64
 800594c:	fb01 f303 	mul.w	r3, r1, r3
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	3332      	adds	r3, #50	; 0x32
 8005956:	4a08      	ldr	r2, [pc, #32]	; (8005978 <UART_SetConfig+0x4e4>)
 8005958:	fba2 2303 	umull	r2, r3, r2, r3
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	f003 020f 	and.w	r2, r3, #15
 8005962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4422      	add	r2, r4
 800596a:	609a      	str	r2, [r3, #8]
 800596c:	bf00      	nop
 800596e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005972:	46bd      	mov	sp, r7
 8005974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005978:	51eb851f 	.word	0x51eb851f

0800597c <USB_CoreInit>:
 800597c:	b084      	sub	sp, #16
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	f107 001c 	add.w	r0, r7, #28
 800598a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	2b01      	cmp	r3, #1
 8005992:	d122      	bne.n	80059da <USB_CoreInit+0x5e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	639a      	str	r2, [r3, #56]	; 0x38
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80059a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	60d3      	str	r3, [r2, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]
 80059bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d105      	bne.n	80059ce <USB_CoreInit+0x52>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60da      	str	r2, [r3, #12]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f9c0 	bl	8005d54 <USB_CoreReset>
 80059d4:	4603      	mov	r3, r0
 80059d6:	73fb      	strb	r3, [r7, #15]
 80059d8:	e01a      	b.n	8005a10 <USB_CoreInit+0x94>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60da      	str	r2, [r3, #12]
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f9b4 	bl	8005d54 <USB_CoreReset>
 80059ec:	4603      	mov	r3, r0
 80059ee:	73fb      	strb	r3, [r7, #15]
 80059f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <USB_CoreInit+0x88>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38
 8005a02:	e005      	b.n	8005a10 <USB_CoreInit+0x94>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d10b      	bne.n	8005a2e <USB_CoreInit+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f043 0206 	orr.w	r2, r3, #6
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	609a      	str	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	609a      	str	r2, [r3, #8]
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a3a:	b004      	add	sp, #16
 8005a3c:	4770      	bx	lr

08005a3e <USB_EnableGlobalInt>:
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f043 0201 	orr.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	609a      	str	r2, [r3, #8]
 8005a52:	2300      	movs	r3, #0
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_DisableGlobalInt>:
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f023 0201 	bic.w	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	609a      	str	r2, [r3, #8]
 8005a74:	2300      	movs	r3, #0
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_SetCurrentMode>:
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	70fb      	strb	r3, [r7, #3]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	60da      	str	r2, [r3, #12]
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d115      	bne.n	8005ad0 <USB_SetCurrentMode+0x4e>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	f7fb fae9 	bl	8001088 <HAL_Delay>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f93a 	bl	8005d36 <USB_GetMode>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d01e      	beq.n	8005b06 <USB_SetCurrentMode+0x84>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b31      	cmp	r3, #49	; 0x31
 8005acc:	d9f0      	bls.n	8005ab0 <USB_SetCurrentMode+0x2e>
 8005ace:	e01a      	b.n	8005b06 <USB_SetCurrentMode+0x84>
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d115      	bne.n	8005b02 <USB_SetCurrentMode+0x80>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60da      	str	r2, [r3, #12]
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	f7fb fad0 	bl	8001088 <HAL_Delay>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f921 	bl	8005d36 <USB_GetMode>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d005      	beq.n	8005b06 <USB_SetCurrentMode+0x84>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b31      	cmp	r3, #49	; 0x31
 8005afe:	d9f0      	bls.n	8005ae2 <USB_SetCurrentMode+0x60>
 8005b00:	e001      	b.n	8005b06 <USB_SetCurrentMode+0x84>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e005      	b.n	8005b12 <USB_SetCurrentMode+0x90>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b32      	cmp	r3, #50	; 0x32
 8005b0a:	d101      	bne.n	8005b10 <USB_SetCurrentMode+0x8e>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e000      	b.n	8005b12 <USB_SetCurrentMode+0x90>
 8005b10:	2300      	movs	r3, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <USB_FlushTxFifo>:
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <USB_FlushTxFifo+0x64>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <USB_FlushTxFifo+0x20>
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e01b      	b.n	8005b74 <USB_FlushTxFifo+0x58>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	daf2      	bge.n	8005b2a <USB_FlushTxFifo+0xe>
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	019b      	lsls	r3, r3, #6
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	611a      	str	r2, [r3, #16]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3301      	adds	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4a08      	ldr	r2, [pc, #32]	; (8005b80 <USB_FlushTxFifo+0x64>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <USB_FlushTxFifo+0x4a>
 8005b62:	2303      	movs	r3, #3
 8005b64:	e006      	b.n	8005b74 <USB_FlushTxFifo+0x58>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d0f0      	beq.n	8005b54 <USB_FlushTxFifo+0x38>
 8005b72:	2300      	movs	r3, #0
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	00030d40 	.word	0x00030d40

08005b84 <USB_FlushRxFifo>:
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a11      	ldr	r2, [pc, #68]	; (8005be0 <USB_FlushRxFifo+0x5c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <USB_FlushRxFifo+0x1e>
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e018      	b.n	8005bd4 <USB_FlushRxFifo+0x50>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	daf2      	bge.n	8005b90 <USB_FlushRxFifo+0xc>
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	611a      	str	r2, [r3, #16]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4a08      	ldr	r2, [pc, #32]	; (8005be0 <USB_FlushRxFifo+0x5c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d901      	bls.n	8005bc6 <USB_FlushRxFifo+0x42>
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e006      	b.n	8005bd4 <USB_FlushRxFifo+0x50>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	2b10      	cmp	r3, #16
 8005bd0:	d0f0      	beq.n	8005bb4 <USB_FlushRxFifo+0x30>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	00030d40 	.word	0x00030d40

08005be4 <USB_WritePacket>:
 8005be4:	b480      	push	{r7}
 8005be6:	b089      	sub	sp, #36	; 0x24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	71fb      	strb	r3, [r7, #7]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	80bb      	strh	r3, [r7, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d123      	bne.n	8005c52 <USB_WritePacket+0x6e>
 8005c0a:	88bb      	ldrh	r3, [r7, #4]
 8005c0c:	3303      	adds	r3, #3
 8005c0e:	089b      	lsrs	r3, r3, #2
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	2300      	movs	r3, #0
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	e018      	b.n	8005c4a <USB_WritePacket+0x66>
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	031a      	lsls	r2, r3, #12
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c24:	461a      	mov	r2, r3
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	3301      	adds	r3, #1
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	61fb      	str	r3, [r7, #28]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	3301      	adds	r3, #1
 8005c42:	61fb      	str	r3, [r7, #28]
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	3301      	adds	r3, #1
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d3e2      	bcc.n	8005c18 <USB_WritePacket+0x34>
 8005c52:	2300      	movs	r3, #0
 8005c54:	4618      	mov	r0, r3
 8005c56:	3724      	adds	r7, #36	; 0x24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_ReadPacket>:
 8005c60:	b480      	push	{r7}
 8005c62:	b08b      	sub	sp, #44	; 0x2c
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	089b      	lsrs	r3, r3, #2
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	83fb      	strh	r3, [r7, #30]
 8005c86:	2300      	movs	r3, #0
 8005c88:	623b      	str	r3, [r7, #32]
 8005c8a:	e014      	b.n	8005cb6 <USB_ReadPacket+0x56>
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	3301      	adds	r3, #1
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	623b      	str	r3, [r7, #32]
 8005cb6:	6a3a      	ldr	r2, [r7, #32]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d3e6      	bcc.n	8005c8c <USB_ReadPacket+0x2c>
 8005cbe:	8bfb      	ldrh	r3, [r7, #30]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01e      	beq.n	8005d02 <USB_ReadPacket+0xa2>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	623b      	str	r3, [r7, #32]
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f107 0310 	add.w	r3, r7, #16
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	3301      	adds	r3, #1
 8005cee:	623b      	str	r3, [r7, #32]
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf6:	8bfb      	ldrh	r3, [r7, #30]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	83fb      	strh	r3, [r7, #30]
 8005cfc:	8bfb      	ldrh	r3, [r7, #30]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1ea      	bne.n	8005cd8 <USB_ReadPacket+0x78>
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	4618      	mov	r0, r3
 8005d06:	372c      	adds	r7, #44	; 0x2c
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USB_ReadInterrupts>:
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4013      	ands	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <USB_GetMode>:
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
	...

08005d54 <USB_CoreReset>:
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4a13      	ldr	r2, [pc, #76]	; (8005db8 <USB_CoreReset+0x64>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d901      	bls.n	8005d72 <USB_CoreReset+0x1e>
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e01b      	b.n	8005daa <USB_CoreReset+0x56>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	daf2      	bge.n	8005d60 <USB_CoreReset+0xc>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f043 0201 	orr.w	r2, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	611a      	str	r2, [r3, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4a09      	ldr	r2, [pc, #36]	; (8005db8 <USB_CoreReset+0x64>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d901      	bls.n	8005d9c <USB_CoreReset+0x48>
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e006      	b.n	8005daa <USB_CoreReset+0x56>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d0f0      	beq.n	8005d8a <USB_CoreReset+0x36>
 8005da8:	2300      	movs	r3, #0
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	00030d40 	.word	0x00030d40

08005dbc <USB_HostInit>:
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b086      	sub	sp, #24
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005dca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005dce:	2300      	movs	r3, #0
 8005dd0:	75fb      	strb	r3, [r7, #23]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ddc:	461a      	mov	r2, r3
 8005dde:	2300      	movs	r3, #0
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	639a      	str	r2, [r3, #56]	; 0x38
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d018      	beq.n	8005e44 <USB_HostInit+0x88>
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d10a      	bne.n	8005e2e <USB_HostInit+0x72>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e26:	f043 0304 	orr.w	r3, r3, #4
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	e014      	b.n	8005e58 <USB_HostInit+0x9c>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e3c:	f023 0304 	bic.w	r3, r3, #4
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e009      	b.n	8005e58 <USB_HostInit+0x9c>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e52:	f023 0304 	bic.w	r3, r3, #4
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	2110      	movs	r1, #16
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fe5e 	bl	8005b1c <USB_FlushTxFifo>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <USB_HostInit+0xae>
 8005e66:	2301      	movs	r3, #1
 8005e68:	75fb      	strb	r3, [r7, #23]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff fe8a 	bl	8005b84 <USB_FlushRxFifo>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <USB_HostInit+0xbe>
 8005e76:	2301      	movs	r3, #1
 8005e78:	75fb      	strb	r3, [r7, #23]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	e015      	b.n	8005eac <USB_HostInit+0xf0>
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e92:	6093      	str	r3, [r2, #8]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60d3      	str	r3, [r2, #12]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d3e5      	bcc.n	8005e80 <USB_HostInit+0xc4>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	619a      	str	r2, [r3, #24]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec0:	615a      	str	r2, [r3, #20]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <USB_HostInit+0x12a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <USB_HostInit+0x16c>)
 8005eda:	629a      	str	r2, [r3, #40]	; 0x28
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <USB_HostInit+0x170>)
 8005ee0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005ee4:	e009      	b.n	8005efa <USB_HostInit+0x13e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2280      	movs	r2, #128	; 0x80
 8005eea:	625a      	str	r2, [r3, #36]	; 0x24
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a10      	ldr	r2, [pc, #64]	; (8005f30 <USB_HostInit+0x174>)
 8005ef0:	629a      	str	r2, [r3, #40]	; 0x28
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a0f      	ldr	r2, [pc, #60]	; (8005f34 <USB_HostInit+0x178>)
 8005ef6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d105      	bne.n	8005f0c <USB_HostInit+0x150>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f043 0210 	orr.w	r2, r3, #16
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	619a      	str	r2, [r3, #24]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699a      	ldr	r2, [r3, #24]
 8005f10:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <USB_HostInit+0x17c>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6193      	str	r3, [r2, #24]
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f24:	b004      	add	sp, #16
 8005f26:	4770      	bx	lr
 8005f28:	01000200 	.word	0x01000200
 8005f2c:	00e00300 	.word	0x00e00300
 8005f30:	00600080 	.word	0x00600080
 8005f34:	004000e0 	.word	0x004000e0
 8005f38:	a3200008 	.word	0xa3200008

08005f3c <USB_InitFSLSPClkSel>:
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f5a:	f023 0303 	bic.w	r3, r3, #3
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	68f9      	ldr	r1, [r7, #12]
 8005f70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f74:	4313      	orrs	r3, r2
 8005f76:	600b      	str	r3, [r1, #0]
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d107      	bne.n	8005f8e <USB_InitFSLSPClkSel+0x52>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f84:	461a      	mov	r2, r3
 8005f86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005f8a:	6053      	str	r3, [r2, #4]
 8005f8c:	e009      	b.n	8005fa2 <USB_InitFSLSPClkSel+0x66>
 8005f8e:	78fb      	ldrb	r3, [r7, #3]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d106      	bne.n	8005fa2 <USB_InitFSLSPClkSel+0x66>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005fa0:	6053      	str	r3, [r2, #4]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_ResetPort>:
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60bb      	str	r3, [r7, #8]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	2064      	movs	r0, #100	; 0x64
 8005fe2:	f7fb f851 	bl	8001088 <HAL_Delay>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005fee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	200a      	movs	r0, #10
 8005ff6:	f7fb f847 	bl	8001088 <HAL_Delay>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <USB_DriveVbus>:
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	2300      	movs	r3, #0
 8006016:	60bb      	str	r3, [r7, #8]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60bb      	str	r3, [r7, #8]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d109      	bne.n	8006048 <USB_DriveVbus+0x44>
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d106      	bne.n	8006048 <USB_DriveVbus+0x44>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006042:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800604e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006052:	d109      	bne.n	8006068 <USB_DriveVbus+0x64>
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <USB_DriveVbus+0x64>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	2300      	movs	r3, #0
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <USB_GetHostSpeed>:
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60bb      	str	r3, [r7, #8]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	0c5b      	lsrs	r3, r3, #17
 8006094:	f003 0303 	and.w	r3, r3, #3
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USB_GetCurrentFrame>:
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <USB_HC_Init>:
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	4608      	mov	r0, r1
 80060d2:	4611      	mov	r1, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	70fb      	strb	r3, [r7, #3]
 80060da:	460b      	mov	r3, r1
 80060dc:	70bb      	strb	r3, [r7, #2]
 80060de:	4613      	mov	r3, r2
 80060e0:	707b      	strb	r3, [r7, #1]
 80060e2:	2300      	movs	r3, #0
 80060e4:	77fb      	strb	r3, [r7, #31]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f6:	461a      	mov	r2, r3
 80060f8:	f04f 33ff 	mov.w	r3, #4294967295
 80060fc:	6093      	str	r3, [r2, #8]
 80060fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006102:	2b03      	cmp	r3, #3
 8006104:	d87e      	bhi.n	8006204 <USB_HC_Init+0x13c>
 8006106:	a201      	add	r2, pc, #4	; (adr r2, 800610c <USB_HC_Init+0x44>)
 8006108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610c:	0800611d 	.word	0x0800611d
 8006110:	080061c7 	.word	0x080061c7
 8006114:	0800611d 	.word	0x0800611d
 8006118:	08006189 	.word	0x08006189
 800611c:	78fb      	ldrb	r3, [r7, #3]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4413      	add	r3, r2
 8006124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006128:	461a      	mov	r2, r3
 800612a:	f240 439d 	movw	r3, #1181	; 0x49d
 800612e:	60d3      	str	r3, [r2, #12]
 8006130:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006134:	2b00      	cmp	r3, #0
 8006136:	da10      	bge.n	800615a <USB_HC_Init+0x92>
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	78fa      	ldrb	r2, [r7, #3]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	440a      	add	r2, r1
 800614e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006156:	60d3      	str	r3, [r2, #12]
 8006158:	e057      	b.n	800620a <USB_HC_Init+0x142>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006162:	2b00      	cmp	r3, #0
 8006164:	d051      	beq.n	800620a <USB_HC_Init+0x142>
 8006166:	78fb      	ldrb	r3, [r7, #3]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4413      	add	r3, r2
 800616e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	78fa      	ldrb	r2, [r7, #3]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	440a      	add	r2, r1
 800617c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006180:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006184:	60d3      	str	r3, [r2, #12]
 8006186:	e040      	b.n	800620a <USB_HC_Init+0x142>
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4413      	add	r3, r2
 8006190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006194:	461a      	mov	r2, r3
 8006196:	f240 639d 	movw	r3, #1693	; 0x69d
 800619a:	60d3      	str	r3, [r2, #12]
 800619c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	da34      	bge.n	800620e <USB_HC_Init+0x146>
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	78fa      	ldrb	r2, [r7, #3]
 80061b4:	0151      	lsls	r1, r2, #5
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	440a      	add	r2, r1
 80061ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061c2:	60d3      	str	r3, [r2, #12]
 80061c4:	e023      	b.n	800620e <USB_HC_Init+0x146>
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d2:	461a      	mov	r2, r3
 80061d4:	f240 2325 	movw	r3, #549	; 0x225
 80061d8:	60d3      	str	r3, [r2, #12]
 80061da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	da17      	bge.n	8006212 <USB_HC_Init+0x14a>
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061fc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006200:	60d3      	str	r3, [r2, #12]
 8006202:	e006      	b.n	8006212 <USB_HC_Init+0x14a>
 8006204:	2301      	movs	r3, #1
 8006206:	77fb      	strb	r3, [r7, #31]
 8006208:	e004      	b.n	8006214 <USB_HC_Init+0x14c>
 800620a:	bf00      	nop
 800620c:	e002      	b.n	8006214 <USB_HC_Init+0x14c>
 800620e:	bf00      	nop
 8006210:	e000      	b.n	8006214 <USB_HC_Init+0x14c>
 8006212:	bf00      	nop
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4413      	add	r3, r2
 800621c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	0151      	lsls	r1, r2, #5
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	440a      	add	r2, r1
 800622a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800622e:	f043 0302 	orr.w	r3, r3, #2
 8006232:	60d3      	str	r3, [r2, #12]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800623a:	699a      	ldr	r2, [r3, #24]
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	2101      	movs	r1, #1
 8006244:	fa01 f303 	lsl.w	r3, r1, r3
 8006248:	6939      	ldr	r1, [r7, #16]
 800624a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800624e:	4313      	orrs	r3, r2
 8006250:	618b      	str	r3, [r1, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	619a      	str	r2, [r3, #24]
 800625e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006262:	2b00      	cmp	r3, #0
 8006264:	da03      	bge.n	800626e <USB_HC_Init+0x1a6>
 8006266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	e001      	b.n	8006272 <USB_HC_Init+0x1aa>
 800626e:	2300      	movs	r3, #0
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff feff 	bl	8006076 <USB_GetHostSpeed>
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800627e:	2b02      	cmp	r3, #2
 8006280:	d106      	bne.n	8006290 <USB_HC_Init+0x1c8>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d003      	beq.n	8006290 <USB_HC_Init+0x1c8>
 8006288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	e001      	b.n	8006294 <USB_HC_Init+0x1cc>
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	787b      	ldrb	r3, [r7, #1]
 8006296:	059b      	lsls	r3, r3, #22
 8006298:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
 800629c:	78bb      	ldrb	r3, [r7, #2]
 800629e:	02db      	lsls	r3, r3, #11
 80062a0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 80062a4:	431a      	orrs	r2, r3
 80062a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062aa:	049b      	lsls	r3, r3, #18
 80062ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80062b0:	431a      	orrs	r2, r3
 80062b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80062b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062b8:	431a      	orrs	r2, r3
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	431a      	orrs	r2, r3
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	0159      	lsls	r1, r3, #5
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	440b      	add	r3, r1
 80062c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ca:	4619      	mov	r1, r3
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	600b      	str	r3, [r1, #0]
 80062d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d003      	beq.n	80062e2 <USB_HC_Init+0x21a>
 80062da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d10f      	bne.n	8006302 <USB_HC_Init+0x23a>
 80062e2:	78fb      	ldrb	r3, [r7, #3]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	78fa      	ldrb	r2, [r7, #3]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	7ffb      	ldrb	r3, [r7, #31]
 8006304:	4618      	mov	r0, r3
 8006306:	3720      	adds	r7, #32
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USB_HC_StartXfer>:
 800630c:	b580      	push	{r7, lr}
 800630e:	b08c      	sub	sp, #48	; 0x30
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	623b      	str	r3, [r7, #32]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006328:	837b      	strh	r3, [r7, #26]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006332:	2b00      	cmp	r3, #0
 8006334:	d02d      	beq.n	8006392 <USB_HC_StartXfer+0x86>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	791b      	ldrb	r3, [r3, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d129      	bne.n	8006392 <USB_HC_StartXfer+0x86>
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d117      	bne.n	8006374 <USB_HC_StartXfer+0x68>
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	79db      	ldrb	r3, [r3, #7]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <USB_HC_StartXfer+0x48>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	79db      	ldrb	r3, [r3, #7]
 8006350:	2b02      	cmp	r3, #2
 8006352:	d10f      	bne.n	8006374 <USB_HC_StartXfer+0x68>
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	6a3a      	ldr	r2, [r7, #32]
 8006368:	440a      	add	r2, r1
 800636a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	60d3      	str	r3, [r2, #12]
 8006374:	79fb      	ldrb	r3, [r7, #7]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10b      	bne.n	8006392 <USB_HC_StartXfer+0x86>
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	795b      	ldrb	r3, [r3, #5]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d107      	bne.n	8006392 <USB_HC_StartXfer+0x86>
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	4619      	mov	r1, r3
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fa0f 	bl	80067ac <USB_DoPing>
 800638e:	2300      	movs	r3, #0
 8006390:	e0f8      	b.n	8006584 <USB_HC_StartXfer+0x278>
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d018      	beq.n	80063cc <USB_HC_StartXfer+0xc0>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	8912      	ldrh	r2, [r2, #8]
 80063a2:	4413      	add	r3, r2
 80063a4:	3b01      	subs	r3, #1
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	8912      	ldrh	r2, [r2, #8]
 80063aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80063ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063b2:	8b7b      	ldrh	r3, [r7, #26]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d90b      	bls.n	80063d0 <USB_HC_StartXfer+0xc4>
 80063b8:	8b7b      	ldrh	r3, [r7, #26]
 80063ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	8912      	ldrh	r2, [r2, #8]
 80063c2:	fb03 f202 	mul.w	r2, r3, r2
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	611a      	str	r2, [r3, #16]
 80063ca:	e001      	b.n	80063d0 <USB_HC_StartXfer+0xc4>
 80063cc:	2301      	movs	r3, #1
 80063ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	78db      	ldrb	r3, [r3, #3]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <USB_HC_StartXfer+0xdc>
 80063d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	8912      	ldrh	r2, [r2, #8]
 80063de:	fb03 f202 	mul.w	r2, r3, r2
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	611a      	str	r2, [r3, #16]
 80063e6:	e003      	b.n	80063f0 <USB_HC_StartXfer+0xe4>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	695a      	ldr	r2, [r3, #20]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	611a      	str	r2, [r3, #16]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80063f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063fa:	04d9      	lsls	r1, r3, #19
 80063fc:	4b63      	ldr	r3, [pc, #396]	; (800658c <USB_HC_StartXfer+0x280>)
 80063fe:	400b      	ands	r3, r1
 8006400:	431a      	orrs	r2, r3
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	7a9b      	ldrb	r3, [r3, #10]
 8006406:	075b      	lsls	r3, r3, #29
 8006408:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800640c:	69f9      	ldr	r1, [r7, #28]
 800640e:	0148      	lsls	r0, r1, #5
 8006410:	6a39      	ldr	r1, [r7, #32]
 8006412:	4401      	add	r1, r0
 8006414:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006418:	4313      	orrs	r3, r2
 800641a:	610b      	str	r3, [r1, #16]
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <USB_HC_StartXfer+0x12a>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	68d9      	ldr	r1, [r3, #12]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	4413      	add	r3, r2
 800642e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006432:	460a      	mov	r2, r1
 8006434:	615a      	str	r2, [r3, #20]
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	bf0c      	ite	eq
 8006446:	2301      	moveq	r3, #1
 8006448:	2300      	movne	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	767b      	strb	r3, [r7, #25]
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	6a3a      	ldr	r2, [r7, #32]
 8006462:	440a      	add	r2, r1
 8006464:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006468:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	7e7b      	ldrb	r3, [r7, #25]
 800647e:	075b      	lsls	r3, r3, #29
 8006480:	69f9      	ldr	r1, [r7, #28]
 8006482:	0148      	lsls	r0, r1, #5
 8006484:	6a39      	ldr	r1, [r7, #32]
 8006486:	4401      	add	r1, r0
 8006488:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800648c:	4313      	orrs	r3, r2
 800648e:	600b      	str	r3, [r1, #0]
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	4413      	add	r3, r2
 8006498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064a6:	613b      	str	r3, [r7, #16]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	78db      	ldrb	r3, [r3, #3]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d004      	beq.n	80064ba <USB_HC_StartXfer+0x1ae>
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	e003      	b.n	80064c2 <USB_HC_StartXfer+0x1b6>
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d6:	461a      	mov	r2, r3
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <USB_HC_StartXfer+0x1da>
 80064e2:	2300      	movs	r3, #0
 80064e4:	e04e      	b.n	8006584 <USB_HC_StartXfer+0x278>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	78db      	ldrb	r3, [r3, #3]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d149      	bne.n	8006582 <USB_HC_StartXfer+0x276>
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d045      	beq.n	8006582 <USB_HC_StartXfer+0x276>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	79db      	ldrb	r3, [r3, #7]
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d830      	bhi.n	8006560 <USB_HC_StartXfer+0x254>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <USB_HC_StartXfer+0x1f8>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	08006515 	.word	0x08006515
 8006508:	08006539 	.word	0x08006539
 800650c:	08006515 	.word	0x08006515
 8006510:	08006539 	.word	0x08006539
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	3303      	adds	r3, #3
 800651a:	089b      	lsrs	r3, r3, #2
 800651c:	82fb      	strh	r3, [r7, #22]
 800651e:	8afa      	ldrh	r2, [r7, #22]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	b29b      	uxth	r3, r3
 8006526:	429a      	cmp	r2, r3
 8006528:	d91c      	bls.n	8006564 <USB_HC_StartXfer+0x258>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	f043 0220 	orr.w	r2, r3, #32
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	619a      	str	r2, [r3, #24]
 8006536:	e015      	b.n	8006564 <USB_HC_StartXfer+0x258>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	3303      	adds	r3, #3
 800653e:	089b      	lsrs	r3, r3, #2
 8006540:	82fb      	strh	r3, [r7, #22]
 8006542:	8afa      	ldrh	r2, [r7, #22]
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	b29b      	uxth	r3, r3
 800654e:	429a      	cmp	r2, r3
 8006550:	d90a      	bls.n	8006568 <USB_HC_StartXfer+0x25c>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	619a      	str	r2, [r3, #24]
 800655e:	e003      	b.n	8006568 <USB_HC_StartXfer+0x25c>
 8006560:	bf00      	nop
 8006562:	e002      	b.n	800656a <USB_HC_StartXfer+0x25e>
 8006564:	bf00      	nop
 8006566:	e000      	b.n	800656a <USB_HC_StartXfer+0x25e>
 8006568:	bf00      	nop
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	68d9      	ldr	r1, [r3, #12]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	785a      	ldrb	r2, [r3, #1]
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	b29b      	uxth	r3, r3
 8006578:	2000      	movs	r0, #0
 800657a:	9000      	str	r0, [sp, #0]
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f7ff fb31 	bl	8005be4 <USB_WritePacket>
 8006582:	2300      	movs	r3, #0
 8006584:	4618      	mov	r0, r3
 8006586:	3728      	adds	r7, #40	; 0x28
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	1ff80000 	.word	0x1ff80000

08006590 <USB_HC_ReadInterrupt>:
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <USB_HC_Halt>:
 80065b2:	b480      	push	{r7}
 80065b4:	b089      	sub	sp, #36	; 0x24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	460b      	mov	r3, r1
 80065bc:	70fb      	strb	r3, [r7, #3]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	0c9b      	lsrs	r3, r3, #18
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	0fdb      	lsrs	r3, r3, #31
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d104      	bne.n	800660c <USB_HC_Halt+0x5a>
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <USB_HC_Halt+0x5a>
 8006608:	2300      	movs	r3, #0
 800660a:	e0c8      	b.n	800679e <USB_HC_Halt+0x1ec>
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <USB_HC_Halt+0x66>
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b02      	cmp	r3, #2
 8006616:	d163      	bne.n	80066e0 <USB_HC_Halt+0x12e>
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	440a      	add	r2, r1
 800662e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 80ab 	bne.w	800679c <USB_HC_Halt+0x1ea>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d133      	bne.n	80066ba <USB_HC_Halt+0x108>
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	4413      	add	r3, r2
 800665a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	0151      	lsls	r1, r2, #5
 8006664:	69fa      	ldr	r2, [r7, #28]
 8006666:	440a      	add	r2, r1
 8006668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800666c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	69fa      	ldr	r2, [r7, #28]
 8006686:	440a      	add	r2, r1
 8006688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800668c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3301      	adds	r3, #1
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800669e:	d81d      	bhi.n	80066dc <USB_HC_Halt+0x12a>
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066b6:	d0ec      	beq.n	8006692 <USB_HC_Halt+0xe0>
 80066b8:	e070      	b.n	800679c <USB_HC_Halt+0x1ea>
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	0151      	lsls	r1, r2, #5
 80066cc:	69fa      	ldr	r2, [r7, #28]
 80066ce:	440a      	add	r2, r1
 80066d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	e05f      	b.n	800679c <USB_HC_Halt+0x1ea>
 80066dc:	bf00      	nop
 80066de:	e05d      	b.n	800679c <USB_HC_Halt+0x1ea>
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d133      	bne.n	8006778 <USB_HC_Halt+0x1c6>
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	440a      	add	r2, r1
 8006726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800672a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	4413      	add	r3, r2
 8006738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	0151      	lsls	r1, r2, #5
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	440a      	add	r2, r1
 8006746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800674a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3301      	adds	r3, #1
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800675c:	d81d      	bhi.n	800679a <USB_HC_Halt+0x1e8>
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006774:	d0ec      	beq.n	8006750 <USB_HC_Halt+0x19e>
 8006776:	e011      	b.n	800679c <USB_HC_Halt+0x1ea>
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	69fa      	ldr	r2, [r7, #28]
 800678c:	440a      	add	r2, r1
 800678e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006792:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	e000      	b.n	800679c <USB_HC_Halt+0x1ea>
 800679a:	bf00      	nop
 800679c:	2300      	movs	r3, #0
 800679e:	4618      	mov	r0, r3
 80067a0:	3724      	adds	r7, #36	; 0x24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <USB_DoPing>:
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	70fb      	strb	r3, [r7, #3]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	2301      	movs	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	04da      	lsls	r2, r3, #19
 80067c8:	4b15      	ldr	r3, [pc, #84]	; (8006820 <USB_DoPing+0x74>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	0151      	lsls	r1, r2, #5
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	440a      	add	r2, r1
 80067d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067dc:	6113      	str	r3, [r2, #16]
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60bb      	str	r3, [r7, #8]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067f4:	60bb      	str	r3, [r7, #8]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067fc:	60bb      	str	r3, [r7, #8]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	4413      	add	r3, r2
 8006806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680a:	461a      	mov	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	2300      	movs	r3, #0
 8006812:	4618      	mov	r0, r3
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	1ff80000 	.word	0x1ff80000

08006824 <USB_StopHost>:
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	2300      	movs	r3, #0
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff f911 	bl	8005a60 <USB_DisableGlobalInt>
 800683e:	2110      	movs	r1, #16
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff f96b 	bl	8005b1c <USB_FlushTxFifo>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <USB_StopHost+0x2c>
 800684c:	2301      	movs	r3, #1
 800684e:	77fb      	strb	r3, [r7, #31]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7ff f997 	bl	8005b84 <USB_FlushRxFifo>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <USB_StopHost+0x3c>
 800685c:	2301      	movs	r3, #1
 800685e:	77fb      	strb	r3, [r7, #31]
 8006860:	2300      	movs	r3, #0
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	e01f      	b.n	80068a6 <USB_StopHost+0x82>
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	4413      	add	r3, r2
 800686e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	613b      	str	r3, [r7, #16]
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006884:	613b      	str	r3, [r7, #16]
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	4413      	add	r3, r2
 8006896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689a:	461a      	mov	r2, r3
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	6013      	str	r3, [r2, #0]
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	3301      	adds	r3, #1
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b0f      	cmp	r3, #15
 80068aa:	d9dc      	bls.n	8006866 <USB_StopHost+0x42>
 80068ac:	2300      	movs	r3, #0
 80068ae:	61bb      	str	r3, [r7, #24]
 80068b0:	e034      	b.n	800691c <USB_StopHost+0xf8>
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e6:	461a      	mov	r2, r3
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068f8:	d80c      	bhi.n	8006914 <USB_StopHost+0xf0>
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	4413      	add	r3, r2
 8006902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800690c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006910:	d0ec      	beq.n	80068ec <USB_StopHost+0xc8>
 8006912:	e000      	b.n	8006916 <USB_StopHost+0xf2>
 8006914:	bf00      	nop
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	3301      	adds	r3, #1
 800691a:	61bb      	str	r3, [r7, #24]
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b0f      	cmp	r3, #15
 8006920:	d9c7      	bls.n	80068b2 <USB_StopHost+0x8e>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006928:	461a      	mov	r2, r3
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	6153      	str	r3, [r2, #20]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f04f 32ff 	mov.w	r2, #4294967295
 8006936:	615a      	str	r2, [r3, #20]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff f880 	bl	8005a3e <USB_EnableGlobalInt>
 800693e:	7ffb      	ldrb	r3, [r7, #31]
 8006940:	4618      	mov	r0, r3
 8006942:	3720      	adds	r7, #32
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006948:	b590      	push	{r4, r7, lr}
 800694a:	b089      	sub	sp, #36	; 0x24
 800694c:	af04      	add	r7, sp, #16
 800694e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006950:	2301      	movs	r3, #1
 8006952:	2202      	movs	r2, #2
 8006954:	2102      	movs	r1, #2
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fc66 	bl	8007228 <USBH_FindInterface>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2bff      	cmp	r3, #255	; 0xff
 8006964:	d002      	beq.n	800696c <USBH_CDC_InterfaceInit+0x24>
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d901      	bls.n	8006970 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800696c:	2302      	movs	r3, #2
 800696e:	e13d      	b.n	8006bec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fc3b 	bl	80071f0 <USBH_SelectInterface>
 800697a:	4603      	mov	r3, r0
 800697c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006984:	2302      	movs	r3, #2
 8006986:	e131      	b.n	8006bec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800698e:	2050      	movs	r0, #80	; 0x50
 8006990:	f002 fad2 	bl	8008f38 <malloc>
 8006994:	4603      	mov	r3, r0
 8006996:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069a8:	2302      	movs	r3, #2
 80069aa:	e11f      	b.n	8006bec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069ac:	2250      	movs	r2, #80	; 0x50
 80069ae:	2100      	movs	r1, #0
 80069b0:	68b8      	ldr	r0, [r7, #8]
 80069b2:	f002 fb7d 	bl	80090b0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	211a      	movs	r1, #26
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	4413      	add	r3, r2
 80069c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	da15      	bge.n	80069fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	211a      	movs	r1, #26
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	4413      	add	r3, r2
 80069da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069de:	781a      	ldrb	r2, [r3, #0]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	211a      	movs	r1, #26
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069f4:	881a      	ldrh	r2, [r3, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 ff2e 	bl	8008862 <USBH_AllocPipe>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	7819      	ldrb	r1, [r3, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	7858      	ldrb	r0, [r3, #1]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	8952      	ldrh	r2, [r2, #10]
 8006a26:	9202      	str	r2, [sp, #8]
 8006a28:	2203      	movs	r2, #3
 8006a2a:	9201      	str	r2, [sp, #4]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	4623      	mov	r3, r4
 8006a30:	4602      	mov	r2, r0
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fee6 	bl	8008804 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f002 f9f5 	bl	8008e30 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a46:	2300      	movs	r3, #0
 8006a48:	2200      	movs	r2, #0
 8006a4a:	210a      	movs	r1, #10
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fbeb 	bl	8007228 <USBH_FindInterface>
 8006a52:	4603      	mov	r3, r0
 8006a54:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	2bff      	cmp	r3, #255	; 0xff
 8006a5a:	d002      	beq.n	8006a62 <USBH_CDC_InterfaceInit+0x11a>
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d901      	bls.n	8006a66 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a62:	2302      	movs	r3, #2
 8006a64:	e0c2      	b.n	8006bec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	211a      	movs	r1, #26
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	4413      	add	r3, r2
 8006a72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	b25b      	sxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da16      	bge.n	8006aac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	211a      	movs	r1, #26
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a8e:	781a      	ldrb	r2, [r3, #0]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	211a      	movs	r1, #26
 8006a9a:	fb01 f303 	mul.w	r3, r1, r3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006aa4:	881a      	ldrh	r2, [r3, #0]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	835a      	strh	r2, [r3, #26]
 8006aaa:	e015      	b.n	8006ad8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	211a      	movs	r1, #26
 8006ab2:	fb01 f303 	mul.w	r3, r1, r3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006abc:	781a      	ldrb	r2, [r3, #0]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	211a      	movs	r1, #26
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ad2:	881a      	ldrh	r2, [r3, #0]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	211a      	movs	r1, #26
 8006ade:	fb01 f303 	mul.w	r3, r1, r3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	b25b      	sxtb	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	da16      	bge.n	8006b1e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	211a      	movs	r1, #26
 8006af6:	fb01 f303 	mul.w	r3, r1, r3
 8006afa:	4413      	add	r3, r2
 8006afc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b00:	781a      	ldrb	r2, [r3, #0]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	211a      	movs	r1, #26
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b16:	881a      	ldrh	r2, [r3, #0]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	835a      	strh	r2, [r3, #26]
 8006b1c:	e015      	b.n	8006b4a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	211a      	movs	r1, #26
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	4413      	add	r3, r2
 8006b2a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b2e:	781a      	ldrb	r2, [r3, #0]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	211a      	movs	r1, #26
 8006b3a:	fb01 f303 	mul.w	r3, r1, r3
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b44:	881a      	ldrh	r2, [r3, #0]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	7b9b      	ldrb	r3, [r3, #14]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 fe86 	bl	8008862 <USBH_AllocPipe>
 8006b56:	4603      	mov	r3, r0
 8006b58:	461a      	mov	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	7bdb      	ldrb	r3, [r3, #15]
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 fe7c 	bl	8008862 <USBH_AllocPipe>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	7b59      	ldrb	r1, [r3, #13]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	7b98      	ldrb	r0, [r3, #14]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	8b12      	ldrh	r2, [r2, #24]
 8006b8a:	9202      	str	r2, [sp, #8]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	9201      	str	r2, [sp, #4]
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	4623      	mov	r3, r4
 8006b94:	4602      	mov	r2, r0
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f001 fe34 	bl	8008804 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	7b19      	ldrb	r1, [r3, #12]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	7bd8      	ldrb	r0, [r3, #15]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	8b52      	ldrh	r2, [r2, #26]
 8006bb4:	9202      	str	r2, [sp, #8]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	9201      	str	r2, [sp, #4]
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	4623      	mov	r3, r4
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fe1f 	bl	8008804 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	7b5b      	ldrb	r3, [r3, #13]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f002 f92a 	bl	8008e30 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	7b1b      	ldrb	r3, [r3, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	4619      	mov	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f002 f923 	bl	8008e30 <USBH_LL_SetToggle>

  return USBH_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd90      	pop	{r4, r7, pc}

08006bf4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00e      	beq.n	8006c2c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 fe14 	bl	8008842 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fe3f 	bl	80088a4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	7b1b      	ldrb	r3, [r3, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00e      	beq.n	8006c52 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	7b1b      	ldrb	r3, [r3, #12]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fe01 	bl	8008842 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	7b1b      	ldrb	r3, [r3, #12]
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f001 fe2c 	bl	80088a4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	7b5b      	ldrb	r3, [r3, #13]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00e      	beq.n	8006c78 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	7b5b      	ldrb	r3, [r3, #13]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 fdee 	bl	8008842 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	7b5b      	ldrb	r3, [r3, #13]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 fe19 	bl	80088a4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f002 f95b 	bl	8008f48 <free>
    phost->pActiveClass->pData = 0U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c98:	2200      	movs	r2, #0
 8006c9a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3340      	adds	r3, #64	; 0x40
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f8b1 	bl	8006e26 <GetLineCoding>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006cc8:	7afb      	ldrb	r3, [r7, #11]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d105      	bne.n	8006cda <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006cda:	7afb      	ldrb	r3, [r7, #11]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006cec:	2301      	movs	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d877      	bhi.n	8006df8 <USBH_CDC_Process+0x114>
 8006d08:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <USBH_CDC_Process+0x2c>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d25 	.word	0x08006d25
 8006d14:	08006d2b 	.word	0x08006d2b
 8006d18:	08006d5b 	.word	0x08006d5b
 8006d1c:	08006dcf 	.word	0x08006dcf
 8006d20:	08006ddd 	.word	0x08006ddd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
      break;
 8006d28:	e06d      	b.n	8006e06 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f897 	bl	8006e64 <SetLineCoding>
 8006d36:	4603      	mov	r3, r0
 8006d38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d3a:	7bbb      	ldrb	r3, [r7, #14]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2202      	movs	r2, #2
 8006d44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d48:	e058      	b.n	8006dfc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d055      	beq.n	8006dfc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2204      	movs	r2, #4
 8006d54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006d58:	e050      	b.n	8006dfc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	3340      	adds	r3, #64	; 0x40
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f860 	bl	8006e26 <GetLineCoding>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d126      	bne.n	8006dbe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d82:	791b      	ldrb	r3, [r3, #4]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d13b      	bne.n	8006e00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d92:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d133      	bne.n	8006e00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d12b      	bne.n	8006e00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d124      	bne.n	8006e00 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f958 	bl	800706c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006dbc:	e020      	b.n	8006e00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d01d      	beq.n	8006e00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2204      	movs	r2, #4
 8006dc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006dcc:	e018      	b.n	8006e00 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f867 	bl	8006ea2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f8da 	bl	8006f8e <CDC_ProcessReception>
      break;
 8006dda:	e014      	b.n	8006e06 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006ddc:	2100      	movs	r1, #0
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 ffef 	bl	8007dc2 <USBH_ClrFeature>
 8006de4:	4603      	mov	r3, r0
 8006de6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006df6:	e005      	b.n	8006e04 <USBH_CDC_Process+0x120>

    default:
      break;
 8006df8:	bf00      	nop
 8006dfa:	e004      	b.n	8006e06 <USBH_CDC_Process+0x122>
      break;
 8006dfc:	bf00      	nop
 8006dfe:	e002      	b.n	8006e06 <USBH_CDC_Process+0x122>
      break;
 8006e00:	bf00      	nop
 8006e02:	e000      	b.n	8006e06 <USBH_CDC_Process+0x122>
      break;
 8006e04:	bf00      	nop

  }

  return status;
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	22a1      	movs	r2, #161	; 0xa1
 8006e34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2221      	movs	r2, #33	; 0x21
 8006e3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2207      	movs	r2, #7
 8006e4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2207      	movs	r2, #7
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 fa83 	bl	8008360 <USBH_CtlReq>
 8006e5a:	4603      	mov	r3, r0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2221      	movs	r2, #33	; 0x21
 8006e72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2207      	movs	r2, #7
 8006e8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2207      	movs	r2, #7
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fa64 	bl	8008360 <USBH_CtlReq>
 8006e98:	4603      	mov	r3, r0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af02      	add	r7, sp, #8
 8006ea8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d002      	beq.n	8006ec8 <CDC_ProcessTransmission+0x26>
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d023      	beq.n	8006f0e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006ec6:	e05e      	b.n	8006f86 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	8b12      	ldrh	r2, [r2, #24]
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d90b      	bls.n	8006eec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	69d9      	ldr	r1, [r3, #28]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8b1a      	ldrh	r2, [r3, #24]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	7b5b      	ldrb	r3, [r3, #13]
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	9000      	str	r0, [sp, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 fc4a 	bl	800877e <USBH_BulkSendData>
 8006eea:	e00b      	b.n	8006f04 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	7b5b      	ldrb	r3, [r3, #13]
 8006efa:	2001      	movs	r0, #1
 8006efc:	9000      	str	r0, [sp, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f001 fc3d 	bl	800877e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f0c:	e03b      	b.n	8006f86 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	7b5b      	ldrb	r3, [r3, #13]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 ff61 	bl	8008ddc <USBH_LL_GetURBState>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f1e:	7afb      	ldrb	r3, [r7, #11]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d128      	bne.n	8006f76 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	8b12      	ldrh	r2, [r2, #24]
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d90e      	bls.n	8006f4e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	8b12      	ldrh	r2, [r2, #24]
 8006f38:	1a9a      	subs	r2, r3, r2
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	8b12      	ldrh	r2, [r2, #24]
 8006f46:	441a      	add	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	61da      	str	r2, [r3, #28]
 8006f4c:	e002      	b.n	8006f54 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d004      	beq.n	8006f66 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f64:	e00e      	b.n	8006f84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f868 	bl	8007044 <USBH_CDC_TransmitCallback>
      break;
 8006f74:	e006      	b.n	8006f84 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006f76:	7afb      	ldrb	r3, [r7, #11]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d103      	bne.n	8006f84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f84:	bf00      	nop
  }
}
 8006f86:	bf00      	nop
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b086      	sub	sp, #24
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d002      	beq.n	8006fb4 <CDC_ProcessReception+0x26>
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d00e      	beq.n	8006fd0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006fb2:	e043      	b.n	800703c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	6a19      	ldr	r1, [r3, #32]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	8b5a      	ldrh	r2, [r3, #26]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	7b1b      	ldrb	r3, [r3, #12]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 fc01 	bl	80087c8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2204      	movs	r2, #4
 8006fca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006fce:	e035      	b.n	800703c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	7b1b      	ldrb	r3, [r3, #12]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 ff00 	bl	8008ddc <USBH_LL_GetURBState>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006fe0:	7cfb      	ldrb	r3, [r7, #19]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d129      	bne.n	800703a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	7b1b      	ldrb	r3, [r3, #12]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 fe63 	bl	8008cb8 <USBH_LL_GetLastXferSize>
 8006ff2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d016      	beq.n	800702c <CDC_ProcessReception+0x9e>
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	8b5b      	ldrh	r3, [r3, #26]
 8007002:	461a      	mov	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4293      	cmp	r3, r2
 8007008:	d910      	bls.n	800702c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1ad2      	subs	r2, r2, r3
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	6a1a      	ldr	r2, [r3, #32]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	441a      	add	r2, r3
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2203      	movs	r2, #3
 8007026:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800702a:	e006      	b.n	800703a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f80f 	bl	8007058 <USBH_CDC_ReceiveCallback>
      break;
 800703a:	bf00      	nop
  }
}
 800703c:	bf00      	nop
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	4613      	mov	r3, r2
 800708c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007094:	2302      	movs	r3, #2
 8007096:	e029      	b.n	80070ec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	79fa      	ldrb	r2, [r7, #7]
 800709c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f81f 	bl	80070f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f001 fd33 	bl	8008b50 <USBH_LL_Init>

  return USBH_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	e009      	b.n	800711a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	33e0      	adds	r3, #224	; 0xe0
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	2200      	movs	r2, #0
 8007112:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3301      	adds	r3, #1
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2b0f      	cmp	r3, #15
 800711e:	d9f2      	bls.n	8007106 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e009      	b.n	800713a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007130:	2200      	movs	r2, #0
 8007132:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3301      	adds	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007140:	d3f1      	bcc.n	8007126 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2240      	movs	r2, #64	; 0x40
 8007166:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d016      	beq.n	80071de <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10e      	bne.n	80071d8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071c0:	1c59      	adds	r1, r3, #1
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	33de      	adds	r3, #222	; 0xde
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	73fb      	strb	r3, [r7, #15]
 80071d6:	e004      	b.n	80071e2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80071d8:	2302      	movs	r3, #2
 80071da:	73fb      	strb	r3, [r7, #15]
 80071dc:	e001      	b.n	80071e2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80071de:	2302      	movs	r3, #2
 80071e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007206:	78fa      	ldrb	r2, [r7, #3]
 8007208:	429a      	cmp	r2, r3
 800720a:	d204      	bcs.n	8007216 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	78fa      	ldrb	r2, [r7, #3]
 8007210:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007214:	e001      	b.n	800721a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007216:	2302      	movs	r3, #2
 8007218:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	4608      	mov	r0, r1
 8007232:	4611      	mov	r1, r2
 8007234:	461a      	mov	r2, r3
 8007236:	4603      	mov	r3, r0
 8007238:	70fb      	strb	r3, [r7, #3]
 800723a:	460b      	mov	r3, r1
 800723c:	70bb      	strb	r3, [r7, #2]
 800723e:	4613      	mov	r3, r2
 8007240:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007246:	2300      	movs	r3, #0
 8007248:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007250:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007252:	e025      	b.n	80072a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	221a      	movs	r2, #26
 8007258:	fb02 f303 	mul.w	r3, r2, r3
 800725c:	3308      	adds	r3, #8
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4413      	add	r3, r2
 8007262:	3302      	adds	r3, #2
 8007264:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	795b      	ldrb	r3, [r3, #5]
 800726a:	78fa      	ldrb	r2, [r7, #3]
 800726c:	429a      	cmp	r2, r3
 800726e:	d002      	beq.n	8007276 <USBH_FindInterface+0x4e>
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	2bff      	cmp	r3, #255	; 0xff
 8007274:	d111      	bne.n	800729a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800727a:	78ba      	ldrb	r2, [r7, #2]
 800727c:	429a      	cmp	r2, r3
 800727e:	d002      	beq.n	8007286 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007280:	78bb      	ldrb	r3, [r7, #2]
 8007282:	2bff      	cmp	r3, #255	; 0xff
 8007284:	d109      	bne.n	800729a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800728a:	787a      	ldrb	r2, [r7, #1]
 800728c:	429a      	cmp	r2, r3
 800728e:	d002      	beq.n	8007296 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007290:	787b      	ldrb	r3, [r7, #1]
 8007292:	2bff      	cmp	r3, #255	; 0xff
 8007294:	d101      	bne.n	800729a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007296:	7dfb      	ldrb	r3, [r7, #23]
 8007298:	e006      	b.n	80072a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	3301      	adds	r3, #1
 800729e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d9d6      	bls.n	8007254 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80072a6:	23ff      	movs	r3, #255	; 0xff
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	371c      	adds	r7, #28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 fc83 	bl	8008bc8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80072c2:	2101      	movs	r1, #1
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 fd9c 	bl	8008e02 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af04      	add	r7, sp, #16
 80072da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80072dc:	2302      	movs	r3, #2
 80072de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d102      	bne.n	80072f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2203      	movs	r2, #3
 80072f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b0b      	cmp	r3, #11
 80072fe:	f200 81be 	bhi.w	800767e <USBH_Process+0x3aa>
 8007302:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <USBH_Process+0x34>)
 8007304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007308:	08007339 	.word	0x08007339
 800730c:	0800736b 	.word	0x0800736b
 8007310:	080073d3 	.word	0x080073d3
 8007314:	08007619 	.word	0x08007619
 8007318:	0800767f 	.word	0x0800767f
 800731c:	08007477 	.word	0x08007477
 8007320:	080075bf 	.word	0x080075bf
 8007324:	080074ad 	.word	0x080074ad
 8007328:	080074cd 	.word	0x080074cd
 800732c:	080074ed 	.word	0x080074ed
 8007330:	08007531 	.word	0x08007531
 8007334:	08007601 	.word	0x08007601
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 819e 	beq.w	8007682 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800734c:	20c8      	movs	r0, #200	; 0xc8
 800734e:	f001 fd9f 	bl	8008e90 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 fc95 	bl	8008c82 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007368:	e18b      	b.n	8007682 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007370:	2b01      	cmp	r3, #1
 8007372:	d107      	bne.n	8007384 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007382:	e18d      	b.n	80076a0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800738a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800738e:	d914      	bls.n	80073ba <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007396:	3301      	adds	r3, #1
 8007398:	b2da      	uxtb	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d903      	bls.n	80073b2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	220d      	movs	r2, #13
 80073ae:	701a      	strb	r2, [r3, #0]
      break;
 80073b0:	e176      	b.n	80076a0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	701a      	strb	r2, [r3, #0]
      break;
 80073b8:	e172      	b.n	80076a0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073c0:	f103 020a 	add.w	r2, r3, #10
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80073ca:	200a      	movs	r0, #10
 80073cc:	f001 fd60 	bl	8008e90 <USBH_Delay>
      break;
 80073d0:	e166      	b.n	80076a0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d005      	beq.n	80073e8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073e2:	2104      	movs	r1, #4
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80073e8:	2064      	movs	r0, #100	; 0x64
 80073ea:	f001 fd51 	bl	8008e90 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f001 fc20 	bl	8008c34 <USBH_LL_GetSpeed>
 80073f4:	4603      	mov	r3, r0
 80073f6:	461a      	mov	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2205      	movs	r2, #5
 8007402:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007404:	2100      	movs	r1, #0
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 fa2b 	bl	8008862 <USBH_AllocPipe>
 800740c:	4603      	mov	r3, r0
 800740e:	461a      	mov	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007414:	2180      	movs	r1, #128	; 0x80
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 fa23 	bl	8008862 <USBH_AllocPipe>
 800741c:	4603      	mov	r3, r0
 800741e:	461a      	mov	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	7919      	ldrb	r1, [r3, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007438:	b292      	uxth	r2, r2
 800743a:	9202      	str	r2, [sp, #8]
 800743c:	2200      	movs	r2, #0
 800743e:	9201      	str	r2, [sp, #4]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	4603      	mov	r3, r0
 8007444:	2280      	movs	r2, #128	; 0x80
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 f9dc 	bl	8008804 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	7959      	ldrb	r1, [r3, #5]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007460:	b292      	uxth	r2, r2
 8007462:	9202      	str	r2, [sp, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	9201      	str	r2, [sp, #4]
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	4603      	mov	r3, r0
 800746c:	2200      	movs	r2, #0
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 f9c8 	bl	8008804 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007474:	e114      	b.n	80076a0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f918 	bl	80076ac <USBH_HandleEnum>
 800747c:	4603      	mov	r3, r0
 800747e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	f040 80fe 	bne.w	8007686 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007498:	2b01      	cmp	r3, #1
 800749a:	d103      	bne.n	80074a4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2208      	movs	r2, #8
 80074a0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074a2:	e0f0      	b.n	8007686 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2207      	movs	r2, #7
 80074a8:	701a      	strb	r2, [r3, #0]
      break;
 80074aa:	e0ec      	b.n	8007686 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 80e9 	beq.w	800768a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074be:	2101      	movs	r1, #1
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2208      	movs	r2, #8
 80074c8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80074ca:	e0de      	b.n	800768a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fc2c 	bl	8007d34 <USBH_SetCfg>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f040 80d5 	bne.w	800768e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2209      	movs	r2, #9
 80074e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074ea:	e0d0      	b.n	800768e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d016      	beq.n	8007528 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80074fa:	2101      	movs	r1, #1
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fc3c 	bl	8007d7a <USBH_SetFeature>
 8007502:	4603      	mov	r3, r0
 8007504:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007506:	7bbb      	ldrb	r3, [r7, #14]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d103      	bne.n	8007516 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	220a      	movs	r2, #10
 8007512:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007514:	e0bd      	b.n	8007692 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b03      	cmp	r3, #3
 800751c:	f040 80b9 	bne.w	8007692 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	220a      	movs	r2, #10
 8007524:	701a      	strb	r2, [r3, #0]
      break;
 8007526:	e0b4      	b.n	8007692 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	220a      	movs	r2, #10
 800752c:	701a      	strb	r2, [r3, #0]
      break;
 800752e:	e0b0      	b.n	8007692 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 80ad 	beq.w	8007696 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]
 8007548:	e016      	b.n	8007578 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800754a:	7bfa      	ldrb	r2, [r7, #15]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	32de      	adds	r2, #222	; 0xde
 8007550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007554:	791a      	ldrb	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800755c:	429a      	cmp	r2, r3
 800755e:	d108      	bne.n	8007572 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007560:	7bfa      	ldrb	r2, [r7, #15]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	32de      	adds	r2, #222	; 0xde
 8007566:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007570:	e005      	b.n	800757e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	3301      	adds	r3, #1
 8007576:	73fb      	strb	r3, [r7, #15]
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0e5      	beq.n	800754a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007584:	2b00      	cmp	r3, #0
 8007586:	d016      	beq.n	80075b6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d109      	bne.n	80075ae <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2206      	movs	r2, #6
 800759e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075a6:	2103      	movs	r1, #3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075ac:	e073      	b.n	8007696 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	220d      	movs	r2, #13
 80075b2:	701a      	strb	r2, [r3, #0]
      break;
 80075b4:	e06f      	b.n	8007696 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	220d      	movs	r2, #13
 80075ba:	701a      	strb	r2, [r3, #0]
      break;
 80075bc:	e06b      	b.n	8007696 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d017      	beq.n	80075f8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	4798      	blx	r3
 80075d4:	4603      	mov	r3, r0
 80075d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d103      	bne.n	80075e8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	220b      	movs	r2, #11
 80075e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075e6:	e058      	b.n	800769a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d154      	bne.n	800769a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	220d      	movs	r2, #13
 80075f4:	701a      	strb	r2, [r3, #0]
      break;
 80075f6:	e050      	b.n	800769a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	220d      	movs	r2, #13
 80075fc:	701a      	strb	r2, [r3, #0]
      break;
 80075fe:	e04c      	b.n	800769a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007606:	2b00      	cmp	r3, #0
 8007608:	d049      	beq.n	800769e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
      }
      break;
 8007616:	e042      	b.n	800769e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff fd67 	bl	80070f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d009      	beq.n	8007644 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007654:	2105      	movs	r1, #5
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b01      	cmp	r3, #1
 8007664:	d107      	bne.n	8007676 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff fe20 	bl	80072b4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007674:	e014      	b.n	80076a0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 faa6 	bl	8008bc8 <USBH_LL_Start>
      break;
 800767c:	e010      	b.n	80076a0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800767e:	bf00      	nop
 8007680:	e00e      	b.n	80076a0 <USBH_Process+0x3cc>
      break;
 8007682:	bf00      	nop
 8007684:	e00c      	b.n	80076a0 <USBH_Process+0x3cc>
      break;
 8007686:	bf00      	nop
 8007688:	e00a      	b.n	80076a0 <USBH_Process+0x3cc>
    break;
 800768a:	bf00      	nop
 800768c:	e008      	b.n	80076a0 <USBH_Process+0x3cc>
      break;
 800768e:	bf00      	nop
 8007690:	e006      	b.n	80076a0 <USBH_Process+0x3cc>
      break;
 8007692:	bf00      	nop
 8007694:	e004      	b.n	80076a0 <USBH_Process+0x3cc>
      break;
 8007696:	bf00      	nop
 8007698:	e002      	b.n	80076a0 <USBH_Process+0x3cc>
      break;
 800769a:	bf00      	nop
 800769c:	e000      	b.n	80076a0 <USBH_Process+0x3cc>
      break;
 800769e:	bf00      	nop
  }
  return USBH_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop

080076ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af04      	add	r7, sp, #16
 80076b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80076b8:	2301      	movs	r3, #1
 80076ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b07      	cmp	r3, #7
 80076c2:	f200 81c1 	bhi.w	8007a48 <USBH_HandleEnum+0x39c>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <USBH_HandleEnum+0x20>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	080076ed 	.word	0x080076ed
 80076d0:	080077ab 	.word	0x080077ab
 80076d4:	08007815 	.word	0x08007815
 80076d8:	080078a3 	.word	0x080078a3
 80076dc:	0800790d 	.word	0x0800790d
 80076e0:	0800797d 	.word	0x0800797d
 80076e4:	080079c3 	.word	0x080079c3
 80076e8:	08007a09 	.word	0x08007a09
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80076ec:	2108      	movs	r1, #8
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fa50 	bl	8007b94 <USBH_Get_DevDesc>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d130      	bne.n	8007760 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	7919      	ldrb	r1, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007722:	b292      	uxth	r2, r2
 8007724:	9202      	str	r2, [sp, #8]
 8007726:	2200      	movs	r2, #0
 8007728:	9201      	str	r2, [sp, #4]
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	4603      	mov	r3, r0
 800772e:	2280      	movs	r2, #128	; 0x80
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f867 	bl	8008804 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7959      	ldrb	r1, [r3, #5]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800774a:	b292      	uxth	r2, r2
 800774c:	9202      	str	r2, [sp, #8]
 800774e:	2200      	movs	r2, #0
 8007750:	9201      	str	r2, [sp, #4]
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	4603      	mov	r3, r0
 8007756:	2200      	movs	r2, #0
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 f853 	bl	8008804 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800775e:	e175      	b.n	8007a4c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	2b03      	cmp	r3, #3
 8007764:	f040 8172 	bne.w	8007a4c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800776e:	3301      	adds	r3, #1
 8007770:	b2da      	uxtb	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800777e:	2b03      	cmp	r3, #3
 8007780:	d903      	bls.n	800778a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	220d      	movs	r2, #13
 8007786:	701a      	strb	r2, [r3, #0]
      break;
 8007788:	e160      	b.n	8007a4c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	795b      	ldrb	r3, [r3, #5]
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 f887 	bl	80088a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	791b      	ldrb	r3, [r3, #4]
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 f881 	bl	80088a4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	701a      	strb	r2, [r3, #0]
      break;
 80077a8:	e150      	b.n	8007a4c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80077aa:	2112      	movs	r1, #18
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f9f1 	bl	8007b94 <USBH_Get_DevDesc>
 80077b2:	4603      	mov	r3, r0
 80077b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d103      	bne.n	80077c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077c2:	e145      	b.n	8007a50 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	f040 8142 	bne.w	8007a50 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077d2:	3301      	adds	r3, #1
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d903      	bls.n	80077ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	220d      	movs	r2, #13
 80077ea:	701a      	strb	r2, [r3, #0]
      break;
 80077ec:	e130      	b.n	8007a50 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	795b      	ldrb	r3, [r3, #5]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 f855 	bl	80088a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	791b      	ldrb	r3, [r3, #4]
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 f84f 	bl	80088a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	701a      	strb	r2, [r3, #0]
      break;
 8007812:	e11d      	b.n	8007a50 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007814:	2101      	movs	r1, #1
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fa68 	bl	8007cec <USBH_SetAddress>
 800781c:	4603      	mov	r3, r0
 800781e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d132      	bne.n	800788c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007826:	2002      	movs	r0, #2
 8007828:	f001 fb32 	bl	8008e90 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2203      	movs	r2, #3
 8007838:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	7919      	ldrb	r1, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800784e:	b292      	uxth	r2, r2
 8007850:	9202      	str	r2, [sp, #8]
 8007852:	2200      	movs	r2, #0
 8007854:	9201      	str	r2, [sp, #4]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	4603      	mov	r3, r0
 800785a:	2280      	movs	r2, #128	; 0x80
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 ffd1 	bl	8008804 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	7959      	ldrb	r1, [r3, #5]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007876:	b292      	uxth	r2, r2
 8007878:	9202      	str	r2, [sp, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	9201      	str	r2, [sp, #4]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	4603      	mov	r3, r0
 8007882:	2200      	movs	r2, #0
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 ffbd 	bl	8008804 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800788a:	e0e3      	b.n	8007a54 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	2b03      	cmp	r3, #3
 8007890:	f040 80e0 	bne.w	8007a54 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	220d      	movs	r2, #13
 8007898:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	705a      	strb	r2, [r3, #1]
      break;
 80078a0:	e0d8      	b.n	8007a54 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80078a2:	2109      	movs	r1, #9
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f99d 	bl	8007be4 <USBH_Get_CfgDesc>
 80078aa:	4603      	mov	r3, r0
 80078ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d103      	bne.n	80078bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2204      	movs	r2, #4
 80078b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078ba:	e0cd      	b.n	8007a58 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b03      	cmp	r3, #3
 80078c0:	f040 80ca 	bne.w	8007a58 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078ca:	3301      	adds	r3, #1
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d903      	bls.n	80078e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	220d      	movs	r2, #13
 80078e2:	701a      	strb	r2, [r3, #0]
      break;
 80078e4:	e0b8      	b.n	8007a58 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	795b      	ldrb	r3, [r3, #5]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 ffd9 	bl	80088a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	791b      	ldrb	r3, [r3, #4]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 ffd3 	bl	80088a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
      break;
 800790a:	e0a5      	b.n	8007a58 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f965 	bl	8007be4 <USBH_Get_CfgDesc>
 800791a:	4603      	mov	r3, r0
 800791c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d103      	bne.n	800792c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2205      	movs	r2, #5
 8007928:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800792a:	e097      	b.n	8007a5c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2b03      	cmp	r3, #3
 8007930:	f040 8094 	bne.w	8007a5c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800793a:	3301      	adds	r3, #1
 800793c:	b2da      	uxtb	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800794a:	2b03      	cmp	r3, #3
 800794c:	d903      	bls.n	8007956 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	220d      	movs	r2, #13
 8007952:	701a      	strb	r2, [r3, #0]
      break;
 8007954:	e082      	b.n	8007a5c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	795b      	ldrb	r3, [r3, #5]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 ffa1 	bl	80088a4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	791b      	ldrb	r3, [r3, #4]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 ff9b 	bl	80088a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
      break;
 800797a:	e06f      	b.n	8007a5c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007982:	2b00      	cmp	r3, #0
 8007984:	d019      	beq.n	80079ba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007992:	23ff      	movs	r3, #255	; 0xff
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f949 	bl	8007c2c <USBH_Get_StringDesc>
 800799a:	4603      	mov	r3, r0
 800799c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2206      	movs	r2, #6
 80079a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079aa:	e059      	b.n	8007a60 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d156      	bne.n	8007a60 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2206      	movs	r2, #6
 80079b6:	705a      	strb	r2, [r3, #1]
      break;
 80079b8:	e052      	b.n	8007a60 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2206      	movs	r2, #6
 80079be:	705a      	strb	r2, [r3, #1]
      break;
 80079c0:	e04e      	b.n	8007a60 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d019      	beq.n	8007a00 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079d8:	23ff      	movs	r3, #255	; 0xff
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f926 	bl	8007c2c <USBH_Get_StringDesc>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d103      	bne.n	80079f2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2207      	movs	r2, #7
 80079ee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079f0:	e038      	b.n	8007a64 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d135      	bne.n	8007a64 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2207      	movs	r2, #7
 80079fc:	705a      	strb	r2, [r3, #1]
      break;
 80079fe:	e031      	b.n	8007a64 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2207      	movs	r2, #7
 8007a04:	705a      	strb	r2, [r3, #1]
      break;
 8007a06:	e02d      	b.n	8007a64 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d017      	beq.n	8007a42 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a1e:	23ff      	movs	r3, #255	; 0xff
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f903 	bl	8007c2c <USBH_Get_StringDesc>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a34:	e018      	b.n	8007a68 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d115      	bne.n	8007a68 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a40:	e012      	b.n	8007a68 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
      break;
 8007a46:	e00f      	b.n	8007a68 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007a48:	bf00      	nop
 8007a4a:	e00e      	b.n	8007a6a <USBH_HandleEnum+0x3be>
      break;
 8007a4c:	bf00      	nop
 8007a4e:	e00c      	b.n	8007a6a <USBH_HandleEnum+0x3be>
      break;
 8007a50:	bf00      	nop
 8007a52:	e00a      	b.n	8007a6a <USBH_HandleEnum+0x3be>
      break;
 8007a54:	bf00      	nop
 8007a56:	e008      	b.n	8007a6a <USBH_HandleEnum+0x3be>
      break;
 8007a58:	bf00      	nop
 8007a5a:	e006      	b.n	8007a6a <USBH_HandleEnum+0x3be>
      break;
 8007a5c:	bf00      	nop
 8007a5e:	e004      	b.n	8007a6a <USBH_HandleEnum+0x3be>
      break;
 8007a60:	bf00      	nop
 8007a62:	e002      	b.n	8007a6a <USBH_HandleEnum+0x3be>
      break;
 8007a64:	bf00      	nop
 8007a66:	e000      	b.n	8007a6a <USBH_HandleEnum+0x3be>
      break;
 8007a68:	bf00      	nop
  }
  return Status;
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f804 	bl	8007ab6 <USBH_HandleSof>
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b0b      	cmp	r3, #11
 8007ac6:	d10a      	bne.n	8007ade <USBH_HandleSof+0x28>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
  }
}
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007af6:	bf00      	nop
}
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b12:	bf00      	nop
}
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 f846 	bl	8008bfe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	791b      	ldrb	r3, [r3, #4]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fe93 	bl	80088a4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	795b      	ldrb	r3, [r3, #5]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fe8d 	bl	80088a4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ba6:	78fb      	ldrb	r3, [r7, #3]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f864 	bl	8007c82 <USBH_GetDescriptor>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	b292      	uxth	r2, r2
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	f000 f919 	bl	8007e0c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	331c      	adds	r3, #28
 8007bf4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007bf6:	887b      	ldrh	r3, [r7, #2]
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c00:	2100      	movs	r1, #0
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f83d 	bl	8007c82 <USBH_GetDescriptor>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d107      	bne.n	8007c22 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007c12:	887b      	ldrh	r3, [r7, #2]
 8007c14:	461a      	mov	r2, r3
 8007c16:	68b9      	ldr	r1, [r7, #8]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f989 	bl	8007f30 <USBH_ParseCfgDesc>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b088      	sub	sp, #32
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	607a      	str	r2, [r7, #4]
 8007c36:	461a      	mov	r2, r3
 8007c38:	460b      	mov	r3, r1
 8007c3a:	72fb      	strb	r3, [r7, #11]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007c40:	7afb      	ldrb	r3, [r7, #11]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c48:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007c50:	893b      	ldrh	r3, [r7, #8]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	460b      	mov	r3, r1
 8007c56:	2100      	movs	r1, #0
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f812 	bl	8007c82 <USBH_GetDescriptor>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d107      	bne.n	8007c78 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c6e:	893a      	ldrh	r2, [r7, #8]
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fb26 	bl	80082c4 <USBH_ParseStringDesc>
  }

  return status;
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	607b      	str	r3, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	72fb      	strb	r3, [r7, #11]
 8007c90:	4613      	mov	r3, r2
 8007c92:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	789b      	ldrb	r3, [r3, #2]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d11c      	bne.n	8007cd6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c9c:	7afb      	ldrb	r3, [r7, #11]
 8007c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2206      	movs	r2, #6
 8007cac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	893a      	ldrh	r2, [r7, #8]
 8007cb2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007cb4:	893b      	ldrh	r3, [r7, #8]
 8007cb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cbe:	d104      	bne.n	8007cca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f240 4209 	movw	r2, #1033	; 0x409
 8007cc6:	829a      	strh	r2, [r3, #20]
 8007cc8:	e002      	b.n	8007cd0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8b3a      	ldrh	r2, [r7, #24]
 8007cd4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007cd6:	8b3b      	ldrh	r3, [r7, #24]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f000 fb3f 	bl	8008360 <USBH_CtlReq>
 8007ce2:	4603      	mov	r3, r0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	789b      	ldrb	r3, [r3, #2]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d10f      	bne.n	8007d20 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2205      	movs	r2, #5
 8007d0a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d20:	2200      	movs	r2, #0
 8007d22:	2100      	movs	r1, #0
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fb1b 	bl	8008360 <USBH_CtlReq>
 8007d2a:	4603      	mov	r3, r0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	789b      	ldrb	r3, [r3, #2]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d10e      	bne.n	8007d66 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2209      	movs	r2, #9
 8007d52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	887a      	ldrh	r2, [r7, #2]
 8007d58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d66:	2200      	movs	r2, #0
 8007d68:	2100      	movs	r1, #0
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 faf8 	bl	8008360 <USBH_CtlReq>
 8007d70:	4603      	mov	r3, r0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	460b      	mov	r3, r1
 8007d84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	789b      	ldrb	r3, [r3, #2]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d10f      	bne.n	8007dae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2203      	movs	r2, #3
 8007d98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007dae:	2200      	movs	r2, #0
 8007db0:	2100      	movs	r1, #0
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fad4 	bl	8008360 <USBH_CtlReq>
 8007db8:	4603      	mov	r3, r0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	789b      	ldrb	r3, [r3, #2]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d10f      	bne.n	8007df6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2202      	movs	r2, #2
 8007dda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007df6:	2200      	movs	r2, #0
 8007df8:	2100      	movs	r1, #0
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fab0 	bl	8008360 <USBH_CtlReq>
 8007e00:	4603      	mov	r3, r0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	4613      	mov	r3, r2
 8007e18:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	781a      	ldrb	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	785a      	ldrb	r2, [r3, #1]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	3303      	adds	r3, #3
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	021b      	lsls	r3, r3, #8
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	791a      	ldrb	r2, [r3, #4]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	795a      	ldrb	r2, [r3, #5]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	799a      	ldrb	r2, [r3, #6]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	79da      	ldrb	r2, [r3, #7]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	79db      	ldrb	r3, [r3, #7]
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	dc0f      	bgt.n	8007e8e <USBH_ParseDevDesc+0x82>
 8007e6e:	2b08      	cmp	r3, #8
 8007e70:	db14      	blt.n	8007e9c <USBH_ParseDevDesc+0x90>
 8007e72:	3b08      	subs	r3, #8
 8007e74:	4a2d      	ldr	r2, [pc, #180]	; (8007f2c <USBH_ParseDevDesc+0x120>)
 8007e76:	fa22 f303 	lsr.w	r3, r2, r3
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bf14      	ite	ne
 8007e82:	2301      	movne	r3, #1
 8007e84:	2300      	moveq	r3, #0
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d102      	bne.n	8007e92 <USBH_ParseDevDesc+0x86>
 8007e8c:	e006      	b.n	8007e9c <USBH_ParseDevDesc+0x90>
 8007e8e:	2b40      	cmp	r3, #64	; 0x40
 8007e90:	d104      	bne.n	8007e9c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	79da      	ldrb	r2, [r3, #7]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	71da      	strb	r2, [r3, #7]
      break;
 8007e9a:	e003      	b.n	8007ea4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2240      	movs	r2, #64	; 0x40
 8007ea0:	71da      	strb	r2, [r3, #7]
      break;
 8007ea2:	bf00      	nop
  }

  if (length > 8U)
 8007ea4:	88fb      	ldrh	r3, [r7, #6]
 8007ea6:	2b08      	cmp	r3, #8
 8007ea8:	d939      	bls.n	8007f1e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	3308      	adds	r3, #8
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	3309      	adds	r3, #9
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	021b      	lsls	r3, r3, #8
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	330a      	adds	r3, #10
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	330b      	adds	r3, #11
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	4313      	orrs	r3, r2
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	330c      	adds	r3, #12
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	330d      	adds	r3, #13
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	7b9a      	ldrb	r2, [r3, #14]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	7bda      	ldrb	r2, [r3, #15]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	7c1a      	ldrb	r2, [r3, #16]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	7c5a      	ldrb	r2, [r3, #17]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	745a      	strb	r2, [r3, #17]
  }
}
 8007f1e:	bf00      	nop
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	01000101 	.word	0x01000101

08007f30 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08c      	sub	sp, #48	; 0x30
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f44:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	781a      	ldrb	r2, [r3, #0]
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	785a      	ldrb	r2, [r3, #1]
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	3302      	adds	r3, #2
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	3303      	adds	r3, #3
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	4313      	orrs	r3, r2
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f8c:	bf28      	it	cs
 8007f8e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	791a      	ldrb	r2, [r3, #4]
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	795a      	ldrb	r2, [r3, #5]
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	799a      	ldrb	r2, [r3, #6]
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	79da      	ldrb	r2, [r3, #7]
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	7a1a      	ldrb	r2, [r3, #8]
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2b09      	cmp	r3, #9
 8007fc6:	d002      	beq.n	8007fce <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	2209      	movs	r2, #9
 8007fcc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007fce:	88fb      	ldrh	r3, [r7, #6]
 8007fd0:	2b09      	cmp	r3, #9
 8007fd2:	f240 809d 	bls.w	8008110 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007fd6:	2309      	movs	r3, #9
 8007fd8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fde:	e081      	b.n	80080e4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fe0:	f107 0316 	add.w	r3, r7, #22
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fe8:	f000 f99f 	bl	800832a <USBH_GetNextDesc>
 8007fec:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff0:	785b      	ldrb	r3, [r3, #1]
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d176      	bne.n	80080e4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b09      	cmp	r3, #9
 8007ffc:	d002      	beq.n	8008004 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008000:	2209      	movs	r2, #9
 8008002:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008008:	221a      	movs	r2, #26
 800800a:	fb02 f303 	mul.w	r3, r2, r3
 800800e:	3308      	adds	r3, #8
 8008010:	6a3a      	ldr	r2, [r7, #32]
 8008012:	4413      	add	r3, r2
 8008014:	3302      	adds	r3, #2
 8008016:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800801a:	69f8      	ldr	r0, [r7, #28]
 800801c:	f000 f87e 	bl	800811c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008026:	2300      	movs	r3, #0
 8008028:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800802a:	e043      	b.n	80080b4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800802c:	f107 0316 	add.w	r3, r7, #22
 8008030:	4619      	mov	r1, r3
 8008032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008034:	f000 f979 	bl	800832a <USBH_GetNextDesc>
 8008038:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	785b      	ldrb	r3, [r3, #1]
 800803e:	2b05      	cmp	r3, #5
 8008040:	d138      	bne.n	80080b4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	795b      	ldrb	r3, [r3, #5]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d10f      	bne.n	800806a <USBH_ParseCfgDesc+0x13a>
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	799b      	ldrb	r3, [r3, #6]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d10b      	bne.n	800806a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	79db      	ldrb	r3, [r3, #7]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10f      	bne.n	800807a <USBH_ParseCfgDesc+0x14a>
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b09      	cmp	r3, #9
 8008060:	d00b      	beq.n	800807a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	2209      	movs	r2, #9
 8008066:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008068:	e007      	b.n	800807a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2b07      	cmp	r3, #7
 8008070:	d004      	beq.n	800807c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	2207      	movs	r2, #7
 8008076:	701a      	strb	r2, [r3, #0]
 8008078:	e000      	b.n	800807c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800807a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800807c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008080:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008084:	3201      	adds	r2, #1
 8008086:	00d2      	lsls	r2, r2, #3
 8008088:	211a      	movs	r1, #26
 800808a:	fb01 f303 	mul.w	r3, r1, r3
 800808e:	4413      	add	r3, r2
 8008090:	3308      	adds	r3, #8
 8008092:	6a3a      	ldr	r2, [r7, #32]
 8008094:	4413      	add	r3, r2
 8008096:	3304      	adds	r3, #4
 8008098:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800809a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800809c:	69b9      	ldr	r1, [r7, #24]
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 f86b 	bl	800817a <USBH_ParseEPDesc>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80080aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080ae:	3301      	adds	r3, #1
 80080b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	791b      	ldrb	r3, [r3, #4]
 80080b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80080bc:	429a      	cmp	r2, r3
 80080be:	d204      	bcs.n	80080ca <USBH_ParseCfgDesc+0x19a>
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	885a      	ldrh	r2, [r3, #2]
 80080c4:	8afb      	ldrh	r3, [r7, #22]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d8b0      	bhi.n	800802c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	791b      	ldrb	r3, [r3, #4]
 80080ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d201      	bcs.n	80080da <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e01c      	b.n	8008114 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80080da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080de:	3301      	adds	r3, #1
 80080e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d805      	bhi.n	80080f8 <USBH_ParseCfgDesc+0x1c8>
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	885a      	ldrh	r2, [r3, #2]
 80080f0:	8afb      	ldrh	r3, [r7, #22]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	f63f af74 	bhi.w	8007fe0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	791b      	ldrb	r3, [r3, #4]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	bf28      	it	cs
 8008100:	2302      	movcs	r3, #2
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008108:	429a      	cmp	r2, r3
 800810a:	d201      	bcs.n	8008110 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800810c:	2303      	movs	r3, #3
 800810e:	e001      	b.n	8008114 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008110:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008114:	4618      	mov	r0, r3
 8008116:	3730      	adds	r7, #48	; 0x30
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781a      	ldrb	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	785a      	ldrb	r2, [r3, #1]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	789a      	ldrb	r2, [r3, #2]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	78da      	ldrb	r2, [r3, #3]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	791a      	ldrb	r2, [r3, #4]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	795a      	ldrb	r2, [r3, #5]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	799a      	ldrb	r2, [r3, #6]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	79da      	ldrb	r2, [r3, #7]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	7a1a      	ldrb	r2, [r3, #8]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	721a      	strb	r2, [r3, #8]
}
 800816e:	bf00      	nop
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800817a:	b480      	push	{r7}
 800817c:	b087      	sub	sp, #28
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	781a      	ldrb	r2, [r3, #0]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	785a      	ldrb	r2, [r3, #1]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	789a      	ldrb	r2, [r3, #2]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	78da      	ldrb	r2, [r3, #3]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3304      	adds	r3, #4
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3305      	adds	r3, #5
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	021b      	lsls	r3, r3, #8
 80081bc:	b29b      	uxth	r3, r3
 80081be:	4313      	orrs	r3, r2
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	799a      	ldrb	r2, [r3, #6]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	889b      	ldrh	r3, [r3, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d102      	bne.n	80081dc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80081d6:	2303      	movs	r3, #3
 80081d8:	75fb      	strb	r3, [r7, #23]
 80081da:	e033      	b.n	8008244 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	889b      	ldrh	r3, [r3, #4]
 80081e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80081e4:	f023 0307 	bic.w	r3, r3, #7
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	889b      	ldrh	r3, [r3, #4]
 80081f2:	b21a      	sxth	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3304      	adds	r3, #4
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	b299      	uxth	r1, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3305      	adds	r3, #5
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	b29b      	uxth	r3, r3
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	b29b      	uxth	r3, r3
 8008208:	430b      	orrs	r3, r1
 800820a:	b29b      	uxth	r3, r3
 800820c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008210:	2b00      	cmp	r3, #0
 8008212:	d110      	bne.n	8008236 <USBH_ParseEPDesc+0xbc>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3304      	adds	r3, #4
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	b299      	uxth	r1, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3305      	adds	r3, #5
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	021b      	lsls	r3, r3, #8
 8008226:	b29b      	uxth	r3, r3
 8008228:	430b      	orrs	r3, r1
 800822a:	b29b      	uxth	r3, r3
 800822c:	b21b      	sxth	r3, r3
 800822e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008232:	b21b      	sxth	r3, r3
 8008234:	e001      	b.n	800823a <USBH_ParseEPDesc+0xc0>
 8008236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800823a:	4313      	orrs	r3, r2
 800823c:	b21b      	sxth	r3, r3
 800823e:	b29a      	uxth	r2, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800824a:	2b00      	cmp	r3, #0
 800824c:	d116      	bne.n	800827c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	78db      	ldrb	r3, [r3, #3]
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	2b01      	cmp	r3, #1
 8008258:	d005      	beq.n	8008266 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	78db      	ldrb	r3, [r3, #3]
 800825e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008262:	2b03      	cmp	r3, #3
 8008264:	d127      	bne.n	80082b6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	799b      	ldrb	r3, [r3, #6]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <USBH_ParseEPDesc+0xfc>
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	799b      	ldrb	r3, [r3, #6]
 8008272:	2b10      	cmp	r3, #16
 8008274:	d91f      	bls.n	80082b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008276:	2303      	movs	r3, #3
 8008278:	75fb      	strb	r3, [r7, #23]
 800827a:	e01c      	b.n	80082b6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	78db      	ldrb	r3, [r3, #3]
 8008280:	f003 0303 	and.w	r3, r3, #3
 8008284:	2b01      	cmp	r3, #1
 8008286:	d10a      	bne.n	800829e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	799b      	ldrb	r3, [r3, #6]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <USBH_ParseEPDesc+0x11e>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	799b      	ldrb	r3, [r3, #6]
 8008294:	2b10      	cmp	r3, #16
 8008296:	d90e      	bls.n	80082b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008298:	2303      	movs	r3, #3
 800829a:	75fb      	strb	r3, [r7, #23]
 800829c:	e00b      	b.n	80082b6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	78db      	ldrb	r3, [r3, #3]
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d105      	bne.n	80082b6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	799b      	ldrb	r3, [r3, #6]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80082b2:	2303      	movs	r3, #3
 80082b4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	371c      	adds	r7, #28
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3301      	adds	r3, #1
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d120      	bne.n	800831e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	1e9a      	subs	r2, r3, #2
 80082e2:	88fb      	ldrh	r3, [r7, #6]
 80082e4:	4293      	cmp	r3, r2
 80082e6:	bf28      	it	cs
 80082e8:	4613      	movcs	r3, r2
 80082ea:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	3302      	adds	r3, #2
 80082f0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80082f2:	2300      	movs	r3, #0
 80082f4:	82fb      	strh	r3, [r7, #22]
 80082f6:	e00b      	b.n	8008310 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80082f8:	8afb      	ldrh	r3, [r7, #22]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	4413      	add	r3, r2
 80082fe:	781a      	ldrb	r2, [r3, #0]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	3301      	adds	r3, #1
 8008308:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800830a:	8afb      	ldrh	r3, [r7, #22]
 800830c:	3302      	adds	r3, #2
 800830e:	82fb      	strh	r3, [r7, #22]
 8008310:	8afa      	ldrh	r2, [r7, #22]
 8008312:	8abb      	ldrh	r3, [r7, #20]
 8008314:	429a      	cmp	r2, r3
 8008316:	d3ef      	bcc.n	80082f8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2200      	movs	r2, #0
 800831c:	701a      	strb	r2, [r3, #0]
  }
}
 800831e:	bf00      	nop
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800832a:	b480      	push	{r7}
 800832c:	b085      	sub	sp, #20
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	881a      	ldrh	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	4413      	add	r3, r2
 8008340:	b29a      	uxth	r2, r3
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4413      	add	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008352:	68fb      	ldr	r3, [r7, #12]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800836e:	2301      	movs	r3, #1
 8008370:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	789b      	ldrb	r3, [r3, #2]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d002      	beq.n	8008380 <USBH_CtlReq+0x20>
 800837a:	2b02      	cmp	r3, #2
 800837c:	d00f      	beq.n	800839e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800837e:	e027      	b.n	80083d0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	88fa      	ldrh	r2, [r7, #6]
 800838a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2201      	movs	r2, #1
 8008390:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2202      	movs	r2, #2
 8008396:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008398:	2301      	movs	r3, #1
 800839a:	75fb      	strb	r3, [r7, #23]
      break;
 800839c:	e018      	b.n	80083d0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 f81c 	bl	80083dc <USBH_HandleControl>
 80083a4:	4603      	mov	r3, r0
 80083a6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <USBH_CtlReq+0x54>
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d106      	bne.n	80083c2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2201      	movs	r2, #1
 80083b8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	761a      	strb	r2, [r3, #24]
      break;
 80083c0:	e005      	b.n	80083ce <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d102      	bne.n	80083ce <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2201      	movs	r2, #1
 80083cc:	709a      	strb	r2, [r3, #2]
      break;
 80083ce:	bf00      	nop
  }
  return status;
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80083e4:	2301      	movs	r3, #1
 80083e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	7e1b      	ldrb	r3, [r3, #24]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	2b0a      	cmp	r3, #10
 80083f4:	f200 8156 	bhi.w	80086a4 <USBH_HandleControl+0x2c8>
 80083f8:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <USBH_HandleControl+0x24>)
 80083fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fe:	bf00      	nop
 8008400:	0800842d 	.word	0x0800842d
 8008404:	08008447 	.word	0x08008447
 8008408:	080084b1 	.word	0x080084b1
 800840c:	080084d7 	.word	0x080084d7
 8008410:	0800850f 	.word	0x0800850f
 8008414:	08008539 	.word	0x08008539
 8008418:	0800858b 	.word	0x0800858b
 800841c:	080085ad 	.word	0x080085ad
 8008420:	080085e9 	.word	0x080085e9
 8008424:	0800860f 	.word	0x0800860f
 8008428:	0800864d 	.word	0x0800864d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f103 0110 	add.w	r1, r3, #16
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	795b      	ldrb	r3, [r3, #5]
 8008436:	461a      	mov	r2, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f943 	bl	80086c4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2202      	movs	r2, #2
 8008442:	761a      	strb	r2, [r3, #24]
      break;
 8008444:	e139      	b.n	80086ba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	795b      	ldrb	r3, [r3, #5]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fcc5 	bl	8008ddc <USBH_LL_GetURBState>
 8008452:	4603      	mov	r3, r0
 8008454:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d11e      	bne.n	800849a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7c1b      	ldrb	r3, [r3, #16]
 8008460:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008464:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	8adb      	ldrh	r3, [r3, #22]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800846e:	7b7b      	ldrb	r3, [r7, #13]
 8008470:	2b80      	cmp	r3, #128	; 0x80
 8008472:	d103      	bne.n	800847c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2203      	movs	r2, #3
 8008478:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800847a:	e115      	b.n	80086a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2205      	movs	r2, #5
 8008480:	761a      	strb	r2, [r3, #24]
      break;
 8008482:	e111      	b.n	80086a8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008484:	7b7b      	ldrb	r3, [r7, #13]
 8008486:	2b80      	cmp	r3, #128	; 0x80
 8008488:	d103      	bne.n	8008492 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2209      	movs	r2, #9
 800848e:	761a      	strb	r2, [r3, #24]
      break;
 8008490:	e10a      	b.n	80086a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2207      	movs	r2, #7
 8008496:	761a      	strb	r2, [r3, #24]
      break;
 8008498:	e106      	b.n	80086a8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	2b04      	cmp	r3, #4
 800849e:	d003      	beq.n	80084a8 <USBH_HandleControl+0xcc>
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	f040 8100 	bne.w	80086a8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	220b      	movs	r2, #11
 80084ac:	761a      	strb	r2, [r3, #24]
      break;
 80084ae:	e0fb      	b.n	80086a8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6899      	ldr	r1, [r3, #8]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	899a      	ldrh	r2, [r3, #12]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	791b      	ldrb	r3, [r3, #4]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f93a 	bl	8008742 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2204      	movs	r2, #4
 80084d2:	761a      	strb	r2, [r3, #24]
      break;
 80084d4:	e0f1      	b.n	80086ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	791b      	ldrb	r3, [r3, #4]
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fc7d 	bl	8008ddc <USBH_LL_GetURBState>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d102      	bne.n	80084f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2209      	movs	r2, #9
 80084f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	2b05      	cmp	r3, #5
 80084f6:	d102      	bne.n	80084fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80084f8:	2303      	movs	r3, #3
 80084fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084fc:	e0d6      	b.n	80086ac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	2b04      	cmp	r3, #4
 8008502:	f040 80d3 	bne.w	80086ac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	220b      	movs	r2, #11
 800850a:	761a      	strb	r2, [r3, #24]
      break;
 800850c:	e0ce      	b.n	80086ac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6899      	ldr	r1, [r3, #8]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	899a      	ldrh	r2, [r3, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	795b      	ldrb	r3, [r3, #5]
 800851a:	2001      	movs	r0, #1
 800851c:	9000      	str	r0, [sp, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f8ea 	bl	80086f8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800852a:	b29a      	uxth	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2206      	movs	r2, #6
 8008534:	761a      	strb	r2, [r3, #24]
      break;
 8008536:	e0c0      	b.n	80086ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	795b      	ldrb	r3, [r3, #5]
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fc4c 	bl	8008ddc <USBH_LL_GetURBState>
 8008544:	4603      	mov	r3, r0
 8008546:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d103      	bne.n	8008556 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2207      	movs	r2, #7
 8008552:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008554:	e0ac      	b.n	80086b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	2b05      	cmp	r3, #5
 800855a:	d105      	bne.n	8008568 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	220c      	movs	r2, #12
 8008560:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008562:	2303      	movs	r3, #3
 8008564:	73fb      	strb	r3, [r7, #15]
      break;
 8008566:	e0a3      	b.n	80086b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b02      	cmp	r3, #2
 800856c:	d103      	bne.n	8008576 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2205      	movs	r2, #5
 8008572:	761a      	strb	r2, [r3, #24]
      break;
 8008574:	e09c      	b.n	80086b0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	2b04      	cmp	r3, #4
 800857a:	f040 8099 	bne.w	80086b0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	220b      	movs	r2, #11
 8008582:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008584:	2302      	movs	r3, #2
 8008586:	73fb      	strb	r3, [r7, #15]
      break;
 8008588:	e092      	b.n	80086b0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	791b      	ldrb	r3, [r3, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	2100      	movs	r1, #0
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f8d5 	bl	8008742 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800859e:	b29a      	uxth	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2208      	movs	r2, #8
 80085a8:	761a      	strb	r2, [r3, #24]

      break;
 80085aa:	e086      	b.n	80086ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	791b      	ldrb	r3, [r3, #4]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fc12 	bl	8008ddc <USBH_LL_GetURBState>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d105      	bne.n	80085ce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	220d      	movs	r2, #13
 80085c6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085cc:	e072      	b.n	80086b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d103      	bne.n	80085dc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	220b      	movs	r2, #11
 80085d8:	761a      	strb	r2, [r3, #24]
      break;
 80085da:	e06b      	b.n	80086b4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2b05      	cmp	r3, #5
 80085e0:	d168      	bne.n	80086b4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80085e2:	2303      	movs	r3, #3
 80085e4:	73fb      	strb	r3, [r7, #15]
      break;
 80085e6:	e065      	b.n	80086b4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	795b      	ldrb	r3, [r3, #5]
 80085ec:	2201      	movs	r2, #1
 80085ee:	9200      	str	r2, [sp, #0]
 80085f0:	2200      	movs	r2, #0
 80085f2:	2100      	movs	r1, #0
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f87f 	bl	80086f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008600:	b29a      	uxth	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	220a      	movs	r2, #10
 800860a:	761a      	strb	r2, [r3, #24]
      break;
 800860c:	e055      	b.n	80086ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	795b      	ldrb	r3, [r3, #5]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fbe1 	bl	8008ddc <USBH_LL_GetURBState>
 800861a:	4603      	mov	r3, r0
 800861c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d105      	bne.n	8008630 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	220d      	movs	r2, #13
 800862c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800862e:	e043      	b.n	80086b8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d103      	bne.n	800863e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2209      	movs	r2, #9
 800863a:	761a      	strb	r2, [r3, #24]
      break;
 800863c:	e03c      	b.n	80086b8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b04      	cmp	r3, #4
 8008642:	d139      	bne.n	80086b8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	220b      	movs	r2, #11
 8008648:	761a      	strb	r2, [r3, #24]
      break;
 800864a:	e035      	b.n	80086b8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7e5b      	ldrb	r3, [r3, #25]
 8008650:	3301      	adds	r3, #1
 8008652:	b2da      	uxtb	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	765a      	strb	r2, [r3, #25]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	7e5b      	ldrb	r3, [r3, #25]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d806      	bhi.n	800866e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800866c:	e025      	b.n	80086ba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008674:	2106      	movs	r1, #6
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	795b      	ldrb	r3, [r3, #5]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f90c 	bl	80088a4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	791b      	ldrb	r3, [r3, #4]
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f906 	bl	80088a4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800869e:	2302      	movs	r3, #2
 80086a0:	73fb      	strb	r3, [r7, #15]
      break;
 80086a2:	e00a      	b.n	80086ba <USBH_HandleControl+0x2de>

    default:
      break;
 80086a4:	bf00      	nop
 80086a6:	e008      	b.n	80086ba <USBH_HandleControl+0x2de>
      break;
 80086a8:	bf00      	nop
 80086aa:	e006      	b.n	80086ba <USBH_HandleControl+0x2de>
      break;
 80086ac:	bf00      	nop
 80086ae:	e004      	b.n	80086ba <USBH_HandleControl+0x2de>
      break;
 80086b0:	bf00      	nop
 80086b2:	e002      	b.n	80086ba <USBH_HandleControl+0x2de>
      break;
 80086b4:	bf00      	nop
 80086b6:	e000      	b.n	80086ba <USBH_HandleControl+0x2de>
      break;
 80086b8:	bf00      	nop
  }

  return status;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b088      	sub	sp, #32
 80086c8:	af04      	add	r7, sp, #16
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086d2:	79f9      	ldrb	r1, [r7, #7]
 80086d4:	2300      	movs	r3, #0
 80086d6:	9303      	str	r3, [sp, #12]
 80086d8:	2308      	movs	r3, #8
 80086da:	9302      	str	r3, [sp, #8]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	2300      	movs	r3, #0
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	2300      	movs	r3, #0
 80086e6:	2200      	movs	r2, #0
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 fb46 	bl	8008d7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af04      	add	r7, sp, #16
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4611      	mov	r1, r2
 8008704:	461a      	mov	r2, r3
 8008706:	460b      	mov	r3, r1
 8008708:	80fb      	strh	r3, [r7, #6]
 800870a:	4613      	mov	r3, r2
 800870c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800871c:	7979      	ldrb	r1, [r7, #5]
 800871e:	7e3b      	ldrb	r3, [r7, #24]
 8008720:	9303      	str	r3, [sp, #12]
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	9302      	str	r3, [sp, #8]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	2301      	movs	r3, #1
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	2300      	movs	r3, #0
 8008730:	2200      	movs	r2, #0
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 fb21 	bl	8008d7a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b088      	sub	sp, #32
 8008746:	af04      	add	r7, sp, #16
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	4611      	mov	r1, r2
 800874e:	461a      	mov	r2, r3
 8008750:	460b      	mov	r3, r1
 8008752:	80fb      	strh	r3, [r7, #6]
 8008754:	4613      	mov	r3, r2
 8008756:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008758:	7979      	ldrb	r1, [r7, #5]
 800875a:	2300      	movs	r3, #0
 800875c:	9303      	str	r3, [sp, #12]
 800875e:	88fb      	ldrh	r3, [r7, #6]
 8008760:	9302      	str	r3, [sp, #8]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	2301      	movs	r3, #1
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	2300      	movs	r3, #0
 800876c:	2201      	movs	r2, #1
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 fb03 	bl	8008d7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008774:	2300      	movs	r3, #0

}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b088      	sub	sp, #32
 8008782:	af04      	add	r7, sp, #16
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	4611      	mov	r1, r2
 800878a:	461a      	mov	r2, r3
 800878c:	460b      	mov	r3, r1
 800878e:	80fb      	strh	r3, [r7, #6]
 8008790:	4613      	mov	r3, r2
 8008792:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800879e:	2300      	movs	r3, #0
 80087a0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087a2:	7979      	ldrb	r1, [r7, #5]
 80087a4:	7e3b      	ldrb	r3, [r7, #24]
 80087a6:	9303      	str	r3, [sp, #12]
 80087a8:	88fb      	ldrh	r3, [r7, #6]
 80087aa:	9302      	str	r3, [sp, #8]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	9301      	str	r3, [sp, #4]
 80087b0:	2301      	movs	r3, #1
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	2302      	movs	r3, #2
 80087b6:	2200      	movs	r2, #0
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f000 fade 	bl	8008d7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af04      	add	r7, sp, #16
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4611      	mov	r1, r2
 80087d4:	461a      	mov	r2, r3
 80087d6:	460b      	mov	r3, r1
 80087d8:	80fb      	strh	r3, [r7, #6]
 80087da:	4613      	mov	r3, r2
 80087dc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087de:	7979      	ldrb	r1, [r7, #5]
 80087e0:	2300      	movs	r3, #0
 80087e2:	9303      	str	r3, [sp, #12]
 80087e4:	88fb      	ldrh	r3, [r7, #6]
 80087e6:	9302      	str	r3, [sp, #8]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	9301      	str	r3, [sp, #4]
 80087ec:	2301      	movs	r3, #1
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	2302      	movs	r3, #2
 80087f2:	2201      	movs	r2, #1
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 fac0 	bl	8008d7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af04      	add	r7, sp, #16
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	4608      	mov	r0, r1
 800880e:	4611      	mov	r1, r2
 8008810:	461a      	mov	r2, r3
 8008812:	4603      	mov	r3, r0
 8008814:	70fb      	strb	r3, [r7, #3]
 8008816:	460b      	mov	r3, r1
 8008818:	70bb      	strb	r3, [r7, #2]
 800881a:	4613      	mov	r3, r2
 800881c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800881e:	7878      	ldrb	r0, [r7, #1]
 8008820:	78ba      	ldrb	r2, [r7, #2]
 8008822:	78f9      	ldrb	r1, [r7, #3]
 8008824:	8b3b      	ldrh	r3, [r7, #24]
 8008826:	9302      	str	r3, [sp, #8]
 8008828:	7d3b      	ldrb	r3, [r7, #20]
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	7c3b      	ldrb	r3, [r7, #16]
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	4603      	mov	r3, r0
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fa53 	bl	8008cde <USBH_LL_OpenPipe>

  return USBH_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fa72 	bl	8008d3c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	460b      	mov	r3, r1
 800886c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f836 	bl	80088e0 <USBH_GetFreePipe>
 8008874:	4603      	mov	r3, r0
 8008876:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008878:	89fb      	ldrh	r3, [r7, #14]
 800887a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800887e:	4293      	cmp	r3, r2
 8008880:	d00a      	beq.n	8008898 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008882:	78fa      	ldrb	r2, [r7, #3]
 8008884:	89fb      	ldrh	r3, [r7, #14]
 8008886:	f003 030f 	and.w	r3, r3, #15
 800888a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	33e0      	adds	r3, #224	; 0xe0
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008898:	89fb      	ldrh	r3, [r7, #14]
 800889a:	b2db      	uxtb	r3, r3
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	2b0f      	cmp	r3, #15
 80088b4:	d80d      	bhi.n	80088d2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	33e0      	adds	r3, #224	; 0xe0
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	33e0      	adds	r3, #224	; 0xe0
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	440b      	add	r3, r1
 80088d0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
 80088f0:	e00f      	b.n	8008912 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	33e0      	adds	r3, #224	; 0xe0
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d102      	bne.n	800890c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	b29b      	uxth	r3, r3
 800890a:	e007      	b.n	800891c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	3301      	adds	r3, #1
 8008910:	73fb      	strb	r3, [r7, #15]
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	2b0f      	cmp	r3, #15
 8008916:	d9ec      	bls.n	80088f2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008918:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800892c:	2201      	movs	r2, #1
 800892e:	490e      	ldr	r1, [pc, #56]	; (8008968 <MX_USB_HOST_Init+0x40>)
 8008930:	480e      	ldr	r0, [pc, #56]	; (800896c <MX_USB_HOST_Init+0x44>)
 8008932:	f7fe fba5 	bl	8007080 <USBH_Init>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800893c:	f7f8 f8a6 	bl	8000a8c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008940:	490b      	ldr	r1, [pc, #44]	; (8008970 <MX_USB_HOST_Init+0x48>)
 8008942:	480a      	ldr	r0, [pc, #40]	; (800896c <MX_USB_HOST_Init+0x44>)
 8008944:	f7fe fc2a 	bl	800719c <USBH_RegisterClass>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800894e:	f7f8 f89d 	bl	8000a8c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008952:	4806      	ldr	r0, [pc, #24]	; (800896c <MX_USB_HOST_Init+0x44>)
 8008954:	f7fe fcae 	bl	80072b4 <USBH_Start>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800895e:	f7f8 f895 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008962:	bf00      	nop
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	08008989 	.word	0x08008989
 800896c:	20000220 	.word	0x20000220
 8008970:	2000000c 	.word	0x2000000c

08008974 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008978:	4802      	ldr	r0, [pc, #8]	; (8008984 <MX_USB_HOST_Process+0x10>)
 800897a:	f7fe fcab 	bl	80072d4 <USBH_Process>
}
 800897e:	bf00      	nop
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000220 	.word	0x20000220

08008988 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	3b01      	subs	r3, #1
 8008998:	2b04      	cmp	r3, #4
 800899a:	d819      	bhi.n	80089d0 <USBH_UserProcess+0x48>
 800899c:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <USBH_UserProcess+0x1c>)
 800899e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a2:	bf00      	nop
 80089a4:	080089d1 	.word	0x080089d1
 80089a8:	080089c1 	.word	0x080089c1
 80089ac:	080089d1 	.word	0x080089d1
 80089b0:	080089c9 	.word	0x080089c9
 80089b4:	080089b9 	.word	0x080089b9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80089b8:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <USBH_UserProcess+0x58>)
 80089ba:	2203      	movs	r2, #3
 80089bc:	701a      	strb	r2, [r3, #0]
  break;
 80089be:	e008      	b.n	80089d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80089c0:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <USBH_UserProcess+0x58>)
 80089c2:	2202      	movs	r2, #2
 80089c4:	701a      	strb	r2, [r3, #0]
  break;
 80089c6:	e004      	b.n	80089d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80089c8:	4b05      	ldr	r3, [pc, #20]	; (80089e0 <USBH_UserProcess+0x58>)
 80089ca:	2201      	movs	r2, #1
 80089cc:	701a      	strb	r2, [r3, #0]
  break;
 80089ce:	e000      	b.n	80089d2 <USBH_UserProcess+0x4a>

  default:
  break;
 80089d0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	200005f8 	.word	0x200005f8

080089e4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08a      	sub	sp, #40	; 0x28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089ec:	f107 0314 	add.w	r3, r7, #20
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	605a      	str	r2, [r3, #4]
 80089f6:	609a      	str	r2, [r3, #8]
 80089f8:	60da      	str	r2, [r3, #12]
 80089fa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a04:	d147      	bne.n	8008a96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a06:	2300      	movs	r3, #0
 8008a08:	613b      	str	r3, [r7, #16]
 8008a0a:	4b25      	ldr	r3, [pc, #148]	; (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0e:	4a24      	ldr	r2, [pc, #144]	; (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a10:	f043 0301 	orr.w	r3, r3, #1
 8008a14:	6313      	str	r3, [r2, #48]	; 0x30
 8008a16:	4b22      	ldr	r3, [pc, #136]	; (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	613b      	str	r3, [r7, #16]
 8008a20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a30:	f107 0314 	add.w	r3, r7, #20
 8008a34:	4619      	mov	r1, r3
 8008a36:	481b      	ldr	r0, [pc, #108]	; (8008aa4 <HAL_HCD_MspInit+0xc0>)
 8008a38:	f7f8 fcee 	bl	8001418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a42:	2302      	movs	r3, #2
 8008a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a4e:	230a      	movs	r3, #10
 8008a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a52:	f107 0314 	add.w	r3, r7, #20
 8008a56:	4619      	mov	r1, r3
 8008a58:	4812      	ldr	r0, [pc, #72]	; (8008aa4 <HAL_HCD_MspInit+0xc0>)
 8008a5a:	f7f8 fcdd 	bl	8001418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a5e:	4b10      	ldr	r3, [pc, #64]	; (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a62:	4a0f      	ldr	r2, [pc, #60]	; (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a68:	6353      	str	r3, [r2, #52]	; 0x34
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a72:	4a0b      	ldr	r2, [pc, #44]	; (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a78:	6453      	str	r3, [r2, #68]	; 0x44
 8008a7a:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <HAL_HCD_MspInit+0xbc>)
 8008a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a86:	2200      	movs	r2, #0
 8008a88:	2100      	movs	r1, #0
 8008a8a:	2043      	movs	r0, #67	; 0x43
 8008a8c:	f7f8 fbfb 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a90:	2043      	movs	r0, #67	; 0x43
 8008a92:	f7f8 fc14 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a96:	bf00      	nop
 8008a98:	3728      	adds	r7, #40	; 0x28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	40023800 	.word	0x40023800
 8008aa4:	40020000 	.word	0x40020000

08008aa8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe ffeb 	bl	8007a92 <USBH_LL_IncTimer>
}
 8008abc:	bf00      	nop
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff f823 	bl	8007b1e <USBH_LL_Connect>
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff f82c 	bl	8007b4c <USBH_LL_Disconnect>
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe ffdd 	bl	8007ae6 <USBH_LL_PortEnabled>
}
 8008b2c:	bf00      	nop
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe ffdd 	bl	8007b02 <USBH_LL_PortDisabled>
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d12a      	bne.n	8008bb8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008b62:	4a18      	ldr	r2, [pc, #96]	; (8008bc4 <USBH_LL_Init+0x74>)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a15      	ldr	r2, [pc, #84]	; (8008bc4 <USBH_LL_Init+0x74>)
 8008b6e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b72:	4b14      	ldr	r3, [pc, #80]	; (8008bc4 <USBH_LL_Init+0x74>)
 8008b74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b78:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008b7a:	4b12      	ldr	r3, [pc, #72]	; (8008bc4 <USBH_LL_Init+0x74>)
 8008b7c:	2208      	movs	r2, #8
 8008b7e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008b80:	4b10      	ldr	r3, [pc, #64]	; (8008bc4 <USBH_LL_Init+0x74>)
 8008b82:	2201      	movs	r2, #1
 8008b84:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b86:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <USBH_LL_Init+0x74>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	; (8008bc4 <USBH_LL_Init+0x74>)
 8008b8e:	2202      	movs	r2, #2
 8008b90:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b92:	4b0c      	ldr	r3, [pc, #48]	; (8008bc4 <USBH_LL_Init+0x74>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008b98:	480a      	ldr	r0, [pc, #40]	; (8008bc4 <USBH_LL_Init+0x74>)
 8008b9a:	f7f8 fdda 	bl	8001752 <HAL_HCD_Init>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008ba4:	f7f7 ff72 	bl	8000a8c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ba8:	4806      	ldr	r0, [pc, #24]	; (8008bc4 <USBH_LL_Init+0x74>)
 8008baa:	f7f9 f9be 	bl	8001f2a <HAL_HCD_GetCurrentFrame>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7fe ff5e 	bl	8007a74 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	200005fc 	.word	0x200005fc

08008bc8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7f9 f92d 	bl	8001e3e <HAL_HCD_Start>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 f95c 	bl	8008ea8 <USBH_Get_USB_Status>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7f9 f935 	bl	8001e84 <HAL_HCD_Stop>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 f941 	bl	8008ea8 <USBH_Get_USB_Status>
 8008c26:	4603      	mov	r3, r0
 8008c28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7f9 f97d 	bl	8001f46 <HAL_HCD_GetCurrentSpeed>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d00c      	beq.n	8008c6c <USBH_LL_GetSpeed+0x38>
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d80d      	bhi.n	8008c72 <USBH_LL_GetSpeed+0x3e>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <USBH_LL_GetSpeed+0x2c>
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d003      	beq.n	8008c66 <USBH_LL_GetSpeed+0x32>
 8008c5e:	e008      	b.n	8008c72 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
    break;
 8008c64:	e008      	b.n	8008c78 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008c66:	2301      	movs	r3, #1
 8008c68:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6a:	e005      	b.n	8008c78 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c70:	e002      	b.n	8008c78 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008c72:	2301      	movs	r3, #1
 8008c74:	73fb      	strb	r3, [r7, #15]
    break;
 8008c76:	bf00      	nop
  }
  return  speed;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7f9 f910 	bl	8001ebe <HAL_HCD_ResetPort>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 f8ff 	bl	8008ea8 <USBH_Get_USB_Status>
 8008caa:	4603      	mov	r3, r0
 8008cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cca:	78fa      	ldrb	r2, [r7, #3]
 8008ccc:	4611      	mov	r1, r2
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7f9 f917 	bl	8001f02 <HAL_HCD_HC_GetXferCount>
 8008cd4:	4603      	mov	r3, r0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cde:	b590      	push	{r4, r7, lr}
 8008ce0:	b089      	sub	sp, #36	; 0x24
 8008ce2:	af04      	add	r7, sp, #16
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	4608      	mov	r0, r1
 8008ce8:	4611      	mov	r1, r2
 8008cea:	461a      	mov	r2, r3
 8008cec:	4603      	mov	r3, r0
 8008cee:	70fb      	strb	r3, [r7, #3]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70bb      	strb	r3, [r7, #2]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008d06:	787c      	ldrb	r4, [r7, #1]
 8008d08:	78ba      	ldrb	r2, [r7, #2]
 8008d0a:	78f9      	ldrb	r1, [r7, #3]
 8008d0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d0e:	9302      	str	r3, [sp, #8]
 8008d10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d14:	9301      	str	r3, [sp, #4]
 8008d16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	f7f8 fd7a 	bl	8001816 <HAL_HCD_HC_Init>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 f8bd 	bl	8008ea8 <USBH_Get_USB_Status>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd90      	pop	{r4, r7, pc}

08008d3c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d56:	78fa      	ldrb	r2, [r7, #3]
 8008d58:	4611      	mov	r1, r2
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7f8 fdea 	bl	8001934 <HAL_HCD_HC_Halt>
 8008d60:	4603      	mov	r3, r0
 8008d62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 f89e 	bl	8008ea8 <USBH_Get_USB_Status>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008d7a:	b590      	push	{r4, r7, lr}
 8008d7c:	b089      	sub	sp, #36	; 0x24
 8008d7e:	af04      	add	r7, sp, #16
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	461a      	mov	r2, r3
 8008d88:	4603      	mov	r3, r0
 8008d8a:	70fb      	strb	r3, [r7, #3]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70bb      	strb	r3, [r7, #2]
 8008d90:	4613      	mov	r3, r2
 8008d92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008da2:	787c      	ldrb	r4, [r7, #1]
 8008da4:	78ba      	ldrb	r2, [r7, #2]
 8008da6:	78f9      	ldrb	r1, [r7, #3]
 8008da8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008dac:	9303      	str	r3, [sp, #12]
 8008dae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008db0:	9302      	str	r3, [sp, #8]
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	4623      	mov	r3, r4
 8008dbe:	f7f8 fddd 	bl	800197c <HAL_HCD_HC_SubmitRequest>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 f86d 	bl	8008ea8 <USBH_Get_USB_Status>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd90      	pop	{r4, r7, pc}

08008ddc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dee:	78fa      	ldrb	r2, [r7, #3]
 8008df0:	4611      	mov	r1, r2
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7f9 f871 	bl	8001eda <HAL_HCD_HC_GetURBState>
 8008df8:	4603      	mov	r3, r0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d103      	bne.n	8008e20 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008e18:	78fb      	ldrb	r3, [r7, #3]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f870 	bl	8008f00 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008e20:	20c8      	movs	r0, #200	; 0xc8
 8008e22:	f7f8 f931 	bl	8001088 <HAL_Delay>
  return USBH_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e46:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	212c      	movs	r1, #44	; 0x2c
 8008e4e:	fb01 f303 	mul.w	r3, r1, r3
 8008e52:	4413      	add	r3, r2
 8008e54:	333b      	adds	r3, #59	; 0x3b
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d009      	beq.n	8008e70 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008e5c:	78fb      	ldrb	r3, [r7, #3]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	212c      	movs	r1, #44	; 0x2c
 8008e62:	fb01 f303 	mul.w	r3, r1, r3
 8008e66:	4413      	add	r3, r2
 8008e68:	3354      	adds	r3, #84	; 0x54
 8008e6a:	78ba      	ldrb	r2, [r7, #2]
 8008e6c:	701a      	strb	r2, [r3, #0]
 8008e6e:	e008      	b.n	8008e82 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	212c      	movs	r1, #44	; 0x2c
 8008e76:	fb01 f303 	mul.w	r3, r1, r3
 8008e7a:	4413      	add	r3, r2
 8008e7c:	3355      	adds	r3, #85	; 0x55
 8008e7e:	78ba      	ldrb	r2, [r7, #2]
 8008e80:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7f8 f8f5 	bl	8001088 <HAL_Delay>
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d817      	bhi.n	8008eec <USBH_Get_USB_Status+0x44>
 8008ebc:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <USBH_Get_USB_Status+0x1c>)
 8008ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec2:	bf00      	nop
 8008ec4:	08008ed5 	.word	0x08008ed5
 8008ec8:	08008edb 	.word	0x08008edb
 8008ecc:	08008ee1 	.word	0x08008ee1
 8008ed0:	08008ee7 	.word	0x08008ee7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed8:	e00b      	b.n	8008ef2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008eda:	2302      	movs	r3, #2
 8008edc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ede:	e008      	b.n	8008ef2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee4:	e005      	b.n	8008ef2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eea:	e002      	b.n	8008ef2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008eec:	2302      	movs	r3, #2
 8008eee:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef0:	bf00      	nop
  }
  return usb_status;
 8008ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <MX_DriverVbusFS>:
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	71fb      	strb	r3, [r7, #7]
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	73fb      	strb	r3, [r7, #15]
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d102      	bne.n	8008f1a <MX_DriverVbusFS+0x1a>
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]
 8008f18:	e001      	b.n	8008f1e <MX_DriverVbusFS+0x1e>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	73fb      	strb	r3, [r7, #15]
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	461a      	mov	r2, r3
 8008f22:	2101      	movs	r1, #1
 8008f24:	4803      	ldr	r0, [pc, #12]	; (8008f34 <MX_DriverVbusFS+0x34>)
 8008f26:	f7f8 fbfb 	bl	8001720 <HAL_GPIO_WritePin>
 8008f2a:	bf00      	nop
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	40020800 	.word	0x40020800

08008f38 <malloc>:
 8008f38:	4b02      	ldr	r3, [pc, #8]	; (8008f44 <malloc+0xc>)
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	f000 b82b 	b.w	8008f98 <_malloc_r>
 8008f42:	bf00      	nop
 8008f44:	20000078 	.word	0x20000078

08008f48 <free>:
 8008f48:	4b02      	ldr	r3, [pc, #8]	; (8008f54 <free+0xc>)
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	6818      	ldr	r0, [r3, #0]
 8008f4e:	f000 b8f3 	b.w	8009138 <_free_r>
 8008f52:	bf00      	nop
 8008f54:	20000078 	.word	0x20000078

08008f58 <sbrk_aligned>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	4e0e      	ldr	r6, [pc, #56]	; (8008f94 <sbrk_aligned+0x3c>)
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	6831      	ldr	r1, [r6, #0]
 8008f60:	4605      	mov	r5, r0
 8008f62:	b911      	cbnz	r1, 8008f6a <sbrk_aligned+0x12>
 8008f64:	f000 f8ac 	bl	80090c0 <_sbrk_r>
 8008f68:	6030      	str	r0, [r6, #0]
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f000 f8a7 	bl	80090c0 <_sbrk_r>
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	d00a      	beq.n	8008f8c <sbrk_aligned+0x34>
 8008f76:	1cc4      	adds	r4, r0, #3
 8008f78:	f024 0403 	bic.w	r4, r4, #3
 8008f7c:	42a0      	cmp	r0, r4
 8008f7e:	d007      	beq.n	8008f90 <sbrk_aligned+0x38>
 8008f80:	1a21      	subs	r1, r4, r0
 8008f82:	4628      	mov	r0, r5
 8008f84:	f000 f89c 	bl	80090c0 <_sbrk_r>
 8008f88:	3001      	adds	r0, #1
 8008f8a:	d101      	bne.n	8008f90 <sbrk_aligned+0x38>
 8008f8c:	f04f 34ff 	mov.w	r4, #4294967295
 8008f90:	4620      	mov	r0, r4
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	20000904 	.word	0x20000904

08008f98 <_malloc_r>:
 8008f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f9c:	1ccd      	adds	r5, r1, #3
 8008f9e:	f025 0503 	bic.w	r5, r5, #3
 8008fa2:	3508      	adds	r5, #8
 8008fa4:	2d0c      	cmp	r5, #12
 8008fa6:	bf38      	it	cc
 8008fa8:	250c      	movcc	r5, #12
 8008faa:	2d00      	cmp	r5, #0
 8008fac:	4607      	mov	r7, r0
 8008fae:	db01      	blt.n	8008fb4 <_malloc_r+0x1c>
 8008fb0:	42a9      	cmp	r1, r5
 8008fb2:	d905      	bls.n	8008fc0 <_malloc_r+0x28>
 8008fb4:	230c      	movs	r3, #12
 8008fb6:	603b      	str	r3, [r7, #0]
 8008fb8:	2600      	movs	r6, #0
 8008fba:	4630      	mov	r0, r6
 8008fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009094 <_malloc_r+0xfc>
 8008fc4:	f000 f868 	bl	8009098 <__malloc_lock>
 8008fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8008fcc:	461c      	mov	r4, r3
 8008fce:	bb5c      	cbnz	r4, 8009028 <_malloc_r+0x90>
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	f7ff ffc0 	bl	8008f58 <sbrk_aligned>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	4604      	mov	r4, r0
 8008fdc:	d155      	bne.n	800908a <_malloc_r+0xf2>
 8008fde:	f8d8 4000 	ldr.w	r4, [r8]
 8008fe2:	4626      	mov	r6, r4
 8008fe4:	2e00      	cmp	r6, #0
 8008fe6:	d145      	bne.n	8009074 <_malloc_r+0xdc>
 8008fe8:	2c00      	cmp	r4, #0
 8008fea:	d048      	beq.n	800907e <_malloc_r+0xe6>
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	eb04 0903 	add.w	r9, r4, r3
 8008ff6:	f000 f863 	bl	80090c0 <_sbrk_r>
 8008ffa:	4581      	cmp	r9, r0
 8008ffc:	d13f      	bne.n	800907e <_malloc_r+0xe6>
 8008ffe:	6821      	ldr	r1, [r4, #0]
 8009000:	1a6d      	subs	r5, r5, r1
 8009002:	4629      	mov	r1, r5
 8009004:	4638      	mov	r0, r7
 8009006:	f7ff ffa7 	bl	8008f58 <sbrk_aligned>
 800900a:	3001      	adds	r0, #1
 800900c:	d037      	beq.n	800907e <_malloc_r+0xe6>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	442b      	add	r3, r5
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	f8d8 3000 	ldr.w	r3, [r8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d038      	beq.n	800908e <_malloc_r+0xf6>
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	42a2      	cmp	r2, r4
 8009020:	d12b      	bne.n	800907a <_malloc_r+0xe2>
 8009022:	2200      	movs	r2, #0
 8009024:	605a      	str	r2, [r3, #4]
 8009026:	e00f      	b.n	8009048 <_malloc_r+0xb0>
 8009028:	6822      	ldr	r2, [r4, #0]
 800902a:	1b52      	subs	r2, r2, r5
 800902c:	d41f      	bmi.n	800906e <_malloc_r+0xd6>
 800902e:	2a0b      	cmp	r2, #11
 8009030:	d917      	bls.n	8009062 <_malloc_r+0xca>
 8009032:	1961      	adds	r1, r4, r5
 8009034:	42a3      	cmp	r3, r4
 8009036:	6025      	str	r5, [r4, #0]
 8009038:	bf18      	it	ne
 800903a:	6059      	strne	r1, [r3, #4]
 800903c:	6863      	ldr	r3, [r4, #4]
 800903e:	bf08      	it	eq
 8009040:	f8c8 1000 	streq.w	r1, [r8]
 8009044:	5162      	str	r2, [r4, r5]
 8009046:	604b      	str	r3, [r1, #4]
 8009048:	4638      	mov	r0, r7
 800904a:	f104 060b 	add.w	r6, r4, #11
 800904e:	f000 f829 	bl	80090a4 <__malloc_unlock>
 8009052:	f026 0607 	bic.w	r6, r6, #7
 8009056:	1d23      	adds	r3, r4, #4
 8009058:	1af2      	subs	r2, r6, r3
 800905a:	d0ae      	beq.n	8008fba <_malloc_r+0x22>
 800905c:	1b9b      	subs	r3, r3, r6
 800905e:	50a3      	str	r3, [r4, r2]
 8009060:	e7ab      	b.n	8008fba <_malloc_r+0x22>
 8009062:	42a3      	cmp	r3, r4
 8009064:	6862      	ldr	r2, [r4, #4]
 8009066:	d1dd      	bne.n	8009024 <_malloc_r+0x8c>
 8009068:	f8c8 2000 	str.w	r2, [r8]
 800906c:	e7ec      	b.n	8009048 <_malloc_r+0xb0>
 800906e:	4623      	mov	r3, r4
 8009070:	6864      	ldr	r4, [r4, #4]
 8009072:	e7ac      	b.n	8008fce <_malloc_r+0x36>
 8009074:	4634      	mov	r4, r6
 8009076:	6876      	ldr	r6, [r6, #4]
 8009078:	e7b4      	b.n	8008fe4 <_malloc_r+0x4c>
 800907a:	4613      	mov	r3, r2
 800907c:	e7cc      	b.n	8009018 <_malloc_r+0x80>
 800907e:	230c      	movs	r3, #12
 8009080:	603b      	str	r3, [r7, #0]
 8009082:	4638      	mov	r0, r7
 8009084:	f000 f80e 	bl	80090a4 <__malloc_unlock>
 8009088:	e797      	b.n	8008fba <_malloc_r+0x22>
 800908a:	6025      	str	r5, [r4, #0]
 800908c:	e7dc      	b.n	8009048 <_malloc_r+0xb0>
 800908e:	605b      	str	r3, [r3, #4]
 8009090:	deff      	udf	#255	; 0xff
 8009092:	bf00      	nop
 8009094:	20000900 	.word	0x20000900

08009098 <__malloc_lock>:
 8009098:	4801      	ldr	r0, [pc, #4]	; (80090a0 <__malloc_lock+0x8>)
 800909a:	f000 b84b 	b.w	8009134 <__retarget_lock_acquire_recursive>
 800909e:	bf00      	nop
 80090a0:	20000a44 	.word	0x20000a44

080090a4 <__malloc_unlock>:
 80090a4:	4801      	ldr	r0, [pc, #4]	; (80090ac <__malloc_unlock+0x8>)
 80090a6:	f000 b846 	b.w	8009136 <__retarget_lock_release_recursive>
 80090aa:	bf00      	nop
 80090ac:	20000a44 	.word	0x20000a44

080090b0 <memset>:
 80090b0:	4402      	add	r2, r0
 80090b2:	4603      	mov	r3, r0
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d100      	bne.n	80090ba <memset+0xa>
 80090b8:	4770      	bx	lr
 80090ba:	f803 1b01 	strb.w	r1, [r3], #1
 80090be:	e7f9      	b.n	80090b4 <memset+0x4>

080090c0 <_sbrk_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d06      	ldr	r5, [pc, #24]	; (80090dc <_sbrk_r+0x1c>)
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	f7f7 fef8 	bl	8000ec0 <_sbrk>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_sbrk_r+0x1a>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_sbrk_r+0x1a>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	20000a40 	.word	0x20000a40

080090e0 <__errno>:
 80090e0:	4b01      	ldr	r3, [pc, #4]	; (80090e8 <__errno+0x8>)
 80090e2:	6818      	ldr	r0, [r3, #0]
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	20000078 	.word	0x20000078

080090ec <__libc_init_array>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	4d0d      	ldr	r5, [pc, #52]	; (8009124 <__libc_init_array+0x38>)
 80090f0:	4c0d      	ldr	r4, [pc, #52]	; (8009128 <__libc_init_array+0x3c>)
 80090f2:	1b64      	subs	r4, r4, r5
 80090f4:	10a4      	asrs	r4, r4, #2
 80090f6:	2600      	movs	r6, #0
 80090f8:	42a6      	cmp	r6, r4
 80090fa:	d109      	bne.n	8009110 <__libc_init_array+0x24>
 80090fc:	4d0b      	ldr	r5, [pc, #44]	; (800912c <__libc_init_array+0x40>)
 80090fe:	4c0c      	ldr	r4, [pc, #48]	; (8009130 <__libc_init_array+0x44>)
 8009100:	f000 f866 	bl	80091d0 <_init>
 8009104:	1b64      	subs	r4, r4, r5
 8009106:	10a4      	asrs	r4, r4, #2
 8009108:	2600      	movs	r6, #0
 800910a:	42a6      	cmp	r6, r4
 800910c:	d105      	bne.n	800911a <__libc_init_array+0x2e>
 800910e:	bd70      	pop	{r4, r5, r6, pc}
 8009110:	f855 3b04 	ldr.w	r3, [r5], #4
 8009114:	4798      	blx	r3
 8009116:	3601      	adds	r6, #1
 8009118:	e7ee      	b.n	80090f8 <__libc_init_array+0xc>
 800911a:	f855 3b04 	ldr.w	r3, [r5], #4
 800911e:	4798      	blx	r3
 8009120:	3601      	adds	r6, #1
 8009122:	e7f2      	b.n	800910a <__libc_init_array+0x1e>
 8009124:	08009214 	.word	0x08009214
 8009128:	08009214 	.word	0x08009214
 800912c:	08009214 	.word	0x08009214
 8009130:	08009218 	.word	0x08009218

08009134 <__retarget_lock_acquire_recursive>:
 8009134:	4770      	bx	lr

08009136 <__retarget_lock_release_recursive>:
 8009136:	4770      	bx	lr

08009138 <_free_r>:
 8009138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800913a:	2900      	cmp	r1, #0
 800913c:	d044      	beq.n	80091c8 <_free_r+0x90>
 800913e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009142:	9001      	str	r0, [sp, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	f1a1 0404 	sub.w	r4, r1, #4
 800914a:	bfb8      	it	lt
 800914c:	18e4      	addlt	r4, r4, r3
 800914e:	f7ff ffa3 	bl	8009098 <__malloc_lock>
 8009152:	4a1e      	ldr	r2, [pc, #120]	; (80091cc <_free_r+0x94>)
 8009154:	9801      	ldr	r0, [sp, #4]
 8009156:	6813      	ldr	r3, [r2, #0]
 8009158:	b933      	cbnz	r3, 8009168 <_free_r+0x30>
 800915a:	6063      	str	r3, [r4, #4]
 800915c:	6014      	str	r4, [r2, #0]
 800915e:	b003      	add	sp, #12
 8009160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009164:	f7ff bf9e 	b.w	80090a4 <__malloc_unlock>
 8009168:	42a3      	cmp	r3, r4
 800916a:	d908      	bls.n	800917e <_free_r+0x46>
 800916c:	6825      	ldr	r5, [r4, #0]
 800916e:	1961      	adds	r1, r4, r5
 8009170:	428b      	cmp	r3, r1
 8009172:	bf01      	itttt	eq
 8009174:	6819      	ldreq	r1, [r3, #0]
 8009176:	685b      	ldreq	r3, [r3, #4]
 8009178:	1949      	addeq	r1, r1, r5
 800917a:	6021      	streq	r1, [r4, #0]
 800917c:	e7ed      	b.n	800915a <_free_r+0x22>
 800917e:	461a      	mov	r2, r3
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	b10b      	cbz	r3, 8009188 <_free_r+0x50>
 8009184:	42a3      	cmp	r3, r4
 8009186:	d9fa      	bls.n	800917e <_free_r+0x46>
 8009188:	6811      	ldr	r1, [r2, #0]
 800918a:	1855      	adds	r5, r2, r1
 800918c:	42a5      	cmp	r5, r4
 800918e:	d10b      	bne.n	80091a8 <_free_r+0x70>
 8009190:	6824      	ldr	r4, [r4, #0]
 8009192:	4421      	add	r1, r4
 8009194:	1854      	adds	r4, r2, r1
 8009196:	42a3      	cmp	r3, r4
 8009198:	6011      	str	r1, [r2, #0]
 800919a:	d1e0      	bne.n	800915e <_free_r+0x26>
 800919c:	681c      	ldr	r4, [r3, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	6053      	str	r3, [r2, #4]
 80091a2:	440c      	add	r4, r1
 80091a4:	6014      	str	r4, [r2, #0]
 80091a6:	e7da      	b.n	800915e <_free_r+0x26>
 80091a8:	d902      	bls.n	80091b0 <_free_r+0x78>
 80091aa:	230c      	movs	r3, #12
 80091ac:	6003      	str	r3, [r0, #0]
 80091ae:	e7d6      	b.n	800915e <_free_r+0x26>
 80091b0:	6825      	ldr	r5, [r4, #0]
 80091b2:	1961      	adds	r1, r4, r5
 80091b4:	428b      	cmp	r3, r1
 80091b6:	bf04      	itt	eq
 80091b8:	6819      	ldreq	r1, [r3, #0]
 80091ba:	685b      	ldreq	r3, [r3, #4]
 80091bc:	6063      	str	r3, [r4, #4]
 80091be:	bf04      	itt	eq
 80091c0:	1949      	addeq	r1, r1, r5
 80091c2:	6021      	streq	r1, [r4, #0]
 80091c4:	6054      	str	r4, [r2, #4]
 80091c6:	e7ca      	b.n	800915e <_free_r+0x26>
 80091c8:	b003      	add	sp, #12
 80091ca:	bd30      	pop	{r4, r5, pc}
 80091cc:	20000900 	.word	0x20000900

080091d0 <_init>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	bf00      	nop
 80091d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d6:	bc08      	pop	{r3}
 80091d8:	469e      	mov	lr, r3
 80091da:	4770      	bx	lr

080091dc <_fini>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	bf00      	nop
 80091e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e2:	bc08      	pop	{r3}
 80091e4:	469e      	mov	lr, r3
 80091e6:	4770      	bx	lr
