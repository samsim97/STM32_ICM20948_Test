
Sirius_Test_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000904c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080091e4  080091e4  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009210  08009210  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009210  08009210  00019210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009218  08009218  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800921c  0800921c  0001921c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  2000007c  0800929c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a48  0800929c  00020a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001915b  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f2f  00000000  00000000  0003924a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0003d180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f60  00000000  00000000  0003e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001be82  00000000  00000000  0003f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bdb2  00000000  00000000  0005b352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092d34  00000000  00000000  00077104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056bc  00000000  00000000  00109e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010f4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080091cc 	.word	0x080091cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	080091cc 	.word	0x080091cc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fd60 	bl	8000fa0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f856 	bl	8000590 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004e4:	f000 f8c6 	bl	8000674 <_Z24PeriphCommonClock_Configv>
  //ITM_Port32(31) = 1;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f9ec 	bl	80008c4 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80004ec:	f000 f8e8 	bl	80006c0 <_ZL12MX_I2C1_Initv>
  MX_I2S2_Init();
 80004f0:	f000 f91a 	bl	8000728 <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 80004f4:	f000 f94c 	bl	8000790 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 80004f8:	f000 f97e 	bl	80007f8 <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 80004fc:	f008 fa12 	bl	8008924 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000500:	f000 f9b2 	bl	8000868 <_ZL19MX_USART2_UART_Initv>
  //ITM_Port32(31) = 2;
  // For how to setup the command, see: https://www.sparkfun.com/datasheets/GPS/NMEA%20Reference%20Manual-Rev2.1-Dec07.pdf
//										http://files.banggood.com/2016/11/BN-220%20GPS+Antenna%20datasheet.pdf
  //char command[] = "$PSRF103,01,00,01,01*24";
  //char command[] = "$PMTK104*37";
  char command[] = "$PMTK000*32\r\n";
 8000504:	4b20      	ldr	r3, [pc, #128]	; (8000588 <main+0xb4>)
 8000506:	f507 6480 	add.w	r4, r7, #1024	; 0x400
 800050a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800050c:	c407      	stmia	r4!, {r0, r1, r2}
 800050e:	8023      	strh	r3, [r4, #0]
  char buffer[1024];
  //uint8_t rxBuffer[256];
  memset(buffer, 0, sizeof(buffer));
 8000510:	463b      	mov	r3, r7
 8000512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f008 fdc7 	bl	80090ac <memset>
  //memset(rxBuffer, 0, sizeof(rxBuffer));

  int transmitOKCount = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
  int receiveOKCount = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//printf("In ze loop"
	//int transmitCode = HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), 5000);
	int transmitCode = HAL_UART_Transmit(&huart2, (uint8_t*)command, sizeof(command) - 1, 5000);
 800052a:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800052e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000532:	220d      	movs	r2, #13
 8000534:	4815      	ldr	r0, [pc, #84]	; (800058c <main+0xb8>)
 8000536:	f004 f9b7 	bl	80048a8 <HAL_UART_Transmit>
 800053a:	4603      	mov	r3, r0
 800053c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	int returnCode = HAL_UART_Receive(&huart2, (uint8_t*)buffer, sizeof(buffer) - 1, 5000);
 8000540:	4639      	mov	r1, r7
 8000542:	f241 3388 	movw	r3, #5000	; 0x1388
 8000546:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800054a:	4810      	ldr	r0, [pc, #64]	; (800058c <main+0xb8>)
 800054c:	f004 fa3e 	bl	80049cc <HAL_UART_Receive>
 8000550:	4603      	mov	r3, r0
 8000552:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410

	if (transmitCode == HAL_OK) {
 8000556:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800055a:	2b00      	cmp	r3, #0
 800055c:	d104      	bne.n	8000568 <main+0x94>
		transmitOKCount++;
 800055e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000562:	3301      	adds	r3, #1
 8000564:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	}
	if (returnCode == HAL_OK) {
 8000568:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800056c:	2b00      	cmp	r3, #0
 800056e:	d104      	bne.n	800057a <main+0xa6>
		receiveOKCount++;
 8000570:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000574:	3301      	adds	r3, #1
 8000576:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	/*if (HAL_UART_Receive(&huart2, (uint8_t*)buffer, sizeof(buffer) - 1, 10000) == HAL_OK) {
	  //printf("Received data from GPS.");
	  __NOP();
	}*/
    /* USER CODE END WHILE */
	MX_USB_HOST_Process();
 800057a:	f008 f9f9 	bl	8008970 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

	HAL_Delay(500);
 800057e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000582:	f000 fd7f 	bl	8001084 <HAL_Delay>

    // HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 5000);
    // HAL_UART_Receive(&huart2, RX_Data, sizeof(RX_Data), 1000);
    // HAL_Delay(2000);
  }
 8000586:	e7d0      	b.n	800052a <main+0x56>
 8000588:	080091e4 	.word	0x080091e4
 800058c:	200001d4 	.word	0x200001d4

08000590 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f008 fd84 	bl	80090ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b2c      	ldr	r3, [pc, #176]	; (800066c <_Z18SystemClock_Configv+0xdc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a2b      	ldr	r2, [pc, #172]	; (800066c <_Z18SystemClock_Configv+0xdc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <_Z18SystemClock_Configv+0xdc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <_Z18SystemClock_Configv+0xe0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a25      	ldr	r2, [pc, #148]	; (8000670 <_Z18SystemClock_Configv+0xe0>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b23      	ldr	r3, [pc, #140]	; (8000670 <_Z18SystemClock_Configv+0xe0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000604:	23c0      	movs	r3, #192	; 0xc0
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000608:	2304      	movs	r3, #4
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f003 fa89 	bl	8003b2c <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	bf14      	ite	ne
 8000620:	2301      	movne	r3, #1
 8000622:	2300      	moveq	r3, #0
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800062a:	f000 fa2d 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2103      	movs	r1, #3
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fce6 	bl	800401c <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	bf14      	ite	ne
 8000656:	2301      	movne	r3, #1
 8000658:	2300      	moveq	r3, #0
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000660:	f000 fa12 	bl	8000a88 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	; 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800068a:	2301      	movs	r3, #1
 800068c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800068e:	23c8      	movs	r3, #200	; 0xc8
 8000690:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000692:	2305      	movs	r3, #5
 8000694:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fedd 	bl	800445c <HAL_RCCEx_PeriphCLKConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 80006b2:	f000 f9e9 	bl	8000a88 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <_ZL12MX_I2C1_Initv+0x5c>)
 80006c6:	4a16      	ldr	r2, [pc, #88]	; (8000720 <_ZL12MX_I2C1_Initv+0x60>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <_ZL12MX_I2C1_Initv+0x5c>)
 80006cc:	4a15      	ldr	r2, [pc, #84]	; (8000724 <_ZL12MX_I2C1_Initv+0x64>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <_ZL12MX_I2C1_Initv+0x5c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <_ZL12MX_I2C1_Initv+0x5c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <_ZL12MX_I2C1_Initv+0x5c>)
 80006de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <_ZL12MX_I2C1_Initv+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <_ZL12MX_I2C1_Initv+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <_ZL12MX_I2C1_Initv+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <_ZL12MX_I2C1_Initv+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fc:	4807      	ldr	r0, [pc, #28]	; (800071c <_ZL12MX_I2C1_Initv+0x5c>)
 80006fe:	f002 fc31 	bl	8002f64 <HAL_I2C_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	bf14      	ite	ne
 8000708:	2301      	movne	r3, #1
 800070a:	2300      	moveq	r3, #0
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000712:	f000 f9b9 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000098 	.word	0x20000098
 8000720:	40005400 	.word	0x40005400
 8000724:	000186a0 	.word	0x000186a0

08000728 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <_ZL12MX_I2S2_Initv+0x5c>)
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <_ZL12MX_I2S2_Initv+0x60>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <_ZL12MX_I2S2_Initv+0x5c>)
 8000734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000738:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <_ZL12MX_I2S2_Initv+0x5c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <_ZL12MX_I2S2_Initv+0x5c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <_ZL12MX_I2S2_Initv+0x5c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <_ZL12MX_I2S2_Initv+0x5c>)
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <_ZL12MX_I2S2_Initv+0x64>)
 8000750:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <_ZL12MX_I2S2_Initv+0x5c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <_ZL12MX_I2S2_Initv+0x5c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <_ZL12MX_I2S2_Initv+0x5c>)
 8000760:	2201      	movs	r2, #1
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <_ZL12MX_I2S2_Initv+0x5c>)
 8000766:	f002 fd41 	bl	80031ec <HAL_I2S_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	bf14      	ite	ne
 8000770:	2301      	movne	r3, #1
 8000772:	2300      	moveq	r3, #0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <_ZL12MX_I2S2_Initv+0x56>
  {
    Error_Handler();
 800077a:	f000 f985 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000ec 	.word	0x200000ec
 8000788:	40003800 	.word	0x40003800
 800078c:	00017700 	.word	0x00017700

08000790 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <_ZL12MX_I2S3_Initv+0x5c>)
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <_ZL12MX_I2S3_Initv+0x60>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <_ZL12MX_I2S3_Initv+0x5c>)
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <_ZL12MX_I2S3_Initv+0x5c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <_ZL12MX_I2S3_Initv+0x5c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <_ZL12MX_I2S3_Initv+0x5c>)
 80007b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <_ZL12MX_I2S3_Initv+0x5c>)
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <_ZL12MX_I2S3_Initv+0x64>)
 80007ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <_ZL12MX_I2S3_Initv+0x5c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <_ZL12MX_I2S3_Initv+0x5c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <_ZL12MX_I2S3_Initv+0x5c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <_ZL12MX_I2S3_Initv+0x5c>)
 80007d0:	f002 fd0c 	bl	80031ec <HAL_I2S_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	bf14      	ite	ne
 80007da:	2301      	movne	r3, #1
 80007dc:	2300      	moveq	r3, #0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 80007e4:	f000 f950 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000134 	.word	0x20000134
 80007f0:	40003c00 	.word	0x40003c00
 80007f4:	00017700 	.word	0x00017700

080007f8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <_ZL12MX_SPI1_Initv+0x68>)
 80007fe:	4a19      	ldr	r2, [pc, #100]	; (8000864 <_ZL12MX_SPI1_Initv+0x6c>)
 8000800:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <_ZL12MX_SPI1_Initv+0x68>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <_ZL12MX_SPI1_Initv+0x68>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <_ZL12MX_SPI1_Initv+0x68>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <_ZL12MX_SPI1_Initv+0x68>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_ZL12MX_SPI1_Initv+0x68>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <_ZL12MX_SPI1_Initv+0x68>)
 8000822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000826:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <_ZL12MX_SPI1_Initv+0x68>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <_ZL12MX_SPI1_Initv+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <_ZL12MX_SPI1_Initv+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <_ZL12MX_SPI1_Initv+0x68>)
 800083c:	220a      	movs	r2, #10
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000840:	4807      	ldr	r0, [pc, #28]	; (8000860 <_ZL12MX_SPI1_Initv+0x68>)
 8000842:	f003 ff5b 	bl	80046fc <HAL_SPI_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	bf14      	ite	ne
 800084c:	2301      	movne	r3, #1
 800084e:	2300      	moveq	r3, #0
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <_ZL12MX_SPI1_Initv+0x62>
  {
    Error_Handler();
 8000856:	f000 f917 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000017c 	.word	0x2000017c
 8000864:	40013000 	.word	0x40013000

08000868 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000874:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <_ZL19MX_USART2_UART_Initv+0x54>)
 80008a0:	f003 ffb5 	bl	800480e <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf14      	ite	ne
 80008aa:	2301      	movne	r3, #1
 80008ac:	2300      	moveq	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80008b4:	f000 f8e8 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200001d4 	.word	0x200001d4
 80008c0:	40004400 	.word	0x40004400

080008c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	4b65      	ldr	r3, [pc, #404]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a64      	ldr	r2, [pc, #400]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b62      	ldr	r3, [pc, #392]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	4b5e      	ldr	r3, [pc, #376]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a5d      	ldr	r2, [pc, #372]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b5b      	ldr	r3, [pc, #364]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b57      	ldr	r3, [pc, #348]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a56      	ldr	r2, [pc, #344]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b54      	ldr	r3, [pc, #336]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b50      	ldr	r3, [pc, #320]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a4f      	ldr	r2, [pc, #316]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b4d      	ldr	r3, [pc, #308]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b49      	ldr	r3, [pc, #292]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a48      	ldr	r2, [pc, #288]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b46      	ldr	r3, [pc, #280]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b42      	ldr	r3, [pc, #264]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a41      	ldr	r2, [pc, #260]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b3f      	ldr	r3, [pc, #252]	; (8000a74 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2108      	movs	r1, #8
 8000986:	483c      	ldr	r0, [pc, #240]	; (8000a78 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000988:	f000 fec8 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2101      	movs	r1, #1
 8000990:	483a      	ldr	r0, [pc, #232]	; (8000a7c <_ZL12MX_GPIO_Initv+0x1b8>)
 8000992:	f000 fec3 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	4839      	ldr	r0, [pc, #228]	; (8000a80 <_ZL12MX_GPIO_Initv+0x1bc>)
 800099c:	f000 febe 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a0:	2200      	movs	r2, #0
 80009a2:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009a6:	4837      	ldr	r0, [pc, #220]	; (8000a84 <_ZL12MX_GPIO_Initv+0x1c0>)
 80009a8:	f000 feb8 	bl	800171c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009ac:	2304      	movs	r3, #4
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	482e      	ldr	r0, [pc, #184]	; (8000a78 <_ZL12MX_GPIO_Initv+0x1b4>)
 80009c0:	f000 fd28 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009c4:	2308      	movs	r3, #8
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4827      	ldr	r0, [pc, #156]	; (8000a78 <_ZL12MX_GPIO_Initv+0x1b4>)
 80009dc:	f000 fd1a 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80009e0:	2332      	movs	r3, #50	; 0x32
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4820      	ldr	r0, [pc, #128]	; (8000a78 <_ZL12MX_GPIO_Initv+0x1b4>)
 80009f6:	f000 fd0d 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009fa:	2301      	movs	r3, #1
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481a      	ldr	r0, [pc, #104]	; (8000a7c <_ZL12MX_GPIO_Initv+0x1b8>)
 8000a12:	f000 fcff 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a1a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4815      	ldr	r0, [pc, #84]	; (8000a80 <_ZL12MX_GPIO_Initv+0x1bc>)
 8000a2c:	f000 fcf2 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a30:	2308      	movs	r3, #8
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	480e      	ldr	r0, [pc, #56]	; (8000a80 <_ZL12MX_GPIO_Initv+0x1bc>)
 8000a48:	f000 fce4 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a4c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a50:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <_ZL12MX_GPIO_Initv+0x1c0>)
 8000a66:	f000 fcd5 	bl	8001414 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	; 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad2:	2007      	movs	r0, #7
 8000ad4:	f000 fbca 	bl	800126c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <HAL_I2C_MspInit+0x84>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d12c      	bne.n	8000b60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b28:	2312      	movs	r3, #18
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b34:	2304      	movs	r3, #4
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480c      	ldr	r0, [pc, #48]	; (8000b70 <HAL_I2C_MspInit+0x8c>)
 8000b40:	f000 fc68 	bl	8001414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b52:	6413      	str	r3, [r2, #64]	; 0x40
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40005400 	.word	0x40005400
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020400 	.word	0x40020400

08000b74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	; 0x38
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a59      	ldr	r2, [pc, #356]	; (8000cf8 <HAL_I2S_MspInit+0x184>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d15b      	bne.n	8000c4e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
 8000b9a:	4b58      	ldr	r3, [pc, #352]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a57      	ldr	r2, [pc, #348]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b55      	ldr	r3, [pc, #340]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	623b      	str	r3, [r7, #32]
 8000bb0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a50      	ldr	r2, [pc, #320]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b4e      	ldr	r3, [pc, #312]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a49      	ldr	r2, [pc, #292]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b47      	ldr	r3, [pc, #284]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bea:	2304      	movs	r3, #4
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	4619      	mov	r1, r3
 8000c04:	483e      	ldr	r0, [pc, #248]	; (8000d00 <HAL_I2S_MspInit+0x18c>)
 8000c06:	f000 fc05 	bl	8001414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	4836      	ldr	r0, [pc, #216]	; (8000d00 <HAL_I2S_MspInit+0x18c>)
 8000c26:	f000 fbf5 	bl	8001414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3c:	2305      	movs	r3, #5
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	482f      	ldr	r0, [pc, #188]	; (8000d04 <HAL_I2S_MspInit+0x190>)
 8000c48:	f000 fbe4 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c4c:	e04f      	b.n	8000cee <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a2d      	ldr	r2, [pc, #180]	; (8000d08 <HAL_I2S_MspInit+0x194>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d14a      	bne.n	8000cee <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4a26      	ldr	r2, [pc, #152]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6313      	str	r3, [r2, #48]	; 0x30
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_I2S_MspInit+0x188>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cac:	2310      	movs	r3, #16
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cbc:	2306      	movs	r3, #6
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4811      	ldr	r0, [pc, #68]	; (8000d0c <HAL_I2S_MspInit+0x198>)
 8000cc8:	f000 fba4 	bl	8001414 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ccc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cde:	2306      	movs	r3, #6
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_I2S_MspInit+0x18c>)
 8000cea:	f000 fb93 	bl	8001414 <HAL_GPIO_Init>
}
 8000cee:	bf00      	nop
 8000cf0:	3738      	adds	r7, #56	; 0x38
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40003800 	.word	0x40003800
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020800 	.word	0x40020800
 8000d04:	40020400 	.word	0x40020400
 8000d08:	40003c00 	.word	0x40003c00
 8000d0c:	40020000 	.word	0x40020000

08000d10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_SPI_MspInit+0x84>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12b      	bne.n	8000d8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d6a:	23e0      	movs	r3, #224	; 0xe0
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_SPI_MspInit+0x8c>)
 8000d86:	f000 fb45 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40013000 	.word	0x40013000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000

08000da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <HAL_UART_MspInit+0x94>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d133      	bne.n	8000e2a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_UART_MspInit+0x98>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000dfa:	2360      	movs	r3, #96	; 0x60
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <HAL_UART_MspInit+0x9c>)
 8000e16:	f000 fafd 	bl	8001414 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2026      	movs	r0, #38	; 0x26
 8000e20:	f000 fa2f 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e24:	2026      	movs	r0, #38	; 0x26
 8000e26:	f000 fa48 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020c00 	.word	0x40020c00

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 f8da 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <USART2_IRQHandler+0x10>)
 8000e9a:	f003 fe39 	bl	8004b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200001d4 	.word	0x200001d4

08000ea8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <OTG_FS_IRQHandler+0x10>)
 8000eae:	f000 feb9 	bl	8001c24 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200005fc 	.word	0x200005fc

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f008 f8f6 	bl	80090dc <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20020000 	.word	0x20020000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20000218 	.word	0x20000218
 8000f24:	20000a48 	.word	0x20000a48

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f76:	f7ff ffd7 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f008 f8b5 	bl	80090e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff faa9 	bl	80004d4 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f90:	08009220 	.word	0x08009220
  ldr r2, =_sbss
 8000f94:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f98:	20000a48 	.word	0x20000a48

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f94f 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fd5e 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f967 	bl	80012d6 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f92f 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	2000021c 	.word	0x2000021c

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000021c 	.word	0x2000021c

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff feb6 	bl	800106c <HAL_GetTick>
 8001300:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d008      	beq.n	8001320 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e052      	b.n	80013c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0216 	bic.w	r2, r2, #22
 800132e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	695a      	ldr	r2, [r3, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800133e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	2b00      	cmp	r3, #0
 8001346:	d103      	bne.n	8001350 <HAL_DMA_Abort+0x62>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134c:	2b00      	cmp	r3, #0
 800134e:	d007      	beq.n	8001360 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0208 	bic.w	r2, r2, #8
 800135e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001370:	e013      	b.n	800139a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001372:	f7ff fe7b 	bl	800106c <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b05      	cmp	r3, #5
 800137e:	d90c      	bls.n	800139a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2220      	movs	r2, #32
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e015      	b.n	80013c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1e4      	bne.n	8001372 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ac:	223f      	movs	r2, #63	; 0x3f
 80013ae:	409a      	lsls	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d004      	beq.n	80013ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e00c      	b.n	8001406 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2205      	movs	r2, #5
 80013f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	e159      	b.n	80016e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001430:	2201      	movs	r2, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	429a      	cmp	r2, r3
 800144a:	f040 8148 	bne.w	80016de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b01      	cmp	r3, #1
 8001458:	d005      	beq.n	8001466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001462:	2b02      	cmp	r3, #2
 8001464:	d130      	bne.n	80014c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800149c:	2201      	movs	r2, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 0201 	and.w	r2, r3, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d017      	beq.n	8001504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d123      	bne.n	8001558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	08da      	lsrs	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3208      	adds	r2, #8
 8001518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	220f      	movs	r2, #15
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	691a      	ldr	r2, [r3, #16]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3208      	adds	r2, #8
 8001552:	69b9      	ldr	r1, [r7, #24]
 8001554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0203 	and.w	r2, r3, #3
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80a2 	beq.w	80016de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b57      	ldr	r3, [pc, #348]	; (80016fc <HAL_GPIO_Init+0x2e8>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a56      	ldr	r2, [pc, #344]	; (80016fc <HAL_GPIO_Init+0x2e8>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b54      	ldr	r3, [pc, #336]	; (80016fc <HAL_GPIO_Init+0x2e8>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b6:	4a52      	ldr	r2, [pc, #328]	; (8001700 <HAL_GPIO_Init+0x2ec>)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a49      	ldr	r2, [pc, #292]	; (8001704 <HAL_GPIO_Init+0x2f0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d019      	beq.n	8001616 <HAL_GPIO_Init+0x202>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a48      	ldr	r2, [pc, #288]	; (8001708 <HAL_GPIO_Init+0x2f4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0x1fe>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a47      	ldr	r2, [pc, #284]	; (800170c <HAL_GPIO_Init+0x2f8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00d      	beq.n	800160e <HAL_GPIO_Init+0x1fa>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a46      	ldr	r2, [pc, #280]	; (8001710 <HAL_GPIO_Init+0x2fc>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d007      	beq.n	800160a <HAL_GPIO_Init+0x1f6>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a45      	ldr	r2, [pc, #276]	; (8001714 <HAL_GPIO_Init+0x300>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_GPIO_Init+0x1f2>
 8001602:	2304      	movs	r3, #4
 8001604:	e008      	b.n	8001618 <HAL_GPIO_Init+0x204>
 8001606:	2307      	movs	r3, #7
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x204>
 800160a:	2303      	movs	r3, #3
 800160c:	e004      	b.n	8001618 <HAL_GPIO_Init+0x204>
 800160e:	2302      	movs	r3, #2
 8001610:	e002      	b.n	8001618 <HAL_GPIO_Init+0x204>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_GPIO_Init+0x204>
 8001616:	2300      	movs	r3, #0
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	f002 0203 	and.w	r2, r2, #3
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	4093      	lsls	r3, r2
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001628:	4935      	ldr	r1, [pc, #212]	; (8001700 <HAL_GPIO_Init+0x2ec>)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3302      	adds	r3, #2
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001636:	4b38      	ldr	r3, [pc, #224]	; (8001718 <HAL_GPIO_Init+0x304>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165a:	4a2f      	ldr	r2, [pc, #188]	; (8001718 <HAL_GPIO_Init+0x304>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <HAL_GPIO_Init+0x304>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001684:	4a24      	ldr	r2, [pc, #144]	; (8001718 <HAL_GPIO_Init+0x304>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <HAL_GPIO_Init+0x304>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ae:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <HAL_GPIO_Init+0x304>)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_GPIO_Init+0x304>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d8:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_GPIO_Init+0x304>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3301      	adds	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	2b0f      	cmp	r3, #15
 80016e8:	f67f aea2 	bls.w	8001430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40013800 	.word	0x40013800
 8001704:	40020000 	.word	0x40020000
 8001708:	40020400 	.word	0x40020400
 800170c:	40020800 	.word	0x40020800
 8001710:	40020c00 	.word	0x40020c00
 8001714:	40021000 	.word	0x40021000
 8001718:	40013c00 	.word	0x40013c00

0800171c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
 8001728:	4613      	mov	r3, r2
 800172a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800172c:	787b      	ldrb	r3, [r7, #1]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001738:	e003      	b.n	8001742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	041a      	lsls	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	619a      	str	r2, [r3, #24]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800174e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001750:	b08f      	sub	sp, #60	; 0x3c
 8001752:	af0a      	add	r7, sp, #40	; 0x28
 8001754:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e054      	b.n	800180a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d106      	bne.n	8001780 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f007 f930 	bl	80089e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2203      	movs	r2, #3
 8001784:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f004 f95c 	bl	8005a5c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	687e      	ldr	r6, [r7, #4]
 80017ac:	466d      	mov	r5, sp
 80017ae:	f106 0410 	add.w	r4, r6, #16
 80017b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017be:	e885 0003 	stmia.w	r5, {r0, r1}
 80017c2:	1d33      	adds	r3, r6, #4
 80017c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c6:	6838      	ldr	r0, [r7, #0]
 80017c8:	f004 f8d6 	bl	8005978 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 f953 	bl	8005a7e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	687e      	ldr	r6, [r7, #4]
 80017e0:	466d      	mov	r5, sp
 80017e2:	f106 0410 	add.w	r4, r6, #16
 80017e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80017f6:	1d33      	adds	r3, r6, #4
 80017f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fa:	6838      	ldr	r0, [r7, #0]
 80017fc:	f004 fadc 	bl	8005db8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001812 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001812:	b590      	push	{r4, r7, lr}
 8001814:	b089      	sub	sp, #36	; 0x24
 8001816:	af04      	add	r7, sp, #16
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	4608      	mov	r0, r1
 800181c:	4611      	mov	r1, r2
 800181e:	461a      	mov	r2, r3
 8001820:	4603      	mov	r3, r0
 8001822:	70fb      	strb	r3, [r7, #3]
 8001824:	460b      	mov	r3, r1
 8001826:	70bb      	strb	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_HCD_HC_Init+0x28>
 8001836:	2302      	movs	r3, #2
 8001838:	e076      	b.n	8001928 <HAL_HCD_HC_Init+0x116>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	333d      	adds	r3, #61	; 0x3d
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	212c      	movs	r1, #44	; 0x2c
 800185a:	fb01 f303 	mul.w	r3, r1, r3
 800185e:	4413      	add	r3, r2
 8001860:	3338      	adds	r3, #56	; 0x38
 8001862:	787a      	ldrb	r2, [r7, #1]
 8001864:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	212c      	movs	r1, #44	; 0x2c
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	4413      	add	r3, r2
 8001872:	3340      	adds	r3, #64	; 0x40
 8001874:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001876:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3339      	adds	r3, #57	; 0x39
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	212c      	movs	r1, #44	; 0x2c
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	4413      	add	r3, r2
 8001896:	333f      	adds	r3, #63	; 0x3f
 8001898:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800189c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	78ba      	ldrb	r2, [r7, #2]
 80018a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018a6:	b2d0      	uxtb	r0, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	333a      	adds	r3, #58	; 0x3a
 80018b4:	4602      	mov	r2, r0
 80018b6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	da09      	bge.n	80018d4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	212c      	movs	r1, #44	; 0x2c
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	333b      	adds	r3, #59	; 0x3b
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e008      	b.n	80018e6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	333b      	adds	r3, #59	; 0x3b
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	212c      	movs	r1, #44	; 0x2c
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	333c      	adds	r3, #60	; 0x3c
 80018f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018f8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	787c      	ldrb	r4, [r7, #1]
 8001900:	78ba      	ldrb	r2, [r7, #2]
 8001902:	78f9      	ldrb	r1, [r7, #3]
 8001904:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	4623      	mov	r3, r4
 8001916:	f004 fbd5 	bl	80060c4 <USB_HC_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}

08001930 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_HCD_HC_Halt+0x1e>
 800194a:	2302      	movs	r3, #2
 800194c:	e00f      	b.n	800196e <HAL_HCD_HC_Halt+0x3e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	78fa      	ldrb	r2, [r7, #3]
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f004 fe25 	bl	80065ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	4608      	mov	r0, r1
 8001982:	4611      	mov	r1, r2
 8001984:	461a      	mov	r2, r3
 8001986:	4603      	mov	r3, r0
 8001988:	70fb      	strb	r3, [r7, #3]
 800198a:	460b      	mov	r3, r1
 800198c:	70bb      	strb	r3, [r7, #2]
 800198e:	4613      	mov	r3, r2
 8001990:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	212c      	movs	r1, #44	; 0x2c
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	333b      	adds	r3, #59	; 0x3b
 80019a0:	78ba      	ldrb	r2, [r7, #2]
 80019a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	212c      	movs	r1, #44	; 0x2c
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	333f      	adds	r3, #63	; 0x3f
 80019b2:	787a      	ldrb	r2, [r7, #1]
 80019b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019b6:	7c3b      	ldrb	r3, [r7, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d112      	bne.n	80019e2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3342      	adds	r3, #66	; 0x42
 80019ca:	2203      	movs	r2, #3
 80019cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	333d      	adds	r3, #61	; 0x3d
 80019dc:	7f3a      	ldrb	r2, [r7, #28]
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e008      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	212c      	movs	r1, #44	; 0x2c
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	3342      	adds	r3, #66	; 0x42
 80019f0:	2202      	movs	r2, #2
 80019f2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	f200 80c6 	bhi.w	8001b88 <HAL_HCD_HC_SubmitRequest+0x210>
 80019fc:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80019fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001a15 	.word	0x08001a15
 8001a08:	08001b75 	.word	0x08001b75
 8001a0c:	08001a79 	.word	0x08001a79
 8001a10:	08001af7 	.word	0x08001af7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a14:	7c3b      	ldrb	r3, [r7, #16]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	f040 80b8 	bne.w	8001b8c <HAL_HCD_HC_SubmitRequest+0x214>
 8001a1c:	78bb      	ldrb	r3, [r7, #2]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 80b4 	bne.w	8001b8c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a24:	8b3b      	ldrh	r3, [r7, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d108      	bne.n	8001a3c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	212c      	movs	r1, #44	; 0x2c
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	3355      	adds	r3, #85	; 0x55
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	3355      	adds	r3, #85	; 0x55
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d109      	bne.n	8001a64 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3342      	adds	r3, #66	; 0x42
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a62:	e093      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	212c      	movs	r1, #44	; 0x2c
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	3342      	adds	r3, #66	; 0x42
 8001a72:	2202      	movs	r2, #2
 8001a74:	701a      	strb	r2, [r3, #0]
      break;
 8001a76:	e089      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a78:	78bb      	ldrb	r3, [r7, #2]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d11d      	bne.n	8001aba <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	212c      	movs	r1, #44	; 0x2c
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	3355      	adds	r3, #85	; 0x55
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	212c      	movs	r1, #44	; 0x2c
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3342      	adds	r3, #66	; 0x42
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001aa4:	e073      	b.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	212c      	movs	r1, #44	; 0x2c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3342      	adds	r3, #66	; 0x42
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	701a      	strb	r2, [r3, #0]
      break;
 8001ab8:	e069      	b.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3354      	adds	r3, #84	; 0x54
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3342      	adds	r3, #66	; 0x42
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
      break;
 8001ae0:	e055      	b.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	3342      	adds	r3, #66	; 0x42
 8001af0:	2202      	movs	r2, #2
 8001af2:	701a      	strb	r2, [r3, #0]
      break;
 8001af4:	e04b      	b.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001af6:	78bb      	ldrb	r3, [r7, #2]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d11d      	bne.n	8001b38 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	3355      	adds	r3, #85	; 0x55
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3342      	adds	r3, #66	; 0x42
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b22:	e034      	b.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	3342      	adds	r3, #66	; 0x42
 8001b32:	2202      	movs	r2, #2
 8001b34:	701a      	strb	r2, [r3, #0]
      break;
 8001b36:	e02a      	b.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	212c      	movs	r1, #44	; 0x2c
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	3354      	adds	r3, #84	; 0x54
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3342      	adds	r3, #66	; 0x42
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
      break;
 8001b5e:	e016      	b.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3342      	adds	r3, #66	; 0x42
 8001b6e:	2202      	movs	r2, #2
 8001b70:	701a      	strb	r2, [r3, #0]
      break;
 8001b72:	e00c      	b.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	212c      	movs	r1, #44	; 0x2c
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	3342      	adds	r3, #66	; 0x42
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
      break;
 8001b86:	e002      	b.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b88:	bf00      	nop
 8001b8a:	e000      	b.n	8001b8e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b8c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	212c      	movs	r1, #44	; 0x2c
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3344      	adds	r3, #68	; 0x44
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	8b3a      	ldrh	r2, [r7, #24]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	202c      	movs	r0, #44	; 0x2c
 8001ba8:	fb00 f303 	mul.w	r3, r0, r3
 8001bac:	440b      	add	r3, r1
 8001bae:	334c      	adds	r3, #76	; 0x4c
 8001bb0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	212c      	movs	r1, #44	; 0x2c
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3360      	adds	r3, #96	; 0x60
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	212c      	movs	r1, #44	; 0x2c
 8001bca:	fb01 f303 	mul.w	r3, r1, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	3350      	adds	r3, #80	; 0x50
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	212c      	movs	r1, #44	; 0x2c
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	3339      	adds	r3, #57	; 0x39
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3361      	adds	r3, #97	; 0x61
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	222c      	movs	r2, #44	; 0x2c
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	3338      	adds	r3, #56	; 0x38
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	18d1      	adds	r1, r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	f004 fb78 	bl	8006308 <USB_HC_StartXfer>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop

08001c24 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 f879 	bl	8005d32 <USB_GetMode>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	f040 80f6 	bne.w	8001e34 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f004 f85d 	bl	8005d0c <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80ec 	beq.w	8001e32 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 f854 	bl	8005d0c <USB_ReadInterrupts>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c6e:	d104      	bne.n	8001c7a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 f844 	bl	8005d0c <USB_ReadInterrupts>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c8e:	d104      	bne.n	8001c9a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 f834 	bl	8005d0c <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001caa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cae:	d104      	bne.n	8001cba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 f824 	bl	8005d0c <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d103      	bne.n	8001cd6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f004 f816 	bl	8005d0c <USB_ReadInterrupts>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cea:	d11c      	bne.n	8001d26 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cf4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10f      	bne.n	8001d26 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d06:	2110      	movs	r1, #16
 8001d08:	6938      	ldr	r0, [r7, #16]
 8001d0a:	f003 ff05 	bl	8005b18 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d0e:	6938      	ldr	r0, [r7, #16]
 8001d10:	f003 ff36 	bl	8005b80 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f004 f90c 	bl	8005f38 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f006 fedb 	bl	8008adc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 ffee 	bl	8005d0c <USB_ReadInterrupts>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3a:	d102      	bne.n	8001d42 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f001 f89e 	bl	8002e7e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 ffe0 	bl	8005d0c <USB_ReadInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d106      	bne.n	8001d64 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f006 fea4 	bl	8008aa4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2208      	movs	r2, #8
 8001d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 ffcf 	bl	8005d0c <USB_ReadInterrupts>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b10      	cmp	r3, #16
 8001d76:	d101      	bne.n	8001d7c <HAL_HCD_IRQHandler+0x158>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_HCD_IRQHandler+0x15a>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d012      	beq.n	8001da8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699a      	ldr	r2, [r3, #24]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0210 	bic.w	r2, r2, #16
 8001d90:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 ffa1 	bl	8002cda <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0210 	orr.w	r2, r2, #16
 8001da6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 ffad 	bl	8005d0c <USB_ReadInterrupts>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dbc:	d13a      	bne.n	8001e34 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f004 fbe2 	bl	800658c <USB_HC_ReadInterrupt>
 8001dc8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e025      	b.n	8001e1c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d018      	beq.n	8001e16 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	015a      	lsls	r2, r3, #5
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dfa:	d106      	bne.n	8001e0a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	4619      	mov	r1, r3
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8ab 	bl	8001f5e <HCD_HC_IN_IRQHandler>
 8001e08:	e005      	b.n	8001e16 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fbf9 	bl	8002608 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d3d4      	bcc.n	8001dd0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e2e:	615a      	str	r2, [r3, #20]
 8001e30:	e000      	b.n	8001e34 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e32:	bf00      	nop
    }
  }
}
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_HCD_Start+0x16>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e013      	b.n	8001e78 <HAL_HCD_Start+0x3e>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 f8ce 	bl	8006000 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f003 fde6 	bl	8005a3a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_HCD_Stop+0x16>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e00d      	b.n	8001eb2 <HAL_HCD_Stop+0x32>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 fcbc 	bl	8006820 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f004 f870 	bl	8005fac <USB_ResetPort>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	3360      	adds	r3, #96	; 0x60
 8001ef0:	781b      	ldrb	r3, [r3, #0]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	212c      	movs	r1, #44	; 0x2c
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	3350      	adds	r3, #80	; 0x50
 8001f18:	681b      	ldr	r3, [r3, #0]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 f8b4 	bl	80060a0 <USB_GetCurrentFrame>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 f88f 	bl	8006072 <USB_GetHostSpeed>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d11a      	bne.n	8001fc4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	212c      	movs	r1, #44	; 0x2c
 8001fa6:	fb01 f303 	mul.w	r3, r1, r3
 8001faa:	4413      	add	r3, r2
 8001fac:	3361      	adds	r3, #97	; 0x61
 8001fae:	2206      	movs	r2, #6
 8001fb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 faf6 	bl	80065ae <USB_HC_Halt>
 8001fc2:	e0af      	b.n	8002124 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fda:	d11b      	bne.n	8002014 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3361      	adds	r3, #97	; 0x61
 8001ffe:	2207      	movs	r2, #7
 8002000:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f004 face 	bl	80065ae <USB_HC_Halt>
 8002012:	e087      	b.n	8002124 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b20      	cmp	r3, #32
 8002028:	d109      	bne.n	800203e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4413      	add	r3, r2
 8002032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002036:	461a      	mov	r2, r3
 8002038:	2320      	movs	r3, #32
 800203a:	6093      	str	r3, [r2, #8]
 800203c:	e072      	b.n	8002124 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4413      	add	r3, r2
 8002046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b08      	cmp	r3, #8
 8002052:	d11a      	bne.n	800208a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002060:	461a      	mov	r2, r3
 8002062:	2308      	movs	r3, #8
 8002064:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3361      	adds	r3, #97	; 0x61
 8002074:	2205      	movs	r2, #5
 8002076:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f004 fa93 	bl	80065ae <USB_HC_Halt>
 8002088:	e04c      	b.n	8002124 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	015a      	lsls	r2, r3, #5
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	4413      	add	r3, r2
 8002092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a0:	d11b      	bne.n	80020da <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	461a      	mov	r2, r3
 80020b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3361      	adds	r3, #97	; 0x61
 80020c4:	2208      	movs	r2, #8
 80020c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fa6b 	bl	80065ae <USB_HC_Halt>
 80020d8:	e024      	b.n	8002124 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ec:	2b80      	cmp	r3, #128	; 0x80
 80020ee:	d119      	bne.n	8002124 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	461a      	mov	r2, r3
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	212c      	movs	r1, #44	; 0x2c
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	4413      	add	r3, r2
 800210e:	3361      	adds	r3, #97	; 0x61
 8002110:	2206      	movs	r2, #6
 8002112:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f004 fa45 	bl	80065ae <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800213a:	d112      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f004 fa31 	bl	80065ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002158:	461a      	mov	r2, r3
 800215a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002160:	e24e      	b.n	8002600 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	f040 80df 	bne.w	8002338 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d019      	beq.n	80021b6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	212c      	movs	r1, #44	; 0x2c
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	3348      	adds	r3, #72	; 0x48
 8002190:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	0159      	lsls	r1, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	440b      	add	r3, r1
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021a4:	1ad2      	subs	r2, r2, r3
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	202c      	movs	r0, #44	; 0x2c
 80021ac:	fb00 f303 	mul.w	r3, r0, r3
 80021b0:	440b      	add	r3, r1
 80021b2:	3350      	adds	r3, #80	; 0x50
 80021b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	3361      	adds	r3, #97	; 0x61
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	335c      	adds	r3, #92	; 0x5c
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	461a      	mov	r2, r3
 80021e8:	2301      	movs	r3, #1
 80021ea:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	333f      	adds	r3, #63	; 0x3f
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d009      	beq.n	8002214 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	333f      	adds	r3, #63	; 0x3f
 800220e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002210:	2b02      	cmp	r3, #2
 8002212:	d111      	bne.n	8002238 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f004 f9c5 	bl	80065ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002230:	461a      	mov	r2, r3
 8002232:	2310      	movs	r3, #16
 8002234:	6093      	str	r3, [r2, #8]
 8002236:	e03a      	b.n	80022ae <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	333f      	adds	r3, #63	; 0x3f
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d009      	beq.n	8002260 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	333f      	adds	r3, #63	; 0x3f
 800225a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800225c:	2b01      	cmp	r3, #1
 800225e:	d126      	bne.n	80022ae <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	0151      	lsls	r1, r2, #5
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	440a      	add	r2, r1
 8002276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800227a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800227e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	212c      	movs	r1, #44	; 0x2c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3360      	adds	r3, #96	; 0x60
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	b2d9      	uxtb	r1, r3
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	202c      	movs	r0, #44	; 0x2c
 800229c:	fb00 f303 	mul.w	r3, r0, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	3360      	adds	r3, #96	; 0x60
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f006 fc25 	bl	8008af8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d12b      	bne.n	800230e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	212c      	movs	r1, #44	; 0x2c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	3348      	adds	r3, #72	; 0x48
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	202c      	movs	r0, #44	; 0x2c
 80022cc:	fb00 f202 	mul.w	r2, r0, r2
 80022d0:	440a      	add	r2, r1
 80022d2:	3240      	adds	r2, #64	; 0x40
 80022d4:	8812      	ldrh	r2, [r2, #0]
 80022d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 818e 	beq.w	8002600 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3354      	adds	r3, #84	; 0x54
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	f083 0301 	eor.w	r3, r3, #1
 80022f8:	b2d8      	uxtb	r0, r3
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3354      	adds	r3, #84	; 0x54
 8002308:	4602      	mov	r2, r0
 800230a:	701a      	strb	r2, [r3, #0]
}
 800230c:	e178      	b.n	8002600 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3354      	adds	r3, #84	; 0x54
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	f083 0301 	eor.w	r3, r3, #1
 8002322:	b2d8      	uxtb	r0, r3
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	3354      	adds	r3, #84	; 0x54
 8002332:	4602      	mov	r2, r0
 8002334:	701a      	strb	r2, [r3, #0]
}
 8002336:	e163      	b.n	8002600 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	f040 80f6 	bne.w	800253c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3361      	adds	r3, #97	; 0x61
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d109      	bne.n	8002378 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	3360      	adds	r3, #96	; 0x60
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
 8002376:	e0c9      	b.n	800250c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	3361      	adds	r3, #97	; 0x61
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d109      	bne.n	80023a0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3360      	adds	r3, #96	; 0x60
 800239a:	2205      	movs	r2, #5
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e0b5      	b.n	800250c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	3361      	adds	r3, #97	; 0x61
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b06      	cmp	r3, #6
 80023b2:	d009      	beq.n	80023c8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3361      	adds	r3, #97	; 0x61
 80023c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d150      	bne.n	800246a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	335c      	adds	r3, #92	; 0x5c
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	202c      	movs	r0, #44	; 0x2c
 80023e0:	fb00 f303 	mul.w	r3, r0, r3
 80023e4:	440b      	add	r3, r1
 80023e6:	335c      	adds	r3, #92	; 0x5c
 80023e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	335c      	adds	r3, #92	; 0x5c
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d912      	bls.n	8002424 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	212c      	movs	r1, #44	; 0x2c
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	4413      	add	r3, r2
 800240a:	335c      	adds	r3, #92	; 0x5c
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3360      	adds	r3, #96	; 0x60
 800241e:	2204      	movs	r2, #4
 8002420:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002422:	e073      	b.n	800250c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3360      	adds	r3, #96	; 0x60
 8002432:	2202      	movs	r2, #2
 8002434:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800244c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002454:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002468:	e050      	b.n	800250c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	3361      	adds	r3, #97	; 0x61
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b03      	cmp	r3, #3
 800247c:	d122      	bne.n	80024c4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	3360      	adds	r3, #96	; 0x60
 800248c:	2202      	movs	r2, #2
 800248e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024a6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024ae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e023      	b.n	800250c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	212c      	movs	r1, #44	; 0x2c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	3361      	adds	r3, #97	; 0x61
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b07      	cmp	r3, #7
 80024d6:	d119      	bne.n	800250c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	335c      	adds	r3, #92	; 0x5c
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	202c      	movs	r0, #44	; 0x2c
 80024f0:	fb00 f303 	mul.w	r3, r0, r3
 80024f4:	440b      	add	r3, r1
 80024f6:	335c      	adds	r3, #92	; 0x5c
 80024f8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	212c      	movs	r1, #44	; 0x2c
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	4413      	add	r3, r2
 8002506:	3360      	adds	r3, #96	; 0x60
 8002508:	2204      	movs	r2, #4
 800250a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4413      	add	r3, r2
 8002514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002518:	461a      	mov	r2, r3
 800251a:	2302      	movs	r3, #2
 800251c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	b2d9      	uxtb	r1, r3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	202c      	movs	r0, #44	; 0x2c
 8002528:	fb00 f303 	mul.w	r3, r0, r3
 800252c:	4413      	add	r3, r2
 800252e:	3360      	adds	r3, #96	; 0x60
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f006 fadf 	bl	8008af8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800253a:	e061      	b.n	8002600 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b10      	cmp	r3, #16
 8002550:	d156      	bne.n	8002600 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	333f      	adds	r3, #63	; 0x3f
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d111      	bne.n	800258a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	335c      	adds	r3, #92	; 0x5c
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f004 f813 	bl	80065ae <USB_HC_Halt>
 8002588:	e031      	b.n	80025ee <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	333f      	adds	r3, #63	; 0x3f
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	212c      	movs	r1, #44	; 0x2c
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	333f      	adds	r3, #63	; 0x3f
 80025ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d11d      	bne.n	80025ee <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	212c      	movs	r1, #44	; 0x2c
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	335c      	adds	r3, #92	; 0x5c
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d110      	bne.n	80025ee <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3361      	adds	r3, #97	; 0x61
 80025da:	2203      	movs	r2, #3
 80025dc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 ffe0 	bl	80065ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	461a      	mov	r2, r3
 80025fc:	2310      	movs	r3, #16
 80025fe:	6093      	str	r3, [r2, #8]
}
 8002600:	bf00      	nop
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b04      	cmp	r3, #4
 8002636:	d11a      	bne.n	800266e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	461a      	mov	r2, r3
 8002646:	2304      	movs	r3, #4
 8002648:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	3361      	adds	r3, #97	; 0x61
 8002658:	2206      	movs	r2, #6
 800265a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f003 ffa1 	bl	80065ae <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800266c:	e331      	b.n	8002cd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	4413      	add	r3, r2
 8002676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b20      	cmp	r3, #32
 8002682:	d12e      	bne.n	80026e2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	461a      	mov	r2, r3
 8002692:	2320      	movs	r3, #32
 8002694:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	333d      	adds	r3, #61	; 0x3d
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	f040 8313 	bne.w	8002cd2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	333d      	adds	r3, #61	; 0x3d
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	212c      	movs	r1, #44	; 0x2c
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3360      	adds	r3, #96	; 0x60
 80026cc:	2202      	movs	r2, #2
 80026ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 ff67 	bl	80065ae <USB_HC_Halt>
}
 80026e0:	e2f7      	b.n	8002cd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f8:	d112      	bne.n	8002720 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	461a      	mov	r2, r3
 8002708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800270c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f003 ff48 	bl	80065ae <USB_HC_Halt>
}
 800271e:	e2d8      	b.n	8002cd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d140      	bne.n	80027b8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	335c      	adds	r3, #92	; 0x5c
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	2b40      	cmp	r3, #64	; 0x40
 800275c:	d111      	bne.n	8002782 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	333d      	adds	r3, #61	; 0x3d
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	461a      	mov	r2, r3
 800277e:	2340      	movs	r3, #64	; 0x40
 8002780:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	461a      	mov	r2, r3
 8002790:	2301      	movs	r3, #1
 8002792:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	3361      	adds	r3, #97	; 0x61
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f003 fefc 	bl	80065ae <USB_HC_Halt>
}
 80027b6:	e28c      	b.n	8002cd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ca:	2b40      	cmp	r3, #64	; 0x40
 80027cc:	d12c      	bne.n	8002828 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	3361      	adds	r3, #97	; 0x61
 80027dc:	2204      	movs	r2, #4
 80027de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	333d      	adds	r3, #61	; 0x3d
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	335c      	adds	r3, #92	; 0x5c
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f003 fecd 	bl	80065ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	4413      	add	r3, r2
 800281c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002820:	461a      	mov	r2, r3
 8002822:	2340      	movs	r3, #64	; 0x40
 8002824:	6093      	str	r3, [r2, #8]
}
 8002826:	e254      	b.n	8002cd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b08      	cmp	r3, #8
 800283c:	d11a      	bne.n	8002874 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	2308      	movs	r3, #8
 800284e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3361      	adds	r3, #97	; 0x61
 800285e:	2205      	movs	r2, #5
 8002860:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f003 fe9e 	bl	80065ae <USB_HC_Halt>
}
 8002872:	e22e      	b.n	8002cd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b10      	cmp	r3, #16
 8002888:	d140      	bne.n	800290c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	335c      	adds	r3, #92	; 0x5c
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3361      	adds	r3, #97	; 0x61
 80028aa:	2203      	movs	r2, #3
 80028ac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	333d      	adds	r3, #61	; 0x3d
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d112      	bne.n	80028e8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	333c      	adds	r3, #60	; 0x3c
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d108      	bne.n	80028e8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	333d      	adds	r3, #61	; 0x3d
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 fe5b 	bl	80065ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	461a      	mov	r2, r3
 8002906:	2310      	movs	r3, #16
 8002908:	6093      	str	r3, [r2, #8]
}
 800290a:	e1e2      	b.n	8002cd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291e:	2b80      	cmp	r3, #128	; 0x80
 8002920:	d164      	bne.n	80029ec <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d111      	bne.n	800294e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3361      	adds	r3, #97	; 0x61
 8002938:	2206      	movs	r2, #6
 800293a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f003 fe31 	bl	80065ae <USB_HC_Halt>
 800294c:	e044      	b.n	80029d8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	212c      	movs	r1, #44	; 0x2c
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	335c      	adds	r3, #92	; 0x5c
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	202c      	movs	r0, #44	; 0x2c
 8002966:	fb00 f303 	mul.w	r3, r0, r3
 800296a:	440b      	add	r3, r1
 800296c:	335c      	adds	r3, #92	; 0x5c
 800296e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	335c      	adds	r3, #92	; 0x5c
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d920      	bls.n	80029c6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	335c      	adds	r3, #92	; 0x5c
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	3360      	adds	r3, #96	; 0x60
 80029a4:	2204      	movs	r2, #4
 80029a6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	b2d9      	uxtb	r1, r3
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	202c      	movs	r0, #44	; 0x2c
 80029b2:	fb00 f303 	mul.w	r3, r0, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3360      	adds	r3, #96	; 0x60
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f006 f89a 	bl	8008af8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029c4:	e008      	b.n	80029d8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	212c      	movs	r1, #44	; 0x2c
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	3360      	adds	r3, #96	; 0x60
 80029d4:	2202      	movs	r2, #2
 80029d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	461a      	mov	r2, r3
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	6093      	str	r3, [r2, #8]
}
 80029ea:	e172      	b.n	8002cd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a02:	d11b      	bne.n	8002a3c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3361      	adds	r3, #97	; 0x61
 8002a12:	2208      	movs	r2, #8
 8002a14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 fdc4 	bl	80065ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	461a      	mov	r2, r3
 8002a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a38:	6093      	str	r3, [r2, #8]
}
 8002a3a:	e14a      	b.n	8002cd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	f040 813f 	bne.w	8002cd2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3361      	adds	r3, #97	; 0x61
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d17d      	bne.n	8002b64 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3360      	adds	r3, #96	; 0x60
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	333f      	adds	r3, #63	; 0x3f
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d00a      	beq.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	333f      	adds	r3, #63	; 0x3f
 8002a9c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	f040 8100 	bne.w	8002ca4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d113      	bne.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3355      	adds	r3, #85	; 0x55
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f083 0301 	eor.w	r3, r3, #1
 8002ac0:	b2d8      	uxtb	r0, r3
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3355      	adds	r3, #85	; 0x55
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	f040 80e3 	bne.w	8002ca4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	334c      	adds	r3, #76	; 0x4c
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80d8 	beq.w	8002ca4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	334c      	adds	r3, #76	; 0x4c
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	202c      	movs	r0, #44	; 0x2c
 8002b0a:	fb00 f202 	mul.w	r2, r0, r2
 8002b0e:	440a      	add	r2, r1
 8002b10:	3240      	adds	r2, #64	; 0x40
 8002b12:	8812      	ldrh	r2, [r2, #0]
 8002b14:	4413      	add	r3, r2
 8002b16:	3b01      	subs	r3, #1
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	202c      	movs	r0, #44	; 0x2c
 8002b1e:	fb00 f202 	mul.w	r2, r0, r2
 8002b22:	440a      	add	r2, r1
 8002b24:	3240      	adds	r2, #64	; 0x40
 8002b26:	8812      	ldrh	r2, [r2, #0]
 8002b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80b5 	beq.w	8002ca4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3355      	adds	r3, #85	; 0x55
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	f083 0301 	eor.w	r3, r3, #1
 8002b4e:	b2d8      	uxtb	r0, r3
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3355      	adds	r3, #85	; 0x55
 8002b5e:	4602      	mov	r2, r0
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e09f      	b.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3361      	adds	r3, #97	; 0x61
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d109      	bne.n	8002b8c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3360      	adds	r3, #96	; 0x60
 8002b86:	2202      	movs	r2, #2
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	e08b      	b.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3361      	adds	r3, #97	; 0x61
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d109      	bne.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3360      	adds	r3, #96	; 0x60
 8002bae:	2202      	movs	r2, #2
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e077      	b.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3361      	adds	r3, #97	; 0x61
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d109      	bne.n	8002bdc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3360      	adds	r3, #96	; 0x60
 8002bd6:	2205      	movs	r2, #5
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e063      	b.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3361      	adds	r3, #97	; 0x61
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d009      	beq.n	8002c04 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3361      	adds	r3, #97	; 0x61
 8002bfe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d14f      	bne.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	335c      	adds	r3, #92	; 0x5c
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	202c      	movs	r0, #44	; 0x2c
 8002c1c:	fb00 f303 	mul.w	r3, r0, r3
 8002c20:	440b      	add	r3, r1
 8002c22:	335c      	adds	r3, #92	; 0x5c
 8002c24:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	335c      	adds	r3, #92	; 0x5c
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d912      	bls.n	8002c60 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	335c      	adds	r3, #92	; 0x5c
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3360      	adds	r3, #96	; 0x60
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e021      	b.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3360      	adds	r3, #96	; 0x60
 8002c6e:	2202      	movs	r2, #2
 8002c70:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c88:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c90:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	b2d9      	uxtb	r1, r3
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	202c      	movs	r0, #44	; 0x2c
 8002cc0:	fb00 f303 	mul.w	r3, r0, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3360      	adds	r3, #96	; 0x60
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f005 ff13 	bl	8008af8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cd2:	bf00      	nop
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b08a      	sub	sp, #40	; 0x28
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	0c5b      	lsrs	r3, r3, #17
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d0e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d004      	beq.n	8002d20 <HCD_RXQLVL_IRQHandler+0x46>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	f000 80a9 	beq.w	8002e70 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d1e:	e0aa      	b.n	8002e76 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80a6 	beq.w	8002e74 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	3344      	adds	r3, #68	; 0x44
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 809b 	beq.w	8002e74 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	212c      	movs	r1, #44	; 0x2c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3350      	adds	r3, #80	; 0x50
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	441a      	add	r2, r3
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	202c      	movs	r0, #44	; 0x2c
 8002d58:	fb00 f303 	mul.w	r3, r0, r3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	334c      	adds	r3, #76	; 0x4c
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d87a      	bhi.n	8002e5c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3344      	adds	r3, #68	; 0x44
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	b292      	uxth	r2, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f002 ff6c 	bl	8005c5c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	3344      	adds	r3, #68	; 0x44
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	441a      	add	r2, r3
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	202c      	movs	r0, #44	; 0x2c
 8002d9e:	fb00 f303 	mul.w	r3, r0, r3
 8002da2:	440b      	add	r3, r1
 8002da4:	3344      	adds	r3, #68	; 0x44
 8002da6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3350      	adds	r3, #80	; 0x50
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	441a      	add	r2, r3
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	202c      	movs	r0, #44	; 0x2c
 8002dc2:	fb00 f303 	mul.w	r3, r0, r3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3350      	adds	r3, #80	; 0x50
 8002dca:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	0cdb      	lsrs	r3, r3, #19
 8002ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3340      	adds	r3, #64	; 0x40
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d13c      	bne.n	8002e74 <HCD_RXQLVL_IRQHandler+0x19a>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d039      	beq.n	8002e74 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e16:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e1e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3354      	adds	r3, #84	; 0x54
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	f083 0301 	eor.w	r3, r3, #1
 8002e46:	b2d8      	uxtb	r0, r3
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3354      	adds	r3, #84	; 0x54
 8002e56:	4602      	mov	r2, r0
 8002e58:	701a      	strb	r2, [r3, #0]
      break;
 8002e5a:	e00b      	b.n	8002e74 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3360      	adds	r3, #96	; 0x60
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	701a      	strb	r2, [r3, #0]
      break;
 8002e6e:	e001      	b.n	8002e74 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e70:	bf00      	nop
 8002e72:	e000      	b.n	8002e76 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e74:	bf00      	nop
  }
}
 8002e76:	bf00      	nop
 8002e78:	3728      	adds	r7, #40	; 0x28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002eaa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d10b      	bne.n	8002ece <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d102      	bne.n	8002ec6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f005 fdfd 	bl	8008ac0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d132      	bne.n	8002f3e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f043 0308 	orr.w	r3, r3, #8
 8002ede:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d126      	bne.n	8002f38 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d113      	bne.n	8002f1a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ef8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002efc:	d106      	bne.n	8002f0c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2102      	movs	r1, #2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 f817 	bl	8005f38 <USB_InitFSLSPClkSel>
 8002f0a:	e011      	b.n	8002f30 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 f810 	bl	8005f38 <USB_InitFSLSPClkSel>
 8002f18:	e00a      	b.n	8002f30 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d106      	bne.n	8002f30 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f2e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f005 fdef 	bl	8008b14 <HAL_HCD_PortEnabled_Callback>
 8002f36:	e002      	b.n	8002f3e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f005 fdf9 	bl	8008b30 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d103      	bne.n	8002f50 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f043 0320 	orr.w	r3, r3, #32
 8002f4e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6013      	str	r3, [r2, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e12b      	b.n	80031ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fd fdaa 	bl	8000ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2224      	movs	r2, #36	; 0x24
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fc8:	f001 fa20 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 8002fcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4a81      	ldr	r2, [pc, #516]	; (80031d8 <HAL_I2C_Init+0x274>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d807      	bhi.n	8002fe8 <HAL_I2C_Init+0x84>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4a80      	ldr	r2, [pc, #512]	; (80031dc <HAL_I2C_Init+0x278>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	bf94      	ite	ls
 8002fe0:	2301      	movls	r3, #1
 8002fe2:	2300      	movhi	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e006      	b.n	8002ff6 <HAL_I2C_Init+0x92>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4a7d      	ldr	r2, [pc, #500]	; (80031e0 <HAL_I2C_Init+0x27c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	bf94      	ite	ls
 8002ff0:	2301      	movls	r3, #1
 8002ff2:	2300      	movhi	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e0e7      	b.n	80031ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4a78      	ldr	r2, [pc, #480]	; (80031e4 <HAL_I2C_Init+0x280>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	0c9b      	lsrs	r3, r3, #18
 8003008:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	4a6a      	ldr	r2, [pc, #424]	; (80031d8 <HAL_I2C_Init+0x274>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d802      	bhi.n	8003038 <HAL_I2C_Init+0xd4>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3301      	adds	r3, #1
 8003036:	e009      	b.n	800304c <HAL_I2C_Init+0xe8>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	4a69      	ldr	r2, [pc, #420]	; (80031e8 <HAL_I2C_Init+0x284>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	3301      	adds	r3, #1
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	430b      	orrs	r3, r1
 8003052:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800305e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	495c      	ldr	r1, [pc, #368]	; (80031d8 <HAL_I2C_Init+0x274>)
 8003068:	428b      	cmp	r3, r1
 800306a:	d819      	bhi.n	80030a0 <HAL_I2C_Init+0x13c>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e59      	subs	r1, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fbb1 f3f3 	udiv	r3, r1, r3
 800307a:	1c59      	adds	r1, r3, #1
 800307c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003080:	400b      	ands	r3, r1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_I2C_Init+0x138>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1e59      	subs	r1, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fbb1 f3f3 	udiv	r3, r1, r3
 8003094:	3301      	adds	r3, #1
 8003096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309a:	e051      	b.n	8003140 <HAL_I2C_Init+0x1dc>
 800309c:	2304      	movs	r3, #4
 800309e:	e04f      	b.n	8003140 <HAL_I2C_Init+0x1dc>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d111      	bne.n	80030cc <HAL_I2C_Init+0x168>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1e58      	subs	r0, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	440b      	add	r3, r1
 80030b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e012      	b.n	80030f2 <HAL_I2C_Init+0x18e>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e58      	subs	r0, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	0099      	lsls	r1, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Init+0x196>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e022      	b.n	8003140 <HAL_I2C_Init+0x1dc>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10e      	bne.n	8003120 <HAL_I2C_Init+0x1bc>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1e58      	subs	r0, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6859      	ldr	r1, [r3, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	440b      	add	r3, r1
 8003110:	fbb0 f3f3 	udiv	r3, r0, r3
 8003114:	3301      	adds	r3, #1
 8003116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311e:	e00f      	b.n	8003140 <HAL_I2C_Init+0x1dc>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1e58      	subs	r0, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	0099      	lsls	r1, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	fbb0 f3f3 	udiv	r3, r0, r3
 8003136:	3301      	adds	r3, #1
 8003138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	6809      	ldr	r1, [r1, #0]
 8003144:	4313      	orrs	r3, r2
 8003146:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800316e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6911      	ldr	r1, [r2, #16]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68d2      	ldr	r2, [r2, #12]
 800317a:	4311      	orrs	r1, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	430b      	orrs	r3, r1
 8003182:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	000186a0 	.word	0x000186a0
 80031dc:	001e847f 	.word	0x001e847f
 80031e0:	003d08ff 	.word	0x003d08ff
 80031e4:	431bde83 	.word	0x431bde83
 80031e8:	10624dd3 	.word	0x10624dd3

080031ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e128      	b.n	8003450 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a90      	ldr	r2, [pc, #576]	; (8003458 <HAL_I2S_Init+0x26c>)
 8003216:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fd fcab 	bl	8000b74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003234:	f023 030f 	bic.w	r3, r3, #15
 8003238:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2202      	movs	r2, #2
 8003240:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d060      	beq.n	800330c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d102      	bne.n	8003258 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003252:	2310      	movs	r3, #16
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	e001      	b.n	800325c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003258:	2320      	movs	r3, #32
 800325a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b20      	cmp	r3, #32
 8003262:	d802      	bhi.n	800326a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800326a:	2001      	movs	r0, #1
 800326c:	f001 f9e6 	bl	800463c <HAL_RCCEx_GetPeriphCLKFreq>
 8003270:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327a:	d125      	bne.n	80032c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d010      	beq.n	80032a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	fbb2 f2f3 	udiv	r2, r2, r3
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	461a      	mov	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	3305      	adds	r3, #5
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	e01f      	b.n	80032e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	461a      	mov	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	3305      	adds	r3, #5
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	e00e      	b.n	80032e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	461a      	mov	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e2:	3305      	adds	r3, #5
 80032e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4a5c      	ldr	r2, [pc, #368]	; (800345c <HAL_I2S_Init+0x270>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	08db      	lsrs	r3, r3, #3
 80032f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	e003      	b.n	8003314 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800330c:	2302      	movs	r3, #2
 800330e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d902      	bls.n	8003320 <HAL_I2S_Init+0x134>
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2bff      	cmp	r3, #255	; 0xff
 800331e:	d907      	bls.n	8003330 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	f043 0210 	orr.w	r2, r3, #16
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e08f      	b.n	8003450 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	ea42 0103 	orr.w	r1, r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	430a      	orrs	r2, r1
 8003342:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800334e:	f023 030f 	bic.w	r3, r3, #15
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6851      	ldr	r1, [r2, #4]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	4311      	orrs	r1, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68d2      	ldr	r2, [r2, #12]
 8003360:	4311      	orrs	r1, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6992      	ldr	r2, [r2, #24]
 8003366:	430a      	orrs	r2, r1
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003372:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d161      	bne.n	8003440 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a38      	ldr	r2, [pc, #224]	; (8003460 <HAL_I2S_Init+0x274>)
 8003380:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a37      	ldr	r2, [pc, #220]	; (8003464 <HAL_I2S_Init+0x278>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d101      	bne.n	8003390 <HAL_I2S_Init+0x1a4>
 800338c:	4b36      	ldr	r3, [pc, #216]	; (8003468 <HAL_I2S_Init+0x27c>)
 800338e:	e001      	b.n	8003394 <HAL_I2S_Init+0x1a8>
 8003390:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	4932      	ldr	r1, [pc, #200]	; (8003464 <HAL_I2S_Init+0x278>)
 800339c:	428a      	cmp	r2, r1
 800339e:	d101      	bne.n	80033a4 <HAL_I2S_Init+0x1b8>
 80033a0:	4a31      	ldr	r2, [pc, #196]	; (8003468 <HAL_I2S_Init+0x27c>)
 80033a2:	e001      	b.n	80033a8 <HAL_I2S_Init+0x1bc>
 80033a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033ac:	f023 030f 	bic.w	r3, r3, #15
 80033b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <HAL_I2S_Init+0x278>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d101      	bne.n	80033c0 <HAL_I2S_Init+0x1d4>
 80033bc:	4b2a      	ldr	r3, [pc, #168]	; (8003468 <HAL_I2S_Init+0x27c>)
 80033be:	e001      	b.n	80033c4 <HAL_I2S_Init+0x1d8>
 80033c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c4:	2202      	movs	r2, #2
 80033c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a25      	ldr	r2, [pc, #148]	; (8003464 <HAL_I2S_Init+0x278>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_I2S_Init+0x1ea>
 80033d2:	4b25      	ldr	r3, [pc, #148]	; (8003468 <HAL_I2S_Init+0x27c>)
 80033d4:	e001      	b.n	80033da <HAL_I2S_Init+0x1ee>
 80033d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e6:	d003      	beq.n	80033f0 <HAL_I2S_Init+0x204>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	e001      	b.n	80033fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003406:	4313      	orrs	r3, r2
 8003408:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003410:	4313      	orrs	r3, r2
 8003412:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800341a:	4313      	orrs	r3, r2
 800341c:	b29a      	uxth	r2, r3
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	4313      	orrs	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003428:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <HAL_I2S_Init+0x278>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <HAL_I2S_Init+0x24c>
 8003434:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <HAL_I2S_Init+0x27c>)
 8003436:	e001      	b.n	800343c <HAL_I2S_Init+0x250>
 8003438:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343c:	897a      	ldrh	r2, [r7, #10]
 800343e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3720      	adds	r7, #32
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	08003563 	.word	0x08003563
 800345c:	cccccccd 	.word	0xcccccccd
 8003460:	08003679 	.word	0x08003679
 8003464:	40003800 	.word	0x40003800
 8003468:	40003400 	.word	0x40003400

0800346c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	881a      	ldrh	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	1c9a      	adds	r2, r3, #2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10e      	bne.n	80034fc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ffb8 	bl	800346c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	b292      	uxth	r2, r2
 8003518:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	1c9a      	adds	r2, r3, #2
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10e      	bne.n	800355a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800354a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff93 	bl	8003480 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b04      	cmp	r3, #4
 800357c:	d13a      	bne.n	80035f4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d109      	bne.n	800359c <I2S_IRQHandler+0x3a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b40      	cmp	r3, #64	; 0x40
 8003594:	d102      	bne.n	800359c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff ffb4 	bl	8003504 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d126      	bne.n	80035f4 <I2S_IRQHandler+0x92>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d11f      	bne.n	80035f4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f043 0202 	orr.w	r2, r3, #2
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff ff50 	bl	8003494 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d136      	bne.n	800366e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d109      	bne.n	800361e <I2S_IRQHandler+0xbc>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	2b80      	cmp	r3, #128	; 0x80
 8003616:	d102      	bne.n	800361e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ff45 	bl	80034a8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d122      	bne.n	800366e <I2S_IRQHandler+0x10c>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b20      	cmp	r3, #32
 8003634:	d11b      	bne.n	800366e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003644:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003660:	f043 0204 	orr.w	r2, r3, #4
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff13 	bl	8003494 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800366e:	bf00      	nop
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a92      	ldr	r2, [pc, #584]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003692:	4b92      	ldr	r3, [pc, #584]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003694:	e001      	b.n	800369a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003696:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a8b      	ldr	r2, [pc, #556]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036b0:	4b8a      	ldr	r3, [pc, #552]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036b2:	e001      	b.n	80036b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c4:	d004      	beq.n	80036d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 8099 	bne.w	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d107      	bne.n	80036ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f925 	bl	8003934 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d107      	bne.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9c8 	bl	8003a94 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b40      	cmp	r3, #64	; 0x40
 800370c:	d13a      	bne.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d035      	beq.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6e      	ldr	r2, [pc, #440]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d101      	bne.n	8003726 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003722:	4b6e      	ldr	r3, [pc, #440]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003724:	e001      	b.n	800372a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003726:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4969      	ldr	r1, [pc, #420]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003732:	428b      	cmp	r3, r1
 8003734:	d101      	bne.n	800373a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003736:	4b69      	ldr	r3, [pc, #420]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003738:	e001      	b.n	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800373a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800373e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003742:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003752:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f043 0202 	orr.w	r2, r3, #2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff fe88 	bl	8003494 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b08      	cmp	r3, #8
 800378c:	f040 80c3 	bne.w	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80bd 	beq.w	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a49      	ldr	r2, [pc, #292]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037b6:	4b49      	ldr	r3, [pc, #292]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b8:	e001      	b.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4944      	ldr	r1, [pc, #272]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037c6:	428b      	cmp	r3, r1
 80037c8:	d101      	bne.n	80037ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037ca:	4b44      	ldr	r3, [pc, #272]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037cc:	e001      	b.n	80037d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037d8:	2300      	movs	r3, #0
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	f043 0204 	orr.w	r2, r3, #4
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fe4a 	bl	8003494 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003800:	e089      	b.n	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b02      	cmp	r3, #2
 800380a:	d107      	bne.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f8be 	bl	8003998 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d107      	bne.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f8fd 	bl	8003a30 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d12f      	bne.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d02a      	beq.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003858:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1e      	ldr	r2, [pc, #120]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d101      	bne.n	8003868 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003866:	e001      	b.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4919      	ldr	r1, [pc, #100]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003874:	428b      	cmp	r3, r1
 8003876:	d101      	bne.n	800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003878:	4b18      	ldr	r3, [pc, #96]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800387a:	e001      	b.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800387c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003880:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003884:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	f043 0202 	orr.w	r2, r3, #2
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff fdfa 	bl	8003494 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d136      	bne.n	8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d031      	beq.n	8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a07      	ldr	r2, [pc, #28]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038c0:	e001      	b.n	80038c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4902      	ldr	r1, [pc, #8]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ce:	428b      	cmp	r3, r1
 80038d0:	d106      	bne.n	80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80038d2:	4b02      	ldr	r3, [pc, #8]	; (80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038d4:	e006      	b.n	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80038d6:	bf00      	nop
 80038d8:	40003800 	.word	0x40003800
 80038dc:	40003400 	.word	0x40003400
 80038e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f043 0204 	orr.w	r2, r3, #4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fdc0 	bl	8003494 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003914:	e000      	b.n	8003918 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003916:	bf00      	nop
}
 8003918:	bf00      	nop
 800391a:	3720      	adds	r7, #32
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	1c99      	adds	r1, r3, #2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6251      	str	r1, [r2, #36]	; 0x24
 8003946:	881a      	ldrh	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d113      	bne.n	800398e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003974:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ffc9 	bl	8003920 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c99      	adds	r1, r3, #2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6251      	str	r1, [r2, #36]	; 0x24
 80039aa:	8819      	ldrh	r1, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <I2SEx_TxISR_I2SExt+0x90>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <I2SEx_TxISR_I2SExt+0x22>
 80039b6:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <I2SEx_TxISR_I2SExt+0x94>)
 80039b8:	e001      	b.n	80039be <I2SEx_TxISR_I2SExt+0x26>
 80039ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039be:	460a      	mov	r2, r1
 80039c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d121      	bne.n	8003a1e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <I2SEx_TxISR_I2SExt+0x90>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <I2SEx_TxISR_I2SExt+0x50>
 80039e4:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <I2SEx_TxISR_I2SExt+0x94>)
 80039e6:	e001      	b.n	80039ec <I2SEx_TxISR_I2SExt+0x54>
 80039e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	490d      	ldr	r1, [pc, #52]	; (8003a28 <I2SEx_TxISR_I2SExt+0x90>)
 80039f4:	428b      	cmp	r3, r1
 80039f6:	d101      	bne.n	80039fc <I2SEx_TxISR_I2SExt+0x64>
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <I2SEx_TxISR_I2SExt+0x94>)
 80039fa:	e001      	b.n	8003a00 <I2SEx_TxISR_I2SExt+0x68>
 80039fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d106      	bne.n	8003a1e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ff81 	bl	8003920 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40003800 	.word	0x40003800
 8003a2c:	40003400 	.word	0x40003400

08003a30 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68d8      	ldr	r0, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	1c99      	adds	r1, r3, #2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a48:	b282      	uxth	r2, r0
 8003a4a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d113      	bne.n	8003a8c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a72:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ff4a 	bl	8003920 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a20      	ldr	r2, [pc, #128]	; (8003b24 <I2SEx_RxISR_I2SExt+0x90>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <I2SEx_RxISR_I2SExt+0x16>
 8003aa6:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <I2SEx_RxISR_I2SExt+0x94>)
 8003aa8:	e001      	b.n	8003aae <I2SEx_RxISR_I2SExt+0x1a>
 8003aaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aae:	68d8      	ldr	r0, [r3, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	1c99      	adds	r1, r3, #2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003aba:	b282      	uxth	r2, r0
 8003abc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d121      	bne.n	8003b1a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <I2SEx_RxISR_I2SExt+0x90>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <I2SEx_RxISR_I2SExt+0x50>
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <I2SEx_RxISR_I2SExt+0x94>)
 8003ae2:	e001      	b.n	8003ae8 <I2SEx_RxISR_I2SExt+0x54>
 8003ae4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	490d      	ldr	r1, [pc, #52]	; (8003b24 <I2SEx_RxISR_I2SExt+0x90>)
 8003af0:	428b      	cmp	r3, r1
 8003af2:	d101      	bne.n	8003af8 <I2SEx_RxISR_I2SExt+0x64>
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <I2SEx_RxISR_I2SExt+0x94>)
 8003af6:	e001      	b.n	8003afc <I2SEx_RxISR_I2SExt+0x68>
 8003af8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003afc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b00:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d106      	bne.n	8003b1a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff03 	bl	8003920 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40003800 	.word	0x40003800
 8003b28:	40003400 	.word	0x40003400

08003b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e267      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d075      	beq.n	8003c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b4a:	4b88      	ldr	r3, [pc, #544]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d00c      	beq.n	8003b70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b56:	4b85      	ldr	r3, [pc, #532]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d112      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b62:	4b82      	ldr	r3, [pc, #520]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	4b7e      	ldr	r3, [pc, #504]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d05b      	beq.n	8003c34 <HAL_RCC_OscConfig+0x108>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d157      	bne.n	8003c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e242      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b90:	d106      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x74>
 8003b92:	4b76      	ldr	r3, [pc, #472]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a75      	ldr	r2, [pc, #468]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e01d      	b.n	8003bdc <HAL_RCC_OscConfig+0xb0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x98>
 8003baa:	4b70      	ldr	r3, [pc, #448]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6f      	ldr	r2, [pc, #444]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	4b6d      	ldr	r3, [pc, #436]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a6c      	ldr	r2, [pc, #432]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCC_OscConfig+0xb0>
 8003bc4:	4b69      	ldr	r3, [pc, #420]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a68      	ldr	r2, [pc, #416]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	4b66      	ldr	r3, [pc, #408]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a65      	ldr	r2, [pc, #404]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d013      	beq.n	8003c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fd fa42 	bl	800106c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fd fa3e 	bl	800106c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e207      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	4b5b      	ldr	r3, [pc, #364]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0xc0>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fd fa2e 	bl	800106c <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c14:	f7fd fa2a 	bl	800106c <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	; 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1f3      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	4b51      	ldr	r3, [pc, #324]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0xe8>
 8003c32:	e000      	b.n	8003c36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d063      	beq.n	8003d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c42:	4b4a      	ldr	r3, [pc, #296]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d11c      	bne.n	8003c94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5a:	4b44      	ldr	r3, [pc, #272]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d116      	bne.n	8003c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c66:	4b41      	ldr	r3, [pc, #260]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_RCC_OscConfig+0x152>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d001      	beq.n	8003c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e1c7      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4937      	ldr	r1, [pc, #220]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c92:	e03a      	b.n	8003d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d020      	beq.n	8003cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c9c:	4b34      	ldr	r3, [pc, #208]	; (8003d70 <HAL_RCC_OscConfig+0x244>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca2:	f7fd f9e3 	bl	800106c <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003caa:	f7fd f9df 	bl	800106c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e1a8      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbc:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4925      	ldr	r1, [pc, #148]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	600b      	str	r3, [r1, #0]
 8003cdc:	e015      	b.n	8003d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cde:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <HAL_RCC_OscConfig+0x244>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fd f9c2 	bl	800106c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cec:	f7fd f9be 	bl	800106c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e187      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d036      	beq.n	8003d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1e:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <HAL_RCC_OscConfig+0x248>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d24:	f7fd f9a2 	bl	800106c <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d2c:	f7fd f99e 	bl	800106c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e167      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_OscConfig+0x240>)
 8003d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x200>
 8003d4a:	e01b      	b.n	8003d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <HAL_RCC_OscConfig+0x248>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d52:	f7fd f98b 	bl	800106c <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d58:	e00e      	b.n	8003d78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7fd f987 	bl	800106c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d907      	bls.n	8003d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e150      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	42470000 	.word	0x42470000
 8003d74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d78:	4b88      	ldr	r3, [pc, #544]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ea      	bne.n	8003d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 8097 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d96:	4b81      	ldr	r3, [pc, #516]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10f      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	4b7d      	ldr	r3, [pc, #500]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	4a7c      	ldr	r2, [pc, #496]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db0:	6413      	str	r3, [r2, #64]	; 0x40
 8003db2:	4b7a      	ldr	r3, [pc, #488]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc2:	4b77      	ldr	r3, [pc, #476]	; (8003fa0 <HAL_RCC_OscConfig+0x474>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d118      	bne.n	8003e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dce:	4b74      	ldr	r3, [pc, #464]	; (8003fa0 <HAL_RCC_OscConfig+0x474>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a73      	ldr	r2, [pc, #460]	; (8003fa0 <HAL_RCC_OscConfig+0x474>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dda:	f7fd f947 	bl	800106c <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de2:	f7fd f943 	bl	800106c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e10c      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df4:	4b6a      	ldr	r3, [pc, #424]	; (8003fa0 <HAL_RCC_OscConfig+0x474>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x2ea>
 8003e08:	4b64      	ldr	r3, [pc, #400]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	4a63      	ldr	r2, [pc, #396]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6713      	str	r3, [r2, #112]	; 0x70
 8003e14:	e01c      	b.n	8003e50 <HAL_RCC_OscConfig+0x324>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x30c>
 8003e1e:	4b5f      	ldr	r3, [pc, #380]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a5e      	ldr	r2, [pc, #376]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	4b5c      	ldr	r3, [pc, #368]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a5b      	ldr	r2, [pc, #364]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
 8003e36:	e00b      	b.n	8003e50 <HAL_RCC_OscConfig+0x324>
 8003e38:	4b58      	ldr	r3, [pc, #352]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a57      	ldr	r2, [pc, #348]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
 8003e44:	4b55      	ldr	r3, [pc, #340]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a54      	ldr	r2, [pc, #336]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e4a:	f023 0304 	bic.w	r3, r3, #4
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d015      	beq.n	8003e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fd f908 	bl	800106c <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e60:	f7fd f904 	bl	800106c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e0cb      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e76:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0ee      	beq.n	8003e60 <HAL_RCC_OscConfig+0x334>
 8003e82:	e014      	b.n	8003eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e84:	f7fd f8f2 	bl	800106c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e8c:	f7fd f8ee 	bl	800106c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e0b5      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea2:	4b3e      	ldr	r3, [pc, #248]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1ee      	bne.n	8003e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb4:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	4a38      	ldr	r2, [pc, #224]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a1 	beq.w	800400c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eca:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d05c      	beq.n	8003f90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d141      	bne.n	8003f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ede:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <HAL_RCC_OscConfig+0x478>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fd f8c2 	bl	800106c <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fd f8be 	bl	800106c <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e087      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	019b      	lsls	r3, r3, #6
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	3b01      	subs	r3, #1
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	491b      	ldr	r1, [pc, #108]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x478>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3a:	f7fd f897 	bl	800106c <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fd f893 	bl	800106c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e05c      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x416>
 8003f60:	e054      	b.n	800400c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <HAL_RCC_OscConfig+0x478>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fd f880 	bl	800106c <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fd f87c 	bl	800106c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e045      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_OscConfig+0x470>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x444>
 8003f8e:	e03d      	b.n	800400c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e038      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <HAL_RCC_OscConfig+0x4ec>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d028      	beq.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d121      	bne.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d11a      	bne.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd8:	4013      	ands	r3, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d111      	bne.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800

0800401c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0cc      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004030:	4b68      	ldr	r3, [pc, #416]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d90c      	bls.n	8004058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403e:	4b65      	ldr	r3, [pc, #404]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004046:	4b63      	ldr	r3, [pc, #396]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d001      	beq.n	8004058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0b8      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d020      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4a58      	ldr	r2, [pc, #352]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800407a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004088:	4b53      	ldr	r3, [pc, #332]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4a52      	ldr	r2, [pc, #328]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004094:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	494d      	ldr	r1, [pc, #308]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d044      	beq.n	800413c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ba:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d119      	bne.n	80040fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e07f      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d003      	beq.n	80040da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040da:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d109      	bne.n	80040fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e06f      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ea:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e067      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040fa:	4b37      	ldr	r3, [pc, #220]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f023 0203 	bic.w	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4934      	ldr	r1, [pc, #208]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800410c:	f7fc ffae 	bl	800106c <HAL_GetTick>
 8004110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	e00a      	b.n	800412a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004114:	f7fc ffaa 	bl	800106c <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e04f      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412a:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 020c 	and.w	r2, r3, #12
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	429a      	cmp	r2, r3
 800413a:	d1eb      	bne.n	8004114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800413c:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d20c      	bcs.n	8004164 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004152:	4b20      	ldr	r3, [pc, #128]	; (80041d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e032      	b.n	80041ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4916      	ldr	r1, [pc, #88]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800418e:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	490e      	ldr	r1, [pc, #56]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041a2:	f000 f821 	bl	80041e8 <HAL_RCC_GetSysClockFreq>
 80041a6:	4602      	mov	r2, r0
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	490a      	ldr	r1, [pc, #40]	; (80041dc <HAL_RCC_ClockConfig+0x1c0>)
 80041b4:	5ccb      	ldrb	r3, [r1, r3]
 80041b6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ba:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <HAL_RCC_ClockConfig+0x1c4>)
 80041bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041be:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <HAL_RCC_ClockConfig+0x1c8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc ff0e 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023c00 	.word	0x40023c00
 80041d8:	40023800 	.word	0x40023800
 80041dc:	080091f8 	.word	0x080091f8
 80041e0:	20000000 	.word	0x20000000
 80041e4:	20000004 	.word	0x20000004

080041e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ec:	b094      	sub	sp, #80	; 0x50
 80041ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	647b      	str	r3, [r7, #68]	; 0x44
 80041f4:	2300      	movs	r3, #0
 80041f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f8:	2300      	movs	r3, #0
 80041fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004200:	4b79      	ldr	r3, [pc, #484]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 030c 	and.w	r3, r3, #12
 8004208:	2b08      	cmp	r3, #8
 800420a:	d00d      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x40>
 800420c:	2b08      	cmp	r3, #8
 800420e:	f200 80e1 	bhi.w	80043d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x34>
 8004216:	2b04      	cmp	r3, #4
 8004218:	d003      	beq.n	8004222 <HAL_RCC_GetSysClockFreq+0x3a>
 800421a:	e0db      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800421c:	4b73      	ldr	r3, [pc, #460]	; (80043ec <HAL_RCC_GetSysClockFreq+0x204>)
 800421e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004220:	e0db      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004222:	4b73      	ldr	r3, [pc, #460]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004224:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004226:	e0d8      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004228:	4b6f      	ldr	r3, [pc, #444]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004230:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004232:	4b6d      	ldr	r3, [pc, #436]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d063      	beq.n	8004306 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423e:	4b6a      	ldr	r3, [pc, #424]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	099b      	lsrs	r3, r3, #6
 8004244:	2200      	movs	r2, #0
 8004246:	63bb      	str	r3, [r7, #56]	; 0x38
 8004248:	63fa      	str	r2, [r7, #60]	; 0x3c
 800424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004250:	633b      	str	r3, [r7, #48]	; 0x30
 8004252:	2300      	movs	r3, #0
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
 8004256:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800425a:	4622      	mov	r2, r4
 800425c:	462b      	mov	r3, r5
 800425e:	f04f 0000 	mov.w	r0, #0
 8004262:	f04f 0100 	mov.w	r1, #0
 8004266:	0159      	lsls	r1, r3, #5
 8004268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800426c:	0150      	lsls	r0, r2, #5
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4621      	mov	r1, r4
 8004274:	1a51      	subs	r1, r2, r1
 8004276:	6139      	str	r1, [r7, #16]
 8004278:	4629      	mov	r1, r5
 800427a:	eb63 0301 	sbc.w	r3, r3, r1
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800428c:	4659      	mov	r1, fp
 800428e:	018b      	lsls	r3, r1, #6
 8004290:	4651      	mov	r1, sl
 8004292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004296:	4651      	mov	r1, sl
 8004298:	018a      	lsls	r2, r1, #6
 800429a:	4651      	mov	r1, sl
 800429c:	ebb2 0801 	subs.w	r8, r2, r1
 80042a0:	4659      	mov	r1, fp
 80042a2:	eb63 0901 	sbc.w	r9, r3, r1
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ba:	4690      	mov	r8, r2
 80042bc:	4699      	mov	r9, r3
 80042be:	4623      	mov	r3, r4
 80042c0:	eb18 0303 	adds.w	r3, r8, r3
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	462b      	mov	r3, r5
 80042c8:	eb49 0303 	adc.w	r3, r9, r3
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042da:	4629      	mov	r1, r5
 80042dc:	024b      	lsls	r3, r1, #9
 80042de:	4621      	mov	r1, r4
 80042e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042e4:	4621      	mov	r1, r4
 80042e6:	024a      	lsls	r2, r1, #9
 80042e8:	4610      	mov	r0, r2
 80042ea:	4619      	mov	r1, r3
 80042ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ee:	2200      	movs	r2, #0
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042f8:	f7fb ff6e 	bl	80001d8 <__aeabi_uldivmod>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4613      	mov	r3, r2
 8004302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004304:	e058      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004306:	4b38      	ldr	r3, [pc, #224]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	099b      	lsrs	r3, r3, #6
 800430c:	2200      	movs	r2, #0
 800430e:	4618      	mov	r0, r3
 8004310:	4611      	mov	r1, r2
 8004312:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004316:	623b      	str	r3, [r7, #32]
 8004318:	2300      	movs	r3, #0
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
 800431c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004320:	4642      	mov	r2, r8
 8004322:	464b      	mov	r3, r9
 8004324:	f04f 0000 	mov.w	r0, #0
 8004328:	f04f 0100 	mov.w	r1, #0
 800432c:	0159      	lsls	r1, r3, #5
 800432e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004332:	0150      	lsls	r0, r2, #5
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4641      	mov	r1, r8
 800433a:	ebb2 0a01 	subs.w	sl, r2, r1
 800433e:	4649      	mov	r1, r9
 8004340:	eb63 0b01 	sbc.w	fp, r3, r1
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004350:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004354:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004358:	ebb2 040a 	subs.w	r4, r2, sl
 800435c:	eb63 050b 	sbc.w	r5, r3, fp
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	00eb      	lsls	r3, r5, #3
 800436a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800436e:	00e2      	lsls	r2, r4, #3
 8004370:	4614      	mov	r4, r2
 8004372:	461d      	mov	r5, r3
 8004374:	4643      	mov	r3, r8
 8004376:	18e3      	adds	r3, r4, r3
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	464b      	mov	r3, r9
 800437c:	eb45 0303 	adc.w	r3, r5, r3
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800438e:	4629      	mov	r1, r5
 8004390:	028b      	lsls	r3, r1, #10
 8004392:	4621      	mov	r1, r4
 8004394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004398:	4621      	mov	r1, r4
 800439a:	028a      	lsls	r2, r1, #10
 800439c:	4610      	mov	r0, r2
 800439e:	4619      	mov	r1, r3
 80043a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a2:	2200      	movs	r2, #0
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	61fa      	str	r2, [r7, #28]
 80043a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ac:	f7fb ff14 	bl	80001d8 <__aeabi_uldivmod>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4613      	mov	r3, r2
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCC_GetSysClockFreq+0x204>)
 80043d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3750      	adds	r7, #80	; 0x50
 80043e0:	46bd      	mov	sp, r7
 80043e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800
 80043ec:	00f42400 	.word	0x00f42400
 80043f0:	007a1200 	.word	0x007a1200

080043f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <HAL_RCC_GetHCLKFreq+0x14>)
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000000 	.word	0x20000000

0800440c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004410:	f7ff fff0 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	0a9b      	lsrs	r3, r3, #10
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	4903      	ldr	r1, [pc, #12]	; (8004430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004422:	5ccb      	ldrb	r3, [r1, r3]
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40023800 	.word	0x40023800
 8004430:	08009208 	.word	0x08009208

08004434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004438:	f7ff ffdc 	bl	80043f4 <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	0b5b      	lsrs	r3, r3, #13
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	; (8004458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	08009208 	.word	0x08009208

0800445c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d105      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004480:	2b00      	cmp	r3, #0
 8004482:	d038      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004484:	4b68      	ldr	r3, [pc, #416]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800448a:	f7fc fdef 	bl	800106c <HAL_GetTick>
 800448e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004492:	f7fc fdeb 	bl	800106c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e0bd      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044a4:	4b61      	ldr	r3, [pc, #388]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	019b      	lsls	r3, r3, #6
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	071b      	lsls	r3, r3, #28
 80044c2:	495a      	ldr	r1, [pc, #360]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044ca:	4b57      	ldr	r3, [pc, #348]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044d0:	f7fc fdcc 	bl	800106c <HAL_GetTick>
 80044d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044d8:	f7fc fdc8 	bl	800106c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e09a      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044ea:	4b50      	ldr	r3, [pc, #320]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8083 	beq.w	800460a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	4b48      	ldr	r3, [pc, #288]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	4a47      	ldr	r2, [pc, #284]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004512:	6413      	str	r3, [r2, #64]	; 0x40
 8004514:	4b45      	ldr	r3, [pc, #276]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004520:	4b43      	ldr	r3, [pc, #268]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a42      	ldr	r2, [pc, #264]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800452c:	f7fc fd9e 	bl	800106c <HAL_GetTick>
 8004530:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004534:	f7fc fd9a 	bl	800106c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e06c      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004546:	4b3a      	ldr	r3, [pc, #232]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004552:	4b36      	ldr	r3, [pc, #216]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d02f      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d028      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004570:	4b2e      	ldr	r3, [pc, #184]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004578:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800457a:	4b2e      	ldr	r3, [pc, #184]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800457c:	2201      	movs	r2, #1
 800457e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004580:	4b2c      	ldr	r3, [pc, #176]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004586:	4a29      	ldr	r2, [pc, #164]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800458c:	4b27      	ldr	r3, [pc, #156]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d114      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004598:	f7fc fd68 	bl	800106c <HAL_GetTick>
 800459c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459e:	e00a      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a0:	f7fc fd64 	bl	800106c <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e034      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b6:	4b1d      	ldr	r3, [pc, #116]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0ee      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ce:	d10d      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x190>
 80045d0:	4b16      	ldr	r3, [pc, #88]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e4:	4911      	ldr	r1, [pc, #68]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
 80045ea:	e005      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80045ec:	4b0f      	ldr	r3, [pc, #60]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	4a0e      	ldr	r2, [pc, #56]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045f6:	6093      	str	r3, [r2, #8]
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004604:	4909      	ldr	r1, [pc, #36]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	7d1a      	ldrb	r2, [r3, #20]
 800461a:	4b07      	ldr	r3, [pc, #28]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800461c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	42470068 	.word	0x42470068
 800462c:	40023800 	.word	0x40023800
 8004630:	40007000 	.word	0x40007000
 8004634:	42470e40 	.word	0x42470e40
 8004638:	424711e0 	.word	0x424711e0

0800463c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d140      	bne.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800465a:	4b24      	ldr	r3, [pc, #144]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d131      	bne.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004670:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004672:	617b      	str	r3, [r7, #20]
          break;
 8004674:	e031      	b.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004676:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004682:	d109      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004684:	4b19      	ldr	r3, [pc, #100]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800468e:	4a19      	ldr	r2, [pc, #100]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	e008      	b.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004698:	4b14      	ldr	r3, [pc, #80]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800469a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046aa:	4b10      	ldr	r3, [pc, #64]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b0:	099b      	lsrs	r3, r3, #6
 80046b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	fb02 f303 	mul.w	r3, r2, r3
 80046bc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046be:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c4:	0f1b      	lsrs	r3, r3, #28
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
          break;
 80046d2:	e002      	b.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
          break;
 80046d8:	bf00      	nop
        }
      }
      break;
 80046da:	bf00      	nop
    }
  }
  return frequency;
 80046dc:	697b      	ldr	r3, [r7, #20]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800
 80046f0:	00bb8000 	.word	0x00bb8000
 80046f4:	007a1200 	.word	0x007a1200
 80046f8:	00f42400 	.word	0x00f42400

080046fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e07b      	b.n	8004806 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	2b00      	cmp	r3, #0
 8004714:	d108      	bne.n	8004728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471e:	d009      	beq.n	8004734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	61da      	str	r2, [r3, #28]
 8004726:	e005      	b.n	8004734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fc fade 	bl	8000d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	ea42 0103 	orr.w	r1, r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f003 0104 	and.w	r1, r3, #4
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	f003 0210 	and.w	r2, r3, #16
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e03f      	b.n	80048a0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7fc fab3 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2224      	movs	r2, #36	; 0x24
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004850:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fe1c 	bl	8005490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004866:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004876:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004886:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2220      	movs	r2, #32
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	; 0x28
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	4613      	mov	r3, r2
 80048b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d17c      	bne.n	80049c2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_UART_Transmit+0x2c>
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e075      	b.n	80049c4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Transmit+0x3e>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e06e      	b.n	80049c4 <HAL_UART_Transmit+0x11c>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2221      	movs	r2, #33	; 0x21
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048fc:	f7fc fbb6 	bl	800106c <HAL_GetTick>
 8004900:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	88fa      	ldrh	r2, [r7, #6]
 8004906:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004916:	d108      	bne.n	800492a <HAL_UART_Transmit+0x82>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004920:	2300      	movs	r3, #0
 8004922:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	e003      	b.n	8004932 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800493a:	e02a      	b.n	8004992 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2200      	movs	r2, #0
 8004944:	2180      	movs	r1, #128	; 0x80
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fb9a 	bl	8005080 <UART_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e036      	b.n	80049c4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10b      	bne.n	8004974 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800496a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	3302      	adds	r3, #2
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	e007      	b.n	8004984 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	781a      	ldrb	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3301      	adds	r3, #1
 8004982:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1cf      	bne.n	800493c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2200      	movs	r2, #0
 80049a4:	2140      	movs	r1, #64	; 0x40
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 fb6a 	bl	8005080 <UART_WaitOnFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e006      	b.n	80049c4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	e000      	b.n	80049c4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049c2:	2302      	movs	r3, #2
  }
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3720      	adds	r7, #32
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	f040 808c 	bne.w	8004b06 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_UART_Receive+0x2e>
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e084      	b.n	8004b08 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_UART_Receive+0x40>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e07d      	b.n	8004b08 <HAL_UART_Receive+0x13c>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2222      	movs	r2, #34	; 0x22
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a28:	f7fc fb20 	bl	800106c <HAL_GetTick>
 8004a2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	88fa      	ldrh	r2, [r7, #6]
 8004a32:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a42:	d108      	bne.n	8004a56 <HAL_UART_Receive+0x8a>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	e003      	b.n	8004a5e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004a66:	e043      	b.n	8004af0 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2120      	movs	r1, #32
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fb04 	bl	8005080 <UART_WaitOnFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e042      	b.n	8004b08 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10c      	bne.n	8004aa2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	61bb      	str	r3, [r7, #24]
 8004aa0:	e01f      	b.n	8004ae2 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aaa:	d007      	beq.n	8004abc <HAL_UART_Receive+0xf0>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <HAL_UART_Receive+0xfe>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	e008      	b.n	8004adc <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1b6      	bne.n	8004a68 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e000      	b.n	8004b08 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004b06:	2302      	movs	r3, #2
  }
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3720      	adds	r7, #32
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b0ba      	sub	sp, #232	; 0xe8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10f      	bne.n	8004b76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <HAL_UART_IRQHandler+0x66>
 8004b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fbd3 	bl	800531a <UART_Receive_IT>
      return;
 8004b74:	e256      	b.n	8005024 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 80de 	beq.w	8004d3c <HAL_UART_IRQHandler+0x22c>
 8004b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80d1 	beq.w	8004d3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00b      	beq.n	8004bbe <HAL_UART_IRQHandler+0xae>
 8004ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f043 0201 	orr.w	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00b      	beq.n	8004be2 <HAL_UART_IRQHandler+0xd2>
 8004bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d005      	beq.n	8004be2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f043 0202 	orr.w	r2, r3, #2
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <HAL_UART_IRQHandler+0xf6>
 8004bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f043 0204 	orr.w	r2, r3, #4
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d011      	beq.n	8004c36 <HAL_UART_IRQHandler+0x126>
 8004c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d105      	bne.n	8004c2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d005      	beq.n	8004c36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f043 0208 	orr.w	r2, r3, #8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 81ed 	beq.w	800501a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_UART_IRQHandler+0x14e>
 8004c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fb5e 	bl	800531a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c68:	2b40      	cmp	r3, #64	; 0x40
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d103      	bne.n	8004c8a <HAL_UART_IRQHandler+0x17a>
 8004c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d04f      	beq.n	8004d2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fa66 	bl	800515c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	d141      	bne.n	8004d22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3314      	adds	r3, #20
 8004ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3314      	adds	r3, #20
 8004cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1d9      	bne.n	8004c9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d013      	beq.n	8004d1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	4a7d      	ldr	r2, [pc, #500]	; (8004eec <HAL_UART_IRQHandler+0x3dc>)
 8004cf8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fc fb65 	bl	80013ce <HAL_DMA_Abort_IT>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d016      	beq.n	8004d38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d14:	4610      	mov	r0, r2
 8004d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d18:	e00e      	b.n	8004d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f99a 	bl	8005054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d20:	e00a      	b.n	8004d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f996 	bl	8005054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d28:	e006      	b.n	8004d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f992 	bl	8005054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d36:	e170      	b.n	800501a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d38:	bf00      	nop
    return;
 8004d3a:	e16e      	b.n	800501a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	f040 814a 	bne.w	8004fda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8143 	beq.w	8004fda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 813c 	beq.w	8004fda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d62:	2300      	movs	r3, #0
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	60bb      	str	r3, [r7, #8]
 8004d76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	f040 80b4 	bne.w	8004ef0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8140 	beq.w	800501e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004da6:	429a      	cmp	r2, r3
 8004da8:	f080 8139 	bcs.w	800501e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004db2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dbe:	f000 8088 	beq.w	8004ed2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004dee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1d9      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3314      	adds	r3, #20
 8004e14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e1      	bne.n	8004e0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3314      	adds	r3, #20
 8004e50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3314      	adds	r3, #20
 8004e6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e3      	bne.n	8004e4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	330c      	adds	r3, #12
 8004e96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea2:	f023 0310 	bic.w	r3, r3, #16
 8004ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004eb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004eb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e3      	bne.n	8004e90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fc fa0e 	bl	80012ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f8c0 	bl	8005068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ee8:	e099      	b.n	800501e <HAL_UART_IRQHandler+0x50e>
 8004eea:	bf00      	nop
 8004eec:	08005223 	.word	0x08005223
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 808b 	beq.w	8005022 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8086 	beq.w	8005022 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	330c      	adds	r3, #12
 8004f36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f3a:	647a      	str	r2, [r7, #68]	; 0x44
 8004f3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e3      	bne.n	8004f16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3314      	adds	r3, #20
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3314      	adds	r3, #20
 8004f6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f72:	633a      	str	r2, [r7, #48]	; 0x30
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e3      	bne.n	8004f4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0310 	bic.w	r3, r3, #16
 8004faa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	330c      	adds	r3, #12
 8004fb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004fb8:	61fa      	str	r2, [r7, #28]
 8004fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	69b9      	ldr	r1, [r7, #24]
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e3      	bne.n	8004f94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f848 	bl	8005068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fd8:	e023      	b.n	8005022 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <HAL_UART_IRQHandler+0x4ea>
 8004fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f929 	bl	800524a <UART_Transmit_IT>
    return;
 8004ff8:	e014      	b.n	8005024 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00e      	beq.n	8005024 <HAL_UART_IRQHandler+0x514>
 8005006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f969 	bl	80052ea <UART_EndTransmit_IT>
    return;
 8005018:	e004      	b.n	8005024 <HAL_UART_IRQHandler+0x514>
    return;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <HAL_UART_IRQHandler+0x514>
      return;
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <HAL_UART_IRQHandler+0x514>
      return;
 8005022:	bf00      	nop
  }
}
 8005024:	37e8      	adds	r7, #232	; 0xe8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop

0800502c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b090      	sub	sp, #64	; 0x40
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005090:	e050      	b.n	8005134 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d04c      	beq.n	8005134 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800509a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509c:	2b00      	cmp	r3, #0
 800509e:	d007      	beq.n	80050b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80050a0:	f7fb ffe4 	bl	800106c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d241      	bcs.n	8005134 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050d0:	637a      	str	r2, [r7, #52]	; 0x34
 80050d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e5      	bne.n	80050b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3314      	adds	r3, #20
 80050ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	613b      	str	r3, [r7, #16]
   return(result);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f023 0301 	bic.w	r3, r3, #1
 80050fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3314      	adds	r3, #20
 8005102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005104:	623a      	str	r2, [r7, #32]
 8005106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	69f9      	ldr	r1, [r7, #28]
 800510a:	6a3a      	ldr	r2, [r7, #32]
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	61bb      	str	r3, [r7, #24]
   return(result);
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e5      	bne.n	80050e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e00f      	b.n	8005154 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4013      	ands	r3, r2
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	429a      	cmp	r2, r3
 8005142:	bf0c      	ite	eq
 8005144:	2301      	moveq	r3, #1
 8005146:	2300      	movne	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	429a      	cmp	r2, r3
 8005150:	d09f      	beq.n	8005092 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3740      	adds	r7, #64	; 0x40
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b095      	sub	sp, #84	; 0x54
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800517a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	330c      	adds	r3, #12
 8005182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005184:	643a      	str	r2, [r7, #64]	; 0x40
 8005186:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800518a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e5      	bne.n	8005164 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3314      	adds	r3, #20
 800519e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3314      	adds	r3, #20
 80051b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e5      	bne.n	8005198 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d119      	bne.n	8005208 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f023 0310 	bic.w	r3, r3, #16
 80051ea:	647b      	str	r3, [r7, #68]	; 0x44
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051f4:	61ba      	str	r2, [r7, #24]
 80051f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6979      	ldr	r1, [r7, #20]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	613b      	str	r3, [r7, #16]
   return(result);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e5      	bne.n	80051d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005216:	bf00      	nop
 8005218:	3754      	adds	r7, #84	; 0x54
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f7ff ff09 	bl	8005054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b21      	cmp	r3, #33	; 0x21
 800525c:	d13e      	bne.n	80052dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005266:	d114      	bne.n	8005292 <UART_Transmit_IT+0x48>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d110      	bne.n	8005292 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005284:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	1c9a      	adds	r2, r3, #2
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	621a      	str	r2, [r3, #32]
 8005290:	e008      	b.n	80052a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6211      	str	r1, [r2, #32]
 800529c:	781a      	ldrb	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4619      	mov	r1, r3
 80052b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10f      	bne.n	80052d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005300:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fe8e 	bl	800502c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b08c      	sub	sp, #48	; 0x30
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b22      	cmp	r3, #34	; 0x22
 800532c:	f040 80ab 	bne.w	8005486 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005338:	d117      	bne.n	800536a <UART_Receive_IT+0x50>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d113      	bne.n	800536a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005358:	b29a      	uxth	r2, r3
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	1c9a      	adds	r2, r3, #2
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	629a      	str	r2, [r3, #40]	; 0x28
 8005368:	e026      	b.n	80053b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005370:	2300      	movs	r3, #0
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537c:	d007      	beq.n	800538e <UART_Receive_IT+0x74>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10a      	bne.n	800539c <UART_Receive_IT+0x82>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	b2da      	uxtb	r2, r3
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	701a      	strb	r2, [r3, #0]
 800539a:	e008      	b.n	80053ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	4619      	mov	r1, r3
 80053c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d15a      	bne.n	8005482 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0220 	bic.w	r2, r2, #32
 80053da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695a      	ldr	r2, [r3, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0201 	bic.w	r2, r2, #1
 80053fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	2b01      	cmp	r3, #1
 800540a:	d135      	bne.n	8005478 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	330c      	adds	r3, #12
 8005418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	613b      	str	r3, [r7, #16]
   return(result);
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f023 0310 	bic.w	r3, r3, #16
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005432:	623a      	str	r2, [r7, #32]
 8005434:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	69f9      	ldr	r1, [r7, #28]
 8005438:	6a3a      	ldr	r2, [r7, #32]
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e5      	bne.n	8005412 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b10      	cmp	r3, #16
 8005452:	d10a      	bne.n	800546a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff fdf9 	bl	8005068 <HAL_UARTEx_RxEventCallback>
 8005476:	e002      	b.n	800547e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff fde1 	bl	8005040 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	e002      	b.n	8005488 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	e000      	b.n	8005488 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005486:	2302      	movs	r3, #2
  }
}
 8005488:	4618      	mov	r0, r3
 800548a:	3730      	adds	r7, #48	; 0x30
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005494:	b0c0      	sub	sp, #256	; 0x100
 8005496:	af00      	add	r7, sp, #0
 8005498:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ac:	68d9      	ldr	r1, [r3, #12]
 80054ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	ea40 0301 	orr.w	r3, r0, r1
 80054b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054e8:	f021 010c 	bic.w	r1, r1, #12
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054f6:	430b      	orrs	r3, r1
 80054f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550a:	6999      	ldr	r1, [r3, #24]
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	ea40 0301 	orr.w	r3, r0, r1
 8005516:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4b8f      	ldr	r3, [pc, #572]	; (800575c <UART_SetConfig+0x2cc>)
 8005520:	429a      	cmp	r2, r3
 8005522:	d005      	beq.n	8005530 <UART_SetConfig+0xa0>
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	4b8d      	ldr	r3, [pc, #564]	; (8005760 <UART_SetConfig+0x2d0>)
 800552c:	429a      	cmp	r2, r3
 800552e:	d104      	bne.n	800553a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005530:	f7fe ff80 	bl	8004434 <HAL_RCC_GetPCLK2Freq>
 8005534:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005538:	e003      	b.n	8005542 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800553a:	f7fe ff67 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 800553e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554c:	f040 810c 	bne.w	8005768 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005554:	2200      	movs	r2, #0
 8005556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800555a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800555e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005562:	4622      	mov	r2, r4
 8005564:	462b      	mov	r3, r5
 8005566:	1891      	adds	r1, r2, r2
 8005568:	65b9      	str	r1, [r7, #88]	; 0x58
 800556a:	415b      	adcs	r3, r3
 800556c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800556e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005572:	4621      	mov	r1, r4
 8005574:	eb12 0801 	adds.w	r8, r2, r1
 8005578:	4629      	mov	r1, r5
 800557a:	eb43 0901 	adc.w	r9, r3, r1
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800558a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800558e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005592:	4690      	mov	r8, r2
 8005594:	4699      	mov	r9, r3
 8005596:	4623      	mov	r3, r4
 8005598:	eb18 0303 	adds.w	r3, r8, r3
 800559c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055a0:	462b      	mov	r3, r5
 80055a2:	eb49 0303 	adc.w	r3, r9, r3
 80055a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055be:	460b      	mov	r3, r1
 80055c0:	18db      	adds	r3, r3, r3
 80055c2:	653b      	str	r3, [r7, #80]	; 0x50
 80055c4:	4613      	mov	r3, r2
 80055c6:	eb42 0303 	adc.w	r3, r2, r3
 80055ca:	657b      	str	r3, [r7, #84]	; 0x54
 80055cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055d4:	f7fa fe00 	bl	80001d8 <__aeabi_uldivmod>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4b61      	ldr	r3, [pc, #388]	; (8005764 <UART_SetConfig+0x2d4>)
 80055de:	fba3 2302 	umull	r2, r3, r3, r2
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	011c      	lsls	r4, r3, #4
 80055e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80055f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80055f8:	4642      	mov	r2, r8
 80055fa:	464b      	mov	r3, r9
 80055fc:	1891      	adds	r1, r2, r2
 80055fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8005600:	415b      	adcs	r3, r3
 8005602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005604:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005608:	4641      	mov	r1, r8
 800560a:	eb12 0a01 	adds.w	sl, r2, r1
 800560e:	4649      	mov	r1, r9
 8005610:	eb43 0b01 	adc.w	fp, r3, r1
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005620:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005628:	4692      	mov	sl, r2
 800562a:	469b      	mov	fp, r3
 800562c:	4643      	mov	r3, r8
 800562e:	eb1a 0303 	adds.w	r3, sl, r3
 8005632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005636:	464b      	mov	r3, r9
 8005638:	eb4b 0303 	adc.w	r3, fp, r3
 800563c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800564c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005650:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005654:	460b      	mov	r3, r1
 8005656:	18db      	adds	r3, r3, r3
 8005658:	643b      	str	r3, [r7, #64]	; 0x40
 800565a:	4613      	mov	r3, r2
 800565c:	eb42 0303 	adc.w	r3, r2, r3
 8005660:	647b      	str	r3, [r7, #68]	; 0x44
 8005662:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005666:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800566a:	f7fa fdb5 	bl	80001d8 <__aeabi_uldivmod>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4611      	mov	r1, r2
 8005674:	4b3b      	ldr	r3, [pc, #236]	; (8005764 <UART_SetConfig+0x2d4>)
 8005676:	fba3 2301 	umull	r2, r3, r3, r1
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	2264      	movs	r2, #100	; 0x64
 800567e:	fb02 f303 	mul.w	r3, r2, r3
 8005682:	1acb      	subs	r3, r1, r3
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800568a:	4b36      	ldr	r3, [pc, #216]	; (8005764 <UART_SetConfig+0x2d4>)
 800568c:	fba3 2302 	umull	r2, r3, r3, r2
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005698:	441c      	add	r4, r3
 800569a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056ac:	4642      	mov	r2, r8
 80056ae:	464b      	mov	r3, r9
 80056b0:	1891      	adds	r1, r2, r2
 80056b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80056b4:	415b      	adcs	r3, r3
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056bc:	4641      	mov	r1, r8
 80056be:	1851      	adds	r1, r2, r1
 80056c0:	6339      	str	r1, [r7, #48]	; 0x30
 80056c2:	4649      	mov	r1, r9
 80056c4:	414b      	adcs	r3, r1
 80056c6:	637b      	str	r3, [r7, #52]	; 0x34
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80056d4:	4659      	mov	r1, fp
 80056d6:	00cb      	lsls	r3, r1, #3
 80056d8:	4651      	mov	r1, sl
 80056da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056de:	4651      	mov	r1, sl
 80056e0:	00ca      	lsls	r2, r1, #3
 80056e2:	4610      	mov	r0, r2
 80056e4:	4619      	mov	r1, r3
 80056e6:	4603      	mov	r3, r0
 80056e8:	4642      	mov	r2, r8
 80056ea:	189b      	adds	r3, r3, r2
 80056ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056f0:	464b      	mov	r3, r9
 80056f2:	460a      	mov	r2, r1
 80056f4:	eb42 0303 	adc.w	r3, r2, r3
 80056f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005708:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800570c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005710:	460b      	mov	r3, r1
 8005712:	18db      	adds	r3, r3, r3
 8005714:	62bb      	str	r3, [r7, #40]	; 0x28
 8005716:	4613      	mov	r3, r2
 8005718:	eb42 0303 	adc.w	r3, r2, r3
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800571e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005722:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005726:	f7fa fd57 	bl	80001d8 <__aeabi_uldivmod>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <UART_SetConfig+0x2d4>)
 8005730:	fba3 1302 	umull	r1, r3, r3, r2
 8005734:	095b      	lsrs	r3, r3, #5
 8005736:	2164      	movs	r1, #100	; 0x64
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	3332      	adds	r3, #50	; 0x32
 8005742:	4a08      	ldr	r2, [pc, #32]	; (8005764 <UART_SetConfig+0x2d4>)
 8005744:	fba2 2303 	umull	r2, r3, r2, r3
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	f003 0207 	and.w	r2, r3, #7
 800574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4422      	add	r2, r4
 8005756:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005758:	e106      	b.n	8005968 <UART_SetConfig+0x4d8>
 800575a:	bf00      	nop
 800575c:	40011000 	.word	0x40011000
 8005760:	40011400 	.word	0x40011400
 8005764:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800576c:	2200      	movs	r2, #0
 800576e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005772:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005776:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800577a:	4642      	mov	r2, r8
 800577c:	464b      	mov	r3, r9
 800577e:	1891      	adds	r1, r2, r2
 8005780:	6239      	str	r1, [r7, #32]
 8005782:	415b      	adcs	r3, r3
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
 8005786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800578a:	4641      	mov	r1, r8
 800578c:	1854      	adds	r4, r2, r1
 800578e:	4649      	mov	r1, r9
 8005790:	eb43 0501 	adc.w	r5, r3, r1
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	00eb      	lsls	r3, r5, #3
 800579e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057a2:	00e2      	lsls	r2, r4, #3
 80057a4:	4614      	mov	r4, r2
 80057a6:	461d      	mov	r5, r3
 80057a8:	4643      	mov	r3, r8
 80057aa:	18e3      	adds	r3, r4, r3
 80057ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057b0:	464b      	mov	r3, r9
 80057b2:	eb45 0303 	adc.w	r3, r5, r3
 80057b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80057d6:	4629      	mov	r1, r5
 80057d8:	008b      	lsls	r3, r1, #2
 80057da:	4621      	mov	r1, r4
 80057dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057e0:	4621      	mov	r1, r4
 80057e2:	008a      	lsls	r2, r1, #2
 80057e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80057e8:	f7fa fcf6 	bl	80001d8 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4b60      	ldr	r3, [pc, #384]	; (8005974 <UART_SetConfig+0x4e4>)
 80057f2:	fba3 2302 	umull	r2, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	011c      	lsls	r4, r3, #4
 80057fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005804:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005808:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800580c:	4642      	mov	r2, r8
 800580e:	464b      	mov	r3, r9
 8005810:	1891      	adds	r1, r2, r2
 8005812:	61b9      	str	r1, [r7, #24]
 8005814:	415b      	adcs	r3, r3
 8005816:	61fb      	str	r3, [r7, #28]
 8005818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800581c:	4641      	mov	r1, r8
 800581e:	1851      	adds	r1, r2, r1
 8005820:	6139      	str	r1, [r7, #16]
 8005822:	4649      	mov	r1, r9
 8005824:	414b      	adcs	r3, r1
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005834:	4659      	mov	r1, fp
 8005836:	00cb      	lsls	r3, r1, #3
 8005838:	4651      	mov	r1, sl
 800583a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800583e:	4651      	mov	r1, sl
 8005840:	00ca      	lsls	r2, r1, #3
 8005842:	4610      	mov	r0, r2
 8005844:	4619      	mov	r1, r3
 8005846:	4603      	mov	r3, r0
 8005848:	4642      	mov	r2, r8
 800584a:	189b      	adds	r3, r3, r2
 800584c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005850:	464b      	mov	r3, r9
 8005852:	460a      	mov	r2, r1
 8005854:	eb42 0303 	adc.w	r3, r2, r3
 8005858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	67bb      	str	r3, [r7, #120]	; 0x78
 8005866:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005874:	4649      	mov	r1, r9
 8005876:	008b      	lsls	r3, r1, #2
 8005878:	4641      	mov	r1, r8
 800587a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800587e:	4641      	mov	r1, r8
 8005880:	008a      	lsls	r2, r1, #2
 8005882:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005886:	f7fa fca7 	bl	80001d8 <__aeabi_uldivmod>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4611      	mov	r1, r2
 8005890:	4b38      	ldr	r3, [pc, #224]	; (8005974 <UART_SetConfig+0x4e4>)
 8005892:	fba3 2301 	umull	r2, r3, r3, r1
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	2264      	movs	r2, #100	; 0x64
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	1acb      	subs	r3, r1, r3
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	3332      	adds	r3, #50	; 0x32
 80058a4:	4a33      	ldr	r2, [pc, #204]	; (8005974 <UART_SetConfig+0x4e4>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	095b      	lsrs	r3, r3, #5
 80058ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b0:	441c      	add	r4, r3
 80058b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058b6:	2200      	movs	r2, #0
 80058b8:	673b      	str	r3, [r7, #112]	; 0x70
 80058ba:	677a      	str	r2, [r7, #116]	; 0x74
 80058bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058c0:	4642      	mov	r2, r8
 80058c2:	464b      	mov	r3, r9
 80058c4:	1891      	adds	r1, r2, r2
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	415b      	adcs	r3, r3
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058d0:	4641      	mov	r1, r8
 80058d2:	1851      	adds	r1, r2, r1
 80058d4:	6039      	str	r1, [r7, #0]
 80058d6:	4649      	mov	r1, r9
 80058d8:	414b      	adcs	r3, r1
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058e8:	4659      	mov	r1, fp
 80058ea:	00cb      	lsls	r3, r1, #3
 80058ec:	4651      	mov	r1, sl
 80058ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058f2:	4651      	mov	r1, sl
 80058f4:	00ca      	lsls	r2, r1, #3
 80058f6:	4610      	mov	r0, r2
 80058f8:	4619      	mov	r1, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	4642      	mov	r2, r8
 80058fe:	189b      	adds	r3, r3, r2
 8005900:	66bb      	str	r3, [r7, #104]	; 0x68
 8005902:	464b      	mov	r3, r9
 8005904:	460a      	mov	r2, r1
 8005906:	eb42 0303 	adc.w	r3, r2, r3
 800590a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	663b      	str	r3, [r7, #96]	; 0x60
 8005916:	667a      	str	r2, [r7, #100]	; 0x64
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005924:	4649      	mov	r1, r9
 8005926:	008b      	lsls	r3, r1, #2
 8005928:	4641      	mov	r1, r8
 800592a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800592e:	4641      	mov	r1, r8
 8005930:	008a      	lsls	r2, r1, #2
 8005932:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005936:	f7fa fc4f 	bl	80001d8 <__aeabi_uldivmod>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4b0d      	ldr	r3, [pc, #52]	; (8005974 <UART_SetConfig+0x4e4>)
 8005940:	fba3 1302 	umull	r1, r3, r3, r2
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	2164      	movs	r1, #100	; 0x64
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	3332      	adds	r3, #50	; 0x32
 8005952:	4a08      	ldr	r2, [pc, #32]	; (8005974 <UART_SetConfig+0x4e4>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	f003 020f 	and.w	r2, r3, #15
 800595e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4422      	add	r2, r4
 8005966:	609a      	str	r2, [r3, #8]
}
 8005968:	bf00      	nop
 800596a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800596e:	46bd      	mov	sp, r7
 8005970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005974:	51eb851f 	.word	0x51eb851f

08005978 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005978:	b084      	sub	sp, #16
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	f107 001c 	add.w	r0, r7, #28
 8005986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	2b01      	cmp	r3, #1
 800598e:	d122      	bne.n	80059d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80059a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d105      	bne.n	80059ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f9c0 	bl	8005d50 <USB_CoreReset>
 80059d0:	4603      	mov	r3, r0
 80059d2:	73fb      	strb	r3, [r7, #15]
 80059d4:	e01a      	b.n	8005a0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f9b4 	bl	8005d50 <USB_CoreReset>
 80059e8:	4603      	mov	r3, r0
 80059ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	639a      	str	r2, [r3, #56]	; 0x38
 80059fe:	e005      	b.n	8005a0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d10b      	bne.n	8005a2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f043 0206 	orr.w	r2, r3, #6
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f043 0220 	orr.w	r2, r3, #32
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a36:	b004      	add	sp, #16
 8005a38:	4770      	bx	lr

08005a3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f043 0201 	orr.w	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f023 0201 	bic.w	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d115      	bne.n	8005acc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005aac:	2001      	movs	r0, #1
 8005aae:	f7fb fae9 	bl	8001084 <HAL_Delay>
      ms++;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f93a 	bl	8005d32 <USB_GetMode>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d01e      	beq.n	8005b02 <USB_SetCurrentMode+0x84>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b31      	cmp	r3, #49	; 0x31
 8005ac8:	d9f0      	bls.n	8005aac <USB_SetCurrentMode+0x2e>
 8005aca:	e01a      	b.n	8005b02 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d115      	bne.n	8005afe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ade:	2001      	movs	r0, #1
 8005ae0:	f7fb fad0 	bl	8001084 <HAL_Delay>
      ms++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f921 	bl	8005d32 <USB_GetMode>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <USB_SetCurrentMode+0x84>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b31      	cmp	r3, #49	; 0x31
 8005afa:	d9f0      	bls.n	8005ade <USB_SetCurrentMode+0x60>
 8005afc:	e001      	b.n	8005b02 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e005      	b.n	8005b0e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b32      	cmp	r3, #50	; 0x32
 8005b06:	d101      	bne.n	8005b0c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <USB_FlushTxFifo+0x64>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d901      	bls.n	8005b38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e01b      	b.n	8005b70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	daf2      	bge.n	8005b26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	019b      	lsls	r3, r3, #6
 8005b48:	f043 0220 	orr.w	r2, r3, #32
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <USB_FlushTxFifo+0x64>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e006      	b.n	8005b70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d0f0      	beq.n	8005b50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	00030d40 	.word	0x00030d40

08005b80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4a11      	ldr	r2, [pc, #68]	; (8005bdc <USB_FlushRxFifo+0x5c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d901      	bls.n	8005b9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e018      	b.n	8005bd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	daf2      	bge.n	8005b8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2210      	movs	r2, #16
 8005bae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4a08      	ldr	r2, [pc, #32]	; (8005bdc <USB_FlushRxFifo+0x5c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d901      	bls.n	8005bc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e006      	b.n	8005bd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0310 	and.w	r3, r3, #16
 8005bca:	2b10      	cmp	r3, #16
 8005bcc:	d0f0      	beq.n	8005bb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	00030d40 	.word	0x00030d40

08005be0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b089      	sub	sp, #36	; 0x24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	4611      	mov	r1, r2
 8005bec:	461a      	mov	r2, r3
 8005bee:	460b      	mov	r3, r1
 8005bf0:	71fb      	strb	r3, [r7, #7]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005bfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d123      	bne.n	8005c4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c06:	88bb      	ldrh	r3, [r7, #4]
 8005c08:	3303      	adds	r3, #3
 8005c0a:	089b      	lsrs	r3, r3, #2
 8005c0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	e018      	b.n	8005c46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	031a      	lsls	r2, r3, #12
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c20:	461a      	mov	r2, r3
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	3301      	adds	r3, #1
 8005c32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	3301      	adds	r3, #1
 8005c38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	3301      	adds	r3, #1
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d3e2      	bcc.n	8005c14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3724      	adds	r7, #36	; 0x24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b08b      	sub	sp, #44	; 0x2c
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c72:	88fb      	ldrh	r3, [r7, #6]
 8005c74:	089b      	lsrs	r3, r3, #2
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c7a:	88fb      	ldrh	r3, [r7, #6]
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c82:	2300      	movs	r3, #0
 8005c84:	623b      	str	r3, [r7, #32]
 8005c86:	e014      	b.n	8005cb2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	3301      	adds	r3, #1
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	3301      	adds	r3, #1
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	623b      	str	r3, [r7, #32]
 8005cb2:	6a3a      	ldr	r2, [r7, #32]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d3e6      	bcc.n	8005c88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cba:	8bfb      	ldrh	r3, [r7, #30]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01e      	beq.n	8005cfe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f107 0310 	add.w	r3, r7, #16
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	701a      	strb	r2, [r3, #0]
      i++;
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	623b      	str	r3, [r7, #32]
      pDest++;
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	3301      	adds	r3, #1
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005cf2:	8bfb      	ldrh	r3, [r7, #30]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005cf8:	8bfb      	ldrh	r3, [r7, #30]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1ea      	bne.n	8005cd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	372c      	adds	r7, #44	; 0x2c
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4013      	ands	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d24:	68fb      	ldr	r3, [r7, #12]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
	...

08005d50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4a13      	ldr	r2, [pc, #76]	; (8005db4 <USB_CoreReset+0x64>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d901      	bls.n	8005d6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e01b      	b.n	8005da6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	daf2      	bge.n	8005d5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f043 0201 	orr.w	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <USB_CoreReset+0x64>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e006      	b.n	8005da6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d0f0      	beq.n	8005d86 <USB_CoreReset+0x36>

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	00030d40 	.word	0x00030d40

08005db8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005db8:	b084      	sub	sp, #16
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b086      	sub	sp, #24
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d018      	beq.n	8005e40 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d10a      	bne.n	8005e2a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e22:	f043 0304 	orr.w	r3, r3, #4
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	e014      	b.n	8005e54 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e38:	f023 0304 	bic.w	r3, r3, #4
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e009      	b.n	8005e54 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e4e:	f023 0304 	bic.w	r3, r3, #4
 8005e52:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e54:	2110      	movs	r1, #16
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fe5e 	bl	8005b18 <USB_FlushTxFifo>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fe8a 	bl	8005b80 <USB_FlushRxFifo>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e76:	2300      	movs	r3, #0
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	e015      	b.n	8005ea8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d3e5      	bcc.n	8005e7c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00b      	beq.n	8005ee2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a13      	ldr	r2, [pc, #76]	; (8005f24 <USB_HostInit+0x16c>)
 8005ed6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <USB_HostInit+0x170>)
 8005edc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005ee0:	e009      	b.n	8005ef6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2280      	movs	r2, #128	; 0x80
 8005ee6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a10      	ldr	r2, [pc, #64]	; (8005f2c <USB_HostInit+0x174>)
 8005eec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a0f      	ldr	r2, [pc, #60]	; (8005f30 <USB_HostInit+0x178>)
 8005ef2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d105      	bne.n	8005f08 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	f043 0210 	orr.w	r2, r3, #16
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699a      	ldr	r2, [r3, #24]
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <USB_HostInit+0x17c>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f20:	b004      	add	sp, #16
 8005f22:	4770      	bx	lr
 8005f24:	01000200 	.word	0x01000200
 8005f28:	00e00300 	.word	0x00e00300
 8005f2c:	00600080 	.word	0x00600080
 8005f30:	004000e0 	.word	0x004000e0
 8005f34:	a3200008 	.word	0xa3200008

08005f38 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f56:	f023 0303 	bic.w	r3, r3, #3
 8005f5a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	68f9      	ldr	r1, [r7, #12]
 8005f6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f70:	4313      	orrs	r3, r2
 8005f72:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d107      	bne.n	8005f8a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f80:	461a      	mov	r2, r3
 8005f82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005f86:	6053      	str	r3, [r2, #4]
 8005f88:	e009      	b.n	8005f9e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d106      	bne.n	8005f9e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f96:	461a      	mov	r2, r3
 8005f98:	f241 7370 	movw	r3, #6000	; 0x1770
 8005f9c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005fcc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fda:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005fdc:	2064      	movs	r0, #100	; 0x64
 8005fde:	f7fb f851 	bl	8001084 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ff0:	200a      	movs	r0, #10
 8005ff2:	f7fb f847 	bl	8001084 <HAL_Delay>

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006024:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d109      	bne.n	8006044 <USB_DriveVbus+0x44>
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d106      	bne.n	8006044 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800603e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006042:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800604a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604e:	d109      	bne.n	8006064 <USB_DriveVbus+0x64>
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800605e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006062:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	0c5b      	lsrs	r3, r3, #17
 8006090:	f003 0303 	and.w	r3, r3, #3
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	b29b      	uxth	r3, r3
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
	...

080060c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	4608      	mov	r0, r1
 80060ce:	4611      	mov	r1, r2
 80060d0:	461a      	mov	r2, r3
 80060d2:	4603      	mov	r3, r0
 80060d4:	70fb      	strb	r3, [r7, #3]
 80060d6:	460b      	mov	r3, r1
 80060d8:	70bb      	strb	r3, [r7, #2]
 80060da:	4613      	mov	r3, r2
 80060dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f2:	461a      	mov	r2, r3
 80060f4:	f04f 33ff 	mov.w	r3, #4294967295
 80060f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80060fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d87e      	bhi.n	8006200 <USB_HC_Init+0x13c>
 8006102:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <USB_HC_Init+0x44>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	08006119 	.word	0x08006119
 800610c:	080061c3 	.word	0x080061c3
 8006110:	08006119 	.word	0x08006119
 8006114:	08006185 	.word	0x08006185
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006118:	78fb      	ldrb	r3, [r7, #3]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	4413      	add	r3, r2
 8006120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006124:	461a      	mov	r2, r3
 8006126:	f240 439d 	movw	r3, #1181	; 0x49d
 800612a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800612c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006130:	2b00      	cmp	r3, #0
 8006132:	da10      	bge.n	8006156 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4413      	add	r3, r2
 800613c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	78fa      	ldrb	r2, [r7, #3]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	440a      	add	r2, r1
 800614a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800614e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006152:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006154:	e057      	b.n	8006206 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615e:	2b00      	cmp	r3, #0
 8006160:	d051      	beq.n	8006206 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4413      	add	r3, r2
 800616a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	78fa      	ldrb	r2, [r7, #3]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	440a      	add	r2, r1
 8006178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800617c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006180:	60d3      	str	r3, [r2, #12]
      break;
 8006182:	e040      	b.n	8006206 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006190:	461a      	mov	r2, r3
 8006192:	f240 639d 	movw	r3, #1693	; 0x69d
 8006196:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006198:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800619c:	2b00      	cmp	r3, #0
 800619e:	da34      	bge.n	800620a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061be:	60d3      	str	r3, [r2, #12]
      }

      break;
 80061c0:	e023      	b.n	800620a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ce:	461a      	mov	r2, r3
 80061d0:	f240 2325 	movw	r3, #549	; 0x225
 80061d4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	da17      	bge.n	800620e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	78fa      	ldrb	r2, [r7, #3]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80061fc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80061fe:	e006      	b.n	800620e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	77fb      	strb	r3, [r7, #31]
      break;
 8006204:	e004      	b.n	8006210 <USB_HC_Init+0x14c>
      break;
 8006206:	bf00      	nop
 8006208:	e002      	b.n	8006210 <USB_HC_Init+0x14c>
      break;
 800620a:	bf00      	nop
 800620c:	e000      	b.n	8006210 <USB_HC_Init+0x14c>
      break;
 800620e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	78fa      	ldrb	r2, [r7, #3]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	440a      	add	r2, r1
 8006226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800622a:	f043 0302 	orr.w	r3, r3, #2
 800622e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	2101      	movs	r1, #1
 8006240:	fa01 f303 	lsl.w	r3, r1, r3
 8006244:	6939      	ldr	r1, [r7, #16]
 8006246:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800624a:	4313      	orrs	r3, r2
 800624c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800625a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800625e:	2b00      	cmp	r3, #0
 8006260:	da03      	bge.n	800626a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	e001      	b.n	800626e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff feff 	bl	8006072 <USB_GetHostSpeed>
 8006274:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006276:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800627a:	2b02      	cmp	r3, #2
 800627c:	d106      	bne.n	800628c <USB_HC_Init+0x1c8>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d003      	beq.n	800628c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	e001      	b.n	8006290 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006290:	787b      	ldrb	r3, [r7, #1]
 8006292:	059b      	lsls	r3, r3, #22
 8006294:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006298:	78bb      	ldrb	r3, [r7, #2]
 800629a:	02db      	lsls	r3, r3, #11
 800629c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062a0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062a6:	049b      	lsls	r3, r3, #18
 80062a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80062b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	0159      	lsls	r1, r3, #5
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	440b      	add	r3, r1
 80062c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062cc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80062ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d003      	beq.n	80062de <USB_HC_Init+0x21a>
 80062d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d10f      	bne.n	80062fe <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	78fa      	ldrb	r2, [r7, #3]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062fc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80062fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08c      	sub	sp, #48	; 0x30
 800630c:	af02      	add	r7, sp, #8
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	4613      	mov	r3, r2
 8006314:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006324:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632e:	2b00      	cmp	r3, #0
 8006330:	d02d      	beq.n	800638e <USB_HC_StartXfer+0x86>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	791b      	ldrb	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d129      	bne.n	800638e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d117      	bne.n	8006370 <USB_HC_StartXfer+0x68>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	79db      	ldrb	r3, [r3, #7]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <USB_HC_StartXfer+0x48>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	79db      	ldrb	r3, [r3, #7]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d10f      	bne.n	8006370 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	4413      	add	r3, r2
 8006358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	69fa      	ldr	r2, [r7, #28]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	6a3a      	ldr	r2, [r7, #32]
 8006364:	440a      	add	r2, r1
 8006366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800636a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10b      	bne.n	800638e <USB_HC_StartXfer+0x86>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	795b      	ldrb	r3, [r3, #5]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d107      	bne.n	800638e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	4619      	mov	r1, r3
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 fa0f 	bl	80067a8 <USB_DoPing>
      return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e0f8      	b.n	8006580 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d018      	beq.n	80063c8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	8912      	ldrh	r2, [r2, #8]
 800639e:	4413      	add	r3, r2
 80063a0:	3b01      	subs	r3, #1
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	8912      	ldrh	r2, [r2, #8]
 80063a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80063aa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80063ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063ae:	8b7b      	ldrh	r3, [r7, #26]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d90b      	bls.n	80063cc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80063b4:	8b7b      	ldrh	r3, [r7, #26]
 80063b6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	8912      	ldrh	r2, [r2, #8]
 80063be:	fb03 f202 	mul.w	r2, r3, r2
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	611a      	str	r2, [r3, #16]
 80063c6:	e001      	b.n	80063cc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80063c8:	2301      	movs	r3, #1
 80063ca:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	78db      	ldrb	r3, [r3, #3]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	8912      	ldrh	r2, [r2, #8]
 80063da:	fb03 f202 	mul.w	r2, r3, r2
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	611a      	str	r2, [r3, #16]
 80063e2:	e003      	b.n	80063ec <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	695a      	ldr	r2, [r3, #20]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063f6:	04d9      	lsls	r1, r3, #19
 80063f8:	4b63      	ldr	r3, [pc, #396]	; (8006588 <USB_HC_StartXfer+0x280>)
 80063fa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80063fc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	7a9b      	ldrb	r3, [r3, #10]
 8006402:	075b      	lsls	r3, r3, #29
 8006404:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006408:	69f9      	ldr	r1, [r7, #28]
 800640a:	0148      	lsls	r0, r1, #5
 800640c:	6a39      	ldr	r1, [r7, #32]
 800640e:	4401      	add	r1, r0
 8006410:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006414:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006416:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006418:	79fb      	ldrb	r3, [r7, #7]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d009      	beq.n	8006432 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	68d9      	ldr	r1, [r3, #12]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	4413      	add	r3, r2
 800642a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642e:	460a      	mov	r2, r1
 8006430:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	bf0c      	ite	eq
 8006442:	2301      	moveq	r3, #1
 8006444:	2300      	movne	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	4413      	add	r3, r2
 8006452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	0151      	lsls	r1, r2, #5
 800645c:	6a3a      	ldr	r2, [r7, #32]
 800645e:	440a      	add	r2, r1
 8006460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006464:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006468:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	4413      	add	r3, r2
 8006472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	7e7b      	ldrb	r3, [r7, #25]
 800647a:	075b      	lsls	r3, r3, #29
 800647c:	69f9      	ldr	r1, [r7, #28]
 800647e:	0148      	lsls	r0, r1, #5
 8006480:	6a39      	ldr	r1, [r7, #32]
 8006482:	4401      	add	r1, r0
 8006484:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006488:	4313      	orrs	r3, r2
 800648a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	4413      	add	r3, r2
 8006494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064a2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	78db      	ldrb	r3, [r3, #3]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	e003      	b.n	80064be <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064bc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064c4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d2:	461a      	mov	r2, r3
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e04e      	b.n	8006580 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	78db      	ldrb	r3, [r3, #3]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d149      	bne.n	800657e <USB_HC_StartXfer+0x276>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d045      	beq.n	800657e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	79db      	ldrb	r3, [r3, #7]
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d830      	bhi.n	800655c <USB_HC_StartXfer+0x254>
 80064fa:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <USB_HC_StartXfer+0x1f8>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	08006511 	.word	0x08006511
 8006504:	08006535 	.word	0x08006535
 8006508:	08006511 	.word	0x08006511
 800650c:	08006535 	.word	0x08006535
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	3303      	adds	r3, #3
 8006516:	089b      	lsrs	r3, r3, #2
 8006518:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800651a:	8afa      	ldrh	r2, [r7, #22]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	b29b      	uxth	r3, r3
 8006522:	429a      	cmp	r2, r3
 8006524:	d91c      	bls.n	8006560 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f043 0220 	orr.w	r2, r3, #32
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	619a      	str	r2, [r3, #24]
        }
        break;
 8006532:	e015      	b.n	8006560 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	3303      	adds	r3, #3
 800653a:	089b      	lsrs	r3, r3, #2
 800653c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800653e:	8afa      	ldrh	r2, [r7, #22]
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	b29b      	uxth	r3, r3
 800654a:	429a      	cmp	r2, r3
 800654c:	d90a      	bls.n	8006564 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	619a      	str	r2, [r3, #24]
        }
        break;
 800655a:	e003      	b.n	8006564 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800655c:	bf00      	nop
 800655e:	e002      	b.n	8006566 <USB_HC_StartXfer+0x25e>
        break;
 8006560:	bf00      	nop
 8006562:	e000      	b.n	8006566 <USB_HC_StartXfer+0x25e>
        break;
 8006564:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	68d9      	ldr	r1, [r3, #12]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	785a      	ldrb	r2, [r3, #1]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	b29b      	uxth	r3, r3
 8006574:	2000      	movs	r0, #0
 8006576:	9000      	str	r0, [sp, #0]
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f7ff fb31 	bl	8005be0 <USB_WritePacket>
  }

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3728      	adds	r7, #40	; 0x28
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	1ff80000 	.word	0x1ff80000

0800658c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	b29b      	uxth	r3, r3
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b089      	sub	sp, #36	; 0x24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	0c9b      	lsrs	r3, r3, #18
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	0fdb      	lsrs	r3, r3, #31
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d104      	bne.n	8006608 <USB_HC_Halt+0x5a>
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	e0c8      	b.n	800679a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <USB_HC_Halt+0x66>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d163      	bne.n	80066dc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	4413      	add	r3, r2
 800661c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	440a      	add	r2, r1
 800662a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800662e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006632:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b00      	cmp	r3, #0
 800663e:	f040 80ab 	bne.w	8006798 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d133      	bne.n	80066b6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	4413      	add	r3, r2
 8006656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	440a      	add	r2, r1
 8006664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006668:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800666c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	440a      	add	r2, r1
 8006684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006688:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800668c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3301      	adds	r3, #1
 8006692:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800669a:	d81d      	bhi.n	80066d8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066b2:	d0ec      	beq.n	800668e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066b4:	e070      	b.n	8006798 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	69fa      	ldr	r2, [r7, #28]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066d6:	e05f      	b.n	8006798 <USB_HC_Halt+0x1ea>
            break;
 80066d8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066da:	e05d      	b.n	8006798 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066fa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d133      	bne.n	8006774 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	4413      	add	r3, r2
 8006714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	440a      	add	r2, r1
 8006722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006726:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800672a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	440a      	add	r2, r1
 8006742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800674a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006758:	d81d      	bhi.n	8006796 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	4413      	add	r3, r2
 8006762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800676c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006770:	d0ec      	beq.n	800674c <USB_HC_Halt+0x19e>
 8006772:	e011      	b.n	8006798 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	4413      	add	r3, r2
 800677c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	440a      	add	r2, r1
 800678a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	e000      	b.n	8006798 <USB_HC_Halt+0x1ea>
          break;
 8006796:	bf00      	nop
    }
  }

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3724      	adds	r7, #36	; 0x24
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80067b8:	78fb      	ldrb	r3, [r7, #3]
 80067ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80067bc:	2301      	movs	r3, #1
 80067be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	04da      	lsls	r2, r3, #19
 80067c4:	4b15      	ldr	r3, [pc, #84]	; (800681c <USB_DoPing+0x74>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	0151      	lsls	r1, r2, #5
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	440a      	add	r2, r1
 80067d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006806:	461a      	mov	r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	1ff80000 	.word	0x1ff80000

08006820 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff f911 	bl	8005a5c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800683a:	2110      	movs	r1, #16
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff f96b 	bl	8005b18 <USB_FlushTxFifo>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff f997 	bl	8005b80 <USB_FlushRxFifo>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
 8006860:	e01f      	b.n	80068a2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	4413      	add	r3, r2
 800686a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006878:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006880:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006888:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	4413      	add	r3, r2
 8006892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006896:	461a      	mov	r2, r3
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	3301      	adds	r3, #1
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	2b0f      	cmp	r3, #15
 80068a6:	d9dc      	bls.n	8006862 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068a8:	2300      	movs	r3, #0
 80068aa:	61bb      	str	r3, [r7, #24]
 80068ac:	e034      	b.n	8006918 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e2:	461a      	mov	r2, r3
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3301      	adds	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068f4:	d80c      	bhi.n	8006910 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800690c:	d0ec      	beq.n	80068e8 <USB_StopHost+0xc8>
 800690e:	e000      	b.n	8006912 <USB_StopHost+0xf2>
        break;
 8006910:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	3301      	adds	r3, #1
 8006916:	61bb      	str	r3, [r7, #24]
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2b0f      	cmp	r3, #15
 800691c:	d9c7      	bls.n	80068ae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006924:	461a      	mov	r2, r3
 8006926:	f04f 33ff 	mov.w	r3, #4294967295
 800692a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f04f 32ff 	mov.w	r2, #4294967295
 8006932:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff f880 	bl	8005a3a <USB_EnableGlobalInt>

  return ret;
 800693a:	7ffb      	ldrb	r3, [r7, #31]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3720      	adds	r7, #32
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006944:	b590      	push	{r4, r7, lr}
 8006946:	b089      	sub	sp, #36	; 0x24
 8006948:	af04      	add	r7, sp, #16
 800694a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800694c:	2301      	movs	r3, #1
 800694e:	2202      	movs	r2, #2
 8006950:	2102      	movs	r1, #2
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fc66 	bl	8007224 <USBH_FindInterface>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	2bff      	cmp	r3, #255	; 0xff
 8006960:	d002      	beq.n	8006968 <USBH_CDC_InterfaceInit+0x24>
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d901      	bls.n	800696c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006968:	2302      	movs	r3, #2
 800696a:	e13d      	b.n	8006be8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800696c:	7bfb      	ldrb	r3, [r7, #15]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fc3b 	bl	80071ec <USBH_SelectInterface>
 8006976:	4603      	mov	r3, r0
 8006978:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800697a:	7bbb      	ldrb	r3, [r7, #14]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006980:	2302      	movs	r3, #2
 8006982:	e131      	b.n	8006be8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800698a:	2050      	movs	r0, #80	; 0x50
 800698c:	f002 fad2 	bl	8008f34 <malloc>
 8006990:	4603      	mov	r3, r0
 8006992:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069a4:	2302      	movs	r3, #2
 80069a6:	e11f      	b.n	8006be8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069a8:	2250      	movs	r2, #80	; 0x50
 80069aa:	2100      	movs	r1, #0
 80069ac:	68b8      	ldr	r0, [r7, #8]
 80069ae:	f002 fb7d 	bl	80090ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	211a      	movs	r1, #26
 80069b8:	fb01 f303 	mul.w	r3, r1, r3
 80069bc:	4413      	add	r3, r2
 80069be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	b25b      	sxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	da15      	bge.n	80069f6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	211a      	movs	r1, #26
 80069d0:	fb01 f303 	mul.w	r3, r1, r3
 80069d4:	4413      	add	r3, r2
 80069d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069da:	781a      	ldrb	r2, [r3, #0]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	211a      	movs	r1, #26
 80069e6:	fb01 f303 	mul.w	r3, r1, r3
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069f0:	881a      	ldrh	r2, [r3, #0]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	785b      	ldrb	r3, [r3, #1]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 ff2e 	bl	800885e <USBH_AllocPipe>
 8006a02:	4603      	mov	r3, r0
 8006a04:	461a      	mov	r2, r3
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	7819      	ldrb	r1, [r3, #0]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	7858      	ldrb	r0, [r3, #1]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	8952      	ldrh	r2, [r2, #10]
 8006a22:	9202      	str	r2, [sp, #8]
 8006a24:	2203      	movs	r2, #3
 8006a26:	9201      	str	r2, [sp, #4]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	4623      	mov	r3, r4
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fee6 	bl	8008800 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f002 f9f5 	bl	8008e2c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a42:	2300      	movs	r3, #0
 8006a44:	2200      	movs	r2, #0
 8006a46:	210a      	movs	r1, #10
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fbeb 	bl	8007224 <USBH_FindInterface>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a52:	7bfb      	ldrb	r3, [r7, #15]
 8006a54:	2bff      	cmp	r3, #255	; 0xff
 8006a56:	d002      	beq.n	8006a5e <USBH_CDC_InterfaceInit+0x11a>
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d901      	bls.n	8006a62 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e0c2      	b.n	8006be8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	211a      	movs	r1, #26
 8006a68:	fb01 f303 	mul.w	r3, r1, r3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	b25b      	sxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	da16      	bge.n	8006aa8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	211a      	movs	r1, #26
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	4413      	add	r3, r2
 8006a86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a8a:	781a      	ldrb	r2, [r3, #0]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	211a      	movs	r1, #26
 8006a96:	fb01 f303 	mul.w	r3, r1, r3
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006aa0:	881a      	ldrh	r2, [r3, #0]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	835a      	strh	r2, [r3, #26]
 8006aa6:	e015      	b.n	8006ad4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	211a      	movs	r1, #26
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ab8:	781a      	ldrb	r2, [r3, #0]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	211a      	movs	r1, #26
 8006ac4:	fb01 f303 	mul.w	r3, r1, r3
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ace:	881a      	ldrh	r2, [r3, #0]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	211a      	movs	r1, #26
 8006ada:	fb01 f303 	mul.w	r3, r1, r3
 8006ade:	4413      	add	r3, r2
 8006ae0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	b25b      	sxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	da16      	bge.n	8006b1a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	211a      	movs	r1, #26
 8006af2:	fb01 f303 	mul.w	r3, r1, r3
 8006af6:	4413      	add	r3, r2
 8006af8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006afc:	781a      	ldrb	r2, [r3, #0]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	211a      	movs	r1, #26
 8006b08:	fb01 f303 	mul.w	r3, r1, r3
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b12:	881a      	ldrh	r2, [r3, #0]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	835a      	strh	r2, [r3, #26]
 8006b18:	e015      	b.n	8006b46 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	211a      	movs	r1, #26
 8006b20:	fb01 f303 	mul.w	r3, r1, r3
 8006b24:	4413      	add	r3, r2
 8006b26:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	211a      	movs	r1, #26
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b40:	881a      	ldrh	r2, [r3, #0]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	7b9b      	ldrb	r3, [r3, #14]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 fe86 	bl	800885e <USBH_AllocPipe>
 8006b52:	4603      	mov	r3, r0
 8006b54:	461a      	mov	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	7bdb      	ldrb	r3, [r3, #15]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fe7c 	bl	800885e <USBH_AllocPipe>
 8006b66:	4603      	mov	r3, r0
 8006b68:	461a      	mov	r2, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	7b59      	ldrb	r1, [r3, #13]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	7b98      	ldrb	r0, [r3, #14]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	8b12      	ldrh	r2, [r2, #24]
 8006b86:	9202      	str	r2, [sp, #8]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	9201      	str	r2, [sp, #4]
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	4623      	mov	r3, r4
 8006b90:	4602      	mov	r2, r0
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f001 fe34 	bl	8008800 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	7b19      	ldrb	r1, [r3, #12]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	7bd8      	ldrb	r0, [r3, #15]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	8b52      	ldrh	r2, [r2, #26]
 8006bb0:	9202      	str	r2, [sp, #8]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	9201      	str	r2, [sp, #4]
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	4623      	mov	r3, r4
 8006bba:	4602      	mov	r2, r0
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 fe1f 	bl	8008800 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	7b5b      	ldrb	r3, [r3, #13]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f002 f92a 	bl	8008e2c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	7b1b      	ldrb	r3, [r3, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f002 f923 	bl	8008e2c <USBH_LL_SetToggle>

  return USBH_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd90      	pop	{r4, r7, pc}

08006bf0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00e      	beq.n	8006c28 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 fe14 	bl	800883e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 fe3f 	bl	80088a0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	7b1b      	ldrb	r3, [r3, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00e      	beq.n	8006c4e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	7b1b      	ldrb	r3, [r3, #12]
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 fe01 	bl	800883e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	7b1b      	ldrb	r3, [r3, #12]
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fe2c 	bl	80088a0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	7b5b      	ldrb	r3, [r3, #13]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00e      	beq.n	8006c74 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	7b5b      	ldrb	r3, [r3, #13]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 fdee 	bl	800883e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	7b5b      	ldrb	r3, [r3, #13]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 fe19 	bl	80088a0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f002 f95b 	bl	8008f44 <free>
    phost->pActiveClass->pData = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c94:	2200      	movs	r2, #0
 8006c96:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3340      	adds	r3, #64	; 0x40
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f8b1 	bl	8006e22 <GetLineCoding>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006cc4:	7afb      	ldrb	r3, [r7, #11]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d105      	bne.n	8006cd6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cd0:	2102      	movs	r1, #2
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d877      	bhi.n	8006df4 <USBH_CDC_Process+0x114>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <USBH_CDC_Process+0x2c>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d21 	.word	0x08006d21
 8006d10:	08006d27 	.word	0x08006d27
 8006d14:	08006d57 	.word	0x08006d57
 8006d18:	08006dcb 	.word	0x08006dcb
 8006d1c:	08006dd9 	.word	0x08006dd9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
      break;
 8006d24:	e06d      	b.n	8006e02 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f897 	bl	8006e60 <SetLineCoding>
 8006d32:	4603      	mov	r3, r0
 8006d34:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d44:	e058      	b.n	8006df8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d055      	beq.n	8006df8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2204      	movs	r2, #4
 8006d50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006d54:	e050      	b.n	8006df8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	3340      	adds	r3, #64	; 0x40
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f860 	bl	8006e22 <GetLineCoding>
 8006d62:	4603      	mov	r3, r0
 8006d64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d66:	7bbb      	ldrb	r3, [r7, #14]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d126      	bne.n	8006dba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7e:	791b      	ldrb	r3, [r3, #4]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d13b      	bne.n	8006dfc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d8e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d133      	bne.n	8006dfc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d12b      	bne.n	8006dfc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d124      	bne.n	8006dfc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f958 	bl	8007068 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006db8:	e020      	b.n	8006dfc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d01d      	beq.n	8006dfc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006dc8:	e018      	b.n	8006dfc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f867 	bl	8006e9e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f8da 	bl	8006f8a <CDC_ProcessReception>
      break;
 8006dd6:	e014      	b.n	8006e02 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006dd8:	2100      	movs	r1, #0
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 ffef 	bl	8007dbe <USBH_ClrFeature>
 8006de0:	4603      	mov	r3, r0
 8006de2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006df2:	e005      	b.n	8006e00 <USBH_CDC_Process+0x120>

    default:
      break;
 8006df4:	bf00      	nop
 8006df6:	e004      	b.n	8006e02 <USBH_CDC_Process+0x122>
      break;
 8006df8:	bf00      	nop
 8006dfa:	e002      	b.n	8006e02 <USBH_CDC_Process+0x122>
      break;
 8006dfc:	bf00      	nop
 8006dfe:	e000      	b.n	8006e02 <USBH_CDC_Process+0x122>
      break;
 8006e00:	bf00      	nop

  }

  return status;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	22a1      	movs	r2, #161	; 0xa1
 8006e30:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2221      	movs	r2, #33	; 0x21
 8006e36:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2207      	movs	r2, #7
 8006e48:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2207      	movs	r2, #7
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 fa83 	bl	800835c <USBH_CtlReq>
 8006e56:	4603      	mov	r3, r0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2221      	movs	r2, #33	; 0x21
 8006e6e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2207      	movs	r2, #7
 8006e86:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2207      	movs	r2, #7
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 fa64 	bl	800835c <USBH_CtlReq>
 8006e94:	4603      	mov	r3, r0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b086      	sub	sp, #24
 8006ea2:	af02      	add	r7, sp, #8
 8006ea4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d002      	beq.n	8006ec4 <CDC_ProcessTransmission+0x26>
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d023      	beq.n	8006f0a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006ec2:	e05e      	b.n	8006f82 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	8b12      	ldrh	r2, [r2, #24]
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d90b      	bls.n	8006ee8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	69d9      	ldr	r1, [r3, #28]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8b1a      	ldrh	r2, [r3, #24]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	7b5b      	ldrb	r3, [r3, #13]
 8006edc:	2001      	movs	r0, #1
 8006ede:	9000      	str	r0, [sp, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 fc4a 	bl	800877a <USBH_BulkSendData>
 8006ee6:	e00b      	b.n	8006f00 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	7b5b      	ldrb	r3, [r3, #13]
 8006ef6:	2001      	movs	r0, #1
 8006ef8:	9000      	str	r0, [sp, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 fc3d 	bl	800877a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f08:	e03b      	b.n	8006f82 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	7b5b      	ldrb	r3, [r3, #13]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 ff61 	bl	8008dd8 <USBH_LL_GetURBState>
 8006f16:	4603      	mov	r3, r0
 8006f18:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f1a:	7afb      	ldrb	r3, [r7, #11]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d128      	bne.n	8006f72 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	8b12      	ldrh	r2, [r2, #24]
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d90e      	bls.n	8006f4a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	8b12      	ldrh	r2, [r2, #24]
 8006f34:	1a9a      	subs	r2, r3, r2
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	8b12      	ldrh	r2, [r2, #24]
 8006f42:	441a      	add	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	61da      	str	r2, [r3, #28]
 8006f48:	e002      	b.n	8006f50 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f60:	e00e      	b.n	8006f80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f868 	bl	8007040 <USBH_CDC_TransmitCallback>
      break;
 8006f70:	e006      	b.n	8006f80 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d103      	bne.n	8006f80 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f80:	bf00      	nop
  }
}
 8006f82:	bf00      	nop
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b086      	sub	sp, #24
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d002      	beq.n	8006fb0 <CDC_ProcessReception+0x26>
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d00e      	beq.n	8006fcc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006fae:	e043      	b.n	8007038 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	6a19      	ldr	r1, [r3, #32]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	8b5a      	ldrh	r2, [r3, #26]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	7b1b      	ldrb	r3, [r3, #12]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 fc01 	bl	80087c4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006fca:	e035      	b.n	8007038 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	7b1b      	ldrb	r3, [r3, #12]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 ff00 	bl	8008dd8 <USBH_LL_GetURBState>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006fdc:	7cfb      	ldrb	r3, [r7, #19]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d129      	bne.n	8007036 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	7b1b      	ldrb	r3, [r3, #12]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f001 fe63 	bl	8008cb4 <USBH_LL_GetLastXferSize>
 8006fee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d016      	beq.n	8007028 <CDC_ProcessReception+0x9e>
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	8b5b      	ldrh	r3, [r3, #26]
 8006ffe:	461a      	mov	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4293      	cmp	r3, r2
 8007004:	d910      	bls.n	8007028 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	1ad2      	subs	r2, r2, r3
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	6a1a      	ldr	r2, [r3, #32]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	441a      	add	r2, r3
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2203      	movs	r2, #3
 8007022:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007026:	e006      	b.n	8007036 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f80f 	bl	8007054 <USBH_CDC_ReceiveCallback>
      break;
 8007036:	bf00      	nop
  }
}
 8007038:	bf00      	nop
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007090:	2302      	movs	r3, #2
 8007092:	e029      	b.n	80070e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	79fa      	ldrb	r2, [r7, #7]
 8007098:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f81f 	bl	80070f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f001 fd33 	bl	8008b4c <USBH_LL_Init>

  return USBH_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e009      	b.n	8007116 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	33e0      	adds	r3, #224	; 0xe0
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	2200      	movs	r2, #0
 800710e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3301      	adds	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b0f      	cmp	r3, #15
 800711a:	d9f2      	bls.n	8007102 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	e009      	b.n	8007136 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800712c:	2200      	movs	r2, #0
 800712e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3301      	adds	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800713c:	d3f1      	bcc.n	8007122 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2240      	movs	r2, #64	; 0x40
 8007162:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3714      	adds	r7, #20
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d016      	beq.n	80071da <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10e      	bne.n	80071d4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071bc:	1c59      	adds	r1, r3, #1
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	33de      	adds	r3, #222	; 0xde
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]
 80071d2:	e004      	b.n	80071de <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80071d4:	2302      	movs	r3, #2
 80071d6:	73fb      	strb	r3, [r7, #15]
 80071d8:	e001      	b.n	80071de <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80071da:	2302      	movs	r3, #2
 80071dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007202:	78fa      	ldrb	r2, [r7, #3]
 8007204:	429a      	cmp	r2, r3
 8007206:	d204      	bcs.n	8007212 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	78fa      	ldrb	r2, [r7, #3]
 800720c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007210:	e001      	b.n	8007216 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007212:	2302      	movs	r3, #2
 8007214:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	4608      	mov	r0, r1
 800722e:	4611      	mov	r1, r2
 8007230:	461a      	mov	r2, r3
 8007232:	4603      	mov	r3, r0
 8007234:	70fb      	strb	r3, [r7, #3]
 8007236:	460b      	mov	r3, r1
 8007238:	70bb      	strb	r3, [r7, #2]
 800723a:	4613      	mov	r3, r2
 800723c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007242:	2300      	movs	r3, #0
 8007244:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800724c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800724e:	e025      	b.n	800729c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007250:	7dfb      	ldrb	r3, [r7, #23]
 8007252:	221a      	movs	r2, #26
 8007254:	fb02 f303 	mul.w	r3, r2, r3
 8007258:	3308      	adds	r3, #8
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	4413      	add	r3, r2
 800725e:	3302      	adds	r3, #2
 8007260:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	795b      	ldrb	r3, [r3, #5]
 8007266:	78fa      	ldrb	r2, [r7, #3]
 8007268:	429a      	cmp	r2, r3
 800726a:	d002      	beq.n	8007272 <USBH_FindInterface+0x4e>
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	2bff      	cmp	r3, #255	; 0xff
 8007270:	d111      	bne.n	8007296 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007276:	78ba      	ldrb	r2, [r7, #2]
 8007278:	429a      	cmp	r2, r3
 800727a:	d002      	beq.n	8007282 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800727c:	78bb      	ldrb	r3, [r7, #2]
 800727e:	2bff      	cmp	r3, #255	; 0xff
 8007280:	d109      	bne.n	8007296 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007286:	787a      	ldrb	r2, [r7, #1]
 8007288:	429a      	cmp	r2, r3
 800728a:	d002      	beq.n	8007292 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800728c:	787b      	ldrb	r3, [r7, #1]
 800728e:	2bff      	cmp	r3, #255	; 0xff
 8007290:	d101      	bne.n	8007296 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	e006      	b.n	80072a4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007296:	7dfb      	ldrb	r3, [r7, #23]
 8007298:	3301      	adds	r3, #1
 800729a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800729c:	7dfb      	ldrb	r3, [r7, #23]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d9d6      	bls.n	8007250 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80072a2:	23ff      	movs	r3, #255	; 0xff
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 fc83 	bl	8008bc4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80072be:	2101      	movs	r1, #1
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 fd9c 	bl	8008dfe <USBH_LL_DriverVBUS>

  return USBH_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af04      	add	r7, sp, #16
 80072d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80072d8:	2302      	movs	r3, #2
 80072da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d102      	bne.n	80072f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2203      	movs	r2, #3
 80072f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b0b      	cmp	r3, #11
 80072fa:	f200 81be 	bhi.w	800767a <USBH_Process+0x3aa>
 80072fe:	a201      	add	r2, pc, #4	; (adr r2, 8007304 <USBH_Process+0x34>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	08007335 	.word	0x08007335
 8007308:	08007367 	.word	0x08007367
 800730c:	080073cf 	.word	0x080073cf
 8007310:	08007615 	.word	0x08007615
 8007314:	0800767b 	.word	0x0800767b
 8007318:	08007473 	.word	0x08007473
 800731c:	080075bb 	.word	0x080075bb
 8007320:	080074a9 	.word	0x080074a9
 8007324:	080074c9 	.word	0x080074c9
 8007328:	080074e9 	.word	0x080074e9
 800732c:	0800752d 	.word	0x0800752d
 8007330:	080075fd 	.word	0x080075fd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 819e 	beq.w	800767e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007348:	20c8      	movs	r0, #200	; 0xc8
 800734a:	f001 fd9f 	bl	8008e8c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f001 fc95 	bl	8008c7e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007364:	e18b      	b.n	800767e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800736c:	2b01      	cmp	r3, #1
 800736e:	d107      	bne.n	8007380 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800737e:	e18d      	b.n	800769c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800738a:	d914      	bls.n	80073b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007392:	3301      	adds	r3, #1
 8007394:	b2da      	uxtb	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d903      	bls.n	80073ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	220d      	movs	r2, #13
 80073aa:	701a      	strb	r2, [r3, #0]
      break;
 80073ac:	e176      	b.n	800769c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
      break;
 80073b4:	e172      	b.n	800769c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073bc:	f103 020a 	add.w	r2, r3, #10
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80073c6:	200a      	movs	r0, #10
 80073c8:	f001 fd60 	bl	8008e8c <USBH_Delay>
      break;
 80073cc:	e166      	b.n	800769c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073de:	2104      	movs	r1, #4
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80073e4:	2064      	movs	r0, #100	; 0x64
 80073e6:	f001 fd51 	bl	8008e8c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f001 fc20 	bl	8008c30 <USBH_LL_GetSpeed>
 80073f0:	4603      	mov	r3, r0
 80073f2:	461a      	mov	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2205      	movs	r2, #5
 80073fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007400:	2100      	movs	r1, #0
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f001 fa2b 	bl	800885e <USBH_AllocPipe>
 8007408:	4603      	mov	r3, r0
 800740a:	461a      	mov	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007410:	2180      	movs	r1, #128	; 0x80
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 fa23 	bl	800885e <USBH_AllocPipe>
 8007418:	4603      	mov	r3, r0
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	7919      	ldrb	r1, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007434:	b292      	uxth	r2, r2
 8007436:	9202      	str	r2, [sp, #8]
 8007438:	2200      	movs	r2, #0
 800743a:	9201      	str	r2, [sp, #4]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	4603      	mov	r3, r0
 8007440:	2280      	movs	r2, #128	; 0x80
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 f9dc 	bl	8008800 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	7959      	ldrb	r1, [r3, #5]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800745c:	b292      	uxth	r2, r2
 800745e:	9202      	str	r2, [sp, #8]
 8007460:	2200      	movs	r2, #0
 8007462:	9201      	str	r2, [sp, #4]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	4603      	mov	r3, r0
 8007468:	2200      	movs	r2, #0
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 f9c8 	bl	8008800 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007470:	e114      	b.n	800769c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f918 	bl	80076a8 <USBH_HandleEnum>
 8007478:	4603      	mov	r3, r0
 800747a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	f040 80fe 	bne.w	8007682 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007494:	2b01      	cmp	r3, #1
 8007496:	d103      	bne.n	80074a0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2208      	movs	r2, #8
 800749c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800749e:	e0f0      	b.n	8007682 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2207      	movs	r2, #7
 80074a4:	701a      	strb	r2, [r3, #0]
      break;
 80074a6:	e0ec      	b.n	8007682 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 80e9 	beq.w	8007686 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074ba:	2101      	movs	r1, #1
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2208      	movs	r2, #8
 80074c4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80074c6:	e0de      	b.n	8007686 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fc2c 	bl	8007d30 <USBH_SetCfg>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f040 80d5 	bne.w	800768a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2209      	movs	r2, #9
 80074e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074e6:	e0d0      	b.n	800768a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d016      	beq.n	8007524 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80074f6:	2101      	movs	r1, #1
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fc3c 	bl	8007d76 <USBH_SetFeature>
 80074fe:	4603      	mov	r3, r0
 8007500:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007502:	7bbb      	ldrb	r3, [r7, #14]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d103      	bne.n	8007512 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	220a      	movs	r2, #10
 800750e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007510:	e0bd      	b.n	800768e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b03      	cmp	r3, #3
 8007518:	f040 80b9 	bne.w	800768e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	220a      	movs	r2, #10
 8007520:	701a      	strb	r2, [r3, #0]
      break;
 8007522:	e0b4      	b.n	800768e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	220a      	movs	r2, #10
 8007528:	701a      	strb	r2, [r3, #0]
      break;
 800752a:	e0b0      	b.n	800768e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 80ad 	beq.w	8007692 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007540:	2300      	movs	r3, #0
 8007542:	73fb      	strb	r3, [r7, #15]
 8007544:	e016      	b.n	8007574 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007546:	7bfa      	ldrb	r2, [r7, #15]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	32de      	adds	r2, #222	; 0xde
 800754c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007550:	791a      	ldrb	r2, [r3, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007558:	429a      	cmp	r2, r3
 800755a:	d108      	bne.n	800756e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800755c:	7bfa      	ldrb	r2, [r7, #15]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	32de      	adds	r2, #222	; 0xde
 8007562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800756c:	e005      	b.n	800757a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	3301      	adds	r3, #1
 8007572:	73fb      	strb	r3, [r7, #15]
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0e5      	beq.n	8007546 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d016      	beq.n	80075b2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	4798      	blx	r3
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d109      	bne.n	80075aa <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2206      	movs	r2, #6
 800759a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075a2:	2103      	movs	r1, #3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075a8:	e073      	b.n	8007692 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	220d      	movs	r2, #13
 80075ae:	701a      	strb	r2, [r3, #0]
      break;
 80075b0:	e06f      	b.n	8007692 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	220d      	movs	r2, #13
 80075b6:	701a      	strb	r2, [r3, #0]
      break;
 80075b8:	e06b      	b.n	8007692 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d017      	beq.n	80075f4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
 80075d0:	4603      	mov	r3, r0
 80075d2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d103      	bne.n	80075e4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	220b      	movs	r2, #11
 80075e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075e2:	e058      	b.n	8007696 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d154      	bne.n	8007696 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	220d      	movs	r2, #13
 80075f0:	701a      	strb	r2, [r3, #0]
      break;
 80075f2:	e050      	b.n	8007696 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	220d      	movs	r2, #13
 80075f8:	701a      	strb	r2, [r3, #0]
      break;
 80075fa:	e04c      	b.n	8007696 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007602:	2b00      	cmp	r3, #0
 8007604:	d049      	beq.n	800769a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	4798      	blx	r3
      }
      break;
 8007612:	e042      	b.n	800769a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff fd67 	bl	80070f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007628:	2b00      	cmp	r3, #0
 800762a:	d009      	beq.n	8007640 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007650:	2105      	movs	r1, #5
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b01      	cmp	r3, #1
 8007660:	d107      	bne.n	8007672 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7ff fe20 	bl	80072b0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007670:	e014      	b.n	800769c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 faa6 	bl	8008bc4 <USBH_LL_Start>
      break;
 8007678:	e010      	b.n	800769c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800767a:	bf00      	nop
 800767c:	e00e      	b.n	800769c <USBH_Process+0x3cc>
      break;
 800767e:	bf00      	nop
 8007680:	e00c      	b.n	800769c <USBH_Process+0x3cc>
      break;
 8007682:	bf00      	nop
 8007684:	e00a      	b.n	800769c <USBH_Process+0x3cc>
    break;
 8007686:	bf00      	nop
 8007688:	e008      	b.n	800769c <USBH_Process+0x3cc>
      break;
 800768a:	bf00      	nop
 800768c:	e006      	b.n	800769c <USBH_Process+0x3cc>
      break;
 800768e:	bf00      	nop
 8007690:	e004      	b.n	800769c <USBH_Process+0x3cc>
      break;
 8007692:	bf00      	nop
 8007694:	e002      	b.n	800769c <USBH_Process+0x3cc>
      break;
 8007696:	bf00      	nop
 8007698:	e000      	b.n	800769c <USBH_Process+0x3cc>
      break;
 800769a:	bf00      	nop
  }
  return USBH_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop

080076a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af04      	add	r7, sp, #16
 80076ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076b0:	2301      	movs	r3, #1
 80076b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	785b      	ldrb	r3, [r3, #1]
 80076bc:	2b07      	cmp	r3, #7
 80076be:	f200 81c1 	bhi.w	8007a44 <USBH_HandleEnum+0x39c>
 80076c2:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <USBH_HandleEnum+0x20>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	080076e9 	.word	0x080076e9
 80076cc:	080077a7 	.word	0x080077a7
 80076d0:	08007811 	.word	0x08007811
 80076d4:	0800789f 	.word	0x0800789f
 80076d8:	08007909 	.word	0x08007909
 80076dc:	08007979 	.word	0x08007979
 80076e0:	080079bf 	.word	0x080079bf
 80076e4:	08007a05 	.word	0x08007a05
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80076e8:	2108      	movs	r1, #8
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa50 	bl	8007b90 <USBH_Get_DevDesc>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d130      	bne.n	800775c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7919      	ldrb	r1, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800771e:	b292      	uxth	r2, r2
 8007720:	9202      	str	r2, [sp, #8]
 8007722:	2200      	movs	r2, #0
 8007724:	9201      	str	r2, [sp, #4]
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	4603      	mov	r3, r0
 800772a:	2280      	movs	r2, #128	; 0x80
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 f867 	bl	8008800 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	7959      	ldrb	r1, [r3, #5]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007746:	b292      	uxth	r2, r2
 8007748:	9202      	str	r2, [sp, #8]
 800774a:	2200      	movs	r2, #0
 800774c:	9201      	str	r2, [sp, #4]
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	4603      	mov	r3, r0
 8007752:	2200      	movs	r2, #0
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 f853 	bl	8008800 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800775a:	e175      	b.n	8007a48 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	2b03      	cmp	r3, #3
 8007760:	f040 8172 	bne.w	8007a48 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800776a:	3301      	adds	r3, #1
 800776c:	b2da      	uxtb	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800777a:	2b03      	cmp	r3, #3
 800777c:	d903      	bls.n	8007786 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	220d      	movs	r2, #13
 8007782:	701a      	strb	r2, [r3, #0]
      break;
 8007784:	e160      	b.n	8007a48 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	795b      	ldrb	r3, [r3, #5]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 f887 	bl	80088a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	791b      	ldrb	r3, [r3, #4]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f001 f881 	bl	80088a0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	701a      	strb	r2, [r3, #0]
      break;
 80077a4:	e150      	b.n	8007a48 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80077a6:	2112      	movs	r1, #18
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f9f1 	bl	8007b90 <USBH_Get_DevDesc>
 80077ae:	4603      	mov	r3, r0
 80077b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d103      	bne.n	80077c0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077be:	e145      	b.n	8007a4c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	f040 8142 	bne.w	8007a4c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ce:	3301      	adds	r3, #1
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d903      	bls.n	80077ea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	220d      	movs	r2, #13
 80077e6:	701a      	strb	r2, [r3, #0]
      break;
 80077e8:	e130      	b.n	8007a4c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	795b      	ldrb	r3, [r3, #5]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 f855 	bl	80088a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	791b      	ldrb	r3, [r3, #4]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 f84f 	bl	80088a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
      break;
 800780e:	e11d      	b.n	8007a4c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007810:	2101      	movs	r1, #1
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa68 	bl	8007ce8 <USBH_SetAddress>
 8007818:	4603      	mov	r3, r0
 800781a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d132      	bne.n	8007888 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007822:	2002      	movs	r0, #2
 8007824:	f001 fb32 	bl	8008e8c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2203      	movs	r2, #3
 8007834:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	7919      	ldrb	r1, [r3, #4]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800784a:	b292      	uxth	r2, r2
 800784c:	9202      	str	r2, [sp, #8]
 800784e:	2200      	movs	r2, #0
 8007850:	9201      	str	r2, [sp, #4]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	4603      	mov	r3, r0
 8007856:	2280      	movs	r2, #128	; 0x80
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 ffd1 	bl	8008800 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	7959      	ldrb	r1, [r3, #5]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007872:	b292      	uxth	r2, r2
 8007874:	9202      	str	r2, [sp, #8]
 8007876:	2200      	movs	r2, #0
 8007878:	9201      	str	r2, [sp, #4]
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	4603      	mov	r3, r0
 800787e:	2200      	movs	r2, #0
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 ffbd 	bl	8008800 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007886:	e0e3      	b.n	8007a50 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b03      	cmp	r3, #3
 800788c:	f040 80e0 	bne.w	8007a50 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	220d      	movs	r2, #13
 8007894:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	705a      	strb	r2, [r3, #1]
      break;
 800789c:	e0d8      	b.n	8007a50 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800789e:	2109      	movs	r1, #9
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f99d 	bl	8007be0 <USBH_Get_CfgDesc>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d103      	bne.n	80078b8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2204      	movs	r2, #4
 80078b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078b6:	e0cd      	b.n	8007a54 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	f040 80ca 	bne.w	8007a54 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078c6:	3301      	adds	r3, #1
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d903      	bls.n	80078e2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	220d      	movs	r2, #13
 80078de:	701a      	strb	r2, [r3, #0]
      break;
 80078e0:	e0b8      	b.n	8007a54 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	795b      	ldrb	r3, [r3, #5]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 ffd9 	bl	80088a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	791b      	ldrb	r3, [r3, #4]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 ffd3 	bl	80088a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	701a      	strb	r2, [r3, #0]
      break;
 8007906:	e0a5      	b.n	8007a54 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f965 	bl	8007be0 <USBH_Get_CfgDesc>
 8007916:	4603      	mov	r3, r0
 8007918:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d103      	bne.n	8007928 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2205      	movs	r2, #5
 8007924:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007926:	e097      	b.n	8007a58 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	2b03      	cmp	r3, #3
 800792c:	f040 8094 	bne.w	8007a58 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007936:	3301      	adds	r3, #1
 8007938:	b2da      	uxtb	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007946:	2b03      	cmp	r3, #3
 8007948:	d903      	bls.n	8007952 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	220d      	movs	r2, #13
 800794e:	701a      	strb	r2, [r3, #0]
      break;
 8007950:	e082      	b.n	8007a58 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	795b      	ldrb	r3, [r3, #5]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 ffa1 	bl	80088a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	791b      	ldrb	r3, [r3, #4]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 ff9b 	bl	80088a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
      break;
 8007976:	e06f      	b.n	8007a58 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800797e:	2b00      	cmp	r3, #0
 8007980:	d019      	beq.n	80079b6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800798e:	23ff      	movs	r3, #255	; 0xff
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f949 	bl	8007c28 <USBH_Get_StringDesc>
 8007996:	4603      	mov	r3, r0
 8007998:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d103      	bne.n	80079a8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2206      	movs	r2, #6
 80079a4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079a6:	e059      	b.n	8007a5c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d156      	bne.n	8007a5c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2206      	movs	r2, #6
 80079b2:	705a      	strb	r2, [r3, #1]
      break;
 80079b4:	e052      	b.n	8007a5c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2206      	movs	r2, #6
 80079ba:	705a      	strb	r2, [r3, #1]
      break;
 80079bc:	e04e      	b.n	8007a5c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d019      	beq.n	80079fc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079d4:	23ff      	movs	r3, #255	; 0xff
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f926 	bl	8007c28 <USBH_Get_StringDesc>
 80079dc:	4603      	mov	r3, r0
 80079de:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d103      	bne.n	80079ee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2207      	movs	r2, #7
 80079ea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079ec:	e038      	b.n	8007a60 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d135      	bne.n	8007a60 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2207      	movs	r2, #7
 80079f8:	705a      	strb	r2, [r3, #1]
      break;
 80079fa:	e031      	b.n	8007a60 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2207      	movs	r2, #7
 8007a00:	705a      	strb	r2, [r3, #1]
      break;
 8007a02:	e02d      	b.n	8007a60 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d017      	beq.n	8007a3e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a1a:	23ff      	movs	r3, #255	; 0xff
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f903 	bl	8007c28 <USBH_Get_StringDesc>
 8007a22:	4603      	mov	r3, r0
 8007a24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d102      	bne.n	8007a32 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a30:	e018      	b.n	8007a64 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d115      	bne.n	8007a64 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a3c:	e012      	b.n	8007a64 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
      break;
 8007a42:	e00f      	b.n	8007a64 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007a44:	bf00      	nop
 8007a46:	e00e      	b.n	8007a66 <USBH_HandleEnum+0x3be>
      break;
 8007a48:	bf00      	nop
 8007a4a:	e00c      	b.n	8007a66 <USBH_HandleEnum+0x3be>
      break;
 8007a4c:	bf00      	nop
 8007a4e:	e00a      	b.n	8007a66 <USBH_HandleEnum+0x3be>
      break;
 8007a50:	bf00      	nop
 8007a52:	e008      	b.n	8007a66 <USBH_HandleEnum+0x3be>
      break;
 8007a54:	bf00      	nop
 8007a56:	e006      	b.n	8007a66 <USBH_HandleEnum+0x3be>
      break;
 8007a58:	bf00      	nop
 8007a5a:	e004      	b.n	8007a66 <USBH_HandleEnum+0x3be>
      break;
 8007a5c:	bf00      	nop
 8007a5e:	e002      	b.n	8007a66 <USBH_HandleEnum+0x3be>
      break;
 8007a60:	bf00      	nop
 8007a62:	e000      	b.n	8007a66 <USBH_HandleEnum+0x3be>
      break;
 8007a64:	bf00      	nop
  }
  return Status;
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f804 	bl	8007ab2 <USBH_HandleSof>
}
 8007aaa:	bf00      	nop
 8007aac:	3708      	adds	r7, #8
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b0b      	cmp	r3, #11
 8007ac2:	d10a      	bne.n	8007ada <USBH_HandleSof+0x28>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d005      	beq.n	8007ada <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	4798      	blx	r3
  }
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007af2:	bf00      	nop
}
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b0e:	bf00      	nop
}
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f846 	bl	8008bfa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	791b      	ldrb	r3, [r3, #4]
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fe93 	bl	80088a0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	795b      	ldrb	r3, [r3, #5]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fe8d 	bl	80088a0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bae:	2100      	movs	r1, #0
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f864 	bl	8007c7e <USBH_GetDescriptor>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10a      	bne.n	8007bd6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	b292      	uxth	r2, r2
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	f000 f919 	bl	8007e08 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af02      	add	r7, sp, #8
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	331c      	adds	r3, #28
 8007bf0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007bf2:	887b      	ldrh	r3, [r7, #2]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f83d 	bl	8007c7e <USBH_GetDescriptor>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d107      	bne.n	8007c1e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007c0e:	887b      	ldrh	r3, [r7, #2]
 8007c10:	461a      	mov	r2, r3
 8007c12:	68b9      	ldr	r1, [r7, #8]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f989 	bl	8007f2c <USBH_ParseCfgDesc>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	607a      	str	r2, [r7, #4]
 8007c32:	461a      	mov	r2, r3
 8007c34:	460b      	mov	r3, r1
 8007c36:	72fb      	strb	r3, [r7, #11]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c44:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007c4c:	893b      	ldrh	r3, [r7, #8]
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	460b      	mov	r3, r1
 8007c52:	2100      	movs	r1, #0
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f812 	bl	8007c7e <USBH_GetDescriptor>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d107      	bne.n	8007c74 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c6a:	893a      	ldrh	r2, [r7, #8]
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fb26 	bl	80082c0 <USBH_ParseStringDesc>
  }

  return status;
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	607b      	str	r3, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	72fb      	strb	r3, [r7, #11]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	789b      	ldrb	r3, [r3, #2]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d11c      	bne.n	8007cd2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007c98:	7afb      	ldrb	r3, [r7, #11]
 8007c9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2206      	movs	r2, #6
 8007ca8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	893a      	ldrh	r2, [r7, #8]
 8007cae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007cb0:	893b      	ldrh	r3, [r7, #8]
 8007cb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cba:	d104      	bne.n	8007cc6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f240 4209 	movw	r2, #1033	; 0x409
 8007cc2:	829a      	strh	r2, [r3, #20]
 8007cc4:	e002      	b.n	8007ccc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	8b3a      	ldrh	r2, [r7, #24]
 8007cd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007cd2:	8b3b      	ldrh	r3, [r7, #24]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fb3f 	bl	800835c <USBH_CtlReq>
 8007cde:	4603      	mov	r3, r0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	789b      	ldrb	r3, [r3, #2]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d10f      	bne.n	8007d1c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2205      	movs	r2, #5
 8007d06:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2100      	movs	r1, #0
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fb1b 	bl	800835c <USBH_CtlReq>
 8007d26:	4603      	mov	r3, r0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	789b      	ldrb	r3, [r3, #2]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d10e      	bne.n	8007d62 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2209      	movs	r2, #9
 8007d4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	887a      	ldrh	r2, [r7, #2]
 8007d54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d62:	2200      	movs	r2, #0
 8007d64:	2100      	movs	r1, #0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 faf8 	bl	800835c <USBH_CtlReq>
 8007d6c:	4603      	mov	r3, r0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	789b      	ldrb	r3, [r3, #2]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d10f      	bne.n	8007daa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2203      	movs	r2, #3
 8007d94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007daa:	2200      	movs	r2, #0
 8007dac:	2100      	movs	r1, #0
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fad4 	bl	800835c <USBH_CtlReq>
 8007db4:	4603      	mov	r3, r0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b082      	sub	sp, #8
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	789b      	ldrb	r3, [r3, #2]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d10f      	bne.n	8007df2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007de4:	78fb      	ldrb	r3, [r7, #3]
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007df2:	2200      	movs	r2, #0
 8007df4:	2100      	movs	r1, #0
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fab0 	bl	800835c <USBH_CtlReq>
 8007dfc:	4603      	mov	r3, r0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	781a      	ldrb	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	785a      	ldrb	r2, [r3, #1]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	3302      	adds	r3, #2
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	3303      	adds	r3, #3
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	791a      	ldrb	r2, [r3, #4]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	795a      	ldrb	r2, [r3, #5]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	799a      	ldrb	r2, [r3, #6]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	79da      	ldrb	r2, [r3, #7]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	79db      	ldrb	r3, [r3, #7]
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	dc0f      	bgt.n	8007e8a <USBH_ParseDevDesc+0x82>
 8007e6a:	2b08      	cmp	r3, #8
 8007e6c:	db14      	blt.n	8007e98 <USBH_ParseDevDesc+0x90>
 8007e6e:	3b08      	subs	r3, #8
 8007e70:	4a2d      	ldr	r2, [pc, #180]	; (8007f28 <USBH_ParseDevDesc+0x120>)
 8007e72:	fa22 f303 	lsr.w	r3, r2, r3
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	bf14      	ite	ne
 8007e7e:	2301      	movne	r3, #1
 8007e80:	2300      	moveq	r3, #0
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d102      	bne.n	8007e8e <USBH_ParseDevDesc+0x86>
 8007e88:	e006      	b.n	8007e98 <USBH_ParseDevDesc+0x90>
 8007e8a:	2b40      	cmp	r3, #64	; 0x40
 8007e8c:	d104      	bne.n	8007e98 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	79da      	ldrb	r2, [r3, #7]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	71da      	strb	r2, [r3, #7]
      break;
 8007e96:	e003      	b.n	8007ea0 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2240      	movs	r2, #64	; 0x40
 8007e9c:	71da      	strb	r2, [r3, #7]
      break;
 8007e9e:	bf00      	nop
  }

  if (length > 8U)
 8007ea0:	88fb      	ldrh	r3, [r7, #6]
 8007ea2:	2b08      	cmp	r3, #8
 8007ea4:	d939      	bls.n	8007f1a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	3309      	adds	r3, #9
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	021b      	lsls	r3, r3, #8
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	330a      	adds	r3, #10
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	330b      	adds	r3, #11
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	330c      	adds	r3, #12
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	330d      	adds	r3, #13
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	021b      	lsls	r3, r3, #8
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	7b9a      	ldrb	r2, [r3, #14]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	7bda      	ldrb	r2, [r3, #15]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	7c1a      	ldrb	r2, [r3, #16]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	7c5a      	ldrb	r2, [r3, #17]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	745a      	strb	r2, [r3, #17]
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	01000101 	.word	0x01000101

08007f2c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08c      	sub	sp, #48	; 0x30
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f40:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	781a      	ldrb	r2, [r3, #0]
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	785a      	ldrb	r2, [r3, #1]
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	3302      	adds	r3, #2
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	3303      	adds	r3, #3
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	4313      	orrs	r3, r2
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f88:	bf28      	it	cs
 8007f8a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	791a      	ldrb	r2, [r3, #4]
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	795a      	ldrb	r2, [r3, #5]
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	799a      	ldrb	r2, [r3, #6]
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	79da      	ldrb	r2, [r3, #7]
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	7a1a      	ldrb	r2, [r3, #8]
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b09      	cmp	r3, #9
 8007fc2:	d002      	beq.n	8007fca <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	2209      	movs	r2, #9
 8007fc8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007fca:	88fb      	ldrh	r3, [r7, #6]
 8007fcc:	2b09      	cmp	r3, #9
 8007fce:	f240 809d 	bls.w	800810c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007fd2:	2309      	movs	r3, #9
 8007fd4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fda:	e081      	b.n	80080e0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007fdc:	f107 0316 	add.w	r3, r7, #22
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fe4:	f000 f99f 	bl	8008326 <USBH_GetNextDesc>
 8007fe8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fec:	785b      	ldrb	r3, [r3, #1]
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d176      	bne.n	80080e0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b09      	cmp	r3, #9
 8007ff8:	d002      	beq.n	8008000 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	2209      	movs	r2, #9
 8007ffe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008004:	221a      	movs	r2, #26
 8008006:	fb02 f303 	mul.w	r3, r2, r3
 800800a:	3308      	adds	r3, #8
 800800c:	6a3a      	ldr	r2, [r7, #32]
 800800e:	4413      	add	r3, r2
 8008010:	3302      	adds	r3, #2
 8008012:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008016:	69f8      	ldr	r0, [r7, #28]
 8008018:	f000 f87e 	bl	8008118 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008022:	2300      	movs	r3, #0
 8008024:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008026:	e043      	b.n	80080b0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008028:	f107 0316 	add.w	r3, r7, #22
 800802c:	4619      	mov	r1, r3
 800802e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008030:	f000 f979 	bl	8008326 <USBH_GetNextDesc>
 8008034:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b05      	cmp	r3, #5
 800803c:	d138      	bne.n	80080b0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	795b      	ldrb	r3, [r3, #5]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d10f      	bne.n	8008066 <USBH_ParseCfgDesc+0x13a>
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	799b      	ldrb	r3, [r3, #6]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d10b      	bne.n	8008066 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	79db      	ldrb	r3, [r3, #7]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10f      	bne.n	8008076 <USBH_ParseCfgDesc+0x14a>
 8008056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	2b09      	cmp	r3, #9
 800805c:	d00b      	beq.n	8008076 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	2209      	movs	r2, #9
 8008062:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008064:	e007      	b.n	8008076 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b07      	cmp	r3, #7
 800806c:	d004      	beq.n	8008078 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008070:	2207      	movs	r2, #7
 8008072:	701a      	strb	r2, [r3, #0]
 8008074:	e000      	b.n	8008078 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008076:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800807c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008080:	3201      	adds	r2, #1
 8008082:	00d2      	lsls	r2, r2, #3
 8008084:	211a      	movs	r1, #26
 8008086:	fb01 f303 	mul.w	r3, r1, r3
 800808a:	4413      	add	r3, r2
 800808c:	3308      	adds	r3, #8
 800808e:	6a3a      	ldr	r2, [r7, #32]
 8008090:	4413      	add	r3, r2
 8008092:	3304      	adds	r3, #4
 8008094:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008098:	69b9      	ldr	r1, [r7, #24]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f86b 	bl	8008176 <USBH_ParseEPDesc>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80080a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080aa:	3301      	adds	r3, #1
 80080ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	791b      	ldrb	r3, [r3, #4]
 80080b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d204      	bcs.n	80080c6 <USBH_ParseCfgDesc+0x19a>
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	885a      	ldrh	r2, [r3, #2]
 80080c0:	8afb      	ldrh	r3, [r7, #22]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d8b0      	bhi.n	8008028 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	791b      	ldrb	r3, [r3, #4]
 80080ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d201      	bcs.n	80080d6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e01c      	b.n	8008110 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80080d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080da:	3301      	adds	r3, #1
 80080dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d805      	bhi.n	80080f4 <USBH_ParseCfgDesc+0x1c8>
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	885a      	ldrh	r2, [r3, #2]
 80080ec:	8afb      	ldrh	r3, [r7, #22]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	f63f af74 	bhi.w	8007fdc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	791b      	ldrb	r3, [r3, #4]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	bf28      	it	cs
 80080fc:	2302      	movcs	r3, #2
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008104:	429a      	cmp	r2, r3
 8008106:	d201      	bcs.n	800810c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008108:	2303      	movs	r3, #3
 800810a:	e001      	b.n	8008110 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800810c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008110:	4618      	mov	r0, r3
 8008112:	3730      	adds	r7, #48	; 0x30
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781a      	ldrb	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	785a      	ldrb	r2, [r3, #1]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	789a      	ldrb	r2, [r3, #2]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	78da      	ldrb	r2, [r3, #3]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	791a      	ldrb	r2, [r3, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	795a      	ldrb	r2, [r3, #5]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	799a      	ldrb	r2, [r3, #6]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	79da      	ldrb	r2, [r3, #7]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	7a1a      	ldrb	r2, [r3, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	721a      	strb	r2, [r3, #8]
}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008176:	b480      	push	{r7}
 8008178:	b087      	sub	sp, #28
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	785a      	ldrb	r2, [r3, #1]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	789a      	ldrb	r2, [r3, #2]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	78da      	ldrb	r2, [r3, #3]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3304      	adds	r3, #4
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3305      	adds	r3, #5
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	021b      	lsls	r3, r3, #8
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	4313      	orrs	r3, r2
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	799a      	ldrb	r2, [r3, #6]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	889b      	ldrh	r3, [r3, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d102      	bne.n	80081d8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80081d2:	2303      	movs	r3, #3
 80081d4:	75fb      	strb	r3, [r7, #23]
 80081d6:	e033      	b.n	8008240 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	889b      	ldrh	r3, [r3, #4]
 80081dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80081e0:	f023 0307 	bic.w	r3, r3, #7
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	889b      	ldrh	r3, [r3, #4]
 80081ee:	b21a      	sxth	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3304      	adds	r3, #4
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	b299      	uxth	r1, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3305      	adds	r3, #5
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	b29b      	uxth	r3, r3
 8008204:	430b      	orrs	r3, r1
 8008206:	b29b      	uxth	r3, r3
 8008208:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800820c:	2b00      	cmp	r3, #0
 800820e:	d110      	bne.n	8008232 <USBH_ParseEPDesc+0xbc>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3304      	adds	r3, #4
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	b299      	uxth	r1, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3305      	adds	r3, #5
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	b29b      	uxth	r3, r3
 8008224:	430b      	orrs	r3, r1
 8008226:	b29b      	uxth	r3, r3
 8008228:	b21b      	sxth	r3, r3
 800822a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800822e:	b21b      	sxth	r3, r3
 8008230:	e001      	b.n	8008236 <USBH_ParseEPDesc+0xc0>
 8008232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008236:	4313      	orrs	r3, r2
 8008238:	b21b      	sxth	r3, r3
 800823a:	b29a      	uxth	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008246:	2b00      	cmp	r3, #0
 8008248:	d116      	bne.n	8008278 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	78db      	ldrb	r3, [r3, #3]
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	2b01      	cmp	r3, #1
 8008254:	d005      	beq.n	8008262 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	78db      	ldrb	r3, [r3, #3]
 800825a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800825e:	2b03      	cmp	r3, #3
 8008260:	d127      	bne.n	80082b2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	799b      	ldrb	r3, [r3, #6]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <USBH_ParseEPDesc+0xfc>
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	799b      	ldrb	r3, [r3, #6]
 800826e:	2b10      	cmp	r3, #16
 8008270:	d91f      	bls.n	80082b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008272:	2303      	movs	r3, #3
 8008274:	75fb      	strb	r3, [r7, #23]
 8008276:	e01c      	b.n	80082b2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	78db      	ldrb	r3, [r3, #3]
 800827c:	f003 0303 	and.w	r3, r3, #3
 8008280:	2b01      	cmp	r3, #1
 8008282:	d10a      	bne.n	800829a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	799b      	ldrb	r3, [r3, #6]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <USBH_ParseEPDesc+0x11e>
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	799b      	ldrb	r3, [r3, #6]
 8008290:	2b10      	cmp	r3, #16
 8008292:	d90e      	bls.n	80082b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008294:	2303      	movs	r3, #3
 8008296:	75fb      	strb	r3, [r7, #23]
 8008298:	e00b      	b.n	80082b2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	78db      	ldrb	r3, [r3, #3]
 800829e:	f003 0303 	and.w	r3, r3, #3
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d105      	bne.n	80082b2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	799b      	ldrb	r3, [r3, #6]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80082ae:	2303      	movs	r3, #3
 80082b0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3301      	adds	r3, #1
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d120      	bne.n	800831a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	1e9a      	subs	r2, r3, #2
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	4293      	cmp	r3, r2
 80082e2:	bf28      	it	cs
 80082e4:	4613      	movcs	r3, r2
 80082e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3302      	adds	r3, #2
 80082ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80082ee:	2300      	movs	r3, #0
 80082f0:	82fb      	strh	r3, [r7, #22]
 80082f2:	e00b      	b.n	800830c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80082f4:	8afb      	ldrh	r3, [r7, #22]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	4413      	add	r3, r2
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3301      	adds	r3, #1
 8008304:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008306:	8afb      	ldrh	r3, [r7, #22]
 8008308:	3302      	adds	r3, #2
 800830a:	82fb      	strh	r3, [r7, #22]
 800830c:	8afa      	ldrh	r2, [r7, #22]
 800830e:	8abb      	ldrh	r3, [r7, #20]
 8008310:	429a      	cmp	r2, r3
 8008312:	d3ef      	bcc.n	80082f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
  }
}
 800831a:	bf00      	nop
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	881a      	ldrh	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	b29b      	uxth	r3, r3
 800833a:	4413      	add	r3, r2
 800833c:	b29a      	uxth	r2, r3
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4413      	add	r3, r2
 800834c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800834e:	68fb      	ldr	r3, [r7, #12]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	4613      	mov	r3, r2
 8008368:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800836a:	2301      	movs	r3, #1
 800836c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	789b      	ldrb	r3, [r3, #2]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d002      	beq.n	800837c <USBH_CtlReq+0x20>
 8008376:	2b02      	cmp	r3, #2
 8008378:	d00f      	beq.n	800839a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800837a:	e027      	b.n	80083cc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	88fa      	ldrh	r2, [r7, #6]
 8008386:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2201      	movs	r2, #1
 800838c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2202      	movs	r2, #2
 8008392:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008394:	2301      	movs	r3, #1
 8008396:	75fb      	strb	r3, [r7, #23]
      break;
 8008398:	e018      	b.n	80083cc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 f81c 	bl	80083d8 <USBH_HandleControl>
 80083a0:	4603      	mov	r3, r0
 80083a2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <USBH_CtlReq+0x54>
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d106      	bne.n	80083be <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	761a      	strb	r2, [r3, #24]
      break;
 80083bc:	e005      	b.n	80083ca <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d102      	bne.n	80083ca <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2201      	movs	r2, #1
 80083c8:	709a      	strb	r2, [r3, #2]
      break;
 80083ca:	bf00      	nop
  }
  return status;
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af02      	add	r7, sp, #8
 80083de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80083e0:	2301      	movs	r3, #1
 80083e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	7e1b      	ldrb	r3, [r3, #24]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	2b0a      	cmp	r3, #10
 80083f0:	f200 8156 	bhi.w	80086a0 <USBH_HandleControl+0x2c8>
 80083f4:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <USBH_HandleControl+0x24>)
 80083f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fa:	bf00      	nop
 80083fc:	08008429 	.word	0x08008429
 8008400:	08008443 	.word	0x08008443
 8008404:	080084ad 	.word	0x080084ad
 8008408:	080084d3 	.word	0x080084d3
 800840c:	0800850b 	.word	0x0800850b
 8008410:	08008535 	.word	0x08008535
 8008414:	08008587 	.word	0x08008587
 8008418:	080085a9 	.word	0x080085a9
 800841c:	080085e5 	.word	0x080085e5
 8008420:	0800860b 	.word	0x0800860b
 8008424:	08008649 	.word	0x08008649
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f103 0110 	add.w	r1, r3, #16
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	795b      	ldrb	r3, [r3, #5]
 8008432:	461a      	mov	r2, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f943 	bl	80086c0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2202      	movs	r2, #2
 800843e:	761a      	strb	r2, [r3, #24]
      break;
 8008440:	e139      	b.n	80086b6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	795b      	ldrb	r3, [r3, #5]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fcc5 	bl	8008dd8 <USBH_LL_GetURBState>
 800844e:	4603      	mov	r3, r0
 8008450:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d11e      	bne.n	8008496 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	7c1b      	ldrb	r3, [r3, #16]
 800845c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008460:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	8adb      	ldrh	r3, [r3, #22]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800846a:	7b7b      	ldrb	r3, [r7, #13]
 800846c:	2b80      	cmp	r3, #128	; 0x80
 800846e:	d103      	bne.n	8008478 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2203      	movs	r2, #3
 8008474:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008476:	e115      	b.n	80086a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2205      	movs	r2, #5
 800847c:	761a      	strb	r2, [r3, #24]
      break;
 800847e:	e111      	b.n	80086a4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008480:	7b7b      	ldrb	r3, [r7, #13]
 8008482:	2b80      	cmp	r3, #128	; 0x80
 8008484:	d103      	bne.n	800848e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2209      	movs	r2, #9
 800848a:	761a      	strb	r2, [r3, #24]
      break;
 800848c:	e10a      	b.n	80086a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2207      	movs	r2, #7
 8008492:	761a      	strb	r2, [r3, #24]
      break;
 8008494:	e106      	b.n	80086a4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b04      	cmp	r3, #4
 800849a:	d003      	beq.n	80084a4 <USBH_HandleControl+0xcc>
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	f040 8100 	bne.w	80086a4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	220b      	movs	r2, #11
 80084a8:	761a      	strb	r2, [r3, #24]
      break;
 80084aa:	e0fb      	b.n	80086a4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6899      	ldr	r1, [r3, #8]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	899a      	ldrh	r2, [r3, #12]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	791b      	ldrb	r3, [r3, #4]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f93a 	bl	800873e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2204      	movs	r2, #4
 80084ce:	761a      	strb	r2, [r3, #24]
      break;
 80084d0:	e0f1      	b.n	80086b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	791b      	ldrb	r3, [r3, #4]
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 fc7d 	bl	8008dd8 <USBH_LL_GetURBState>
 80084de:	4603      	mov	r3, r0
 80084e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d102      	bne.n	80084ee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2209      	movs	r2, #9
 80084ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b05      	cmp	r3, #5
 80084f2:	d102      	bne.n	80084fa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80084f4:	2303      	movs	r3, #3
 80084f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084f8:	e0d6      	b.n	80086a8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	f040 80d3 	bne.w	80086a8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	220b      	movs	r2, #11
 8008506:	761a      	strb	r2, [r3, #24]
      break;
 8008508:	e0ce      	b.n	80086a8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6899      	ldr	r1, [r3, #8]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	899a      	ldrh	r2, [r3, #12]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	795b      	ldrb	r3, [r3, #5]
 8008516:	2001      	movs	r0, #1
 8008518:	9000      	str	r0, [sp, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f8ea 	bl	80086f4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008526:	b29a      	uxth	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2206      	movs	r2, #6
 8008530:	761a      	strb	r2, [r3, #24]
      break;
 8008532:	e0c0      	b.n	80086b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	795b      	ldrb	r3, [r3, #5]
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fc4c 	bl	8008dd8 <USBH_LL_GetURBState>
 8008540:	4603      	mov	r3, r0
 8008542:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d103      	bne.n	8008552 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2207      	movs	r2, #7
 800854e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008550:	e0ac      	b.n	80086ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	2b05      	cmp	r3, #5
 8008556:	d105      	bne.n	8008564 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	220c      	movs	r2, #12
 800855c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800855e:	2303      	movs	r3, #3
 8008560:	73fb      	strb	r3, [r7, #15]
      break;
 8008562:	e0a3      	b.n	80086ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b02      	cmp	r3, #2
 8008568:	d103      	bne.n	8008572 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2205      	movs	r2, #5
 800856e:	761a      	strb	r2, [r3, #24]
      break;
 8008570:	e09c      	b.n	80086ac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b04      	cmp	r3, #4
 8008576:	f040 8099 	bne.w	80086ac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	220b      	movs	r2, #11
 800857e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008580:	2302      	movs	r3, #2
 8008582:	73fb      	strb	r3, [r7, #15]
      break;
 8008584:	e092      	b.n	80086ac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	791b      	ldrb	r3, [r3, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	2100      	movs	r1, #0
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f8d5 	bl	800873e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800859a:	b29a      	uxth	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2208      	movs	r2, #8
 80085a4:	761a      	strb	r2, [r3, #24]

      break;
 80085a6:	e086      	b.n	80086b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	791b      	ldrb	r3, [r3, #4]
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fc12 	bl	8008dd8 <USBH_LL_GetURBState>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d105      	bne.n	80085ca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	220d      	movs	r2, #13
 80085c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085c8:	e072      	b.n	80086b0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	2b04      	cmp	r3, #4
 80085ce:	d103      	bne.n	80085d8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	220b      	movs	r2, #11
 80085d4:	761a      	strb	r2, [r3, #24]
      break;
 80085d6:	e06b      	b.n	80086b0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b05      	cmp	r3, #5
 80085dc:	d168      	bne.n	80086b0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80085de:	2303      	movs	r3, #3
 80085e0:	73fb      	strb	r3, [r7, #15]
      break;
 80085e2:	e065      	b.n	80086b0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	795b      	ldrb	r3, [r3, #5]
 80085e8:	2201      	movs	r2, #1
 80085ea:	9200      	str	r2, [sp, #0]
 80085ec:	2200      	movs	r2, #0
 80085ee:	2100      	movs	r1, #0
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f87f 	bl	80086f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	220a      	movs	r2, #10
 8008606:	761a      	strb	r2, [r3, #24]
      break;
 8008608:	e055      	b.n	80086b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	795b      	ldrb	r3, [r3, #5]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 fbe1 	bl	8008dd8 <USBH_LL_GetURBState>
 8008616:	4603      	mov	r3, r0
 8008618:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d105      	bne.n	800862c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	220d      	movs	r2, #13
 8008628:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800862a:	e043      	b.n	80086b4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d103      	bne.n	800863a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2209      	movs	r2, #9
 8008636:	761a      	strb	r2, [r3, #24]
      break;
 8008638:	e03c      	b.n	80086b4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	2b04      	cmp	r3, #4
 800863e:	d139      	bne.n	80086b4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	220b      	movs	r2, #11
 8008644:	761a      	strb	r2, [r3, #24]
      break;
 8008646:	e035      	b.n	80086b4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	7e5b      	ldrb	r3, [r3, #25]
 800864c:	3301      	adds	r3, #1
 800864e:	b2da      	uxtb	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	765a      	strb	r2, [r3, #25]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	7e5b      	ldrb	r3, [r3, #25]
 8008658:	2b02      	cmp	r3, #2
 800865a:	d806      	bhi.n	800866a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008668:	e025      	b.n	80086b6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008670:	2106      	movs	r1, #6
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	795b      	ldrb	r3, [r3, #5]
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f90c 	bl	80088a0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	791b      	ldrb	r3, [r3, #4]
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f906 	bl	80088a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800869a:	2302      	movs	r3, #2
 800869c:	73fb      	strb	r3, [r7, #15]
      break;
 800869e:	e00a      	b.n	80086b6 <USBH_HandleControl+0x2de>

    default:
      break;
 80086a0:	bf00      	nop
 80086a2:	e008      	b.n	80086b6 <USBH_HandleControl+0x2de>
      break;
 80086a4:	bf00      	nop
 80086a6:	e006      	b.n	80086b6 <USBH_HandleControl+0x2de>
      break;
 80086a8:	bf00      	nop
 80086aa:	e004      	b.n	80086b6 <USBH_HandleControl+0x2de>
      break;
 80086ac:	bf00      	nop
 80086ae:	e002      	b.n	80086b6 <USBH_HandleControl+0x2de>
      break;
 80086b0:	bf00      	nop
 80086b2:	e000      	b.n	80086b6 <USBH_HandleControl+0x2de>
      break;
 80086b4:	bf00      	nop
  }

  return status;
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af04      	add	r7, sp, #16
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	4613      	mov	r3, r2
 80086cc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086ce:	79f9      	ldrb	r1, [r7, #7]
 80086d0:	2300      	movs	r3, #0
 80086d2:	9303      	str	r3, [sp, #12]
 80086d4:	2308      	movs	r3, #8
 80086d6:	9302      	str	r3, [sp, #8]
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	2300      	movs	r3, #0
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	2300      	movs	r3, #0
 80086e2:	2200      	movs	r2, #0
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 fb46 	bl	8008d76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af04      	add	r7, sp, #16
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	4611      	mov	r1, r2
 8008700:	461a      	mov	r2, r3
 8008702:	460b      	mov	r3, r1
 8008704:	80fb      	strh	r3, [r7, #6]
 8008706:	4613      	mov	r3, r2
 8008708:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008718:	7979      	ldrb	r1, [r7, #5]
 800871a:	7e3b      	ldrb	r3, [r7, #24]
 800871c:	9303      	str	r3, [sp, #12]
 800871e:	88fb      	ldrh	r3, [r7, #6]
 8008720:	9302      	str	r3, [sp, #8]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	2301      	movs	r3, #1
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	2300      	movs	r3, #0
 800872c:	2200      	movs	r2, #0
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 fb21 	bl	8008d76 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b088      	sub	sp, #32
 8008742:	af04      	add	r7, sp, #16
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	4611      	mov	r1, r2
 800874a:	461a      	mov	r2, r3
 800874c:	460b      	mov	r3, r1
 800874e:	80fb      	strh	r3, [r7, #6]
 8008750:	4613      	mov	r3, r2
 8008752:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008754:	7979      	ldrb	r1, [r7, #5]
 8008756:	2300      	movs	r3, #0
 8008758:	9303      	str	r3, [sp, #12]
 800875a:	88fb      	ldrh	r3, [r7, #6]
 800875c:	9302      	str	r3, [sp, #8]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	2301      	movs	r3, #1
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	2300      	movs	r3, #0
 8008768:	2201      	movs	r2, #1
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 fb03 	bl	8008d76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008770:	2300      	movs	r3, #0

}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b088      	sub	sp, #32
 800877e:	af04      	add	r7, sp, #16
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	4611      	mov	r1, r2
 8008786:	461a      	mov	r2, r3
 8008788:	460b      	mov	r3, r1
 800878a:	80fb      	strh	r3, [r7, #6]
 800878c:	4613      	mov	r3, r2
 800878e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800879e:	7979      	ldrb	r1, [r7, #5]
 80087a0:	7e3b      	ldrb	r3, [r7, #24]
 80087a2:	9303      	str	r3, [sp, #12]
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	9302      	str	r3, [sp, #8]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	9301      	str	r3, [sp, #4]
 80087ac:	2301      	movs	r3, #1
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	2302      	movs	r3, #2
 80087b2:	2200      	movs	r2, #0
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 fade 	bl	8008d76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b088      	sub	sp, #32
 80087c8:	af04      	add	r7, sp, #16
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	4611      	mov	r1, r2
 80087d0:	461a      	mov	r2, r3
 80087d2:	460b      	mov	r3, r1
 80087d4:	80fb      	strh	r3, [r7, #6]
 80087d6:	4613      	mov	r3, r2
 80087d8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087da:	7979      	ldrb	r1, [r7, #5]
 80087dc:	2300      	movs	r3, #0
 80087de:	9303      	str	r3, [sp, #12]
 80087e0:	88fb      	ldrh	r3, [r7, #6]
 80087e2:	9302      	str	r3, [sp, #8]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	2301      	movs	r3, #1
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	2302      	movs	r3, #2
 80087ee:	2201      	movs	r2, #1
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 fac0 	bl	8008d76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af04      	add	r7, sp, #16
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	4608      	mov	r0, r1
 800880a:	4611      	mov	r1, r2
 800880c:	461a      	mov	r2, r3
 800880e:	4603      	mov	r3, r0
 8008810:	70fb      	strb	r3, [r7, #3]
 8008812:	460b      	mov	r3, r1
 8008814:	70bb      	strb	r3, [r7, #2]
 8008816:	4613      	mov	r3, r2
 8008818:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800881a:	7878      	ldrb	r0, [r7, #1]
 800881c:	78ba      	ldrb	r2, [r7, #2]
 800881e:	78f9      	ldrb	r1, [r7, #3]
 8008820:	8b3b      	ldrh	r3, [r7, #24]
 8008822:	9302      	str	r3, [sp, #8]
 8008824:	7d3b      	ldrb	r3, [r7, #20]
 8008826:	9301      	str	r3, [sp, #4]
 8008828:	7c3b      	ldrb	r3, [r7, #16]
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	4603      	mov	r3, r0
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fa53 	bl	8008cda <USBH_LL_OpenPipe>

  return USBH_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b082      	sub	sp, #8
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800884a:	78fb      	ldrb	r3, [r7, #3]
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fa72 	bl	8008d38 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f836 	bl	80088dc <USBH_GetFreePipe>
 8008870:	4603      	mov	r3, r0
 8008872:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008874:	89fb      	ldrh	r3, [r7, #14]
 8008876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800887a:	4293      	cmp	r3, r2
 800887c:	d00a      	beq.n	8008894 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	89fb      	ldrh	r3, [r7, #14]
 8008882:	f003 030f 	and.w	r3, r3, #15
 8008886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	33e0      	adds	r3, #224	; 0xe0
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	440b      	add	r3, r1
 8008892:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008894:	89fb      	ldrh	r3, [r7, #14]
 8008896:	b2db      	uxtb	r3, r3
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	2b0f      	cmp	r3, #15
 80088b0:	d80d      	bhi.n	80088ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80088b2:	78fb      	ldrb	r3, [r7, #3]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	33e0      	adds	r3, #224	; 0xe0
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	33e0      	adds	r3, #224	; 0xe0
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	440b      	add	r3, r1
 80088cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]
 80088ec:	e00f      	b.n	800890e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	33e0      	adds	r3, #224	; 0xe0
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	b29b      	uxth	r3, r3
 8008906:	e007      	b.n	8008918 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	3301      	adds	r3, #1
 800890c:	73fb      	strb	r3, [r7, #15]
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	2b0f      	cmp	r3, #15
 8008912:	d9ec      	bls.n	80088ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008914:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008928:	2201      	movs	r2, #1
 800892a:	490e      	ldr	r1, [pc, #56]	; (8008964 <MX_USB_HOST_Init+0x40>)
 800892c:	480e      	ldr	r0, [pc, #56]	; (8008968 <MX_USB_HOST_Init+0x44>)
 800892e:	f7fe fba5 	bl	800707c <USBH_Init>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008938:	f7f8 f8a6 	bl	8000a88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800893c:	490b      	ldr	r1, [pc, #44]	; (800896c <MX_USB_HOST_Init+0x48>)
 800893e:	480a      	ldr	r0, [pc, #40]	; (8008968 <MX_USB_HOST_Init+0x44>)
 8008940:	f7fe fc2a 	bl	8007198 <USBH_RegisterClass>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800894a:	f7f8 f89d 	bl	8000a88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800894e:	4806      	ldr	r0, [pc, #24]	; (8008968 <MX_USB_HOST_Init+0x44>)
 8008950:	f7fe fcae 	bl	80072b0 <USBH_Start>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800895a:	f7f8 f895 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800895e:	bf00      	nop
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	08008985 	.word	0x08008985
 8008968:	20000220 	.word	0x20000220
 800896c:	2000000c 	.word	0x2000000c

08008970 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008974:	4802      	ldr	r0, [pc, #8]	; (8008980 <MX_USB_HOST_Process+0x10>)
 8008976:	f7fe fcab 	bl	80072d0 <USBH_Process>
}
 800897a:	bf00      	nop
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20000220 	.word	0x20000220

08008984 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008990:	78fb      	ldrb	r3, [r7, #3]
 8008992:	3b01      	subs	r3, #1
 8008994:	2b04      	cmp	r3, #4
 8008996:	d819      	bhi.n	80089cc <USBH_UserProcess+0x48>
 8008998:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <USBH_UserProcess+0x1c>)
 800899a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899e:	bf00      	nop
 80089a0:	080089cd 	.word	0x080089cd
 80089a4:	080089bd 	.word	0x080089bd
 80089a8:	080089cd 	.word	0x080089cd
 80089ac:	080089c5 	.word	0x080089c5
 80089b0:	080089b5 	.word	0x080089b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80089b4:	4b09      	ldr	r3, [pc, #36]	; (80089dc <USBH_UserProcess+0x58>)
 80089b6:	2203      	movs	r2, #3
 80089b8:	701a      	strb	r2, [r3, #0]
  break;
 80089ba:	e008      	b.n	80089ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80089bc:	4b07      	ldr	r3, [pc, #28]	; (80089dc <USBH_UserProcess+0x58>)
 80089be:	2202      	movs	r2, #2
 80089c0:	701a      	strb	r2, [r3, #0]
  break;
 80089c2:	e004      	b.n	80089ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80089c4:	4b05      	ldr	r3, [pc, #20]	; (80089dc <USBH_UserProcess+0x58>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	701a      	strb	r2, [r3, #0]
  break;
 80089ca:	e000      	b.n	80089ce <USBH_UserProcess+0x4a>

  default:
  break;
 80089cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80089ce:	bf00      	nop
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	200005f8 	.word	0x200005f8

080089e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08a      	sub	sp, #40	; 0x28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089e8:	f107 0314 	add.w	r3, r7, #20
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	609a      	str	r2, [r3, #8]
 80089f4:	60da      	str	r2, [r3, #12]
 80089f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a00:	d147      	bne.n	8008a92 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a02:	2300      	movs	r3, #0
 8008a04:	613b      	str	r3, [r7, #16]
 8008a06:	4b25      	ldr	r3, [pc, #148]	; (8008a9c <HAL_HCD_MspInit+0xbc>)
 8008a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0a:	4a24      	ldr	r2, [pc, #144]	; (8008a9c <HAL_HCD_MspInit+0xbc>)
 8008a0c:	f043 0301 	orr.w	r3, r3, #1
 8008a10:	6313      	str	r3, [r2, #48]	; 0x30
 8008a12:	4b22      	ldr	r3, [pc, #136]	; (8008a9c <HAL_HCD_MspInit+0xbc>)
 8008a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	613b      	str	r3, [r7, #16]
 8008a1c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a2c:	f107 0314 	add.w	r3, r7, #20
 8008a30:	4619      	mov	r1, r3
 8008a32:	481b      	ldr	r0, [pc, #108]	; (8008aa0 <HAL_HCD_MspInit+0xc0>)
 8008a34:	f7f8 fcee 	bl	8001414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a3e:	2302      	movs	r3, #2
 8008a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a46:	2303      	movs	r3, #3
 8008a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a4a:	230a      	movs	r3, #10
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a4e:	f107 0314 	add.w	r3, r7, #20
 8008a52:	4619      	mov	r1, r3
 8008a54:	4812      	ldr	r0, [pc, #72]	; (8008aa0 <HAL_HCD_MspInit+0xc0>)
 8008a56:	f7f8 fcdd 	bl	8001414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a5a:	4b10      	ldr	r3, [pc, #64]	; (8008a9c <HAL_HCD_MspInit+0xbc>)
 8008a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5e:	4a0f      	ldr	r2, [pc, #60]	; (8008a9c <HAL_HCD_MspInit+0xbc>)
 8008a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a64:	6353      	str	r3, [r2, #52]	; 0x34
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]
 8008a6a:	4b0c      	ldr	r3, [pc, #48]	; (8008a9c <HAL_HCD_MspInit+0xbc>)
 8008a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a6e:	4a0b      	ldr	r2, [pc, #44]	; (8008a9c <HAL_HCD_MspInit+0xbc>)
 8008a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a74:	6453      	str	r3, [r2, #68]	; 0x44
 8008a76:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <HAL_HCD_MspInit+0xbc>)
 8008a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a82:	2200      	movs	r2, #0
 8008a84:	2100      	movs	r1, #0
 8008a86:	2043      	movs	r0, #67	; 0x43
 8008a88:	f7f8 fbfb 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a8c:	2043      	movs	r0, #67	; 0x43
 8008a8e:	f7f8 fc14 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a92:	bf00      	nop
 8008a94:	3728      	adds	r7, #40	; 0x28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	40023800 	.word	0x40023800
 8008aa0:	40020000 	.word	0x40020000

08008aa4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fe ffeb 	bl	8007a8e <USBH_LL_IncTimer>
}
 8008ab8:	bf00      	nop
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff f823 	bl	8007b1a <USBH_LL_Connect>
}
 8008ad4:	bf00      	nop
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff f82c 	bl	8007b48 <USBH_LL_Disconnect>
}
 8008af0:	bf00      	nop
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	70fb      	strb	r3, [r7, #3]
 8008b04:	4613      	mov	r3, r2
 8008b06:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe ffdd 	bl	8007ae2 <USBH_LL_PortEnabled>
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe ffdd 	bl	8007afe <USBH_LL_PortDisabled>
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d12a      	bne.n	8008bb4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008b5e:	4a18      	ldr	r2, [pc, #96]	; (8008bc0 <USBH_LL_Init+0x74>)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a15      	ldr	r2, [pc, #84]	; (8008bc0 <USBH_LL_Init+0x74>)
 8008b6a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b6e:	4b14      	ldr	r3, [pc, #80]	; (8008bc0 <USBH_LL_Init+0x74>)
 8008b70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b74:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008b76:	4b12      	ldr	r3, [pc, #72]	; (8008bc0 <USBH_LL_Init+0x74>)
 8008b78:	2208      	movs	r2, #8
 8008b7a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008b7c:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <USBH_LL_Init+0x74>)
 8008b7e:	2201      	movs	r2, #1
 8008b80:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b82:	4b0f      	ldr	r3, [pc, #60]	; (8008bc0 <USBH_LL_Init+0x74>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008b88:	4b0d      	ldr	r3, [pc, #52]	; (8008bc0 <USBH_LL_Init+0x74>)
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <USBH_LL_Init+0x74>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008b94:	480a      	ldr	r0, [pc, #40]	; (8008bc0 <USBH_LL_Init+0x74>)
 8008b96:	f7f8 fdda 	bl	800174e <HAL_HCD_Init>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008ba0:	f7f7 ff72 	bl	8000a88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ba4:	4806      	ldr	r0, [pc, #24]	; (8008bc0 <USBH_LL_Init+0x74>)
 8008ba6:	f7f9 f9be 	bl	8001f26 <HAL_HCD_GetCurrentFrame>
 8008baa:	4603      	mov	r3, r0
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7fe ff5e 	bl	8007a70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	200005fc 	.word	0x200005fc

08008bc4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7f9 f92d 	bl	8001e3a <HAL_HCD_Start>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 f95c 	bl	8008ea4 <USBH_Get_USB_Status>
 8008bec:	4603      	mov	r3, r0
 8008bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7f9 f935 	bl	8001e80 <HAL_HCD_Stop>
 8008c16:	4603      	mov	r3, r0
 8008c18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 f941 	bl	8008ea4 <USBH_Get_USB_Status>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7f9 f97d 	bl	8001f42 <HAL_HCD_GetCurrentSpeed>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d00c      	beq.n	8008c68 <USBH_LL_GetSpeed+0x38>
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d80d      	bhi.n	8008c6e <USBH_LL_GetSpeed+0x3e>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d002      	beq.n	8008c5c <USBH_LL_GetSpeed+0x2c>
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d003      	beq.n	8008c62 <USBH_LL_GetSpeed+0x32>
 8008c5a:	e008      	b.n	8008c6e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c60:	e008      	b.n	8008c74 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008c62:	2301      	movs	r3, #1
 8008c64:	73fb      	strb	r3, [r7, #15]
    break;
 8008c66:	e005      	b.n	8008c74 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c6c:	e002      	b.n	8008c74 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	73fb      	strb	r3, [r7, #15]
    break;
 8008c72:	bf00      	nop
  }
  return  speed;
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7f9 f910 	bl	8001eba <HAL_HCD_ResetPort>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 f8ff 	bl	8008ea4 <USBH_Get_USB_Status>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cc6:	78fa      	ldrb	r2, [r7, #3]
 8008cc8:	4611      	mov	r1, r2
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7f9 f917 	bl	8001efe <HAL_HCD_HC_GetXferCount>
 8008cd0:	4603      	mov	r3, r0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cda:	b590      	push	{r4, r7, lr}
 8008cdc:	b089      	sub	sp, #36	; 0x24
 8008cde:	af04      	add	r7, sp, #16
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	4608      	mov	r0, r1
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	4603      	mov	r3, r0
 8008cea:	70fb      	strb	r3, [r7, #3]
 8008cec:	460b      	mov	r3, r1
 8008cee:	70bb      	strb	r3, [r7, #2]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008d02:	787c      	ldrb	r4, [r7, #1]
 8008d04:	78ba      	ldrb	r2, [r7, #2]
 8008d06:	78f9      	ldrb	r1, [r7, #3]
 8008d08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d0a:	9302      	str	r3, [sp, #8]
 8008d0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d10:	9301      	str	r3, [sp, #4]
 8008d12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	4623      	mov	r3, r4
 8008d1a:	f7f8 fd7a 	bl	8001812 <HAL_HCD_HC_Init>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 f8bd 	bl	8008ea4 <USBH_Get_USB_Status>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd90      	pop	{r4, r7, pc}

08008d38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d52:	78fa      	ldrb	r2, [r7, #3]
 8008d54:	4611      	mov	r1, r2
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7f8 fdea 	bl	8001930 <HAL_HCD_HC_Halt>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 f89e 	bl	8008ea4 <USBH_Get_USB_Status>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008d76:	b590      	push	{r4, r7, lr}
 8008d78:	b089      	sub	sp, #36	; 0x24
 8008d7a:	af04      	add	r7, sp, #16
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	4608      	mov	r0, r1
 8008d80:	4611      	mov	r1, r2
 8008d82:	461a      	mov	r2, r3
 8008d84:	4603      	mov	r3, r0
 8008d86:	70fb      	strb	r3, [r7, #3]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	70bb      	strb	r3, [r7, #2]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008d9e:	787c      	ldrb	r4, [r7, #1]
 8008da0:	78ba      	ldrb	r2, [r7, #2]
 8008da2:	78f9      	ldrb	r1, [r7, #3]
 8008da4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008da8:	9303      	str	r3, [sp, #12]
 8008daa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008dac:	9302      	str	r3, [sp, #8]
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	4623      	mov	r3, r4
 8008dba:	f7f8 fddd 	bl	8001978 <HAL_HCD_HC_SubmitRequest>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 f86d 	bl	8008ea4 <USBH_Get_USB_Status>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd90      	pop	{r4, r7, pc}

08008dd8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dea:	78fa      	ldrb	r2, [r7, #3]
 8008dec:	4611      	mov	r1, r2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7f9 f871 	bl	8001ed6 <HAL_HCD_HC_GetURBState>
 8008df4:	4603      	mov	r3, r0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d103      	bne.n	8008e1c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008e14:	78fb      	ldrb	r3, [r7, #3]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 f870 	bl	8008efc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008e1c:	20c8      	movs	r0, #200	; 0xc8
 8008e1e:	f7f8 f931 	bl	8001084 <HAL_Delay>
  return USBH_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	70fb      	strb	r3, [r7, #3]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e42:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	212c      	movs	r1, #44	; 0x2c
 8008e4a:	fb01 f303 	mul.w	r3, r1, r3
 8008e4e:	4413      	add	r3, r2
 8008e50:	333b      	adds	r3, #59	; 0x3b
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d009      	beq.n	8008e6c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	212c      	movs	r1, #44	; 0x2c
 8008e5e:	fb01 f303 	mul.w	r3, r1, r3
 8008e62:	4413      	add	r3, r2
 8008e64:	3354      	adds	r3, #84	; 0x54
 8008e66:	78ba      	ldrb	r2, [r7, #2]
 8008e68:	701a      	strb	r2, [r3, #0]
 8008e6a:	e008      	b.n	8008e7e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008e6c:	78fb      	ldrb	r3, [r7, #3]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	212c      	movs	r1, #44	; 0x2c
 8008e72:	fb01 f303 	mul.w	r3, r1, r3
 8008e76:	4413      	add	r3, r2
 8008e78:	3355      	adds	r3, #85	; 0x55
 8008e7a:	78ba      	ldrb	r2, [r7, #2]
 8008e7c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7f8 f8f5 	bl	8001084 <HAL_Delay>
}
 8008e9a:	bf00      	nop
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d817      	bhi.n	8008ee8 <USBH_Get_USB_Status+0x44>
 8008eb8:	a201      	add	r2, pc, #4	; (adr r2, 8008ec0 <USBH_Get_USB_Status+0x1c>)
 8008eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebe:	bf00      	nop
 8008ec0:	08008ed1 	.word	0x08008ed1
 8008ec4:	08008ed7 	.word	0x08008ed7
 8008ec8:	08008edd 	.word	0x08008edd
 8008ecc:	08008ee3 	.word	0x08008ee3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed4:	e00b      	b.n	8008eee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eda:	e008      	b.n	8008eee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008edc:	2301      	movs	r3, #1
 8008ede:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee0:	e005      	b.n	8008eee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee6:	e002      	b.n	8008eee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ee8:	2302      	movs	r3, #2
 8008eea:	73fb      	strb	r3, [r7, #15]
    break;
 8008eec:	bf00      	nop
  }
  return usb_status;
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
 8008f14:	e001      	b.n	8008f1a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008f16:	2301      	movs	r3, #1
 8008f18:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	2101      	movs	r1, #1
 8008f20:	4803      	ldr	r0, [pc, #12]	; (8008f30 <MX_DriverVbusFS+0x34>)
 8008f22:	f7f8 fbfb 	bl	800171c <HAL_GPIO_WritePin>
}
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	40020800 	.word	0x40020800

08008f34 <malloc>:
 8008f34:	4b02      	ldr	r3, [pc, #8]	; (8008f40 <malloc+0xc>)
 8008f36:	4601      	mov	r1, r0
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	f000 b82b 	b.w	8008f94 <_malloc_r>
 8008f3e:	bf00      	nop
 8008f40:	20000078 	.word	0x20000078

08008f44 <free>:
 8008f44:	4b02      	ldr	r3, [pc, #8]	; (8008f50 <free+0xc>)
 8008f46:	4601      	mov	r1, r0
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	f000 b8f3 	b.w	8009134 <_free_r>
 8008f4e:	bf00      	nop
 8008f50:	20000078 	.word	0x20000078

08008f54 <sbrk_aligned>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	4e0e      	ldr	r6, [pc, #56]	; (8008f90 <sbrk_aligned+0x3c>)
 8008f58:	460c      	mov	r4, r1
 8008f5a:	6831      	ldr	r1, [r6, #0]
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	b911      	cbnz	r1, 8008f66 <sbrk_aligned+0x12>
 8008f60:	f000 f8ac 	bl	80090bc <_sbrk_r>
 8008f64:	6030      	str	r0, [r6, #0]
 8008f66:	4621      	mov	r1, r4
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f000 f8a7 	bl	80090bc <_sbrk_r>
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	d00a      	beq.n	8008f88 <sbrk_aligned+0x34>
 8008f72:	1cc4      	adds	r4, r0, #3
 8008f74:	f024 0403 	bic.w	r4, r4, #3
 8008f78:	42a0      	cmp	r0, r4
 8008f7a:	d007      	beq.n	8008f8c <sbrk_aligned+0x38>
 8008f7c:	1a21      	subs	r1, r4, r0
 8008f7e:	4628      	mov	r0, r5
 8008f80:	f000 f89c 	bl	80090bc <_sbrk_r>
 8008f84:	3001      	adds	r0, #1
 8008f86:	d101      	bne.n	8008f8c <sbrk_aligned+0x38>
 8008f88:	f04f 34ff 	mov.w	r4, #4294967295
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}
 8008f90:	20000904 	.word	0x20000904

08008f94 <_malloc_r>:
 8008f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f98:	1ccd      	adds	r5, r1, #3
 8008f9a:	f025 0503 	bic.w	r5, r5, #3
 8008f9e:	3508      	adds	r5, #8
 8008fa0:	2d0c      	cmp	r5, #12
 8008fa2:	bf38      	it	cc
 8008fa4:	250c      	movcc	r5, #12
 8008fa6:	2d00      	cmp	r5, #0
 8008fa8:	4607      	mov	r7, r0
 8008faa:	db01      	blt.n	8008fb0 <_malloc_r+0x1c>
 8008fac:	42a9      	cmp	r1, r5
 8008fae:	d905      	bls.n	8008fbc <_malloc_r+0x28>
 8008fb0:	230c      	movs	r3, #12
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	2600      	movs	r6, #0
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009090 <_malloc_r+0xfc>
 8008fc0:	f000 f868 	bl	8009094 <__malloc_lock>
 8008fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8008fc8:	461c      	mov	r4, r3
 8008fca:	bb5c      	cbnz	r4, 8009024 <_malloc_r+0x90>
 8008fcc:	4629      	mov	r1, r5
 8008fce:	4638      	mov	r0, r7
 8008fd0:	f7ff ffc0 	bl	8008f54 <sbrk_aligned>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	d155      	bne.n	8009086 <_malloc_r+0xf2>
 8008fda:	f8d8 4000 	ldr.w	r4, [r8]
 8008fde:	4626      	mov	r6, r4
 8008fe0:	2e00      	cmp	r6, #0
 8008fe2:	d145      	bne.n	8009070 <_malloc_r+0xdc>
 8008fe4:	2c00      	cmp	r4, #0
 8008fe6:	d048      	beq.n	800907a <_malloc_r+0xe6>
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	4631      	mov	r1, r6
 8008fec:	4638      	mov	r0, r7
 8008fee:	eb04 0903 	add.w	r9, r4, r3
 8008ff2:	f000 f863 	bl	80090bc <_sbrk_r>
 8008ff6:	4581      	cmp	r9, r0
 8008ff8:	d13f      	bne.n	800907a <_malloc_r+0xe6>
 8008ffa:	6821      	ldr	r1, [r4, #0]
 8008ffc:	1a6d      	subs	r5, r5, r1
 8008ffe:	4629      	mov	r1, r5
 8009000:	4638      	mov	r0, r7
 8009002:	f7ff ffa7 	bl	8008f54 <sbrk_aligned>
 8009006:	3001      	adds	r0, #1
 8009008:	d037      	beq.n	800907a <_malloc_r+0xe6>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	442b      	add	r3, r5
 800900e:	6023      	str	r3, [r4, #0]
 8009010:	f8d8 3000 	ldr.w	r3, [r8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d038      	beq.n	800908a <_malloc_r+0xf6>
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	42a2      	cmp	r2, r4
 800901c:	d12b      	bne.n	8009076 <_malloc_r+0xe2>
 800901e:	2200      	movs	r2, #0
 8009020:	605a      	str	r2, [r3, #4]
 8009022:	e00f      	b.n	8009044 <_malloc_r+0xb0>
 8009024:	6822      	ldr	r2, [r4, #0]
 8009026:	1b52      	subs	r2, r2, r5
 8009028:	d41f      	bmi.n	800906a <_malloc_r+0xd6>
 800902a:	2a0b      	cmp	r2, #11
 800902c:	d917      	bls.n	800905e <_malloc_r+0xca>
 800902e:	1961      	adds	r1, r4, r5
 8009030:	42a3      	cmp	r3, r4
 8009032:	6025      	str	r5, [r4, #0]
 8009034:	bf18      	it	ne
 8009036:	6059      	strne	r1, [r3, #4]
 8009038:	6863      	ldr	r3, [r4, #4]
 800903a:	bf08      	it	eq
 800903c:	f8c8 1000 	streq.w	r1, [r8]
 8009040:	5162      	str	r2, [r4, r5]
 8009042:	604b      	str	r3, [r1, #4]
 8009044:	4638      	mov	r0, r7
 8009046:	f104 060b 	add.w	r6, r4, #11
 800904a:	f000 f829 	bl	80090a0 <__malloc_unlock>
 800904e:	f026 0607 	bic.w	r6, r6, #7
 8009052:	1d23      	adds	r3, r4, #4
 8009054:	1af2      	subs	r2, r6, r3
 8009056:	d0ae      	beq.n	8008fb6 <_malloc_r+0x22>
 8009058:	1b9b      	subs	r3, r3, r6
 800905a:	50a3      	str	r3, [r4, r2]
 800905c:	e7ab      	b.n	8008fb6 <_malloc_r+0x22>
 800905e:	42a3      	cmp	r3, r4
 8009060:	6862      	ldr	r2, [r4, #4]
 8009062:	d1dd      	bne.n	8009020 <_malloc_r+0x8c>
 8009064:	f8c8 2000 	str.w	r2, [r8]
 8009068:	e7ec      	b.n	8009044 <_malloc_r+0xb0>
 800906a:	4623      	mov	r3, r4
 800906c:	6864      	ldr	r4, [r4, #4]
 800906e:	e7ac      	b.n	8008fca <_malloc_r+0x36>
 8009070:	4634      	mov	r4, r6
 8009072:	6876      	ldr	r6, [r6, #4]
 8009074:	e7b4      	b.n	8008fe0 <_malloc_r+0x4c>
 8009076:	4613      	mov	r3, r2
 8009078:	e7cc      	b.n	8009014 <_malloc_r+0x80>
 800907a:	230c      	movs	r3, #12
 800907c:	603b      	str	r3, [r7, #0]
 800907e:	4638      	mov	r0, r7
 8009080:	f000 f80e 	bl	80090a0 <__malloc_unlock>
 8009084:	e797      	b.n	8008fb6 <_malloc_r+0x22>
 8009086:	6025      	str	r5, [r4, #0]
 8009088:	e7dc      	b.n	8009044 <_malloc_r+0xb0>
 800908a:	605b      	str	r3, [r3, #4]
 800908c:	deff      	udf	#255	; 0xff
 800908e:	bf00      	nop
 8009090:	20000900 	.word	0x20000900

08009094 <__malloc_lock>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__malloc_lock+0x8>)
 8009096:	f000 b84b 	b.w	8009130 <__retarget_lock_acquire_recursive>
 800909a:	bf00      	nop
 800909c:	20000a44 	.word	0x20000a44

080090a0 <__malloc_unlock>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__malloc_unlock+0x8>)
 80090a2:	f000 b846 	b.w	8009132 <__retarget_lock_release_recursive>
 80090a6:	bf00      	nop
 80090a8:	20000a44 	.word	0x20000a44

080090ac <memset>:
 80090ac:	4402      	add	r2, r0
 80090ae:	4603      	mov	r3, r0
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d100      	bne.n	80090b6 <memset+0xa>
 80090b4:	4770      	bx	lr
 80090b6:	f803 1b01 	strb.w	r1, [r3], #1
 80090ba:	e7f9      	b.n	80090b0 <memset+0x4>

080090bc <_sbrk_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d06      	ldr	r5, [pc, #24]	; (80090d8 <_sbrk_r+0x1c>)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f7f7 fef8 	bl	8000ebc <_sbrk>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_sbrk_r+0x1a>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_sbrk_r+0x1a>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	20000a40 	.word	0x20000a40

080090dc <__errno>:
 80090dc:	4b01      	ldr	r3, [pc, #4]	; (80090e4 <__errno+0x8>)
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20000078 	.word	0x20000078

080090e8 <__libc_init_array>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	4d0d      	ldr	r5, [pc, #52]	; (8009120 <__libc_init_array+0x38>)
 80090ec:	4c0d      	ldr	r4, [pc, #52]	; (8009124 <__libc_init_array+0x3c>)
 80090ee:	1b64      	subs	r4, r4, r5
 80090f0:	10a4      	asrs	r4, r4, #2
 80090f2:	2600      	movs	r6, #0
 80090f4:	42a6      	cmp	r6, r4
 80090f6:	d109      	bne.n	800910c <__libc_init_array+0x24>
 80090f8:	4d0b      	ldr	r5, [pc, #44]	; (8009128 <__libc_init_array+0x40>)
 80090fa:	4c0c      	ldr	r4, [pc, #48]	; (800912c <__libc_init_array+0x44>)
 80090fc:	f000 f866 	bl	80091cc <_init>
 8009100:	1b64      	subs	r4, r4, r5
 8009102:	10a4      	asrs	r4, r4, #2
 8009104:	2600      	movs	r6, #0
 8009106:	42a6      	cmp	r6, r4
 8009108:	d105      	bne.n	8009116 <__libc_init_array+0x2e>
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009110:	4798      	blx	r3
 8009112:	3601      	adds	r6, #1
 8009114:	e7ee      	b.n	80090f4 <__libc_init_array+0xc>
 8009116:	f855 3b04 	ldr.w	r3, [r5], #4
 800911a:	4798      	blx	r3
 800911c:	3601      	adds	r6, #1
 800911e:	e7f2      	b.n	8009106 <__libc_init_array+0x1e>
 8009120:	08009218 	.word	0x08009218
 8009124:	08009218 	.word	0x08009218
 8009128:	08009218 	.word	0x08009218
 800912c:	0800921c 	.word	0x0800921c

08009130 <__retarget_lock_acquire_recursive>:
 8009130:	4770      	bx	lr

08009132 <__retarget_lock_release_recursive>:
 8009132:	4770      	bx	lr

08009134 <_free_r>:
 8009134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009136:	2900      	cmp	r1, #0
 8009138:	d044      	beq.n	80091c4 <_free_r+0x90>
 800913a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800913e:	9001      	str	r0, [sp, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f1a1 0404 	sub.w	r4, r1, #4
 8009146:	bfb8      	it	lt
 8009148:	18e4      	addlt	r4, r4, r3
 800914a:	f7ff ffa3 	bl	8009094 <__malloc_lock>
 800914e:	4a1e      	ldr	r2, [pc, #120]	; (80091c8 <_free_r+0x94>)
 8009150:	9801      	ldr	r0, [sp, #4]
 8009152:	6813      	ldr	r3, [r2, #0]
 8009154:	b933      	cbnz	r3, 8009164 <_free_r+0x30>
 8009156:	6063      	str	r3, [r4, #4]
 8009158:	6014      	str	r4, [r2, #0]
 800915a:	b003      	add	sp, #12
 800915c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009160:	f7ff bf9e 	b.w	80090a0 <__malloc_unlock>
 8009164:	42a3      	cmp	r3, r4
 8009166:	d908      	bls.n	800917a <_free_r+0x46>
 8009168:	6825      	ldr	r5, [r4, #0]
 800916a:	1961      	adds	r1, r4, r5
 800916c:	428b      	cmp	r3, r1
 800916e:	bf01      	itttt	eq
 8009170:	6819      	ldreq	r1, [r3, #0]
 8009172:	685b      	ldreq	r3, [r3, #4]
 8009174:	1949      	addeq	r1, r1, r5
 8009176:	6021      	streq	r1, [r4, #0]
 8009178:	e7ed      	b.n	8009156 <_free_r+0x22>
 800917a:	461a      	mov	r2, r3
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	b10b      	cbz	r3, 8009184 <_free_r+0x50>
 8009180:	42a3      	cmp	r3, r4
 8009182:	d9fa      	bls.n	800917a <_free_r+0x46>
 8009184:	6811      	ldr	r1, [r2, #0]
 8009186:	1855      	adds	r5, r2, r1
 8009188:	42a5      	cmp	r5, r4
 800918a:	d10b      	bne.n	80091a4 <_free_r+0x70>
 800918c:	6824      	ldr	r4, [r4, #0]
 800918e:	4421      	add	r1, r4
 8009190:	1854      	adds	r4, r2, r1
 8009192:	42a3      	cmp	r3, r4
 8009194:	6011      	str	r1, [r2, #0]
 8009196:	d1e0      	bne.n	800915a <_free_r+0x26>
 8009198:	681c      	ldr	r4, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	6053      	str	r3, [r2, #4]
 800919e:	440c      	add	r4, r1
 80091a0:	6014      	str	r4, [r2, #0]
 80091a2:	e7da      	b.n	800915a <_free_r+0x26>
 80091a4:	d902      	bls.n	80091ac <_free_r+0x78>
 80091a6:	230c      	movs	r3, #12
 80091a8:	6003      	str	r3, [r0, #0]
 80091aa:	e7d6      	b.n	800915a <_free_r+0x26>
 80091ac:	6825      	ldr	r5, [r4, #0]
 80091ae:	1961      	adds	r1, r4, r5
 80091b0:	428b      	cmp	r3, r1
 80091b2:	bf04      	itt	eq
 80091b4:	6819      	ldreq	r1, [r3, #0]
 80091b6:	685b      	ldreq	r3, [r3, #4]
 80091b8:	6063      	str	r3, [r4, #4]
 80091ba:	bf04      	itt	eq
 80091bc:	1949      	addeq	r1, r1, r5
 80091be:	6021      	streq	r1, [r4, #0]
 80091c0:	6054      	str	r4, [r2, #4]
 80091c2:	e7ca      	b.n	800915a <_free_r+0x26>
 80091c4:	b003      	add	sp, #12
 80091c6:	bd30      	pop	{r4, r5, pc}
 80091c8:	20000900 	.word	0x20000900

080091cc <_init>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	bf00      	nop
 80091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d2:	bc08      	pop	{r3}
 80091d4:	469e      	mov	lr, r3
 80091d6:	4770      	bx	lr

080091d8 <_fini>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	bf00      	nop
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr
