
Sirius_Test_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdc4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800bf5c  0800bf5c  0001bf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfc4  0800bfc4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfc4  0800bfc4  0001bfc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfcc  0800bfcc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfcc  0800bfcc  0001bfcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfd0  0800bfd0  0001bfd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800bfd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd0  2000007c  0800c050  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c4c  0800c050  00020c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b7de  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040cf  00000000  00000000  0003b8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0003f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112a  00000000  00000000  00040fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c361  00000000  00000000  000420da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d422  00000000  00000000  0005e43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000956b7  00000000  00000000  0007b85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006284  00000000  00000000  00110f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00117198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bf44 	.word	0x0800bf44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	0800bf44 	.word	0x0800bf44

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b970 	b.w	8000e1c <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9e08      	ldr	r6, [sp, #32]
 8000b5a:	460d      	mov	r5, r1
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	460f      	mov	r7, r1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d14a      	bne.n	8000bfa <__udivmoddi4+0xa6>
 8000b64:	428a      	cmp	r2, r1
 8000b66:	4694      	mov	ip, r2
 8000b68:	d965      	bls.n	8000c36 <__udivmoddi4+0xe2>
 8000b6a:	fab2 f382 	clz	r3, r2
 8000b6e:	b143      	cbz	r3, 8000b82 <__udivmoddi4+0x2e>
 8000b70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b74:	f1c3 0220 	rsb	r2, r3, #32
 8000b78:	409f      	lsls	r7, r3
 8000b7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7e:	4317      	orrs	r7, r2
 8000b80:	409c      	lsls	r4, r3
 8000b82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b86:	fa1f f58c 	uxth.w	r5, ip
 8000b8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b8e:	0c22      	lsrs	r2, r4, #16
 8000b90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b98:	fb01 f005 	mul.w	r0, r1, r5
 8000b9c:	4290      	cmp	r0, r2
 8000b9e:	d90a      	bls.n	8000bb6 <__udivmoddi4+0x62>
 8000ba0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ba8:	f080 811c 	bcs.w	8000de4 <__udivmoddi4+0x290>
 8000bac:	4290      	cmp	r0, r2
 8000bae:	f240 8119 	bls.w	8000de4 <__udivmoddi4+0x290>
 8000bb2:	3902      	subs	r1, #2
 8000bb4:	4462      	add	r2, ip
 8000bb6:	1a12      	subs	r2, r2, r0
 8000bb8:	b2a4      	uxth	r4, r4
 8000bba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc6:	fb00 f505 	mul.w	r5, r0, r5
 8000bca:	42a5      	cmp	r5, r4
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x90>
 8000bce:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd6:	f080 8107 	bcs.w	8000de8 <__udivmoddi4+0x294>
 8000bda:	42a5      	cmp	r5, r4
 8000bdc:	f240 8104 	bls.w	8000de8 <__udivmoddi4+0x294>
 8000be0:	4464      	add	r4, ip
 8000be2:	3802      	subs	r0, #2
 8000be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be8:	1b64      	subs	r4, r4, r5
 8000bea:	2100      	movs	r1, #0
 8000bec:	b11e      	cbz	r6, 8000bf6 <__udivmoddi4+0xa2>
 8000bee:	40dc      	lsrs	r4, r3
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e9c6 4300 	strd	r4, r3, [r6]
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0xbc>
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	f000 80ed 	beq.w	8000dde <__udivmoddi4+0x28a>
 8000c04:	2100      	movs	r1, #0
 8000c06:	e9c6 0500 	strd	r0, r5, [r6]
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c10:	fab3 f183 	clz	r1, r3
 8000c14:	2900      	cmp	r1, #0
 8000c16:	d149      	bne.n	8000cac <__udivmoddi4+0x158>
 8000c18:	42ab      	cmp	r3, r5
 8000c1a:	d302      	bcc.n	8000c22 <__udivmoddi4+0xce>
 8000c1c:	4282      	cmp	r2, r0
 8000c1e:	f200 80f8 	bhi.w	8000e12 <__udivmoddi4+0x2be>
 8000c22:	1a84      	subs	r4, r0, r2
 8000c24:	eb65 0203 	sbc.w	r2, r5, r3
 8000c28:	2001      	movs	r0, #1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	2e00      	cmp	r6, #0
 8000c2e:	d0e2      	beq.n	8000bf6 <__udivmoddi4+0xa2>
 8000c30:	e9c6 4700 	strd	r4, r7, [r6]
 8000c34:	e7df      	b.n	8000bf6 <__udivmoddi4+0xa2>
 8000c36:	b902      	cbnz	r2, 8000c3a <__udivmoddi4+0xe6>
 8000c38:	deff      	udf	#255	; 0xff
 8000c3a:	fab2 f382 	clz	r3, r2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f040 8090 	bne.w	8000d64 <__udivmoddi4+0x210>
 8000c44:	1a8a      	subs	r2, r1, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f fe8c 	uxth.w	lr, ip
 8000c4e:	2101      	movs	r1, #1
 8000c50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c54:	fb07 2015 	mls	r0, r7, r5, r2
 8000c58:	0c22      	lsrs	r2, r4, #16
 8000c5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c5e:	fb0e f005 	mul.w	r0, lr, r5
 8000c62:	4290      	cmp	r0, r2
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x124>
 8000c66:	eb1c 0202 	adds.w	r2, ip, r2
 8000c6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x122>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f200 80cb 	bhi.w	8000e0c <__udivmoddi4+0x2b8>
 8000c76:	4645      	mov	r5, r8
 8000c78:	1a12      	subs	r2, r2, r0
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c80:	fb07 2210 	mls	r2, r7, r0, r2
 8000c84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c88:	fb0e fe00 	mul.w	lr, lr, r0
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x14e>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	d202      	bcs.n	8000ca0 <__udivmoddi4+0x14c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f200 80bb 	bhi.w	8000e16 <__udivmoddi4+0x2c2>
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000caa:	e79f      	b.n	8000bec <__udivmoddi4+0x98>
 8000cac:	f1c1 0720 	rsb	r7, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cba:	fa05 f401 	lsl.w	r4, r5, r1
 8000cbe:	fa20 f307 	lsr.w	r3, r0, r7
 8000cc2:	40fd      	lsrs	r5, r7
 8000cc4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc8:	4323      	orrs	r3, r4
 8000cca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	fb09 5518 	mls	r5, r9, r8, r5
 8000cd6:	0c1c      	lsrs	r4, r3, #16
 8000cd8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cdc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce6:	fa00 f001 	lsl.w	r0, r0, r1
 8000cea:	d90b      	bls.n	8000d04 <__udivmoddi4+0x1b0>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cf4:	f080 8088 	bcs.w	8000e08 <__udivmoddi4+0x2b4>
 8000cf8:	42a5      	cmp	r5, r4
 8000cfa:	f240 8085 	bls.w	8000e08 <__udivmoddi4+0x2b4>
 8000cfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000d02:	4464      	add	r4, ip
 8000d04:	1b64      	subs	r4, r4, r5
 8000d06:	b29d      	uxth	r5, r3
 8000d08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x1da>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d24:	d26c      	bcs.n	8000e00 <__udivmoddi4+0x2ac>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	d96a      	bls.n	8000e00 <__udivmoddi4+0x2ac>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	4464      	add	r4, ip
 8000d2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d32:	fba3 9502 	umull	r9, r5, r3, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	42ac      	cmp	r4, r5
 8000d3c:	46c8      	mov	r8, r9
 8000d3e:	46ae      	mov	lr, r5
 8000d40:	d356      	bcc.n	8000df0 <__udivmoddi4+0x29c>
 8000d42:	d053      	beq.n	8000dec <__udivmoddi4+0x298>
 8000d44:	b156      	cbz	r6, 8000d5c <__udivmoddi4+0x208>
 8000d46:	ebb0 0208 	subs.w	r2, r0, r8
 8000d4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d52:	40ca      	lsrs	r2, r1
 8000d54:	40cc      	lsrs	r4, r1
 8000d56:	4317      	orrs	r7, r2
 8000d58:	e9c6 7400 	strd	r7, r4, [r6]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	f1c3 0120 	rsb	r1, r3, #32
 8000d68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d70:	fa25 f101 	lsr.w	r1, r5, r1
 8000d74:	409d      	lsls	r5, r3
 8000d76:	432a      	orrs	r2, r5
 8000d78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7c:	fa1f fe8c 	uxth.w	lr, ip
 8000d80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d84:	fb07 1510 	mls	r5, r7, r0, r1
 8000d88:	0c11      	lsrs	r1, r2, #16
 8000d8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d92:	428d      	cmp	r5, r1
 8000d94:	fa04 f403 	lsl.w	r4, r4, r3
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x258>
 8000d9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000da2:	d22f      	bcs.n	8000e04 <__udivmoddi4+0x2b0>
 8000da4:	428d      	cmp	r5, r1
 8000da6:	d92d      	bls.n	8000e04 <__udivmoddi4+0x2b0>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4461      	add	r1, ip
 8000dac:	1b49      	subs	r1, r1, r5
 8000dae:	b292      	uxth	r2, r2
 8000db0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000db4:	fb07 1115 	mls	r1, r7, r5, r1
 8000db8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000dc0:	4291      	cmp	r1, r2
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x282>
 8000dc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dcc:	d216      	bcs.n	8000dfc <__udivmoddi4+0x2a8>
 8000dce:	4291      	cmp	r1, r2
 8000dd0:	d914      	bls.n	8000dfc <__udivmoddi4+0x2a8>
 8000dd2:	3d02      	subs	r5, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a52      	subs	r2, r2, r1
 8000dd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ddc:	e738      	b.n	8000c50 <__udivmoddi4+0xfc>
 8000dde:	4631      	mov	r1, r6
 8000de0:	4630      	mov	r0, r6
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xa2>
 8000de4:	4639      	mov	r1, r7
 8000de6:	e6e6      	b.n	8000bb6 <__udivmoddi4+0x62>
 8000de8:	4610      	mov	r0, r2
 8000dea:	e6fb      	b.n	8000be4 <__udivmoddi4+0x90>
 8000dec:	4548      	cmp	r0, r9
 8000dee:	d2a9      	bcs.n	8000d44 <__udivmoddi4+0x1f0>
 8000df0:	ebb9 0802 	subs.w	r8, r9, r2
 8000df4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	e7a3      	b.n	8000d44 <__udivmoddi4+0x1f0>
 8000dfc:	4645      	mov	r5, r8
 8000dfe:	e7ea      	b.n	8000dd6 <__udivmoddi4+0x282>
 8000e00:	462b      	mov	r3, r5
 8000e02:	e794      	b.n	8000d2e <__udivmoddi4+0x1da>
 8000e04:	4640      	mov	r0, r8
 8000e06:	e7d1      	b.n	8000dac <__udivmoddi4+0x258>
 8000e08:	46d0      	mov	r8, sl
 8000e0a:	e77b      	b.n	8000d04 <__udivmoddi4+0x1b0>
 8000e0c:	3d02      	subs	r5, #2
 8000e0e:	4462      	add	r2, ip
 8000e10:	e732      	b.n	8000c78 <__udivmoddi4+0x124>
 8000e12:	4608      	mov	r0, r1
 8000e14:	e70a      	b.n	8000c2c <__udivmoddi4+0xd8>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e742      	b.n	8000ca2 <__udivmoddi4+0x14e>

08000e1c <__aeabi_idiv0>:
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f001 fbdc 	bl	80025ea <null_ptr_check>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d131      	bne.n	8000ea2 <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7a1b      	ldrb	r3, [r3, #8]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d003      	beq.n	8000e4e <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	729a      	strb	r2, [r3, #10]
 8000e4c:	e002      	b.n	8000e54 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000e54:	f107 010e 	add.w	r1, r7, #14
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 f826 	bl	8000eae <bmp3_get_regs>
 8000e62:	4603      	mov	r3, r0
 8000e64:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d119      	bne.n	8000ea2 <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	2b50      	cmp	r3, #80	; 0x50
 8000e72:	d002      	beq.n	8000e7a <bmp3_init+0x5a>
 8000e74:	7bbb      	ldrb	r3, [r7, #14]
 8000e76:	2b60      	cmp	r3, #96	; 0x60
 8000e78:	d111      	bne.n	8000e9e <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000e7a:	7bba      	ldrb	r2, [r7, #14]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 f9b2 	bl	80011ea <bmp3_soft_reset>
 8000e86:	4603      	mov	r3, r0
 8000e88:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d107      	bne.n	8000ea2 <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 fb52 	bl	800153c <get_calib_data>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000e9c:	e001      	b.n	8000ea2 <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000e9e:	23f9      	movs	r3, #249	; 0xf9
 8000ea0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8000eae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000ec0:	6838      	ldr	r0, [r7, #0]
 8000ec2:	f001 fb92 	bl	80025ea <null_ptr_check>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8000ecc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d172      	bne.n	8000fba <bmp3_get_regs+0x10c>
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d06f      	beq.n	8000fba <bmp3_get_regs+0x10c>
    {
 8000eda:	466b      	mov	r3, sp
 8000edc:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	7a9b      	ldrb	r3, [r3, #10]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	7a9b      	ldrb	r3, [r3, #10]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	18d1      	adds	r1, r2, r3
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	2300      	movs	r3, #0
 8000efc:	4688      	mov	r8, r1
 8000efe:	4699      	mov	r9, r3
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f14:	2300      	movs	r3, #0
 8000f16:	460c      	mov	r4, r1
 8000f18:	461d      	mov	r5, r3
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	00eb      	lsls	r3, r5, #3
 8000f24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f28:	00e2      	lsls	r2, r4, #3
 8000f2a:	1dcb      	adds	r3, r1, #7
 8000f2c:	08db      	lsrs	r3, r3, #3
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	ebad 0d03 	sub.w	sp, sp, r3
 8000f34:	466b      	mov	r3, sp
 8000f36:	3300      	adds	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	7a1b      	ldrb	r3, [r3, #8]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d025      	beq.n	8000f8e <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f48:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68dc      	ldr	r4, [r3, #12]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	7bf8      	ldrb	r0, [r7, #15]
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	6979      	ldr	r1, [r7, #20]
 8000f58:	47a0      	blx	r4
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
 8000f66:	e00d      	b.n	8000f84 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	7a9b      	ldrb	r3, [r3, #10]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
 8000f70:	441a      	add	r2, r3
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	440b      	add	r3, r1
 8000f78:	6979      	ldr	r1, [r7, #20]
 8000f7a:	5c8a      	ldrb	r2, [r1, r2]
 8000f7c:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	3301      	adds	r3, #1
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	6a3a      	ldr	r2, [r7, #32]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3ed      	bcc.n	8000f68 <bmp3_get_regs+0xba>
 8000f8c:	e00b      	b.n	8000fa6 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68dc      	ldr	r4, [r3, #12]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	7bf8      	ldrb	r0, [r7, #15]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	47a0      	blx	r4
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 8000fb0:	23fe      	movs	r3, #254	; 0xfe
 8000fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fb6:	46b5      	mov	sp, r6
    {
 8000fb8:	e002      	b.n	8000fc0 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8000fba:	23ff      	movs	r3, #255	; 0xff
 8000fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8000fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	372c      	adds	r7, #44	; 0x2c
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000fce <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8000fce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fd2:	b08b      	sub	sp, #44	; 0x2c
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	466b      	mov	r3, sp
 8000fe0:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	0059      	lsls	r1, r3, #1
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
 8000fec:	2300      	movs	r3, #0
 8000fee:	4688      	mov	r8, r1
 8000ff0:	4699      	mov	r9, r3
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001006:	2300      	movs	r3, #0
 8001008:	460c      	mov	r4, r1
 800100a:	461d      	mov	r5, r3
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	00eb      	lsls	r3, r5, #3
 8001016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800101a:	00e2      	lsls	r2, r4, #3
 800101c:	1dcb      	adds	r3, r1, #7
 800101e:	08db      	lsrs	r3, r3, #3
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	ebad 0d03 	sub.w	sp, sp, r3
 8001026:	466b      	mov	r3, sp
 8001028:	3300      	adds	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	f001 fadc 	bl	80025ea <null_ptr_check>
 8001032:	4603      	mov	r3, r0
 8001034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001038:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800103c:	2b00      	cmp	r3, #0
 800103e:	d14e      	bne.n	80010de <bmp3_set_regs+0x110>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d04b      	beq.n	80010de <bmp3_set_regs+0x110>
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d048      	beq.n	80010de <bmp3_set_regs+0x110>
    {
        if (len != 0)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d041      	beq.n	80010d6 <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	781a      	ldrb	r2, [r3, #0]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	7a1b      	ldrb	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d114      	bne.n	800108c <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001062:	2300      	movs	r3, #0
 8001064:	77fb      	strb	r3, [r7, #31]
 8001066:	e00d      	b.n	8001084 <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001068:	7ffb      	ldrb	r3, [r7, #31]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	4413      	add	r3, r2
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	7ffb      	ldrb	r3, [r7, #31]
 8001072:	68f9      	ldr	r1, [r7, #12]
 8001074:	440b      	add	r3, r1
 8001076:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800107e:	7ffb      	ldrb	r3, [r7, #31]
 8001080:	3301      	adds	r3, #1
 8001082:	77fb      	strb	r3, [r7, #31]
 8001084:	7ffb      	ldrb	r3, [r7, #31]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8ed      	bhi.n	8001068 <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d909      	bls.n	80010a6 <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	6979      	ldr	r1, [r7, #20]
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 fa74 	bl	8001586 <interleave_reg_addr>
                temp_len = len * 2;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
 80010a4:	e001      	b.n	80010aa <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691c      	ldr	r4, [r3, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	7818      	ldrb	r0, [r3, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	6a3a      	ldr	r2, [r7, #32]
 80010b8:	6979      	ldr	r1, [r7, #20]
 80010ba:	47a0      	blx	r4
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00b      	beq.n	80010e6 <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 80010ce:	23fe      	movs	r3, #254	; 0xfe
 80010d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 80010d4:	e007      	b.n	80010e6 <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 80010d6:	23fa      	movs	r3, #250	; 0xfa
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 80010dc:	e003      	b.n	80010e6 <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80010de:	23ff      	movs	r3, #255	; 0xff
 80010e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010e4:	e000      	b.n	80010e8 <bmp3_set_regs+0x11a>
        if (len != 0)
 80010e6:	bf00      	nop
    }

    return rslt;
 80010e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80010ec:	46b5      	mov	sp, r6
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	372c      	adds	r7, #44	; 0x2c
 80010f2:	46bd      	mov	sp, r7
 80010f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080010f8 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d03a      	beq.n	8001184 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	2006      	movs	r0, #6
 8001112:	f001 fa52 	bl	80025ba <are_settings_changed>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 fa96 	bl	8001652 <set_pwr_ctrl_settings>
 8001126:	4603      	mov	r3, r0
 8001128:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800112a:	68f9      	ldr	r1, [r7, #12]
 800112c:	20f0      	movs	r0, #240	; 0xf0
 800112e:	f001 fa44 	bl	80025ba <are_settings_changed>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f000 fad7 	bl	80016f0 <set_odr_filter_settings>
 8001142:	4603      	mov	r3, r0
 8001144:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 8001146:	68f9      	ldr	r1, [r7, #12]
 8001148:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 800114c:	f001 fa35 	bl	80025ba <are_settings_changed>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f000 fb36 	bl	80017cc <set_int_ctrl_settings>
 8001160:	4603      	mov	r3, r0
 8001162:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800116a:	f001 fa26 	bl	80025ba <are_settings_changed>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d009      	beq.n	8001188 <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f000 fba1 	bl	80018c0 <set_advance_settings>
 800117e:	4603      	mov	r3, r0
 8001180:	75fb      	strb	r3, [r7, #23]
 8001182:	e001      	b.n	8001188 <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001184:	23ff      	movs	r3, #255	; 0xff
 8001186:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001188:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01a      	beq.n	80011da <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 80011a4:	6839      	ldr	r1, [r7, #0]
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f001 fa43 	bl	8002632 <get_sensor_status>
 80011ac:	4603      	mov	r3, r0
 80011ae:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 80011b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d112      	bne.n	80011de <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 80011b8:	6839      	ldr	r1, [r7, #0]
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f001 fa7c 	bl	80026b8 <get_int_status>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 80011c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d108      	bne.n	80011de <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 80011cc:	6839      	ldr	r1, [r7, #0]
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f001 faa0 	bl	8002714 <get_err_status>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e001      	b.n	80011de <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80011da:	23ff      	movs	r3, #255	; 0xff
 80011dc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 80011f2:	237e      	movs	r3, #126	; 0x7e
 80011f4:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 80011f6:	23b6      	movs	r3, #182	; 0xb6
 80011f8:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 80011fa:	f107 010c 	add.w	r1, r7, #12
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	2003      	movs	r0, #3
 8001204:	f7ff fe53 	bl	8000eae <bmp3_get_regs>
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 800120c:	7b3b      	ldrb	r3, [r7, #12]
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	d02d      	beq.n	8001272 <bmp3_soft_reset+0x88>
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d129      	bne.n	8001272 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800121e:	f107 010d 	add.w	r1, r7, #13
 8001222:	f107 000e 	add.w	r0, r7, #14
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f7ff fed0 	bl	8000fce <bmp3_set_regs>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d11b      	bne.n	8001272 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6852      	ldr	r2, [r2, #4]
 8001242:	4611      	mov	r1, r2
 8001244:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001248:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800124a:	f107 010b 	add.w	r1, r7, #11
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	2002      	movs	r0, #2
 8001254:	f7ff fe2b 	bl	8000eae <bmp3_get_regs>
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 800125c:	7afb      	ldrb	r3, [r7, #11]
 800125e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001262:	2b00      	cmp	r3, #0
 8001264:	d103      	bne.n	800126e <bmp3_soft_reset+0x84>
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 800126e:	23fc      	movs	r3, #252	; 0xfc
 8001270:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001288:	6838      	ldr	r0, [r7, #0]
 800128a:	f001 f9ae 	bl	80025ea <null_ptr_check>
 800128e:	4603      	mov	r3, r0
 8001290:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d139      	bne.n	800130e <bmp3_set_op_mode+0x90>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d036      	beq.n	800130e <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80012a6:	f107 030d 	add.w	r3, r7, #13
 80012aa:	6839      	ldr	r1, [r7, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f838 	bl	8001322 <bmp3_get_op_mode>
 80012b2:	4603      	mov	r3, r0
 80012b4:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 80012b6:	7b7b      	ldrb	r3, [r7, #13]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d010      	beq.n	80012de <bmp3_set_op_mode+0x60>
 80012bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10c      	bne.n	80012de <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 80012c4:	6838      	ldr	r0, [r7, #0]
 80012c6:	f000 f8f7 	bl	80014b8 <put_device_to_sleep>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	6852      	ldr	r2, [r2, #4]
 80012d6:	4611      	mov	r1, r2
 80012d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80012dc:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d116      	bne.n	8001314 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 80012e6:	7bbb      	ldrb	r3, [r7, #14]
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d106      	bne.n	80012fa <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f879 	bl	80013e6 <set_normal_mode>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
    {
 80012f8:	e00c      	b.n	8001314 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d109      	bne.n	8001314 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f8a2 	bl	800144c <write_power_mode>
 8001308:	4603      	mov	r3, r0
 800130a:	73fb      	strb	r3, [r7, #15]
    {
 800130c:	e002      	b.n	8001314 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800130e:	23ff      	movs	r3, #255	; 0xff
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	e000      	b.n	8001316 <bmp3_set_op_mode+0x98>
    {
 8001314:	bf00      	nop
    }

    return rslt;
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d011      	beq.n	8001356 <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2201      	movs	r2, #1
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	201b      	movs	r0, #27
 800133a:	f7ff fdb8 	bl	8000eae <bmp3_get_regs>
 800133e:	4603      	mov	r3, r0
 8001340:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	111b      	asrs	r3, r3, #4
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	b2da      	uxtb	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e001      	b.n	800135a <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001356:	23ff      	movs	r3, #255	; 0xff
 8001358:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b08a      	sub	sp, #40	; 0x28
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
 8001378:	2300      	movs	r3, #0
 800137a:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d021      	beq.n	80013d4 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 8001390:	f107 0120 	add.w	r1, r7, #32
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2206      	movs	r2, #6
 8001398:	2004      	movs	r0, #4
 800139a:	f7ff fd88 	bl	8000eae <bmp3_get_regs>
 800139e:	4603      	mov	r3, r0
 80013a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 80013a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d116      	bne.n	80013da <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 80013ac:	f107 0210 	add.w	r2, r7, #16
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fc70 	bl	8001c9c <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3318      	adds	r3, #24
 80013c0:	f107 0110 	add.w	r1, r7, #16
 80013c4:	7bf8      	ldrb	r0, [r7, #15]
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f000 fca3 	bl	8001d12 <compensate_data>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013d2:	e002      	b.n	80013da <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80013d4:	23ff      	movs	r3, #255	; 0xff
 80013d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80013da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 80013f0:	6839      	ldr	r1, [r7, #0]
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f888 	bl	8001508 <validate_normal_mode_settings>
 80013f8:	4603      	mov	r3, r0
 80013fa:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 80013fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11d      	bne.n	8001440 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001404:	6839      	ldr	r1, [r7, #0]
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f820 	bl	800144c <write_power_mode>
 800140c:	4603      	mov	r3, r0
 800140e:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d113      	bne.n	8001440 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8001418:	f107 010e 	add.w	r1, r7, #14
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	2201      	movs	r2, #1
 8001420:	2002      	movs	r0, #2
 8001422:	f7ff fd44 	bl	8000eae <bmp3_get_regs>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 800143c:	23fb      	movs	r3, #251	; 0xfb
 800143e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001440:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001456:	231b      	movs	r3, #27
 8001458:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 8001460:	7b78      	ldrb	r0, [r7, #13]
 8001462:	f107 010c 	add.w	r1, r7, #12
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2201      	movs	r2, #1
 800146a:	f7ff fd20 	bl	8000eae <bmp3_get_regs>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d118      	bne.n	80014ac <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 800147a:	7b3b      	ldrb	r3, [r7, #12]
 800147c:	b25b      	sxtb	r3, r3
 800147e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001482:	b25a      	sxtb	r2, r3
 8001484:	7bbb      	ldrb	r3, [r7, #14]
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	b25b      	sxtb	r3, r3
 800148a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800148e:	b25b      	sxtb	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b25b      	sxtb	r3, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8001498:	f107 010c 	add.w	r1, r7, #12
 800149c:	f107 000d 	add.w	r0, r7, #13
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f7ff fd93 	bl	8000fce <bmp3_set_regs>
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80014c0:	231b      	movs	r3, #27
 80014c2:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 80014c4:	f107 010d 	add.w	r1, r7, #13
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	201b      	movs	r0, #27
 80014ce:	f7ff fcee 	bl	8000eae <bmp3_get_regs>
 80014d2:	4603      	mov	r3, r0
 80014d4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10e      	bne.n	80014fc <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 80014de:	7b7b      	ldrb	r3, [r7, #13]
 80014e0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80014e8:	f107 010d 	add.w	r1, r7, #13
 80014ec:	f107 000e 	add.w	r0, r7, #14
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f7ff fd6b 	bl	8000fce <bmp3_set_regs>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001512:	6839      	ldr	r1, [r7, #0]
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fa26 	bl	8001966 <get_odr_filter_settings>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d104      	bne.n	8001530 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 fa3a 	bl	80019a0 <validate_osr_and_odr_settings>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001544:	2331      	movs	r3, #49	; 0x31
 8001546:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 800155c:	f107 0108 	add.w	r1, r7, #8
 8001560:	7ff8      	ldrb	r0, [r7, #31]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2215      	movs	r2, #21
 8001566:	f7ff fca2 	bl	8000eae <bmp3_get_regs>
 800156a:	4603      	mov	r3, r0
 800156c:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	f000 fc3f 	bl	8001df8 <parse_calib_data>

    return rslt;
 800157a:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001586:	b480      	push	{r7}
 8001588:	b087      	sub	sp, #28
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001594:	2301      	movs	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e015      	b.n	80015c6 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	441a      	add	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	3b01      	subs	r3, #1
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	440b      	add	r3, r1
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	441a      	add	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	440b      	add	r3, r1
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d3e5      	bcc.n	800159a <interleave_reg_addr+0x14>
    }
}
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	10db      	asrs	r3, r3, #3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	b2da      	uxtb	r2, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	3301      	adds	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	b2da      	uxtb	r2, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	3302      	adds	r3, #2
 800162e:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	105b      	asrs	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	b2da      	uxtb	r2, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	709a      	strb	r2, [r3, #2]
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800165e:	231b      	movs	r3, #27
 8001660:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001662:	7db8      	ldrb	r0, [r7, #22]
 8001664:	f107 0115 	add.w	r1, r7, #21
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f7ff fc1f 	bl	8000eae <bmp3_get_regs>
 8001670:	4603      	mov	r3, r0
 8001672:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001674:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d132      	bne.n	80016e2 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00e      	beq.n	80016a4 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 8001686:	7d7b      	ldrb	r3, [r7, #21]
 8001688:	b25b      	sxtb	r3, r3
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	b25a      	sxtb	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	785b      	ldrb	r3, [r3, #1]
 8001694:	b25b      	sxtb	r3, r3
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	b25b      	sxtb	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00f      	beq.n	80016ce <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 80016ae:	7d7b      	ldrb	r3, [r7, #21]
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	f023 0302 	bic.w	r3, r3, #2
 80016b6:	b25a      	sxtb	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	789b      	ldrb	r3, [r3, #2]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80016ce:	f107 0115 	add.w	r1, r7, #21
 80016d2:	f107 0016 	add.w	r0, r7, #22
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f7ff fc78 	bl	8000fce <bmp3_set_regs>
 80016de:	4603      	mov	r3, r0
 80016e0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <set_odr_filter_settings+0xd8>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	83bb      	strh	r3, [r7, #28]
 8001702:	2300      	movs	r3, #0
 8001704:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800170a:	f107 0118 	add.w	r1, r7, #24
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2204      	movs	r2, #4
 8001712:	201c      	movs	r0, #28
 8001714:	f7ff fbcb 	bl	8000eae <bmp3_get_regs>
 8001718:	4603      	mov	r3, r0
 800171a:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 800171c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d14a      	bne.n	80017ba <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001724:	68f9      	ldr	r1, [r7, #12]
 8001726:	2030      	movs	r0, #48	; 0x30
 8001728:	f000 ff47 	bl	80025ba <are_settings_changed>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00b      	beq.n	800174a <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8001732:	f107 0017 	add.w	r0, r7, #23
 8001736:	f107 0218 	add.w	r2, r7, #24
 800173a:	f107 011c 	add.w	r1, r7, #28
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	4603      	mov	r3, r0
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 f9e1 	bl	8001b0c <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800174a:	68f9      	ldr	r1, [r7, #12]
 800174c:	2080      	movs	r0, #128	; 0x80
 800174e:	f000 ff34 	bl	80025ba <are_settings_changed>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 8001758:	f107 0217 	add.w	r2, r7, #23
 800175c:	f107 0118 	add.w	r1, r7, #24
 8001760:	f107 001c 	add.w	r0, r7, #28
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f000 fa29 	bl	8001bbc <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 800176a:	68f9      	ldr	r1, [r7, #12]
 800176c:	2040      	movs	r0, #64	; 0x40
 800176e:	f000 ff24 	bl	80025ba <are_settings_changed>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 8001778:	f107 0217 	add.w	r2, r7, #23
 800177c:	f107 0118 	add.w	r1, r7, #24
 8001780:	f107 001c 	add.w	r0, r7, #28
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f000 fa53 	bl	8001c30 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d104      	bne.n	800179c <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 8001792:	68b8      	ldr	r0, [r7, #8]
 8001794:	f000 f904 	bl	80019a0 <validate_osr_and_odr_settings>
 8001798:	4603      	mov	r3, r0
 800179a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 800179c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10a      	bne.n	80017ba <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	461a      	mov	r2, r3
 80017a8:	f107 0118 	add.w	r1, r7, #24
 80017ac:	f107 001c 	add.w	r0, r7, #28
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f7ff fc0c 	bl	8000fce <bmp3_set_regs>
 80017b6:	4603      	mov	r3, r0
 80017b8:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 80017ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	0800bf5c 	.word	0x0800bf5c

080017cc <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 80017d8:	2319      	movs	r3, #25
 80017da:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80017dc:	7d78      	ldrb	r0, [r7, #21]
 80017de:	f107 0116 	add.w	r1, r7, #22
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f7ff fb62 	bl	8000eae <bmp3_get_regs>
 80017ea:	4603      	mov	r3, r0
 80017ec:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80017ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d15e      	bne.n	80018b4 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	3207      	adds	r2, #7
 80017fe:	6810      	ldr	r0, [r2, #0]
 8001800:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00d      	beq.n	8001828 <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 800180c:	7dbb      	ldrb	r3, [r7, #22]
 800180e:	b25b      	sxtb	r3, r3
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	b25a      	sxtb	r2, r3
 8001816:	7c3b      	ldrb	r3, [r7, #16]
 8001818:	b25b      	sxtb	r3, r3
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	b25b      	sxtb	r3, r3
 8001820:	4313      	orrs	r3, r2
 8001822:	b25b      	sxtb	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00e      	beq.n	8001850 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001832:	7dbb      	ldrb	r3, [r7, #22]
 8001834:	b25b      	sxtb	r3, r3
 8001836:	f023 0302 	bic.w	r3, r3, #2
 800183a:	b25a      	sxtb	r2, r3
 800183c:	7c7b      	ldrb	r3, [r7, #17]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	b25b      	sxtb	r3, r3
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	b25b      	sxtb	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b25b      	sxtb	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00e      	beq.n	8001878 <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 800185a:	7dbb      	ldrb	r3, [r7, #22]
 800185c:	b25b      	sxtb	r3, r3
 800185e:	f023 0304 	bic.w	r3, r3, #4
 8001862:	b25a      	sxtb	r2, r3
 8001864:	7cbb      	ldrb	r3, [r7, #18]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	b25b      	sxtb	r3, r3
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	b25b      	sxtb	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	b25b      	sxtb	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00e      	beq.n	80018a0 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8001882:	7dbb      	ldrb	r3, [r7, #22]
 8001884:	b25b      	sxtb	r3, r3
 8001886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800188a:	b25a      	sxtb	r2, r3
 800188c:	7cfb      	ldrb	r3, [r7, #19]
 800188e:	019b      	lsls	r3, r3, #6
 8001890:	b25b      	sxtb	r3, r3
 8001892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001896:	b25b      	sxtb	r3, r3
 8001898:	4313      	orrs	r3, r2
 800189a:	b25b      	sxtb	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80018a0:	f107 0116 	add.w	r1, r7, #22
 80018a4:	f107 0015 	add.w	r0, r7, #21
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f7ff fb8f 	bl	8000fce <bmp3_set_regs>
 80018b0:	4603      	mov	r3, r0
 80018b2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80018b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	320b      	adds	r2, #11
 80018d4:	8812      	ldrh	r2, [r2, #0]
 80018d6:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 80018d8:	231a      	movs	r3, #26
 80018da:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80018dc:	7db8      	ldrb	r0, [r7, #22]
 80018de:	f107 0115 	add.w	r1, r7, #21
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f7ff fae2 	bl	8000eae <bmp3_get_regs>
 80018ea:	4603      	mov	r3, r0
 80018ec:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80018ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d131      	bne.n	800195a <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00e      	beq.n	800191e <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001900:	7d7b      	ldrb	r3, [r7, #21]
 8001902:	b25b      	sxtb	r3, r3
 8001904:	f023 0302 	bic.w	r3, r3, #2
 8001908:	b25a      	sxtb	r2, r3
 800190a:	7c3b      	ldrb	r3, [r7, #16]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	b25b      	sxtb	r3, r3
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	b25b      	sxtb	r3, r3
 8001916:	4313      	orrs	r3, r2
 8001918:	b25b      	sxtb	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00e      	beq.n	8001946 <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001928:	7d7b      	ldrb	r3, [r7, #21]
 800192a:	b25b      	sxtb	r3, r3
 800192c:	f023 0304 	bic.w	r3, r3, #4
 8001930:	b25a      	sxtb	r2, r3
 8001932:	7c7b      	ldrb	r3, [r7, #17]
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	b25b      	sxtb	r3, r3
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	b25b      	sxtb	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b25b      	sxtb	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001946:	f107 0115 	add.w	r1, r7, #21
 800194a:	f107 0016 	add.w	r0, r7, #22
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f7ff fb3c 	bl	8000fce <bmp3_set_regs>
 8001956:	4603      	mov	r3, r0
 8001958:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800195a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001970:	f107 0108 	add.w	r1, r7, #8
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2204      	movs	r2, #4
 8001978:	201c      	movs	r0, #28
 800197a:	f7ff fa98 	bl	8000eae <bmp3_get_regs>
 800197e:	4603      	mov	r3, r0
 8001980:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	1cda      	adds	r2, r3, #3
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fe25 	bl	80015dc <parse_odr_filter_settings>

    return rslt;
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b098      	sub	sp, #96	; 0x60
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 80019a8:	23ea      	movs	r3, #234	; 0xea
 80019aa:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 80019b0:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <validate_osr_and_odr_settings+0x7c>)
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4611      	mov	r1, r2
 80019b8:	2248      	movs	r2, #72	; 0x48
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00a fa68 	bl	800be90 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	785b      	ldrb	r3, [r3, #1]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f83f 	bl	8001a4c <calculate_press_meas_time>
 80019ce:	4602      	mov	r2, r0
 80019d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d2:	4413      	add	r3, r2
 80019d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	789b      	ldrb	r3, [r3, #2]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f864 	bl	8001aac <calculate_temp_meas_time>
 80019e4:	4602      	mov	r2, r0
 80019e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019e8:	4413      	add	r3, r2
 80019ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 80019ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f0:	4413      	add	r3, r2
 80019f2:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	799b      	ldrb	r3, [r3, #6]
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	3360      	adds	r3, #96	; 0x60
 80019fc:	443b      	add	r3, r7
 80019fe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001a02:	4619      	mov	r1, r3
 8001a04:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001a06:	f000 f80b 	bl	8001a20 <verify_meas_time_and_odr_duration>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001a10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3760      	adds	r7, #96	; 0x60
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	0800bf60 	.word	0x0800bf60

08001a20 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d202      	bcs.n	8001a38 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]
 8001a36:	e001      	b.n	8001a3c <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001a38:	23fd      	movs	r3, #253	; 0xfd
 8001a3a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	3203      	adds	r2, #3
 8001a5c:	6810      	ldr	r0, [r2, #0]
 8001a5e:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001a6c:	7b3b      	ldrb	r3, [r7, #12]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	ed97 0b06 	vldr	d0, [r7, #24]
 8001a74:	f000 fd7c 	bl	8002570 <pow_bmp3>
 8001a78:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001a7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a80:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001aa4 <calculate_press_meas_time+0x58>
 8001a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a88:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001aa8 <calculate_press_meas_time+0x5c>
 8001a8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a94:	ee17 3a90 	vmov	r3, s15
 8001a98:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8001a9a:	693b      	ldr	r3, [r7, #16]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	44fa0000 	.word	0x44fa0000
 8001aa8:	43c40000 	.word	0x43c40000

08001aac <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	3203      	adds	r2, #3
 8001abc:	6810      	ldr	r0, [r2, #0]
 8001abe:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ac8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001acc:	7b7b      	ldrb	r3, [r7, #13]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	ed97 0b06 	vldr	d0, [r7, #24]
 8001ad4:	f000 fd4c 	bl	8002570 <pow_bmp3>
 8001ad8:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001adc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ae0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001b04 <calculate_temp_meas_time+0x58>
 8001ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001b08 <calculate_temp_meas_time+0x5c>
 8001aec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af4:	ee17 3a90 	vmov	r3, s15
 8001af8:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8001afa:	693b      	ldr	r3, [r7, #16]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	44fa0000 	.word	0x44fa0000
 8001b08:	439c8000 	.word	0x439c8000

08001b0c <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001b1a:	6a3a      	ldr	r2, [r7, #32]
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	3203      	adds	r2, #3
 8001b22:	6810      	ldr	r0, [r2, #0]
 8001b24:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d03f      	beq.n	8001bb0 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d013      	beq.n	8001b62 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	f023 0307 	bic.w	r3, r3, #7
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	7d3b      	ldrb	r3, [r7, #20]
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b25a      	sxtb	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	440b      	add	r3, r1
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d014      	beq.n	8001b96 <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b25b      	sxtb	r3, r3
 8001b72:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001b76:	b25a      	sxtb	r2, r3
 8001b78:	7d7b      	ldrb	r3, [r7, #21]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b25a      	sxtb	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	440b      	add	r3, r1
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	221c      	movs	r2, #28
 8001ba2:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	701a      	strb	r2, [r3, #0]
    }
}
 8001bb0:	bf00      	nop
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	3303      	adds	r3, #3
 8001bce:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	78db      	ldrb	r3, [r3, #3]
 8001bd4:	2b11      	cmp	r3, #17
 8001bd6:	d902      	bls.n	8001bde <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2211      	movs	r2, #17
 8001bdc:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3301      	adds	r3, #1
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	f023 031f 	bic.w	r3, r3, #31
 8001bea:	b25a      	sxtb	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	78db      	ldrb	r3, [r3, #3]
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	b25b      	sxtb	r3, r3
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	b25a      	sxtb	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	440b      	add	r3, r1
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	221d      	movs	r2, #29
 8001c16:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	701a      	strb	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	371c      	adds	r7, #28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	3203      	adds	r2, #3
 8001c46:	6810      	ldr	r0, [r2, #0]
 8001c48:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	3303      	adds	r3, #3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	f023 030e 	bic.w	r3, r3, #14
 8001c56:	b25a      	sxtb	r2, r3
 8001c58:	7dbb      	ldrb	r3, [r7, #22]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	b25b      	sxtb	r3, r3
 8001c5e:	f003 030e 	and.w	r3, r3, #14
 8001c62:	b25b      	sxtb	r3, r3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b25a      	sxtb	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	440b      	add	r3, r1
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	221f      	movs	r2, #31
 8001c82:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	701a      	strb	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8001c9c:	b4b0      	push	{r4, r5, r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	7809      	ldrb	r1, [r1, #0]
 8001caa:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	3101      	adds	r1, #1
 8001cb0:	7809      	ldrb	r1, [r1, #0]
 8001cb2:	0209      	lsls	r1, r1, #8
 8001cb4:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	3102      	adds	r1, #2
 8001cba:	7809      	ldrb	r1, [r1, #0]
 8001cbc:	0409      	lsls	r1, r1, #16
 8001cbe:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	6939      	ldr	r1, [r7, #16]
 8001cc4:	4308      	orrs	r0, r1
 8001cc6:	6979      	ldr	r1, [r7, #20]
 8001cc8:	4301      	orrs	r1, r0
 8001cca:	2000      	movs	r0, #0
 8001ccc:	460c      	mov	r4, r1
 8001cce:	4605      	mov	r5, r0
 8001cd0:	6839      	ldr	r1, [r7, #0]
 8001cd2:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	3103      	adds	r1, #3
 8001cda:	7809      	ldrb	r1, [r1, #0]
 8001cdc:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	3104      	adds	r1, #4
 8001ce2:	7809      	ldrb	r1, [r1, #0]
 8001ce4:	0209      	lsls	r1, r1, #8
 8001ce6:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	3105      	adds	r1, #5
 8001cec:	7809      	ldrb	r1, [r1, #0]
 8001cee:	0409      	lsls	r1, r1, #16
 8001cf0:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	6939      	ldr	r1, [r7, #16]
 8001cf6:	4308      	orrs	r0, r1
 8001cf8:	6979      	ldr	r1, [r7, #20]
 8001cfa:	4301      	orrs	r1, r0
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	460a      	mov	r2, r1
 8001d00:	4603      	mov	r3, r0
 8001d02:	6839      	ldr	r1, [r7, #0]
 8001d04:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001d08:	bf00      	nop
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bcb0      	pop	{r4, r5, r7}
 8001d10:	4770      	bx	lr

08001d12 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d05a      	beq.n	8001de2 <compensate_data+0xd0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d057      	beq.n	8001de2 <compensate_data+0xd0>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d054      	beq.n	8001de2 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d115      	bne.n	8001d6a <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 fa1f 	bl	8002188 <compensate_temperature>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8001d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d148      	bne.n	8001de8 <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3308      	adds	r3, #8
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fa8e 	bl	8002280 <compensate_pressure>
 8001d64:	4603      	mov	r3, r0
 8001d66:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001d68:	e03e      	b.n	8001de8 <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d116      	bne.n	8001d9e <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fa06 	bl	8002188 <compensate_temperature>
            comp_data->temperature = 0;
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3308      	adds	r3, #8
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fa74 	bl	8002280 <compensate_pressure>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001d9c:	e024      	b.n	8001de8 <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d10f      	bne.n	8001dc4 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f9ec 	bl	8002188 <compensate_temperature>
 8001db0:	4603      	mov	r3, r0
 8001db2:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001dc2:	e011      	b.n	8001de8 <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001de0:	e002      	b.n	8001de8 <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001de2:	23ff      	movs	r3, #255	; 0xff
 8001de4:	75fb      	strb	r3, [r7, #23]
 8001de6:	e000      	b.n	8001dea <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001de8:	bf00      	nop
    }

    return rslt;
 8001dea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	3390      	adds	r3, #144	; 0x90
 8001e06:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	3318      	adds	r3, #24
 8001e0c:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4ba4      	ldr	r3, [pc, #656]	; (80020a4 <parse_calib_data+0x2ac>)
 8001e14:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb10 	bl	800045c <__aeabi_ui2d>
 8001e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e40:	f7fe fcb0 	bl	80007a4 <__aeabi_ddiv>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3303      	adds	r3, #3
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	4313      	orrs	r3, r2
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	4b8e      	ldr	r3, [pc, #568]	; (80020a8 <parse_calib_data+0x2b0>)
 8001e70:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	885b      	ldrh	r3, [r3, #2]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe faef 	bl	800045c <__aeabi_ui2d>
 8001e7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e82:	f7fe fc8f 	bl	80007a4 <__aeabi_ddiv>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	6939      	ldr	r1, [r7, #16]
 8001e8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3304      	adds	r3, #4
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	b25a      	sxtb	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	4b82      	ldr	r3, [pc, #520]	; (80020ac <parse_calib_data+0x2b4>)
 8001ea2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fae5 	bl	800047c <__aeabi_i2d>
 8001eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eb6:	f7fe fc75 	bl	80007a4 <__aeabi_ddiv>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	6939      	ldr	r1, [r7, #16]
 8001ec0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3306      	adds	r3, #6
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3305      	adds	r3, #5
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b21a      	sxth	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	4b73      	ldr	r3, [pc, #460]	; (80020b0 <parse_calib_data+0x2b8>)
 8001ee4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001eee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fac2 	bl	800047c <__aeabi_i2d>
 8001ef8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001efc:	f7fe fc52 	bl	80007a4 <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	6939      	ldr	r1, [r7, #16]
 8001f06:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3308      	adds	r3, #8
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3307      	adds	r3, #7
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b21a      	sxth	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b62      	ldr	r3, [pc, #392]	; (80020b4 <parse_calib_data+0x2bc>)
 8001f2a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f34:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fa9f 	bl	800047c <__aeabi_i2d>
 8001f3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f42:	f7fe fc2f 	bl	80007a4 <__aeabi_ddiv>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	6939      	ldr	r1, [r7, #16]
 8001f4c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3309      	adds	r3, #9
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b25a      	sxtb	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	4b55      	ldr	r3, [pc, #340]	; (80020b8 <parse_calib_data+0x2c0>)
 8001f62:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fa85 	bl	800047c <__aeabi_i2d>
 8001f72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f76:	f7fe fc15 	bl	80007a4 <__aeabi_ddiv>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	6939      	ldr	r1, [r7, #16]
 8001f80:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	330a      	adds	r3, #10
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b25a      	sxtb	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	4b49      	ldr	r3, [pc, #292]	; (80020bc <parse_calib_data+0x2c4>)
 8001f96:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fa6b 	bl	800047c <__aeabi_i2d>
 8001fa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001faa:	f7fe fbfb 	bl	80007a4 <__aeabi_ddiv>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	6939      	ldr	r1, [r7, #16]
 8001fb4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	330c      	adds	r3, #12
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	330b      	adds	r3, #11
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001fdc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	899b      	ldrh	r3, [r3, #12]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa39 	bl	800045c <__aeabi_ui2d>
 8001fea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fee:	f7fe fbd9 	bl	80007a4 <__aeabi_ddiv>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	6939      	ldr	r1, [r7, #16]
 8001ff8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	330e      	adds	r3, #14
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	b21a      	sxth	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	330d      	adds	r3, #13
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	b29a      	uxth	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <parse_calib_data+0x2c8>)
 800201e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	89db      	ldrh	r3, [r3, #14]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa18 	bl	800045c <__aeabi_ui2d>
 800202c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002030:	f7fe fbb8 	bl	80007a4 <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	6939      	ldr	r1, [r7, #16]
 800203a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	330f      	adds	r3, #15
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b25a      	sxtb	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <parse_calib_data+0x2cc>)
 8002050:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa0e 	bl	800047c <__aeabi_i2d>
 8002060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002064:	f7fe fb9e 	bl	80007a4 <__aeabi_ddiv>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	6939      	ldr	r1, [r7, #16]
 800206e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3310      	adds	r3, #16
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b25a      	sxtb	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <parse_calib_data+0x2d0>)
 8002084:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f9f4 	bl	800047c <__aeabi_i2d>
 8002094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002098:	f7fe fb84 	bl	80007a4 <__aeabi_ddiv>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	6939      	ldr	r1, [r7, #16]
 80020a2:	e013      	b.n	80020cc <parse_calib_data+0x2d4>
 80020a4:	3f700000 	.word	0x3f700000
 80020a8:	41d00000 	.word	0x41d00000
 80020ac:	42f00000 	.word	0x42f00000
 80020b0:	41300000 	.word	0x41300000
 80020b4:	41c00000 	.word	0x41c00000
 80020b8:	41f00000 	.word	0x41f00000
 80020bc:	42400000 	.word	0x42400000
 80020c0:	40500000 	.word	0x40500000
 80020c4:	40700000 	.word	0x40700000
 80020c8:	40e00000 	.word	0x40e00000
 80020cc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3312      	adds	r3, #18
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	b21a      	sxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3311      	adds	r3, #17
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	4b25      	ldr	r3, [pc, #148]	; (8002184 <parse_calib_data+0x38c>)
 80020f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe f9be 	bl	800047c <__aeabi_i2d>
 8002100:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002104:	f7fe fb4e 	bl	80007a4 <__aeabi_ddiv>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	6939      	ldr	r1, [r7, #16]
 800210e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3313      	adds	r3, #19
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b25a      	sxtb	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <parse_calib_data+0x38c>)
 8002124:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe f9a4 	bl	800047c <__aeabi_i2d>
 8002134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002138:	f7fe fb34 	bl	80007a4 <__aeabi_ddiv>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	6939      	ldr	r1, [r7, #16]
 8002142:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3314      	adds	r3, #20
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b25a      	sxtb	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800215a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f989 	bl	800047c <__aeabi_i2d>
 800216a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800216e:	f7fe fb19 	bl	80007a4 <__aeabi_ddiv>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	6939      	ldr	r1, [r7, #16]
 8002178:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 800217c:	bf00      	nop
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	42f00000 	.word	0x42f00000

08002188 <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08c      	sub	sp, #48	; 0x30
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80021a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021a8:	f7fe f9a4 	bl	80004f4 <__aeabi_l2d>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	f7fe f815 	bl	80001e0 <__aeabi_dsub>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021c8:	f7fe f9c2 	bl	8000550 <__aeabi_dmul>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 80021d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021dc:	f7fe f9b8 	bl	8000550 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 80021ee:	f7fe f9af 	bl	8000550 <__aeabi_dmul>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021fe:	f7fd fff1 	bl	80001e4 <__adddf3>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	4b17      	ldr	r3, [pc, #92]	; (8002274 <compensate_temperature+0xec>)
 8002218:	f7fe fc0c 	bl	8000a34 <__aeabi_dcmplt>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <compensate_temperature+0xec>)
 800222a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 800222e:	2303      	movs	r3, #3
 8002230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <compensate_temperature+0xf0>)
 8002240:	f7fe fc16 	bl	8000a70 <__aeabi_dcmpgt>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <compensate_temperature+0xf0>)
 8002252:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 8002256:	2304      	movs	r3, #4
 8002258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8002268:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800226c:	4618      	mov	r0, r3
 800226e:	3730      	adds	r7, #48	; 0x30
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	c0440000 	.word	0xc0440000
 8002278:	40554000 	.word	0x40554000
 800227c:	00000000 	.word	0x00000000

08002280 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 8002280:	b5b0      	push	{r4, r5, r7, lr}
 8002282:	b096      	sub	sp, #88	; 0x58
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 8002296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002298:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800229c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800229e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80022a2:	f7fe f955 	bl	8000550 <__aeabi_dmul>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80022ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b0:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80022b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b6:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80022ba:	2002      	movs	r0, #2
 80022bc:	eeb0 0a47 	vmov.f32	s0, s14
 80022c0:	eef0 0a67 	vmov.f32	s1, s15
 80022c4:	f000 f954 	bl	8002570 <pow_bmp3>
 80022c8:	ee10 3a10 	vmov	r3, s0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f8e7 	bl	80004a0 <__aeabi_f2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4620      	mov	r0, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	f7fe f939 	bl	8000550 <__aeabi_dmul>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80022e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80022ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ee:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80022f2:	2003      	movs	r0, #3
 80022f4:	eeb0 0a47 	vmov.f32	s0, s14
 80022f8:	eef0 0a67 	vmov.f32	s1, s15
 80022fc:	f000 f938 	bl	8002570 <pow_bmp3>
 8002300:	ee10 3a10 	vmov	r3, s0
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f8cb 	bl	80004a0 <__aeabi_f2d>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4620      	mov	r0, r4
 8002310:	4629      	mov	r1, r5
 8002312:	f7fe f91d 	bl	8000550 <__aeabi_dmul>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800231e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002320:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002324:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002328:	f7fd ff5c 	bl	80001e4 <__adddf3>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002338:	f7fd ff54 	bl	80001e4 <__adddf3>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002344:	f7fd ff4e 	bl	80001e4 <__adddf3>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8002350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002352:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002358:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800235c:	f7fe f8f8 	bl	8000550 <__aeabi_dmul>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8002368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800236e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002370:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002374:	2002      	movs	r0, #2
 8002376:	eeb0 0a47 	vmov.f32	s0, s14
 800237a:	eef0 0a67 	vmov.f32	s1, s15
 800237e:	f000 f8f7 	bl	8002570 <pow_bmp3>
 8002382:	ee10 3a10 	vmov	r3, s0
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe f88a 	bl	80004a0 <__aeabi_f2d>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4620      	mov	r0, r4
 8002392:	4629      	mov	r1, r5
 8002394:	f7fe f8dc 	bl	8000550 <__aeabi_dmul>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80023a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80023a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80023ac:	2003      	movs	r0, #3
 80023ae:	eeb0 0a47 	vmov.f32	s0, s14
 80023b2:	eef0 0a67 	vmov.f32	s1, s15
 80023b6:	f000 f8db 	bl	8002570 <pow_bmp3>
 80023ba:	ee10 3a10 	vmov	r3, s0
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f86e 	bl	80004a0 <__aeabi_f2d>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fe f8c0 	bl	8000550 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	f7fe f87f 	bl	80004e4 <__aeabi_ul2d>
 80023e6:	4604      	mov	r4, r0
 80023e8:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 80023ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ec:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80023f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023f4:	f7fd fef6 	bl	80001e4 <__adddf3>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002404:	f7fd feee 	bl	80001e4 <__adddf3>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002414:	f7fd fee6 	bl	80001e4 <__adddf3>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800241c:	4620      	mov	r0, r4
 800241e:	4629      	mov	r1, r5
 8002420:	f7fe f896 	bl	8000550 <__aeabi_dmul>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe f855 	bl	80004e4 <__aeabi_ul2d>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	2002      	movs	r0, #2
 8002440:	ec43 2b10 	vmov	d0, r2, r3
 8002444:	f000 f894 	bl	8002570 <pow_bmp3>
 8002448:	ee10 3a10 	vmov	r3, s0
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f827 	bl	80004a0 <__aeabi_f2d>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 800245a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800245c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8002460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002462:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002468:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800246c:	f7fe f870 	bl	8000550 <__aeabi_dmul>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4620      	mov	r0, r4
 8002476:	4629      	mov	r1, r5
 8002478:	f7fd feb4 	bl	80001e4 <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 8002484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002488:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800248c:	f7fe f860 	bl	8000550 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f7fe f81f 	bl	80004e4 <__aeabi_ul2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	2003      	movs	r0, #3
 80024ac:	ec43 2b10 	vmov	d0, r2, r3
 80024b0:	f000 f85e 	bl	8002570 <pow_bmp3>
 80024b4:	ee10 3a10 	vmov	r3, s0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fd fff1 	bl	80004a0 <__aeabi_f2d>
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80024c4:	f7fe f844 	bl	8000550 <__aeabi_dmul>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024d0:	f7fd fe88 	bl	80001e4 <__adddf3>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 80024dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024e4:	f7fd fe7e 	bl	80001e4 <__adddf3>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024f0:	f7fd fe78 	bl	80001e4 <__adddf3>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 80024fc:	a318      	add	r3, pc, #96	; (adr r3, 8002560 <compensate_pressure+0x2e0>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002506:	f7fe fa95 	bl	8000a34 <__aeabi_dcmplt>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8002510:	a313      	add	r3, pc, #76	; (adr r3, 8002560 <compensate_pressure+0x2e0>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 800251a:	2305      	movs	r3, #5
 800251c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8002520:	a311      	add	r3, pc, #68	; (adr r3, 8002568 <compensate_pressure+0x2e8>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800252a:	f7fe faa1 	bl	8000a70 <__aeabi_dcmpgt>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8002534:	a30c      	add	r3, pc, #48	; (adr r3, 8002568 <compensate_pressure+0x2e8>)
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 800253e:	2306      	movs	r3, #6
 8002540:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 8002544:	68f9      	ldr	r1, [r7, #12]
 8002546:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800254a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800254e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002552:	4618      	mov	r0, r3
 8002554:	3758      	adds	r7, #88	; 0x58
 8002556:	46bd      	mov	sp, r7
 8002558:	bdb0      	pop	{r4, r5, r7, pc}
 800255a:	bf00      	nop
 800255c:	f3af 8000 	nop.w
 8002560:	00000000 	.word	0x00000000
 8002564:	40dd4c00 	.word	0x40dd4c00
 8002568:	00000000 	.word	0x00000000
 800256c:	40fe8480 	.word	0x40fe8480

08002570 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	ed87 0b02 	vstr	d0, [r7, #8]
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 800257e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002582:	617b      	str	r3, [r7, #20]

    while (power != 0)
 8002584:	e00e      	b.n	80025a4 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 8002586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800258a:	f7fe fa7b 	bl	8000a84 <__aeabi_d2f>
 800258e:	ee07 0a10 	vmov	s14, r0
 8002592:	edd7 7a05 	vldr	s15, [r7, #20]
 8002596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800259a:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ed      	bne.n	8002586 <pow_bmp3+0x16>
    }

    return pow_output;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	ee07 3a90 	vmov	s15, r3
}
 80025b0:	eeb0 0a67 	vmov.f32	s0, s15
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
 80025d6:	e001      	b.n	80025dc <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00f      	beq.n	8002618 <null_ptr_check+0x2e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00b      	beq.n	8002618 <null_ptr_check+0x2e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <null_ptr_check+0x2e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002618:	23ff      	movs	r3, #255	; 0xff
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e001      	b.n	8002622 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002622:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800263c:	2303      	movs	r3, #3
 800263e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002640:	f107 010d 	add.w	r1, r7, #13
 8002644:	7bb8      	ldrb	r0, [r7, #14]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2201      	movs	r2, #1
 800264a:	f7fe fc30 	bl	8000eae <bmp3_get_regs>
 800264e:	4603      	mov	r3, r0
 8002650:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d128      	bne.n	80026ac <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 800265a:	7b7b      	ldrb	r3, [r7, #13]
 800265c:	111b      	asrs	r3, r3, #4
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	b2da      	uxtb	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 800266a:	7b7b      	ldrb	r3, [r7, #13]
 800266c:	115b      	asrs	r3, r3, #5
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 800267a:	7b7b      	ldrb	r3, [r7, #13]
 800267c:	119b      	asrs	r3, r3, #6
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	b2da      	uxtb	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 800268a:	2310      	movs	r3, #16
 800268c:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800268e:	f107 010d 	add.w	r1, r7, #13
 8002692:	7bb8      	ldrb	r0, [r7, #14]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2201      	movs	r2, #1
 8002698:	f7fe fc09 	bl	8000eae <bmp3_get_regs>
 800269c:	4603      	mov	r3, r0
 800269e:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 80026a0:	7b7b      	ldrb	r3, [r7, #13]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80026ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 80026c2:	f107 010e 	add.w	r1, r7, #14
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	2011      	movs	r0, #17
 80026cc:	f7fe fbef 	bl	8000eae <bmp3_get_regs>
 80026d0:	4603      	mov	r3, r0
 80026d2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80026d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d115      	bne.n	8002708 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 80026dc:	7bbb      	ldrb	r3, [r7, #14]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 80026e8:	7bbb      	ldrb	r3, [r7, #14]
 80026ea:	105b      	asrs	r3, r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 80026f8:	7bbb      	ldrb	r3, [r7, #14]
 80026fa:	10db      	asrs	r3, r3, #3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	b2da      	uxtb	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002708:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800271e:	f107 010e 	add.w	r1, r7, #14
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2201      	movs	r2, #1
 8002726:	2002      	movs	r0, #2
 8002728:	f7fe fbc1 	bl	8000eae <bmp3_get_regs>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d115      	bne.n	8002764 <get_err_status+0x50>
    {
        status->err.fatal = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002738:	7bbb      	ldrb	r3, [r7, #14]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	719a      	strb	r2, [r3, #6]
        status->err.cmd = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 8002744:	7bbb      	ldrb	r3, [r7, #14]
 8002746:	105b      	asrs	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 8002754:	7bbb      	ldrb	r3, [r7, #14]
 8002756:	109b      	asrs	r3, r3, #2
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	b2da      	uxtb	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	721a      	strb	r2, [r3, #8]
    }

    return rslt;
 8002764:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_Z19SensorAPI_I2Cx_ReadhPhtPv>:
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr);
int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr);
void bmp3_delay_us(uint32_t period, void *intf_ptr);

int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af02      	add	r7, sp, #8
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	4603      	mov	r3, r0
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	4613      	mov	r3, r2
 8002780:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	b29b      	uxth	r3, r3
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, 1000);
 8002790:	f107 020f 	add.w	r2, r7, #15
 8002794:	8ab9      	ldrh	r1, [r7, #20]
 8002796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2301      	movs	r3, #1
 800279e:	4808      	ldr	r0, [pc, #32]	; (80027c0 <_Z19SensorAPI_I2Cx_ReadhPhtPv+0x50>)
 80027a0:	f002 ff22 	bl	80055e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, 1000);
 80027a4:	89bb      	ldrh	r3, [r7, #12]
 80027a6:	8ab9      	ldrh	r1, [r7, #20]
 80027a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027ac:	9200      	str	r2, [sp, #0]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	4803      	ldr	r0, [pc, #12]	; (80027c0 <_Z19SensorAPI_I2Cx_ReadhPhtPv+0x50>)
 80027b2:	f003 f817 	bl	80057e4 <HAL_I2C_Master_Receive>
	return 0;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000098 	.word	0x20000098

080027c4 <_Z20SensorAPI_I2Cx_WritehPhtPv>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	4603      	mov	r3, r0
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	4613      	mov	r3, r2
 80027d4:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 80027e4:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <_Z20SensorAPI_I2Cx_WritehPhtPv+0x54>)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 80027ea:	89bb      	ldrh	r3, [r7, #12]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	480a      	ldr	r0, [pc, #40]	; (800281c <_Z20SensorAPI_I2Cx_WritehPhtPv+0x58>)
 80027f2:	f009 fb4d 	bl	800be90 <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, 1000);
 80027f6:	89bb      	ldrh	r3, [r7, #12]
 80027f8:	3301      	adds	r3, #1
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	8ab9      	ldrh	r1, [r7, #20]
 80027fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002802:	9200      	str	r2, [sp, #0]
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <_Z20SensorAPI_I2Cx_WritehPhtPv+0x54>)
 8002806:	4806      	ldr	r0, [pc, #24]	; (8002820 <_Z20SensorAPI_I2Cx_WritehPhtPv+0x5c>)
 8002808:	f002 feee 	bl	80055e8 <HAL_I2C_Master_Transmit>
	return 0;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000218 	.word	0x20000218
 800281c:	20000219 	.word	0x20000219
 8002820:	20000098 	.word	0x20000098

08002824 <_Z13bmp3_delay_usmPv>:

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 800282e:	e008      	b.n	8002842 <_Z13bmp3_delay_usmPv+0x1e>
	{
		for(i = 0; i < 84; i++)
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	e002      	b.n	800283c <_Z13bmp3_delay_usmPv+0x18>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3301      	adds	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b53      	cmp	r3, #83	; 0x53
 8002840:	d9f9      	bls.n	8002836 <_Z13bmp3_delay_usmPv+0x12>
	while(period--)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	1e5a      	subs	r2, r3, #1
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf14      	ite	ne
 800284c:	2301      	movne	r3, #1
 800284e:	2300      	moveq	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ec      	bne.n	8002830 <_Z13bmp3_delay_usmPv+0xc>
		{
			;
		}
	}
}
 8002856:	bf00      	nop
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b0ba      	sub	sp, #232	; 0xe8
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800286a:	f000 fd97 	bl	800339c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800286e:	f000 f8a1 	bl	80029b4 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002872:	f000 f911 	bl	8002a98 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002876:	f000 fa37 	bl	8002ce8 <_ZL12MX_GPIO_Initv>
  MX_I2S2_Init();
 800287a:	f000 f967 	bl	8002b4c <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 800287e:	f000 f999 	bl	8002bb4 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8002882:	f000 f9cb 	bl	8002c1c <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 8002886:	f008 fefb 	bl	800b680 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800288a:	f000 f9ff 	bl	8002c8c <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 800288e:	f000 f929 	bl	8002ae4 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  int8_t rslt;
  uint8_t loop = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
  uint16_t settings_sel;
  struct bmp3_dev dev;
  struct bmp3_data data = { 0 };
 8002898:	f107 0320 	add.w	r3, r7, #32
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
  struct bmp3_settings settings = { 0 };
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	731a      	strb	r2, [r3, #12]
  struct bmp3_status status = { { 0 } };
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	811a      	strh	r2, [r3, #8]

  //rslt = bmp3_interface_init(&dev, BMP3_I2C_INTF);
	//dev_addr = BMP3_ADDR_I2C_SEC;
  	dev_addr = BMP3_ADDR_I2C_SEC;
 80028be:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <main+0x140>)
 80028c0:	2277      	movs	r2, #119	; 0x77
 80028c2:	701a      	strb	r2, [r3, #0]
	dev.read = (bmp3_read_fptr_t)SensorAPI_I2Cx_Read;
 80028c4:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <main+0x144>)
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	dev.write = (bmp3_write_fptr_t)SensorAPI_I2Cx_Write;
 80028c8:	4b38      	ldr	r3, [pc, #224]	; (80029ac <main+0x148>)
 80028ca:	643b      	str	r3, [r7, #64]	; 0x40
	dev.intf = BMP3_I2C_INTF;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	dev.delay_us = bmp3_delay_us;
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <main+0x14c>)
 80028d4:	647b      	str	r3, [r7, #68]	; 0x44
	dev.intf_ptr = &dev_addr;
 80028d6:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <main+0x140>)
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
	dev.dummy_byte = 0x0;
 80028da:	2300      	movs	r3, #0
 80028dc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  //bmp3_check_rslt("bmp3_interface_init", rslt);

  rslt = bmp3_init(&dev);
 80028e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe fa9b 	bl	8000e20 <bmp3_init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
  //bmp3_check_rslt("bmp3_init", rslt);

  settings.int_settings.drdy_en = BMP3_ENABLE;
 80028f0:	2301      	movs	r3, #1
 80028f2:	76bb      	strb	r3, [r7, #26]
  settings.press_en = BMP3_ENABLE;
 80028f4:	2301      	movs	r3, #1
 80028f6:	747b      	strb	r3, [r7, #17]
  settings.temp_en = BMP3_ENABLE;
 80028f8:	2301      	movs	r3, #1
 80028fa:	74bb      	strb	r3, [r7, #18]

  settings.odr_filter.press_os = BMP3_OVERSAMPLING_2X;
 80028fc:	2301      	movs	r3, #1
 80028fe:	74fb      	strb	r3, [r7, #19]
  settings.odr_filter.temp_os = BMP3_OVERSAMPLING_2X;
 8002900:	2301      	movs	r3, #1
 8002902:	753b      	strb	r3, [r7, #20]
  settings.odr_filter.odr = BMP3_ODR_100_HZ;
 8002904:	2301      	movs	r3, #1
 8002906:	75bb      	strb	r3, [r7, #22]

  settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 8002908:	23be      	movs	r3, #190	; 0xbe
 800290a:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
                 BMP3_SEL_DRDY_EN;

  rslt = bmp3_set_sensor_settings(settings_sel, &settings, &dev);
 800290e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8002912:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002916:	f107 0110 	add.w	r1, r7, #16
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fbec 	bl	80010f8 <bmp3_set_sensor_settings>
 8002920:	4603      	mov	r3, r0
 8002922:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
  //bmp3_check_rslt("bmp3_set_sensor_settings", rslt);

  settings.op_mode = BMP3_MODE_NORMAL;
 8002926:	2303      	movs	r3, #3
 8002928:	743b      	strb	r3, [r7, #16]
  rslt = bmp3_set_op_mode(&settings, &dev);
 800292a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800292e:	f107 0310 	add.w	r3, r7, #16
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fca2 	bl	800127e <bmp3_set_op_mode>
 800293a:	4603      	mov	r3, r0
 800293c:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	MX_USB_HOST_Process();
 8002940:	f008 fec4 	bl	800b6cc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    rslt = bmp3_get_status(&status, &dev);
 8002944:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fc21 	bl	8001194 <bmp3_get_status>
 8002952:	4603      	mov	r3, r0
 8002954:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
    //bmp3_check_rslt("bmp3_get_status", rslt);

    /* Read temperature and pressure data iteratively based on data ready interrupt */
    if ((rslt == BMP3_OK) && (status.intr.drdy == BMP3_ENABLE))
 8002958:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 800295c:	2b00      	cmp	r3, #0
 800295e:	d11c      	bne.n	800299a <main+0x136>
 8002960:	79bb      	ldrb	r3, [r7, #6]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d119      	bne.n	800299a <main+0x136>
         * First parameter indicates the type of data to be read
         * BMP3_PRESS_TEMP : To read pressure and temperature data
         * BMP3_TEMP       : To read only temperature data
         * BMP3_PRESS      : To read only pressure data
         */
        rslt = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &data, &dev);
 8002966:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800296a:	f107 0320 	add.w	r3, r7, #32
 800296e:	4619      	mov	r1, r3
 8002970:	2003      	movs	r0, #3
 8002972:	f7fe fcf8 	bl	8001366 <bmp3_get_sensor_data>
 8002976:	4603      	mov	r3, r0
 8002978:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
        //bmp3_check_rslt("bmp3_get_sensor_data", rslt);

        /* NOTE : Read status register again to clear data ready interrupt status */
        rslt = bmp3_get_status(&status, &dev);
 800297c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fc05 	bl	8001194 <bmp3_get_status>
 800298a:	4603      	mov	r3, r0
 800298c:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
        #else
        printf("Data[%d]  T: %ld deg C, P: %lu Pa\n", loop, (long int)(int32_t)(data.temperature / 100),
               (long unsigned int)(uint32_t)(data.pressure / 100));
        #endif*/

        loop = loop + 1;
 8002990:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8002994:	3301      	adds	r3, #1
 8002996:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    }

	HAL_Delay(5000);
 800299a:	f241 3088 	movw	r0, #5000	; 0x1388
 800299e:	f000 fd6f 	bl	8003480 <HAL_Delay>
	MX_USB_HOST_Process();
 80029a2:	e7cd      	b.n	8002940 <main+0xdc>
 80029a4:	20000418 	.word	0x20000418
 80029a8:	08002771 	.word	0x08002771
 80029ac:	080027c5 	.word	0x080027c5
 80029b0:	08002825 	.word	0x08002825

080029b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b094      	sub	sp, #80	; 0x50
 80029b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ba:	f107 0320 	add.w	r3, r7, #32
 80029be:	2230      	movs	r2, #48	; 0x30
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f009 fa20 	bl	800be08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d8:	2300      	movs	r3, #0
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <_Z18SystemClock_Configv+0xdc>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	4a2b      	ldr	r2, [pc, #172]	; (8002a90 <_Z18SystemClock_Configv+0xdc>)
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e6:	6413      	str	r3, [r2, #64]	; 0x40
 80029e8:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <_Z18SystemClock_Configv+0xdc>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f4:	2300      	movs	r3, #0
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <_Z18SystemClock_Configv+0xe0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <_Z18SystemClock_Configv+0xe0>)
 80029fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <_Z18SystemClock_Configv+0xe0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a10:	2301      	movs	r3, #1
 8002a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a24:	2304      	movs	r3, #4
 8002a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002a28:	23c0      	movs	r3, #192	; 0xc0
 8002a2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002a30:	2308      	movs	r3, #8
 8002a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a34:	f107 0320 	add.w	r3, r7, #32
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 f8c7 	bl	8006bcc <HAL_RCC_OscConfig>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002a4e:	f000 fa19 	bl	8002e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a52:	230f      	movs	r3, #15
 8002a54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a56:	2302      	movs	r3, #2
 8002a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	2103      	movs	r1, #3
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f004 fb24 	bl	80070bc <HAL_RCC_ClockConfig>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002a84:	f000 f9fe 	bl	8002e84 <Error_Handler>
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3750      	adds	r7, #80	; 0x50
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40007000 	.word	0x40007000

08002a98 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
 8002aac:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8002ab2:	23c8      	movs	r3, #200	; 0xc8
 8002ab4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8002ab6:	2305      	movs	r3, #5
 8002ab8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002aba:	2302      	movs	r3, #2
 8002abc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002abe:	463b      	mov	r3, r7
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f004 fd1b 	bl	80074fc <HAL_RCCEx_PeriphCLKConfig>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 8002ad6:	f000 f9d5 	bl	8002e84 <Error_Handler>
  }
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ae8:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002aea:	4a16      	ldr	r2, [pc, #88]	; (8002b44 <_ZL12MX_I2C1_Initv+0x60>)
 8002aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <_ZL12MX_I2C1_Initv+0x64>)
 8002af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b20:	4807      	ldr	r0, [pc, #28]	; (8002b40 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b22:	f002 fc1d 	bl	8005360 <HAL_I2C_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002b36:	f000 f9a5 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000098 	.word	0x20000098
 8002b44:	40005400 	.word	0x40005400
 8002b48:	000186a0 	.word	0x000186a0

08002b4c <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <_ZL12MX_I2S2_Initv+0x5c>)
 8002b52:	4a16      	ldr	r2, [pc, #88]	; (8002bac <_ZL12MX_I2S2_Initv+0x60>)
 8002b54:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <_ZL12MX_I2S2_Initv+0x5c>)
 8002b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <_ZL12MX_I2S2_Initv+0x5c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <_ZL12MX_I2S2_Initv+0x5c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <_ZL12MX_I2S2_Initv+0x5c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <_ZL12MX_I2S2_Initv+0x5c>)
 8002b72:	4a0f      	ldr	r2, [pc, #60]	; (8002bb0 <_ZL12MX_I2S2_Initv+0x64>)
 8002b74:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <_ZL12MX_I2S2_Initv+0x5c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <_ZL12MX_I2S2_Initv+0x5c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <_ZL12MX_I2S2_Initv+0x5c>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002b88:	4807      	ldr	r0, [pc, #28]	; (8002ba8 <_ZL12MX_I2S2_Initv+0x5c>)
 8002b8a:	f003 fb7f 	bl	800628c <HAL_I2S_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <_ZL12MX_I2S2_Initv+0x56>
  {
    Error_Handler();
 8002b9e:	f000 f971 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200000ec 	.word	0x200000ec
 8002bac:	40003800 	.word	0x40003800
 8002bb0:	00017700 	.word	0x00017700

08002bb4 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <_ZL12MX_I2S3_Initv+0x5c>)
 8002bba:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <_ZL12MX_I2S3_Initv+0x60>)
 8002bbc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <_ZL12MX_I2S3_Initv+0x5c>)
 8002bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <_ZL12MX_I2S3_Initv+0x5c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <_ZL12MX_I2S3_Initv+0x5c>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <_ZL12MX_I2S3_Initv+0x5c>)
 8002bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <_ZL12MX_I2S3_Initv+0x5c>)
 8002bdc:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <_ZL12MX_I2S3_Initv+0x64>)
 8002bde:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <_ZL12MX_I2S3_Initv+0x5c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <_ZL12MX_I2S3_Initv+0x5c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <_ZL12MX_I2S3_Initv+0x5c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002bf2:	4807      	ldr	r0, [pc, #28]	; (8002c10 <_ZL12MX_I2S3_Initv+0x5c>)
 8002bf4:	f003 fb4a 	bl	800628c <HAL_I2S_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2301      	movne	r3, #1
 8002c00:	2300      	moveq	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8002c08:	f000 f93c 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000134 	.word	0x20000134
 8002c14:	40003c00 	.word	0x40003c00
 8002c18:	00017700 	.word	0x00017700

08002c1c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <_ZL12MX_SPI1_Initv+0x68>)
 8002c22:	4a19      	ldr	r2, [pc, #100]	; (8002c88 <_ZL12MX_SPI1_Initv+0x6c>)
 8002c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002c26:	4b17      	ldr	r3, [pc, #92]	; (8002c84 <_ZL12MX_SPI1_Initv+0x68>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <_ZL12MX_SPI1_Initv+0x68>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <_ZL12MX_SPI1_Initv+0x68>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <_ZL12MX_SPI1_Initv+0x68>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <_ZL12MX_SPI1_Initv+0x68>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <_ZL12MX_SPI1_Initv+0x68>)
 8002c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <_ZL12MX_SPI1_Initv+0x68>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <_ZL12MX_SPI1_Initv+0x68>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <_ZL12MX_SPI1_Initv+0x68>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <_ZL12MX_SPI1_Initv+0x68>)
 8002c60:	220a      	movs	r2, #10
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c64:	4807      	ldr	r0, [pc, #28]	; (8002c84 <_ZL12MX_SPI1_Initv+0x68>)
 8002c66:	f004 fd99 	bl	800779c <HAL_SPI_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf14      	ite	ne
 8002c70:	2301      	movne	r3, #1
 8002c72:	2300      	moveq	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <_ZL12MX_SPI1_Initv+0x62>
  {
    Error_Handler();
 8002c7a:	f000 f903 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	2000017c 	.word	0x2000017c
 8002c88:	40013000 	.word	0x40013000

08002c8c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c92:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002c94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cc2:	4807      	ldr	r0, [pc, #28]	; (8002ce0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cc4:	f004 fdf3 	bl	80078ae <HAL_UART_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf14      	ite	ne
 8002cce:	2301      	movne	r3, #1
 8002cd0:	2300      	moveq	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002cd8:	f000 f8d4 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200001d4 	.word	0x200001d4
 8002ce4:	40004400 	.word	0x40004400

08002ce8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	; 0x30
 8002cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
 8002cfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	4b5b      	ldr	r3, [pc, #364]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a5a      	ldr	r2, [pc, #360]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d08:	f043 0310 	orr.w	r3, r3, #16
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b58      	ldr	r3, [pc, #352]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a53      	ldr	r2, [pc, #332]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b51      	ldr	r3, [pc, #324]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a4c      	ldr	r2, [pc, #304]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b46      	ldr	r3, [pc, #280]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a45      	ldr	r2, [pc, #276]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	4b3f      	ldr	r3, [pc, #252]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a3e      	ldr	r2, [pc, #248]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b3c      	ldr	r3, [pc, #240]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	4b38      	ldr	r3, [pc, #224]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a37      	ldr	r2, [pc, #220]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d94:	f043 0308 	orr.w	r3, r3, #8
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <_ZL12MX_GPIO_Initv+0x188>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2108      	movs	r1, #8
 8002daa:	4832      	ldr	r0, [pc, #200]	; (8002e74 <_ZL12MX_GPIO_Initv+0x18c>)
 8002dac:	f000 feb4 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002db0:	2201      	movs	r2, #1
 8002db2:	2101      	movs	r1, #1
 8002db4:	4830      	ldr	r0, [pc, #192]	; (8002e78 <_ZL12MX_GPIO_Initv+0x190>)
 8002db6:	f000 feaf 	bl	8003b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002dc0:	482e      	ldr	r0, [pc, #184]	; (8002e7c <_ZL12MX_GPIO_Initv+0x194>)
 8002dc2:	f000 fea9 	bl	8003b18 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8002dd2:	f107 031c 	add.w	r3, r7, #28
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4826      	ldr	r0, [pc, #152]	; (8002e74 <_ZL12MX_GPIO_Initv+0x18c>)
 8002dda:	f000 fd19 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002dde:	2308      	movs	r3, #8
 8002de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de2:	2301      	movs	r3, #1
 8002de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002dee:	f107 031c 	add.w	r3, r7, #28
 8002df2:	4619      	mov	r1, r3
 8002df4:	481f      	ldr	r0, [pc, #124]	; (8002e74 <_ZL12MX_GPIO_Initv+0x18c>)
 8002df6:	f000 fd0b 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8002dfa:	2332      	movs	r3, #50	; 0x32
 8002dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002dfe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4819      	ldr	r0, [pc, #100]	; (8002e74 <_ZL12MX_GPIO_Initv+0x18c>)
 8002e10:	f000 fcfe 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002e14:	2301      	movs	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002e24:	f107 031c 	add.w	r3, r7, #28
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4813      	ldr	r0, [pc, #76]	; (8002e78 <_ZL12MX_GPIO_Initv+0x190>)
 8002e2c:	f000 fcf0 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e30:	2301      	movs	r3, #1
 8002e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e34:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3e:	f107 031c 	add.w	r3, r7, #28
 8002e42:	4619      	mov	r1, r3
 8002e44:	480e      	ldr	r0, [pc, #56]	; (8002e80 <_ZL12MX_GPIO_Initv+0x198>)
 8002e46:	f000 fce3 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002e4a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002e4e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e50:	2301      	movs	r3, #1
 8002e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e5c:	f107 031c 	add.w	r3, r7, #28
 8002e60:	4619      	mov	r1, r3
 8002e62:	4806      	ldr	r0, [pc, #24]	; (8002e7c <_ZL12MX_GPIO_Initv+0x194>)
 8002e64:	f000 fcd4 	bl	8003810 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e68:	bf00      	nop
 8002e6a:	3730      	adds	r7, #48	; 0x30
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40020800 	.word	0x40020800
 8002e7c:	40020c00 	.word	0x40020c00
 8002e80:	40020000 	.word	0x40020000

08002e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e88:	b672      	cpsid	i
}
 8002e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e8c:	e7fe      	b.n	8002e8c <Error_Handler+0x8>
	...

08002e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_MspInit+0x4c>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <HAL_MspInit+0x4c>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <HAL_MspInit+0x4c>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_MspInit+0x4c>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_MspInit+0x4c>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_MspInit+0x4c>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ece:	2007      	movs	r0, #7
 8002ed0:	f000 fbca 	bl	8003668 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800

08002ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <HAL_I2C_MspInit+0x84>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d12c      	bne.n	8002f5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f24:	2312      	movs	r3, #18
 8002f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f30:	2304      	movs	r3, #4
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	4619      	mov	r1, r3
 8002f3a:	480c      	ldr	r0, [pc, #48]	; (8002f6c <HAL_I2C_MspInit+0x8c>)
 8002f3c:	f000 fc68 	bl	8003810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_I2C_MspInit+0x88>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40005400 	.word	0x40005400
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40020400 	.word	0x40020400

08002f70 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08e      	sub	sp, #56	; 0x38
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a59      	ldr	r2, [pc, #356]	; (80030f4 <HAL_I2S_MspInit+0x184>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d15b      	bne.n	800304a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	623b      	str	r3, [r7, #32]
 8002f96:	4b58      	ldr	r3, [pc, #352]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	4a57      	ldr	r2, [pc, #348]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8002f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa2:	4b55      	ldr	r3, [pc, #340]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002faa:	623b      	str	r3, [r7, #32]
 8002fac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	4b51      	ldr	r3, [pc, #324]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	4a50      	ldr	r2, [pc, #320]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbe:	4b4e      	ldr	r3, [pc, #312]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	4b4a      	ldr	r3, [pc, #296]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4a49      	ldr	r2, [pc, #292]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8002fd4:	f043 0302 	orr.w	r3, r3, #2
 8002fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	61bb      	str	r3, [r7, #24]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8002ff6:	2306      	movs	r3, #6
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ffe:	4619      	mov	r1, r3
 8003000:	483e      	ldr	r0, [pc, #248]	; (80030fc <HAL_I2S_MspInit+0x18c>)
 8003002:	f000 fc05 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003006:	2308      	movs	r3, #8
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	2300      	movs	r3, #0
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003012:	2300      	movs	r3, #0
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003016:	2305      	movs	r3, #5
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800301a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301e:	4619      	mov	r1, r3
 8003020:	4836      	ldr	r0, [pc, #216]	; (80030fc <HAL_I2S_MspInit+0x18c>)
 8003022:	f000 fbf5 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8003026:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302c:	2302      	movs	r3, #2
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003034:	2300      	movs	r3, #0
 8003036:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003038:	2305      	movs	r3, #5
 800303a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003040:	4619      	mov	r1, r3
 8003042:	482f      	ldr	r0, [pc, #188]	; (8003100 <HAL_I2S_MspInit+0x190>)
 8003044:	f000 fbe4 	bl	8003810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003048:	e04f      	b.n	80030ea <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2d      	ldr	r2, [pc, #180]	; (8003104 <HAL_I2S_MspInit+0x194>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d14a      	bne.n	80030ea <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	4a26      	ldr	r2, [pc, #152]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 800305e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003062:	6413      	str	r3, [r2, #64]	; 0x40
 8003064:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6313      	str	r3, [r2, #48]	; 0x30
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	6313      	str	r3, [r2, #48]	; 0x30
 800309c:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_I2S_MspInit+0x188>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80030a8:	2310      	movs	r3, #16
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030b8:	2306      	movs	r3, #6
 80030ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80030bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c0:	4619      	mov	r1, r3
 80030c2:	4811      	ldr	r0, [pc, #68]	; (8003108 <HAL_I2S_MspInit+0x198>)
 80030c4:	f000 fba4 	bl	8003810 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80030c8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030da:	2306      	movs	r3, #6
 80030dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e2:	4619      	mov	r1, r3
 80030e4:	4805      	ldr	r0, [pc, #20]	; (80030fc <HAL_I2S_MspInit+0x18c>)
 80030e6:	f000 fb93 	bl	8003810 <HAL_GPIO_Init>
}
 80030ea:	bf00      	nop
 80030ec:	3738      	adds	r7, #56	; 0x38
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40003800 	.word	0x40003800
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020800 	.word	0x40020800
 8003100:	40020400 	.word	0x40020400
 8003104:	40003c00 	.word	0x40003c00
 8003108:	40020000 	.word	0x40020000

0800310c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a19      	ldr	r2, [pc, #100]	; (8003190 <HAL_SPI_MspInit+0x84>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d12b      	bne.n	8003186 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_SPI_MspInit+0x88>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	4a17      	ldr	r2, [pc, #92]	; (8003194 <HAL_SPI_MspInit+0x88>)
 8003138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800313c:	6453      	str	r3, [r2, #68]	; 0x44
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_SPI_MspInit+0x88>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_SPI_MspInit+0x88>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <HAL_SPI_MspInit+0x88>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <HAL_SPI_MspInit+0x88>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003166:	23e0      	movs	r3, #224	; 0xe0
 8003168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316a:	2302      	movs	r3, #2
 800316c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003176:	2305      	movs	r3, #5
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	4619      	mov	r1, r3
 8003180:	4805      	ldr	r0, [pc, #20]	; (8003198 <HAL_SPI_MspInit+0x8c>)
 8003182:	f000 fb45 	bl	8003810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003186:	bf00      	nop
 8003188:	3728      	adds	r7, #40	; 0x28
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40013000 	.word	0x40013000
 8003194:	40023800 	.word	0x40023800
 8003198:	40020000 	.word	0x40020000

0800319c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <HAL_UART_MspInit+0x94>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d133      	bne.n	8003226 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <HAL_UART_MspInit+0x98>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <HAL_UART_MspInit+0x98>)
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_UART_MspInit+0x98>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <HAL_UART_MspInit+0x98>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a14      	ldr	r2, [pc, #80]	; (8003234 <HAL_UART_MspInit+0x98>)
 80031e4:	f043 0308 	orr.w	r3, r3, #8
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_UART_MspInit+0x98>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80031f6:	2360      	movs	r3, #96	; 0x60
 80031f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003202:	2303      	movs	r3, #3
 8003204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003206:	2307      	movs	r3, #7
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4619      	mov	r1, r3
 8003210:	4809      	ldr	r0, [pc, #36]	; (8003238 <HAL_UART_MspInit+0x9c>)
 8003212:	f000 fafd 	bl	8003810 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2100      	movs	r1, #0
 800321a:	2026      	movs	r0, #38	; 0x26
 800321c:	f000 fa2f 	bl	800367e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003220:	2026      	movs	r0, #38	; 0x26
 8003222:	f000 fa48 	bl	80036b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003226:	bf00      	nop
 8003228:	3728      	adds	r7, #40	; 0x28
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40004400 	.word	0x40004400
 8003234:	40023800 	.word	0x40023800
 8003238:	40020c00 	.word	0x40020c00

0800323c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003240:	e7fe      	b.n	8003240 <NMI_Handler+0x4>

08003242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003246:	e7fe      	b.n	8003246 <HardFault_Handler+0x4>

08003248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800324c:	e7fe      	b.n	800324c <MemManage_Handler+0x4>

0800324e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003252:	e7fe      	b.n	8003252 <BusFault_Handler+0x4>

08003254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003258:	e7fe      	b.n	8003258 <UsageFault_Handler+0x4>

0800325a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003288:	f000 f8da 	bl	8003440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800328c:	bf00      	nop
 800328e:	bd80      	pop	{r7, pc}

08003290 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003294:	4802      	ldr	r0, [pc, #8]	; (80032a0 <USART2_IRQHandler+0x10>)
 8003296:	f004 fb57 	bl	8007948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	200001d4 	.word	0x200001d4

080032a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <OTG_FS_IRQHandler+0x10>)
 80032aa:	f000 feb9 	bl	8004020 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000800 	.word	0x20000800

080032b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032c0:	4a14      	ldr	r2, [pc, #80]	; (8003314 <_sbrk+0x5c>)
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <_sbrk+0x60>)
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <_sbrk+0x64>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d4:	4b11      	ldr	r3, [pc, #68]	; (800331c <_sbrk+0x64>)
 80032d6:	4a12      	ldr	r2, [pc, #72]	; (8003320 <_sbrk+0x68>)
 80032d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <_sbrk+0x64>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d207      	bcs.n	80032f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032e8:	f008 fda6 	bl	800be38 <__errno>
 80032ec:	4603      	mov	r3, r0
 80032ee:	220c      	movs	r2, #12
 80032f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032f2:	f04f 33ff 	mov.w	r3, #4294967295
 80032f6:	e009      	b.n	800330c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <_sbrk+0x64>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032fe:	4b07      	ldr	r3, [pc, #28]	; (800331c <_sbrk+0x64>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4413      	add	r3, r2
 8003306:	4a05      	ldr	r2, [pc, #20]	; (800331c <_sbrk+0x64>)
 8003308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800330a:	68fb      	ldr	r3, [r7, #12]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20020000 	.word	0x20020000
 8003318:	00000400 	.word	0x00000400
 800331c:	2000041c 	.word	0x2000041c
 8003320:	20000c50 	.word	0x20000c50

08003324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <SystemInit+0x20>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	4a05      	ldr	r2, [pc, #20]	; (8003344 <SystemInit+0x20>)
 8003330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003380 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800334c:	480d      	ldr	r0, [pc, #52]	; (8003384 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800334e:	490e      	ldr	r1, [pc, #56]	; (8003388 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003350:	4a0e      	ldr	r2, [pc, #56]	; (800338c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003354:	e002      	b.n	800335c <LoopCopyDataInit>

08003356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800335a:	3304      	adds	r3, #4

0800335c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800335c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800335e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003360:	d3f9      	bcc.n	8003356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003362:	4a0b      	ldr	r2, [pc, #44]	; (8003390 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003364:	4c0b      	ldr	r4, [pc, #44]	; (8003394 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003368:	e001      	b.n	800336e <LoopFillZerobss>

0800336a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800336a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800336c:	3204      	adds	r2, #4

0800336e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800336e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003370:	d3fb      	bcc.n	800336a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003372:	f7ff ffd7 	bl	8003324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003376:	f008 fd65 	bl	800be44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800337a:	f7ff fa73 	bl	8002864 <main>
  bx  lr    
 800337e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003388:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800338c:	0800bfd4 	.word	0x0800bfd4
  ldr r2, =_sbss
 8003390:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003394:	20000c4c 	.word	0x20000c4c

08003398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003398:	e7fe      	b.n	8003398 <ADC_IRQHandler>
	...

0800339c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_Init+0x40>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <HAL_Init+0x40>)
 80033a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_Init+0x40>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <HAL_Init+0x40>)
 80033b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033b8:	4b08      	ldr	r3, [pc, #32]	; (80033dc <HAL_Init+0x40>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a07      	ldr	r2, [pc, #28]	; (80033dc <HAL_Init+0x40>)
 80033be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c4:	2003      	movs	r0, #3
 80033c6:	f000 f94f 	bl	8003668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f000 f808 	bl	80033e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033d0:	f7ff fd5e 	bl	8002e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023c00 	.word	0x40023c00

080033e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033e8:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_InitTick+0x54>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_InitTick+0x58>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	4619      	mov	r1, r3
 80033f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f967 	bl	80036d2 <HAL_SYSTICK_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e00e      	b.n	800342c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b0f      	cmp	r3, #15
 8003412:	d80a      	bhi.n	800342a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003414:	2200      	movs	r2, #0
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	f000 f92f 	bl	800367e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003420:	4a06      	ldr	r2, [pc, #24]	; (800343c <HAL_InitTick+0x5c>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e000      	b.n	800342c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000000 	.word	0x20000000
 8003438:	20000008 	.word	0x20000008
 800343c:	20000004 	.word	0x20000004

08003440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_IncTick+0x20>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_IncTick+0x24>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4413      	add	r3, r2
 8003450:	4a04      	ldr	r2, [pc, #16]	; (8003464 <HAL_IncTick+0x24>)
 8003452:	6013      	str	r3, [r2, #0]
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000008 	.word	0x20000008
 8003464:	20000420 	.word	0x20000420

08003468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return uwTick;
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <HAL_GetTick+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000420 	.word	0x20000420

08003480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003488:	f7ff ffee 	bl	8003468 <HAL_GetTick>
 800348c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d005      	beq.n	80034a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <HAL_Delay+0x44>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034a6:	bf00      	nop
 80034a8:	f7ff ffde 	bl	8003468 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d8f7      	bhi.n	80034a8 <HAL_Delay+0x28>
  {
  }
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000008 	.word	0x20000008

080034c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <__NVIC_SetPriorityGrouping+0x44>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034e4:	4013      	ands	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034fa:	4a04      	ldr	r2, [pc, #16]	; (800350c <__NVIC_SetPriorityGrouping+0x44>)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	60d3      	str	r3, [r2, #12]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <__NVIC_GetPriorityGrouping+0x18>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	0a1b      	lsrs	r3, r3, #8
 800351a:	f003 0307 	and.w	r3, r3, #7
}
 800351e:	4618      	mov	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	2b00      	cmp	r3, #0
 800353c:	db0b      	blt.n	8003556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	f003 021f 	and.w	r2, r3, #31
 8003544:	4907      	ldr	r1, [pc, #28]	; (8003564 <__NVIC_EnableIRQ+0x38>)
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	2001      	movs	r0, #1
 800354e:	fa00 f202 	lsl.w	r2, r0, r2
 8003552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	e000e100 	.word	0xe000e100

08003568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	6039      	str	r1, [r7, #0]
 8003572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003578:	2b00      	cmp	r3, #0
 800357a:	db0a      	blt.n	8003592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	b2da      	uxtb	r2, r3
 8003580:	490c      	ldr	r1, [pc, #48]	; (80035b4 <__NVIC_SetPriority+0x4c>)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	0112      	lsls	r2, r2, #4
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	440b      	add	r3, r1
 800358c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003590:	e00a      	b.n	80035a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	4908      	ldr	r1, [pc, #32]	; (80035b8 <__NVIC_SetPriority+0x50>)
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	3b04      	subs	r3, #4
 80035a0:	0112      	lsls	r2, r2, #4
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	440b      	add	r3, r1
 80035a6:	761a      	strb	r2, [r3, #24]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000e100 	.word	0xe000e100
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035bc:	b480      	push	{r7}
 80035be:	b089      	sub	sp, #36	; 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f1c3 0307 	rsb	r3, r3, #7
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	bf28      	it	cs
 80035da:	2304      	movcs	r3, #4
 80035dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3304      	adds	r3, #4
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d902      	bls.n	80035ec <NVIC_EncodePriority+0x30>
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3b03      	subs	r3, #3
 80035ea:	e000      	b.n	80035ee <NVIC_EncodePriority+0x32>
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f0:	f04f 32ff 	mov.w	r2, #4294967295
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43da      	mvns	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	401a      	ands	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003604:	f04f 31ff 	mov.w	r1, #4294967295
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	43d9      	mvns	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	4313      	orrs	r3, r2
         );
}
 8003616:	4618      	mov	r0, r3
 8003618:	3724      	adds	r7, #36	; 0x24
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3b01      	subs	r3, #1
 8003630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003634:	d301      	bcc.n	800363a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003636:	2301      	movs	r3, #1
 8003638:	e00f      	b.n	800365a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800363a:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <SysTick_Config+0x40>)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3b01      	subs	r3, #1
 8003640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003642:	210f      	movs	r1, #15
 8003644:	f04f 30ff 	mov.w	r0, #4294967295
 8003648:	f7ff ff8e 	bl	8003568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <SysTick_Config+0x40>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003652:	4b04      	ldr	r3, [pc, #16]	; (8003664 <SysTick_Config+0x40>)
 8003654:	2207      	movs	r2, #7
 8003656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	e000e010 	.word	0xe000e010

08003668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff29 	bl	80034c8 <__NVIC_SetPriorityGrouping>
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800367e:	b580      	push	{r7, lr}
 8003680:	b086      	sub	sp, #24
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003690:	f7ff ff3e 	bl	8003510 <__NVIC_GetPriorityGrouping>
 8003694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	6978      	ldr	r0, [r7, #20]
 800369c:	f7ff ff8e 	bl	80035bc <NVIC_EncodePriority>
 80036a0:	4602      	mov	r2, r0
 80036a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036a6:	4611      	mov	r1, r2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff5d 	bl	8003568 <__NVIC_SetPriority>
}
 80036ae:	bf00      	nop
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	4603      	mov	r3, r0
 80036be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff31 	bl	800352c <__NVIC_EnableIRQ>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff ffa2 	bl	8003624 <SysTick_Config>
 80036e0:	4603      	mov	r3, r0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036f8:	f7ff feb6 	bl	8003468 <HAL_GetTick>
 80036fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d008      	beq.n	800371c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2280      	movs	r2, #128	; 0x80
 800370e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e052      	b.n	80037c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0216 	bic.w	r2, r2, #22
 800372a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800373a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <HAL_DMA_Abort+0x62>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0208 	bic.w	r2, r2, #8
 800375a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800376c:	e013      	b.n	8003796 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800376e:	f7ff fe7b 	bl	8003468 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b05      	cmp	r3, #5
 800377a:	d90c      	bls.n	8003796 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2203      	movs	r2, #3
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e015      	b.n	80037c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e4      	bne.n	800376e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a8:	223f      	movs	r2, #63	; 0x3f
 80037aa:	409a      	lsls	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d004      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2280      	movs	r2, #128	; 0x80
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e00c      	b.n	8003802 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2205      	movs	r2, #5
 80037ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	e159      	b.n	8003ae0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800382c:	2201      	movs	r2, #1
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	429a      	cmp	r2, r3
 8003846:	f040 8148 	bne.w	8003ada <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d005      	beq.n	8003862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800385e:	2b02      	cmp	r3, #2
 8003860:	d130      	bne.n	80038c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	2203      	movs	r2, #3
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003898:	2201      	movs	r2, #1
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 0201 	and.w	r2, r3, #1
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d017      	beq.n	8003900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	2203      	movs	r2, #3
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d123      	bne.n	8003954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	08da      	lsrs	r2, r3, #3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3208      	adds	r2, #8
 8003914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	220f      	movs	r2, #15
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	08da      	lsrs	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3208      	adds	r2, #8
 800394e:	69b9      	ldr	r1, [r7, #24]
 8003950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	2203      	movs	r2, #3
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0203 	and.w	r2, r3, #3
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80a2 	beq.w	8003ada <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	4b57      	ldr	r3, [pc, #348]	; (8003af8 <HAL_GPIO_Init+0x2e8>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	4a56      	ldr	r2, [pc, #344]	; (8003af8 <HAL_GPIO_Init+0x2e8>)
 80039a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039a4:	6453      	str	r3, [r2, #68]	; 0x44
 80039a6:	4b54      	ldr	r3, [pc, #336]	; (8003af8 <HAL_GPIO_Init+0x2e8>)
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039b2:	4a52      	ldr	r2, [pc, #328]	; (8003afc <HAL_GPIO_Init+0x2ec>)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	3302      	adds	r3, #2
 80039ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	220f      	movs	r2, #15
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a49      	ldr	r2, [pc, #292]	; (8003b00 <HAL_GPIO_Init+0x2f0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d019      	beq.n	8003a12 <HAL_GPIO_Init+0x202>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a48      	ldr	r2, [pc, #288]	; (8003b04 <HAL_GPIO_Init+0x2f4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_GPIO_Init+0x1fe>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a47      	ldr	r2, [pc, #284]	; (8003b08 <HAL_GPIO_Init+0x2f8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00d      	beq.n	8003a0a <HAL_GPIO_Init+0x1fa>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a46      	ldr	r2, [pc, #280]	; (8003b0c <HAL_GPIO_Init+0x2fc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d007      	beq.n	8003a06 <HAL_GPIO_Init+0x1f6>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a45      	ldr	r2, [pc, #276]	; (8003b10 <HAL_GPIO_Init+0x300>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_GPIO_Init+0x1f2>
 80039fe:	2304      	movs	r3, #4
 8003a00:	e008      	b.n	8003a14 <HAL_GPIO_Init+0x204>
 8003a02:	2307      	movs	r3, #7
 8003a04:	e006      	b.n	8003a14 <HAL_GPIO_Init+0x204>
 8003a06:	2303      	movs	r3, #3
 8003a08:	e004      	b.n	8003a14 <HAL_GPIO_Init+0x204>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e002      	b.n	8003a14 <HAL_GPIO_Init+0x204>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_GPIO_Init+0x204>
 8003a12:	2300      	movs	r3, #0
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	f002 0203 	and.w	r2, r2, #3
 8003a1a:	0092      	lsls	r2, r2, #2
 8003a1c:	4093      	lsls	r3, r2
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a24:	4935      	ldr	r1, [pc, #212]	; (8003afc <HAL_GPIO_Init+0x2ec>)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a32:	4b38      	ldr	r3, [pc, #224]	; (8003b14 <HAL_GPIO_Init+0x304>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a56:	4a2f      	ldr	r2, [pc, #188]	; (8003b14 <HAL_GPIO_Init+0x304>)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a5c:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <HAL_GPIO_Init+0x304>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a80:	4a24      	ldr	r2, [pc, #144]	; (8003b14 <HAL_GPIO_Init+0x304>)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a86:	4b23      	ldr	r3, [pc, #140]	; (8003b14 <HAL_GPIO_Init+0x304>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aaa:	4a1a      	ldr	r2, [pc, #104]	; (8003b14 <HAL_GPIO_Init+0x304>)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ab0:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <HAL_GPIO_Init+0x304>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ad4:	4a0f      	ldr	r2, [pc, #60]	; (8003b14 <HAL_GPIO_Init+0x304>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3301      	adds	r3, #1
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b0f      	cmp	r3, #15
 8003ae4:	f67f aea2 	bls.w	800382c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3724      	adds	r7, #36	; 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40013800 	.word	0x40013800
 8003b00:	40020000 	.word	0x40020000
 8003b04:	40020400 	.word	0x40020400
 8003b08:	40020800 	.word	0x40020800
 8003b0c:	40020c00 	.word	0x40020c00
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40013c00 	.word	0x40013c00

08003b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	807b      	strh	r3, [r7, #2]
 8003b24:	4613      	mov	r3, r2
 8003b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b28:	787b      	ldrb	r3, [r7, #1]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b34:	e003      	b.n	8003b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	041a      	lsls	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	619a      	str	r2, [r3, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4c:	b08f      	sub	sp, #60	; 0x3c
 8003b4e:	af0a      	add	r7, sp, #40	; 0x28
 8003b50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e054      	b.n	8003c06 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f007 fde0 	bl	800b73c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f004 fe0c 	bl	80087b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	687e      	ldr	r6, [r7, #4]
 8003ba8:	466d      	mov	r5, sp
 8003baa:	f106 0410 	add.w	r4, r6, #16
 8003bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bba:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bbe:	1d33      	adds	r3, r6, #4
 8003bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bc2:	6838      	ldr	r0, [r7, #0]
 8003bc4:	f004 fd86 	bl	80086d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2101      	movs	r1, #1
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f004 fe03 	bl	80087da <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	687e      	ldr	r6, [r7, #4]
 8003bdc:	466d      	mov	r5, sp
 8003bde:	f106 0410 	add.w	r4, r6, #16
 8003be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bee:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bf2:	1d33      	adds	r3, r6, #4
 8003bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bf6:	6838      	ldr	r0, [r7, #0]
 8003bf8:	f004 ff8c 	bl	8008b14 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c0e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003c0e:	b590      	push	{r4, r7, lr}
 8003c10:	b089      	sub	sp, #36	; 0x24
 8003c12:	af04      	add	r7, sp, #16
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	4608      	mov	r0, r1
 8003c18:	4611      	mov	r1, r2
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	70fb      	strb	r3, [r7, #3]
 8003c20:	460b      	mov	r3, r1
 8003c22:	70bb      	strb	r3, [r7, #2]
 8003c24:	4613      	mov	r3, r2
 8003c26:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_HCD_HC_Init+0x28>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e076      	b.n	8003d24 <HAL_HCD_HC_Init+0x116>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	212c      	movs	r1, #44	; 0x2c
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	4413      	add	r3, r2
 8003c4a:	333d      	adds	r3, #61	; 0x3d
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3338      	adds	r3, #56	; 0x38
 8003c5e:	787a      	ldrb	r2, [r7, #1]
 8003c60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	212c      	movs	r1, #44	; 0x2c
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3340      	adds	r3, #64	; 0x40
 8003c70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003c72:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3339      	adds	r3, #57	; 0x39
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	212c      	movs	r1, #44	; 0x2c
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	4413      	add	r3, r2
 8003c92:	333f      	adds	r3, #63	; 0x3f
 8003c94:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003c98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	78ba      	ldrb	r2, [r7, #2]
 8003c9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ca2:	b2d0      	uxtb	r0, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	212c      	movs	r1, #44	; 0x2c
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	333a      	adds	r3, #58	; 0x3a
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003cb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	da09      	bge.n	8003cd0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	212c      	movs	r1, #44	; 0x2c
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	333b      	adds	r3, #59	; 0x3b
 8003cca:	2201      	movs	r2, #1
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	e008      	b.n	8003ce2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	212c      	movs	r1, #44	; 0x2c
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	333b      	adds	r3, #59	; 0x3b
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	212c      	movs	r1, #44	; 0x2c
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	333c      	adds	r3, #60	; 0x3c
 8003cf0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003cf4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	787c      	ldrb	r4, [r7, #1]
 8003cfc:	78ba      	ldrb	r2, [r7, #2]
 8003cfe:	78f9      	ldrb	r1, [r7, #3]
 8003d00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d02:	9302      	str	r3, [sp, #8]
 8003d04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d08:	9301      	str	r3, [sp, #4]
 8003d0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	4623      	mov	r3, r4
 8003d12:	f005 f885 	bl	8008e20 <USB_HC_Init>
 8003d16:	4603      	mov	r3, r0
 8003d18:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd90      	pop	{r4, r7, pc}

08003d2c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_HCD_HC_Halt+0x1e>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e00f      	b.n	8003d6a <HAL_HCD_HC_Halt+0x3e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f005 fad5 	bl	800930a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	70fb      	strb	r3, [r7, #3]
 8003d86:	460b      	mov	r3, r1
 8003d88:	70bb      	strb	r3, [r7, #2]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	212c      	movs	r1, #44	; 0x2c
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	333b      	adds	r3, #59	; 0x3b
 8003d9c:	78ba      	ldrb	r2, [r7, #2]
 8003d9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	212c      	movs	r1, #44	; 0x2c
 8003da6:	fb01 f303 	mul.w	r3, r1, r3
 8003daa:	4413      	add	r3, r2
 8003dac:	333f      	adds	r3, #63	; 0x3f
 8003dae:	787a      	ldrb	r2, [r7, #1]
 8003db0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003db2:	7c3b      	ldrb	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d112      	bne.n	8003dde <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	212c      	movs	r1, #44	; 0x2c
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3342      	adds	r3, #66	; 0x42
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	212c      	movs	r1, #44	; 0x2c
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	333d      	adds	r3, #61	; 0x3d
 8003dd8:	7f3a      	ldrb	r2, [r7, #28]
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e008      	b.n	8003df0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	212c      	movs	r1, #44	; 0x2c
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	4413      	add	r3, r2
 8003dea:	3342      	adds	r3, #66	; 0x42
 8003dec:	2202      	movs	r2, #2
 8003dee:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003df0:	787b      	ldrb	r3, [r7, #1]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	f200 80c6 	bhi.w	8003f84 <HAL_HCD_HC_SubmitRequest+0x210>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e11 	.word	0x08003e11
 8003e04:	08003f71 	.word	0x08003f71
 8003e08:	08003e75 	.word	0x08003e75
 8003e0c:	08003ef3 	.word	0x08003ef3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003e10:	7c3b      	ldrb	r3, [r7, #16]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	f040 80b8 	bne.w	8003f88 <HAL_HCD_HC_SubmitRequest+0x214>
 8003e18:	78bb      	ldrb	r3, [r7, #2]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 80b4 	bne.w	8003f88 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003e20:	8b3b      	ldrh	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d108      	bne.n	8003e38 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	212c      	movs	r1, #44	; 0x2c
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	4413      	add	r3, r2
 8003e32:	3355      	adds	r3, #85	; 0x55
 8003e34:	2201      	movs	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	212c      	movs	r1, #44	; 0x2c
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	3355      	adds	r3, #85	; 0x55
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	212c      	movs	r1, #44	; 0x2c
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	3342      	adds	r3, #66	; 0x42
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e5e:	e093      	b.n	8003f88 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	212c      	movs	r1, #44	; 0x2c
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3342      	adds	r3, #66	; 0x42
 8003e6e:	2202      	movs	r2, #2
 8003e70:	701a      	strb	r2, [r3, #0]
      break;
 8003e72:	e089      	b.n	8003f88 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003e74:	78bb      	ldrb	r3, [r7, #2]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11d      	bne.n	8003eb6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	212c      	movs	r1, #44	; 0x2c
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	3355      	adds	r3, #85	; 0x55
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	3342      	adds	r3, #66	; 0x42
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003ea0:	e073      	b.n	8003f8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	212c      	movs	r1, #44	; 0x2c
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	3342      	adds	r3, #66	; 0x42
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	701a      	strb	r2, [r3, #0]
      break;
 8003eb4:	e069      	b.n	8003f8a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	212c      	movs	r1, #44	; 0x2c
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3354      	adds	r3, #84	; 0x54
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	212c      	movs	r1, #44	; 0x2c
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3342      	adds	r3, #66	; 0x42
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
      break;
 8003edc:	e055      	b.n	8003f8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ede:	78fb      	ldrb	r3, [r7, #3]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	212c      	movs	r1, #44	; 0x2c
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	3342      	adds	r3, #66	; 0x42
 8003eec:	2202      	movs	r2, #2
 8003eee:	701a      	strb	r2, [r3, #0]
      break;
 8003ef0:	e04b      	b.n	8003f8a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003ef2:	78bb      	ldrb	r3, [r7, #2]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d11d      	bne.n	8003f34 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	3355      	adds	r3, #85	; 0x55
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3342      	adds	r3, #66	; 0x42
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003f1e:	e034      	b.n	8003f8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	212c      	movs	r1, #44	; 0x2c
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3342      	adds	r3, #66	; 0x42
 8003f2e:	2202      	movs	r2, #2
 8003f30:	701a      	strb	r2, [r3, #0]
      break;
 8003f32:	e02a      	b.n	8003f8a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	212c      	movs	r1, #44	; 0x2c
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	4413      	add	r3, r2
 8003f40:	3354      	adds	r3, #84	; 0x54
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	212c      	movs	r1, #44	; 0x2c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	3342      	adds	r3, #66	; 0x42
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
      break;
 8003f5a:	e016      	b.n	8003f8a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	212c      	movs	r1, #44	; 0x2c
 8003f62:	fb01 f303 	mul.w	r3, r1, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	3342      	adds	r3, #66	; 0x42
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	701a      	strb	r2, [r3, #0]
      break;
 8003f6e:	e00c      	b.n	8003f8a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	212c      	movs	r1, #44	; 0x2c
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3342      	adds	r3, #66	; 0x42
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
      break;
 8003f82:	e002      	b.n	8003f8a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003f88:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	212c      	movs	r1, #44	; 0x2c
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	3344      	adds	r3, #68	; 0x44
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	8b3a      	ldrh	r2, [r7, #24]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	202c      	movs	r0, #44	; 0x2c
 8003fa4:	fb00 f303 	mul.w	r3, r0, r3
 8003fa8:	440b      	add	r3, r1
 8003faa:	334c      	adds	r3, #76	; 0x4c
 8003fac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	212c      	movs	r1, #44	; 0x2c
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	4413      	add	r3, r2
 8003fba:	3360      	adds	r3, #96	; 0x60
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	3350      	adds	r3, #80	; 0x50
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	3339      	adds	r3, #57	; 0x39
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	212c      	movs	r1, #44	; 0x2c
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	3361      	adds	r3, #97	; 0x61
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	222c      	movs	r2, #44	; 0x2c
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	3338      	adds	r3, #56	; 0x38
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	18d1      	adds	r1, r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	f005 f828 	bl	8009064 <USB_HC_StartXfer>
 8004014:	4603      	mov	r3, r0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop

08004020 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f004 fd29 	bl	8008a8e <USB_GetMode>
 800403c:	4603      	mov	r3, r0
 800403e:	2b01      	cmp	r3, #1
 8004040:	f040 80f6 	bne.w	8004230 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f004 fd0d 	bl	8008a68 <USB_ReadInterrupts>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 80ec 	beq.w	800422e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f004 fd04 	bl	8008a68 <USB_ReadInterrupts>
 8004060:	4603      	mov	r3, r0
 8004062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800406a:	d104      	bne.n	8004076 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004074:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f004 fcf4 	bl	8008a68 <USB_ReadInterrupts>
 8004080:	4603      	mov	r3, r0
 8004082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800408a:	d104      	bne.n	8004096 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004094:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f004 fce4 	bl	8008a68 <USB_ReadInterrupts>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040aa:	d104      	bne.n	80040b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80040b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f004 fcd4 	bl	8008a68 <USB_ReadInterrupts>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d103      	bne.n	80040d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2202      	movs	r2, #2
 80040d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f004 fcc6 	bl	8008a68 <USB_ReadInterrupts>
 80040dc:	4603      	mov	r3, r0
 80040de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e6:	d11c      	bne.n	8004122 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80040f0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10f      	bne.n	8004122 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004102:	2110      	movs	r1, #16
 8004104:	6938      	ldr	r0, [r7, #16]
 8004106:	f004 fbb5 	bl	8008874 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800410a:	6938      	ldr	r0, [r7, #16]
 800410c:	f004 fbe6 	bl	80088dc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f004 fdbc 	bl	8008c94 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f007 fb8b 	bl	800b838 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f004 fc9e 	bl	8008a68 <USB_ReadInterrupts>
 800412c:	4603      	mov	r3, r0
 800412e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004132:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004136:	d102      	bne.n	800413e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f001 f89e 	bl	800527a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f004 fc90 	bl	8008a68 <USB_ReadInterrupts>
 8004148:	4603      	mov	r3, r0
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b08      	cmp	r3, #8
 8004150:	d106      	bne.n	8004160 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f007 fb54 	bl	800b800 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2208      	movs	r2, #8
 800415e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f004 fc7f 	bl	8008a68 <USB_ReadInterrupts>
 800416a:	4603      	mov	r3, r0
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b10      	cmp	r3, #16
 8004172:	d101      	bne.n	8004178 <HAL_HCD_IRQHandler+0x158>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <HAL_HCD_IRQHandler+0x15a>
 8004178:	2300      	movs	r3, #0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d012      	beq.n	80041a4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699a      	ldr	r2, [r3, #24]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0210 	bic.w	r2, r2, #16
 800418c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 ffa1 	bl	80050d6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0210 	orr.w	r2, r2, #16
 80041a2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f004 fc5d 	bl	8008a68 <USB_ReadInterrupts>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041b8:	d13a      	bne.n	8004230 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f005 f892 	bl	80092e8 <USB_HC_ReadInterrupt>
 80041c4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	e025      	b.n	8004218 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d018      	beq.n	8004212 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f6:	d106      	bne.n	8004206 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f8ab 	bl	800435a <HCD_HC_IN_IRQHandler>
 8004204:	e005      	b.n	8004212 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	4619      	mov	r1, r3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fbf9 	bl	8004a04 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	3301      	adds	r3, #1
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	429a      	cmp	r2, r3
 8004220:	d3d4      	bcc.n	80041cc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800422a:	615a      	str	r2, [r3, #20]
 800422c:	e000      	b.n	8004230 <HAL_HCD_IRQHandler+0x210>
      return;
 800422e:	bf00      	nop
    }
  }
}
 8004230:	3718      	adds	r7, #24
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_HCD_Start+0x16>
 8004248:	2302      	movs	r3, #2
 800424a:	e013      	b.n	8004274 <HAL_HCD_Start+0x3e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2101      	movs	r1, #1
 800425a:	4618      	mov	r0, r3
 800425c:	f004 fd7e 	bl	8008d5c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f004 fa96 	bl	8008796 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_HCD_Stop+0x16>
 800428e:	2302      	movs	r3, #2
 8004290:	e00d      	b.n	80042ae <HAL_HCD_Stop+0x32>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f005 f96c 	bl	800957c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f004 fd20 	bl	8008d08 <USB_ResetPort>
 80042c8:	4603      	mov	r3, r0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	212c      	movs	r1, #44	; 0x2c
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	4413      	add	r3, r2
 80042ea:	3360      	adds	r3, #96	; 0x60
 80042ec:	781b      	ldrb	r3, [r3, #0]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	460b      	mov	r3, r1
 8004304:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	212c      	movs	r1, #44	; 0x2c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	3350      	adds	r3, #80	; 0x50
 8004314:	681b      	ldr	r3, [r3, #0]
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f004 fd64 	bl	8008dfc <USB_GetCurrentFrame>
 8004334:	4603      	mov	r3, r0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f004 fd3f 	bl	8008dce <USB_GetHostSpeed>
 8004350:	4603      	mov	r3, r0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b086      	sub	sp, #24
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	460b      	mov	r3, r1
 8004364:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4413      	add	r3, r2
 800437c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d11a      	bne.n	80043c0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4413      	add	r3, r2
 8004392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004396:	461a      	mov	r2, r3
 8004398:	2304      	movs	r3, #4
 800439a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	212c      	movs	r1, #44	; 0x2c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	3361      	adds	r3, #97	; 0x61
 80043aa:	2206      	movs	r2, #6
 80043ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f004 ffa6 	bl	800930a <USB_HC_Halt>
 80043be:	e0af      	b.n	8004520 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d6:	d11b      	bne.n	8004410 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e4:	461a      	mov	r2, r3
 80043e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	212c      	movs	r1, #44	; 0x2c
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	3361      	adds	r3, #97	; 0x61
 80043fa:	2207      	movs	r2, #7
 80043fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f004 ff7e 	bl	800930a <USB_HC_Halt>
 800440e:	e087      	b.n	8004520 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4413      	add	r3, r2
 8004418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b20      	cmp	r3, #32
 8004424:	d109      	bne.n	800443a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4413      	add	r3, r2
 800442e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004432:	461a      	mov	r2, r3
 8004434:	2320      	movs	r3, #32
 8004436:	6093      	str	r3, [r2, #8]
 8004438:	e072      	b.n	8004520 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b08      	cmp	r3, #8
 800444e:	d11a      	bne.n	8004486 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445c:	461a      	mov	r2, r3
 800445e:	2308      	movs	r3, #8
 8004460:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	212c      	movs	r1, #44	; 0x2c
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	4413      	add	r3, r2
 800446e:	3361      	adds	r3, #97	; 0x61
 8004470:	2205      	movs	r2, #5
 8004472:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	4611      	mov	r1, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f004 ff43 	bl	800930a <USB_HC_Halt>
 8004484:	e04c      	b.n	8004520 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4413      	add	r3, r2
 800448e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449c:	d11b      	bne.n	80044d6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044aa:	461a      	mov	r2, r3
 80044ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	212c      	movs	r1, #44	; 0x2c
 80044b8:	fb01 f303 	mul.w	r3, r1, r3
 80044bc:	4413      	add	r3, r2
 80044be:	3361      	adds	r3, #97	; 0x61
 80044c0:	2208      	movs	r2, #8
 80044c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	4611      	mov	r1, r2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f004 ff1b 	bl	800930a <USB_HC_Halt>
 80044d4:	e024      	b.n	8004520 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	015a      	lsls	r2, r3, #5
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d119      	bne.n	8004520 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f8:	461a      	mov	r2, r3
 80044fa:	2380      	movs	r3, #128	; 0x80
 80044fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	212c      	movs	r1, #44	; 0x2c
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	4413      	add	r3, r2
 800450a:	3361      	adds	r3, #97	; 0x61
 800450c:	2206      	movs	r2, #6
 800450e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f004 fef5 	bl	800930a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4413      	add	r3, r2
 8004528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004536:	d112      	bne.n	800455e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	4611      	mov	r1, r2
 8004542:	4618      	mov	r0, r3
 8004544:	f004 fee1 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4413      	add	r3, r2
 8004550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004554:	461a      	mov	r2, r3
 8004556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800455a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800455c:	e24e      	b.n	80049fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4413      	add	r3, r2
 8004566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	f040 80df 	bne.w	8004734 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d019      	beq.n	80045b2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	212c      	movs	r1, #44	; 0x2c
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	4413      	add	r3, r2
 800458a:	3348      	adds	r3, #72	; 0x48
 800458c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	0159      	lsls	r1, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	440b      	add	r3, r1
 8004596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80045a0:	1ad2      	subs	r2, r2, r3
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	202c      	movs	r0, #44	; 0x2c
 80045a8:	fb00 f303 	mul.w	r3, r0, r3
 80045ac:	440b      	add	r3, r1
 80045ae:	3350      	adds	r3, #80	; 0x50
 80045b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	212c      	movs	r1, #44	; 0x2c
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	4413      	add	r3, r2
 80045be:	3361      	adds	r3, #97	; 0x61
 80045c0:	2201      	movs	r2, #1
 80045c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	335c      	adds	r3, #92	; 0x5c
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e2:	461a      	mov	r2, r3
 80045e4:	2301      	movs	r3, #1
 80045e6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	212c      	movs	r1, #44	; 0x2c
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	4413      	add	r3, r2
 80045f4:	333f      	adds	r3, #63	; 0x3f
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d009      	beq.n	8004610 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	212c      	movs	r1, #44	; 0x2c
 8004602:	fb01 f303 	mul.w	r3, r1, r3
 8004606:	4413      	add	r3, r2
 8004608:	333f      	adds	r3, #63	; 0x3f
 800460a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800460c:	2b02      	cmp	r3, #2
 800460e:	d111      	bne.n	8004634 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	4611      	mov	r1, r2
 800461a:	4618      	mov	r0, r3
 800461c:	f004 fe75 	bl	800930a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462c:	461a      	mov	r2, r3
 800462e:	2310      	movs	r3, #16
 8004630:	6093      	str	r3, [r2, #8]
 8004632:	e03a      	b.n	80046aa <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	212c      	movs	r1, #44	; 0x2c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	333f      	adds	r3, #63	; 0x3f
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d009      	beq.n	800465c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	212c      	movs	r1, #44	; 0x2c
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	4413      	add	r3, r2
 8004654:	333f      	adds	r3, #63	; 0x3f
 8004656:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004658:	2b01      	cmp	r3, #1
 800465a:	d126      	bne.n	80046aa <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	440a      	add	r2, r1
 8004672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004676:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800467a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	212c      	movs	r1, #44	; 0x2c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	3360      	adds	r3, #96	; 0x60
 800468a:	2201      	movs	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	b2d9      	uxtb	r1, r3
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	202c      	movs	r0, #44	; 0x2c
 8004698:	fb00 f303 	mul.w	r3, r0, r3
 800469c:	4413      	add	r3, r2
 800469e:	3360      	adds	r3, #96	; 0x60
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f007 f8d5 	bl	800b854 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d12b      	bne.n	800470a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	212c      	movs	r1, #44	; 0x2c
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	3348      	adds	r3, #72	; 0x48
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	202c      	movs	r0, #44	; 0x2c
 80046c8:	fb00 f202 	mul.w	r2, r0, r2
 80046cc:	440a      	add	r2, r1
 80046ce:	3240      	adds	r2, #64	; 0x40
 80046d0:	8812      	ldrh	r2, [r2, #0]
 80046d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 818e 	beq.w	80049fc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	212c      	movs	r1, #44	; 0x2c
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	4413      	add	r3, r2
 80046ec:	3354      	adds	r3, #84	; 0x54
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	f083 0301 	eor.w	r3, r3, #1
 80046f4:	b2d8      	uxtb	r0, r3
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	212c      	movs	r1, #44	; 0x2c
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	4413      	add	r3, r2
 8004702:	3354      	adds	r3, #84	; 0x54
 8004704:	4602      	mov	r2, r0
 8004706:	701a      	strb	r2, [r3, #0]
}
 8004708:	e178      	b.n	80049fc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	212c      	movs	r1, #44	; 0x2c
 8004710:	fb01 f303 	mul.w	r3, r1, r3
 8004714:	4413      	add	r3, r2
 8004716:	3354      	adds	r3, #84	; 0x54
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	f083 0301 	eor.w	r3, r3, #1
 800471e:	b2d8      	uxtb	r0, r3
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	212c      	movs	r1, #44	; 0x2c
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	4413      	add	r3, r2
 800472c:	3354      	adds	r3, #84	; 0x54
 800472e:	4602      	mov	r2, r0
 8004730:	701a      	strb	r2, [r3, #0]
}
 8004732:	e163      	b.n	80049fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b02      	cmp	r3, #2
 8004748:	f040 80f6 	bne.w	8004938 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	212c      	movs	r1, #44	; 0x2c
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	4413      	add	r3, r2
 8004758:	3361      	adds	r3, #97	; 0x61
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d109      	bne.n	8004774 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	212c      	movs	r1, #44	; 0x2c
 8004766:	fb01 f303 	mul.w	r3, r1, r3
 800476a:	4413      	add	r3, r2
 800476c:	3360      	adds	r3, #96	; 0x60
 800476e:	2201      	movs	r2, #1
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e0c9      	b.n	8004908 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	212c      	movs	r1, #44	; 0x2c
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	4413      	add	r3, r2
 8004780:	3361      	adds	r3, #97	; 0x61
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b05      	cmp	r3, #5
 8004786:	d109      	bne.n	800479c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	212c      	movs	r1, #44	; 0x2c
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	4413      	add	r3, r2
 8004794:	3360      	adds	r3, #96	; 0x60
 8004796:	2205      	movs	r2, #5
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	e0b5      	b.n	8004908 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	212c      	movs	r1, #44	; 0x2c
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	3361      	adds	r3, #97	; 0x61
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b06      	cmp	r3, #6
 80047ae:	d009      	beq.n	80047c4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	212c      	movs	r1, #44	; 0x2c
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	4413      	add	r3, r2
 80047bc:	3361      	adds	r3, #97	; 0x61
 80047be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d150      	bne.n	8004866 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	212c      	movs	r1, #44	; 0x2c
 80047ca:	fb01 f303 	mul.w	r3, r1, r3
 80047ce:	4413      	add	r3, r2
 80047d0:	335c      	adds	r3, #92	; 0x5c
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	202c      	movs	r0, #44	; 0x2c
 80047dc:	fb00 f303 	mul.w	r3, r0, r3
 80047e0:	440b      	add	r3, r1
 80047e2:	335c      	adds	r3, #92	; 0x5c
 80047e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	212c      	movs	r1, #44	; 0x2c
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	4413      	add	r3, r2
 80047f2:	335c      	adds	r3, #92	; 0x5c
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d912      	bls.n	8004820 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	212c      	movs	r1, #44	; 0x2c
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	4413      	add	r3, r2
 8004806:	335c      	adds	r3, #92	; 0x5c
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	3360      	adds	r3, #96	; 0x60
 800481a:	2204      	movs	r2, #4
 800481c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800481e:	e073      	b.n	8004908 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	212c      	movs	r1, #44	; 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	3360      	adds	r3, #96	; 0x60
 800482e:	2202      	movs	r2, #2
 8004830:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4413      	add	r3, r2
 800483a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004848:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004850:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4413      	add	r3, r2
 800485a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485e:	461a      	mov	r2, r3
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004864:	e050      	b.n	8004908 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	212c      	movs	r1, #44	; 0x2c
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	4413      	add	r3, r2
 8004872:	3361      	adds	r3, #97	; 0x61
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b03      	cmp	r3, #3
 8004878:	d122      	bne.n	80048c0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	212c      	movs	r1, #44	; 0x2c
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	4413      	add	r3, r2
 8004886:	3360      	adds	r3, #96	; 0x60
 8004888:	2202      	movs	r2, #2
 800488a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4413      	add	r3, r2
 8004894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b8:	461a      	mov	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e023      	b.n	8004908 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	212c      	movs	r1, #44	; 0x2c
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	3361      	adds	r3, #97	; 0x61
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b07      	cmp	r3, #7
 80048d2:	d119      	bne.n	8004908 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	212c      	movs	r1, #44	; 0x2c
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	4413      	add	r3, r2
 80048e0:	335c      	adds	r3, #92	; 0x5c
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	202c      	movs	r0, #44	; 0x2c
 80048ec:	fb00 f303 	mul.w	r3, r0, r3
 80048f0:	440b      	add	r3, r1
 80048f2:	335c      	adds	r3, #92	; 0x5c
 80048f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	212c      	movs	r1, #44	; 0x2c
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	4413      	add	r3, r2
 8004902:	3360      	adds	r3, #96	; 0x60
 8004904:	2204      	movs	r2, #4
 8004906:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4413      	add	r3, r2
 8004910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004914:	461a      	mov	r2, r3
 8004916:	2302      	movs	r3, #2
 8004918:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	b2d9      	uxtb	r1, r3
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	202c      	movs	r0, #44	; 0x2c
 8004924:	fb00 f303 	mul.w	r3, r0, r3
 8004928:	4413      	add	r3, r2
 800492a:	3360      	adds	r3, #96	; 0x60
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f006 ff8f 	bl	800b854 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004936:	e061      	b.n	80049fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4413      	add	r3, r2
 8004940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b10      	cmp	r3, #16
 800494c:	d156      	bne.n	80049fc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	333f      	adds	r3, #63	; 0x3f
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d111      	bne.n	8004986 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	212c      	movs	r1, #44	; 0x2c
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	4413      	add	r3, r2
 800496e:	335c      	adds	r3, #92	; 0x5c
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	4611      	mov	r1, r2
 800497e:	4618      	mov	r0, r3
 8004980:	f004 fcc3 	bl	800930a <USB_HC_Halt>
 8004984:	e031      	b.n	80049ea <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	212c      	movs	r1, #44	; 0x2c
 800498c:	fb01 f303 	mul.w	r3, r1, r3
 8004990:	4413      	add	r3, r2
 8004992:	333f      	adds	r3, #63	; 0x3f
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	212c      	movs	r1, #44	; 0x2c
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	4413      	add	r3, r2
 80049a6:	333f      	adds	r3, #63	; 0x3f
 80049a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d11d      	bne.n	80049ea <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	212c      	movs	r1, #44	; 0x2c
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	4413      	add	r3, r2
 80049ba:	335c      	adds	r3, #92	; 0x5c
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d110      	bne.n	80049ea <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	212c      	movs	r1, #44	; 0x2c
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	3361      	adds	r3, #97	; 0x61
 80049d6:	2203      	movs	r2, #3
 80049d8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	4611      	mov	r1, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f004 fc90 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f6:	461a      	mov	r2, r3
 80049f8:	2310      	movs	r3, #16
 80049fa:	6093      	str	r3, [r2, #8]
}
 80049fc:	bf00      	nop
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d11a      	bne.n	8004a6a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	461a      	mov	r2, r3
 8004a42:	2304      	movs	r3, #4
 8004a44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	212c      	movs	r1, #44	; 0x2c
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	3361      	adds	r3, #97	; 0x61
 8004a54:	2206      	movs	r2, #6
 8004a56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	4611      	mov	r1, r2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f004 fc51 	bl	800930a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004a68:	e331      	b.n	80050ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d12e      	bne.n	8004ade <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2320      	movs	r3, #32
 8004a90:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	212c      	movs	r1, #44	; 0x2c
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	333d      	adds	r3, #61	; 0x3d
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	f040 8313 	bne.w	80050ce <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	212c      	movs	r1, #44	; 0x2c
 8004aae:	fb01 f303 	mul.w	r3, r1, r3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	333d      	adds	r3, #61	; 0x3d
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	212c      	movs	r1, #44	; 0x2c
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	3360      	adds	r3, #96	; 0x60
 8004ac8:	2202      	movs	r2, #2
 8004aca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f004 fc17 	bl	800930a <USB_HC_Halt>
}
 8004adc:	e2f7      	b.n	80050ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af4:	d112      	bne.n	8004b1c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b02:	461a      	mov	r2, r3
 8004b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b08:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	4611      	mov	r1, r2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f004 fbf8 	bl	800930a <USB_HC_Halt>
}
 8004b1a:	e2d8      	b.n	80050ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d140      	bne.n	8004bb4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	212c      	movs	r1, #44	; 0x2c
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	335c      	adds	r3, #92	; 0x5c
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d111      	bne.n	8004b7e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	212c      	movs	r1, #44	; 0x2c
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	4413      	add	r3, r2
 8004b66:	333d      	adds	r3, #61	; 0x3d
 8004b68:	2201      	movs	r2, #1
 8004b6a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2340      	movs	r3, #64	; 0x40
 8004b7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	212c      	movs	r1, #44	; 0x2c
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3361      	adds	r3, #97	; 0x61
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	4611      	mov	r1, r2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f004 fbac 	bl	800930a <USB_HC_Halt>
}
 8004bb2:	e28c      	b.n	80050ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d12c      	bne.n	8004c24 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	212c      	movs	r1, #44	; 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3361      	adds	r3, #97	; 0x61
 8004bd8:	2204      	movs	r2, #4
 8004bda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	333d      	adds	r3, #61	; 0x3d
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	212c      	movs	r1, #44	; 0x2c
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	335c      	adds	r3, #92	; 0x5c
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f004 fb7d 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2340      	movs	r3, #64	; 0x40
 8004c20:	6093      	str	r3, [r2, #8]
}
 8004c22:	e254      	b.n	80050ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d11a      	bne.n	8004c70 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c46:	461a      	mov	r2, r3
 8004c48:	2308      	movs	r3, #8
 8004c4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	212c      	movs	r1, #44	; 0x2c
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	3361      	adds	r3, #97	; 0x61
 8004c5a:	2205      	movs	r2, #5
 8004c5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	4611      	mov	r1, r2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f004 fb4e 	bl	800930a <USB_HC_Halt>
}
 8004c6e:	e22e      	b.n	80050ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d140      	bne.n	8004d08 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	212c      	movs	r1, #44	; 0x2c
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	335c      	adds	r3, #92	; 0x5c
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	212c      	movs	r1, #44	; 0x2c
 8004c9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3361      	adds	r3, #97	; 0x61
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	212c      	movs	r1, #44	; 0x2c
 8004cb0:	fb01 f303 	mul.w	r3, r1, r3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	333d      	adds	r3, #61	; 0x3d
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d112      	bne.n	8004ce4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	212c      	movs	r1, #44	; 0x2c
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	4413      	add	r3, r2
 8004cca:	333c      	adds	r3, #60	; 0x3c
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d108      	bne.n	8004ce4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	212c      	movs	r1, #44	; 0x2c
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	4413      	add	r3, r2
 8004cde:	333d      	adds	r3, #61	; 0x3d
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	4611      	mov	r1, r2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f004 fb0b 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d00:	461a      	mov	r2, r3
 8004d02:	2310      	movs	r3, #16
 8004d04:	6093      	str	r3, [r2, #8]
}
 8004d06:	e1e2      	b.n	80050ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b80      	cmp	r3, #128	; 0x80
 8004d1c:	d164      	bne.n	8004de8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d111      	bne.n	8004d4a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	212c      	movs	r1, #44	; 0x2c
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	3361      	adds	r3, #97	; 0x61
 8004d34:	2206      	movs	r2, #6
 8004d36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f004 fae1 	bl	800930a <USB_HC_Halt>
 8004d48:	e044      	b.n	8004dd4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	212c      	movs	r1, #44	; 0x2c
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	4413      	add	r3, r2
 8004d56:	335c      	adds	r3, #92	; 0x5c
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	202c      	movs	r0, #44	; 0x2c
 8004d62:	fb00 f303 	mul.w	r3, r0, r3
 8004d66:	440b      	add	r3, r1
 8004d68:	335c      	adds	r3, #92	; 0x5c
 8004d6a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	212c      	movs	r1, #44	; 0x2c
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	4413      	add	r3, r2
 8004d78:	335c      	adds	r3, #92	; 0x5c
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d920      	bls.n	8004dc2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	212c      	movs	r1, #44	; 0x2c
 8004d86:	fb01 f303 	mul.w	r3, r1, r3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	335c      	adds	r3, #92	; 0x5c
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	212c      	movs	r1, #44	; 0x2c
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3360      	adds	r3, #96	; 0x60
 8004da0:	2204      	movs	r2, #4
 8004da2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	b2d9      	uxtb	r1, r3
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	202c      	movs	r0, #44	; 0x2c
 8004dae:	fb00 f303 	mul.w	r3, r0, r3
 8004db2:	4413      	add	r3, r2
 8004db4:	3360      	adds	r3, #96	; 0x60
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f006 fd4a 	bl	800b854 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004dc0:	e008      	b.n	8004dd4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	212c      	movs	r1, #44	; 0x2c
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	3360      	adds	r3, #96	; 0x60
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de0:	461a      	mov	r2, r3
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	6093      	str	r3, [r2, #8]
}
 8004de6:	e172      	b.n	80050ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dfe:	d11b      	bne.n	8004e38 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	212c      	movs	r1, #44	; 0x2c
 8004e06:	fb01 f303 	mul.w	r3, r1, r3
 8004e0a:	4413      	add	r3, r2
 8004e0c:	3361      	adds	r3, #97	; 0x61
 8004e0e:	2208      	movs	r2, #8
 8004e10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f004 fa74 	bl	800930a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e34:	6093      	str	r3, [r2, #8]
}
 8004e36:	e14a      	b.n	80050ce <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	f040 813f 	bne.w	80050ce <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	212c      	movs	r1, #44	; 0x2c
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3361      	adds	r3, #97	; 0x61
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d17d      	bne.n	8004f60 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	212c      	movs	r1, #44	; 0x2c
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	4413      	add	r3, r2
 8004e70:	3360      	adds	r3, #96	; 0x60
 8004e72:	2201      	movs	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	212c      	movs	r1, #44	; 0x2c
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	4413      	add	r3, r2
 8004e82:	333f      	adds	r3, #63	; 0x3f
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d00a      	beq.n	8004ea0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	212c      	movs	r1, #44	; 0x2c
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	4413      	add	r3, r2
 8004e96:	333f      	adds	r3, #63	; 0x3f
 8004e98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	f040 8100 	bne.w	80050a0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d113      	bne.n	8004ed0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	212c      	movs	r1, #44	; 0x2c
 8004eae:	fb01 f303 	mul.w	r3, r1, r3
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3355      	adds	r3, #85	; 0x55
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	f083 0301 	eor.w	r3, r3, #1
 8004ebc:	b2d8      	uxtb	r0, r3
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	212c      	movs	r1, #44	; 0x2c
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	3355      	adds	r3, #85	; 0x55
 8004ecc:	4602      	mov	r2, r0
 8004ece:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	f040 80e3 	bne.w	80050a0 <HCD_HC_OUT_IRQHandler+0x69c>
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	334c      	adds	r3, #76	; 0x4c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80d8 	beq.w	80050a0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	212c      	movs	r1, #44	; 0x2c
 8004ef6:	fb01 f303 	mul.w	r3, r1, r3
 8004efa:	4413      	add	r3, r2
 8004efc:	334c      	adds	r3, #76	; 0x4c
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	202c      	movs	r0, #44	; 0x2c
 8004f06:	fb00 f202 	mul.w	r2, r0, r2
 8004f0a:	440a      	add	r2, r1
 8004f0c:	3240      	adds	r2, #64	; 0x40
 8004f0e:	8812      	ldrh	r2, [r2, #0]
 8004f10:	4413      	add	r3, r2
 8004f12:	3b01      	subs	r3, #1
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	202c      	movs	r0, #44	; 0x2c
 8004f1a:	fb00 f202 	mul.w	r2, r0, r2
 8004f1e:	440a      	add	r2, r1
 8004f20:	3240      	adds	r2, #64	; 0x40
 8004f22:	8812      	ldrh	r2, [r2, #0]
 8004f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80b5 	beq.w	80050a0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	212c      	movs	r1, #44	; 0x2c
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	4413      	add	r3, r2
 8004f42:	3355      	adds	r3, #85	; 0x55
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	f083 0301 	eor.w	r3, r3, #1
 8004f4a:	b2d8      	uxtb	r0, r3
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	212c      	movs	r1, #44	; 0x2c
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	3355      	adds	r3, #85	; 0x55
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	e09f      	b.n	80050a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	212c      	movs	r1, #44	; 0x2c
 8004f66:	fb01 f303 	mul.w	r3, r1, r3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3361      	adds	r3, #97	; 0x61
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d109      	bne.n	8004f88 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	212c      	movs	r1, #44	; 0x2c
 8004f7a:	fb01 f303 	mul.w	r3, r1, r3
 8004f7e:	4413      	add	r3, r2
 8004f80:	3360      	adds	r3, #96	; 0x60
 8004f82:	2202      	movs	r2, #2
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e08b      	b.n	80050a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	212c      	movs	r1, #44	; 0x2c
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	3361      	adds	r3, #97	; 0x61
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d109      	bne.n	8004fb0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	212c      	movs	r1, #44	; 0x2c
 8004fa2:	fb01 f303 	mul.w	r3, r1, r3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3360      	adds	r3, #96	; 0x60
 8004faa:	2202      	movs	r2, #2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e077      	b.n	80050a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	212c      	movs	r1, #44	; 0x2c
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	3361      	adds	r3, #97	; 0x61
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b05      	cmp	r3, #5
 8004fc2:	d109      	bne.n	8004fd8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	212c      	movs	r1, #44	; 0x2c
 8004fca:	fb01 f303 	mul.w	r3, r1, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	3360      	adds	r3, #96	; 0x60
 8004fd2:	2205      	movs	r2, #5
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	e063      	b.n	80050a0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	212c      	movs	r1, #44	; 0x2c
 8004fde:	fb01 f303 	mul.w	r3, r1, r3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3361      	adds	r3, #97	; 0x61
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b06      	cmp	r3, #6
 8004fea:	d009      	beq.n	8005000 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	212c      	movs	r1, #44	; 0x2c
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3361      	adds	r3, #97	; 0x61
 8004ffa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d14f      	bne.n	80050a0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	212c      	movs	r1, #44	; 0x2c
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	4413      	add	r3, r2
 800500c:	335c      	adds	r3, #92	; 0x5c
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	202c      	movs	r0, #44	; 0x2c
 8005018:	fb00 f303 	mul.w	r3, r0, r3
 800501c:	440b      	add	r3, r1
 800501e:	335c      	adds	r3, #92	; 0x5c
 8005020:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	212c      	movs	r1, #44	; 0x2c
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	4413      	add	r3, r2
 800502e:	335c      	adds	r3, #92	; 0x5c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d912      	bls.n	800505c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	212c      	movs	r1, #44	; 0x2c
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	4413      	add	r3, r2
 8005042:	335c      	adds	r3, #92	; 0x5c
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	212c      	movs	r1, #44	; 0x2c
 800504e:	fb01 f303 	mul.w	r3, r1, r3
 8005052:	4413      	add	r3, r2
 8005054:	3360      	adds	r3, #96	; 0x60
 8005056:	2204      	movs	r2, #4
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e021      	b.n	80050a0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	212c      	movs	r1, #44	; 0x2c
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	4413      	add	r3, r2
 8005068:	3360      	adds	r3, #96	; 0x60
 800506a:	2202      	movs	r2, #2
 800506c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005084:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800508c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	461a      	mov	r2, r3
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ac:	461a      	mov	r2, r3
 80050ae:	2302      	movs	r3, #2
 80050b0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	b2d9      	uxtb	r1, r3
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	202c      	movs	r0, #44	; 0x2c
 80050bc:	fb00 f303 	mul.w	r3, r0, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	3360      	adds	r3, #96	; 0x60
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f006 fbc3 	bl	800b854 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80050ce:	bf00      	nop
 80050d0:	3720      	adds	r7, #32
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b08a      	sub	sp, #40	; 0x28
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	0c5b      	lsrs	r3, r3, #17
 80050fc:	f003 030f 	and.w	r3, r3, #15
 8005100:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800510a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d004      	beq.n	800511c <HCD_RXQLVL_IRQHandler+0x46>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b05      	cmp	r3, #5
 8005116:	f000 80a9 	beq.w	800526c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800511a:	e0aa      	b.n	8005272 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 80a6 	beq.w	8005270 <HCD_RXQLVL_IRQHandler+0x19a>
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	212c      	movs	r1, #44	; 0x2c
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	3344      	adds	r3, #68	; 0x44
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 809b 	beq.w	8005270 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	212c      	movs	r1, #44	; 0x2c
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	4413      	add	r3, r2
 8005146:	3350      	adds	r3, #80	; 0x50
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	441a      	add	r2, r3
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	202c      	movs	r0, #44	; 0x2c
 8005154:	fb00 f303 	mul.w	r3, r0, r3
 8005158:	440b      	add	r3, r1
 800515a:	334c      	adds	r3, #76	; 0x4c
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d87a      	bhi.n	8005258 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	212c      	movs	r1, #44	; 0x2c
 800516c:	fb01 f303 	mul.w	r3, r1, r3
 8005170:	4413      	add	r3, r2
 8005172:	3344      	adds	r3, #68	; 0x44
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	b292      	uxth	r2, r2
 800517a:	4619      	mov	r1, r3
 800517c:	f003 fc1c 	bl	80089b8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	212c      	movs	r1, #44	; 0x2c
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	4413      	add	r3, r2
 800518c:	3344      	adds	r3, #68	; 0x44
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	441a      	add	r2, r3
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	202c      	movs	r0, #44	; 0x2c
 800519a:	fb00 f303 	mul.w	r3, r0, r3
 800519e:	440b      	add	r3, r1
 80051a0:	3344      	adds	r3, #68	; 0x44
 80051a2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	212c      	movs	r1, #44	; 0x2c
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	4413      	add	r3, r2
 80051b0:	3350      	adds	r3, #80	; 0x50
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	441a      	add	r2, r3
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	202c      	movs	r0, #44	; 0x2c
 80051be:	fb00 f303 	mul.w	r3, r0, r3
 80051c2:	440b      	add	r3, r1
 80051c4:	3350      	adds	r3, #80	; 0x50
 80051c6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	0cdb      	lsrs	r3, r3, #19
 80051d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051dc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	212c      	movs	r1, #44	; 0x2c
 80051e4:	fb01 f303 	mul.w	r3, r1, r3
 80051e8:	4413      	add	r3, r2
 80051ea:	3340      	adds	r3, #64	; 0x40
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d13c      	bne.n	8005270 <HCD_RXQLVL_IRQHandler+0x19a>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d039      	beq.n	8005270 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005212:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800521a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	4413      	add	r3, r2
 8005224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005228:	461a      	mov	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	212c      	movs	r1, #44	; 0x2c
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	4413      	add	r3, r2
 800523a:	3354      	adds	r3, #84	; 0x54
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	f083 0301 	eor.w	r3, r3, #1
 8005242:	b2d8      	uxtb	r0, r3
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	212c      	movs	r1, #44	; 0x2c
 800524a:	fb01 f303 	mul.w	r3, r1, r3
 800524e:	4413      	add	r3, r2
 8005250:	3354      	adds	r3, #84	; 0x54
 8005252:	4602      	mov	r2, r0
 8005254:	701a      	strb	r2, [r3, #0]
      break;
 8005256:	e00b      	b.n	8005270 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	212c      	movs	r1, #44	; 0x2c
 800525e:	fb01 f303 	mul.w	r3, r1, r3
 8005262:	4413      	add	r3, r2
 8005264:	3360      	adds	r3, #96	; 0x60
 8005266:	2204      	movs	r2, #4
 8005268:	701a      	strb	r2, [r3, #0]
      break;
 800526a:	e001      	b.n	8005270 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800526c:	bf00      	nop
 800526e:	e000      	b.n	8005272 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005270:	bf00      	nop
  }
}
 8005272:	bf00      	nop
 8005274:	3728      	adds	r7, #40	; 0x28
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b086      	sub	sp, #24
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052a6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d10b      	bne.n	80052ca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d102      	bne.n	80052c2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f006 faad 	bl	800b81c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f043 0302 	orr.w	r3, r3, #2
 80052c8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d132      	bne.n	800533a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f043 0308 	orr.w	r3, r3, #8
 80052da:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d126      	bne.n	8005334 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d113      	bne.n	8005316 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80052f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052f8:	d106      	bne.n	8005308 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2102      	movs	r1, #2
 8005300:	4618      	mov	r0, r3
 8005302:	f003 fcc7 	bl	8008c94 <USB_InitFSLSPClkSel>
 8005306:	e011      	b.n	800532c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2101      	movs	r1, #1
 800530e:	4618      	mov	r0, r3
 8005310:	f003 fcc0 	bl	8008c94 <USB_InitFSLSPClkSel>
 8005314:	e00a      	b.n	800532c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d106      	bne.n	800532c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005324:	461a      	mov	r2, r3
 8005326:	f64e 2360 	movw	r3, #60000	; 0xea60
 800532a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f006 fa9f 	bl	800b870 <HAL_HCD_PortEnabled_Callback>
 8005332:	e002      	b.n	800533a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f006 faa9 	bl	800b88c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b20      	cmp	r3, #32
 8005342:	d103      	bne.n	800534c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f043 0320 	orr.w	r3, r3, #32
 800534a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005352:	461a      	mov	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6013      	str	r3, [r2, #0]
}
 8005358:	bf00      	nop
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e12b      	b.n	80055ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fd fdaa 	bl	8002ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2224      	movs	r2, #36	; 0x24
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0201 	bic.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053c4:	f002 f872 	bl	80074ac <HAL_RCC_GetPCLK1Freq>
 80053c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	4a81      	ldr	r2, [pc, #516]	; (80055d4 <HAL_I2C_Init+0x274>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d807      	bhi.n	80053e4 <HAL_I2C_Init+0x84>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a80      	ldr	r2, [pc, #512]	; (80055d8 <HAL_I2C_Init+0x278>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	bf94      	ite	ls
 80053dc:	2301      	movls	r3, #1
 80053de:	2300      	movhi	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	e006      	b.n	80053f2 <HAL_I2C_Init+0x92>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4a7d      	ldr	r2, [pc, #500]	; (80055dc <HAL_I2C_Init+0x27c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	bf94      	ite	ls
 80053ec:	2301      	movls	r3, #1
 80053ee:	2300      	movhi	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e0e7      	b.n	80055ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4a78      	ldr	r2, [pc, #480]	; (80055e0 <HAL_I2C_Init+0x280>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	0c9b      	lsrs	r3, r3, #18
 8005404:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	4a6a      	ldr	r2, [pc, #424]	; (80055d4 <HAL_I2C_Init+0x274>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d802      	bhi.n	8005434 <HAL_I2C_Init+0xd4>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	3301      	adds	r3, #1
 8005432:	e009      	b.n	8005448 <HAL_I2C_Init+0xe8>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800543a:	fb02 f303 	mul.w	r3, r2, r3
 800543e:	4a69      	ldr	r2, [pc, #420]	; (80055e4 <HAL_I2C_Init+0x284>)
 8005440:	fba2 2303 	umull	r2, r3, r2, r3
 8005444:	099b      	lsrs	r3, r3, #6
 8005446:	3301      	adds	r3, #1
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6812      	ldr	r2, [r2, #0]
 800544c:	430b      	orrs	r3, r1
 800544e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800545a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	495c      	ldr	r1, [pc, #368]	; (80055d4 <HAL_I2C_Init+0x274>)
 8005464:	428b      	cmp	r3, r1
 8005466:	d819      	bhi.n	800549c <HAL_I2C_Init+0x13c>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	1e59      	subs	r1, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	fbb1 f3f3 	udiv	r3, r1, r3
 8005476:	1c59      	adds	r1, r3, #1
 8005478:	f640 73fc 	movw	r3, #4092	; 0xffc
 800547c:	400b      	ands	r3, r1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_I2C_Init+0x138>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1e59      	subs	r1, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005490:	3301      	adds	r3, #1
 8005492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005496:	e051      	b.n	800553c <HAL_I2C_Init+0x1dc>
 8005498:	2304      	movs	r3, #4
 800549a:	e04f      	b.n	800553c <HAL_I2C_Init+0x1dc>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d111      	bne.n	80054c8 <HAL_I2C_Init+0x168>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1e58      	subs	r0, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6859      	ldr	r1, [r3, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	440b      	add	r3, r1
 80054b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054b6:	3301      	adds	r3, #1
 80054b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	e012      	b.n	80054ee <HAL_I2C_Init+0x18e>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	1e58      	subs	r0, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6859      	ldr	r1, [r3, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	0099      	lsls	r1, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	fbb0 f3f3 	udiv	r3, r0, r3
 80054de:	3301      	adds	r3, #1
 80054e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_I2C_Init+0x196>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e022      	b.n	800553c <HAL_I2C_Init+0x1dc>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10e      	bne.n	800551c <HAL_I2C_Init+0x1bc>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1e58      	subs	r0, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6859      	ldr	r1, [r3, #4]
 8005506:	460b      	mov	r3, r1
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	440b      	add	r3, r1
 800550c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005510:	3301      	adds	r3, #1
 8005512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551a:	e00f      	b.n	800553c <HAL_I2C_Init+0x1dc>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	1e58      	subs	r0, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6859      	ldr	r1, [r3, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	0099      	lsls	r1, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005532:	3301      	adds	r3, #1
 8005534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	6809      	ldr	r1, [r1, #0]
 8005540:	4313      	orrs	r3, r2
 8005542:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69da      	ldr	r2, [r3, #28]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800556a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6911      	ldr	r1, [r2, #16]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	68d2      	ldr	r2, [r2, #12]
 8005576:	4311      	orrs	r1, r2
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	430b      	orrs	r3, r1
 800557e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	000186a0 	.word	0x000186a0
 80055d8:	001e847f 	.word	0x001e847f
 80055dc:	003d08ff 	.word	0x003d08ff
 80055e0:	431bde83 	.word	0x431bde83
 80055e4:	10624dd3 	.word	0x10624dd3

080055e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	461a      	mov	r2, r3
 80055f4:	460b      	mov	r3, r1
 80055f6:	817b      	strh	r3, [r7, #10]
 80055f8:	4613      	mov	r3, r2
 80055fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055fc:	f7fd ff34 	bl	8003468 <HAL_GetTick>
 8005600:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b20      	cmp	r3, #32
 800560c:	f040 80e0 	bne.w	80057d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	2319      	movs	r3, #25
 8005616:	2201      	movs	r2, #1
 8005618:	4970      	ldr	r1, [pc, #448]	; (80057dc <HAL_I2C_Master_Transmit+0x1f4>)
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 fc58 	bl	8005ed0 <I2C_WaitOnFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005626:	2302      	movs	r3, #2
 8005628:	e0d3      	b.n	80057d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_I2C_Master_Transmit+0x50>
 8005634:	2302      	movs	r3, #2
 8005636:	e0cc      	b.n	80057d2 <HAL_I2C_Master_Transmit+0x1ea>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b01      	cmp	r3, #1
 800564c:	d007      	beq.n	800565e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800566c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2221      	movs	r2, #33	; 0x21
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2210      	movs	r2, #16
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	893a      	ldrh	r2, [r7, #8]
 800568e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a50      	ldr	r2, [pc, #320]	; (80057e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800569e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056a0:	8979      	ldrh	r1, [r7, #10]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	6a3a      	ldr	r2, [r7, #32]
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 fac2 	bl	8005c30 <I2C_MasterRequestWrite>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e08d      	b.n	80057d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056cc:	e066      	b.n	800579c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	6a39      	ldr	r1, [r7, #32]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 fcd2 	bl	800607c <I2C_WaitOnTXEFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00d      	beq.n	80056fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d107      	bne.n	80056f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e06b      	b.n	80057d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	781a      	ldrb	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b04      	cmp	r3, #4
 8005736:	d11b      	bne.n	8005770 <HAL_I2C_Master_Transmit+0x188>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573c:	2b00      	cmp	r3, #0
 800573e:	d017      	beq.n	8005770 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	6a39      	ldr	r1, [r7, #32]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 fcc2 	bl	80060fe <I2C_WaitOnBTFFlagUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00d      	beq.n	800579c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	2b04      	cmp	r3, #4
 8005786:	d107      	bne.n	8005798 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005796:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e01a      	b.n	80057d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d194      	bne.n	80056ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	e000      	b.n	80057d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057d0:	2302      	movs	r3, #2
  }
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	00100002 	.word	0x00100002
 80057e0:	ffff0000 	.word	0xffff0000

080057e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08c      	sub	sp, #48	; 0x30
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	607a      	str	r2, [r7, #4]
 80057ee:	461a      	mov	r2, r3
 80057f0:	460b      	mov	r3, r1
 80057f2:	817b      	strh	r3, [r7, #10]
 80057f4:	4613      	mov	r3, r2
 80057f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057f8:	f7fd fe36 	bl	8003468 <HAL_GetTick>
 80057fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b20      	cmp	r3, #32
 8005808:	f040 820b 	bne.w	8005c22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	2319      	movs	r3, #25
 8005812:	2201      	movs	r2, #1
 8005814:	497c      	ldr	r1, [pc, #496]	; (8005a08 <HAL_I2C_Master_Receive+0x224>)
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fb5a 	bl	8005ed0 <I2C_WaitOnFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005822:	2302      	movs	r3, #2
 8005824:	e1fe      	b.n	8005c24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_I2C_Master_Receive+0x50>
 8005830:	2302      	movs	r3, #2
 8005832:	e1f7      	b.n	8005c24 <HAL_I2C_Master_Receive+0x440>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b01      	cmp	r3, #1
 8005848:	d007      	beq.n	800585a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0201 	orr.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005868:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2222      	movs	r2, #34	; 0x22
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2210      	movs	r2, #16
 8005876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	893a      	ldrh	r2, [r7, #8]
 800588a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4a5c      	ldr	r2, [pc, #368]	; (8005a0c <HAL_I2C_Master_Receive+0x228>)
 800589a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800589c:	8979      	ldrh	r1, [r7, #10]
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 fa46 	bl	8005d34 <I2C_MasterRequestRead>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e1b8      	b.n	8005c24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d113      	bne.n	80058e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ba:	2300      	movs	r3, #0
 80058bc:	623b      	str	r3, [r7, #32]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	623b      	str	r3, [r7, #32]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	623b      	str	r3, [r7, #32]
 80058ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e18c      	b.n	8005bfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d11b      	bne.n	8005922 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058fa:	2300      	movs	r3, #0
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	61fb      	str	r3, [r7, #28]
 800590e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	e16c      	b.n	8005bfc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005926:	2b02      	cmp	r3, #2
 8005928:	d11b      	bne.n	8005962 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005938:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005948:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800594a:	2300      	movs	r3, #0
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	e14c      	b.n	8005bfc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005970:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005988:	e138      	b.n	8005bfc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598e:	2b03      	cmp	r3, #3
 8005990:	f200 80f1 	bhi.w	8005b76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005998:	2b01      	cmp	r3, #1
 800599a:	d123      	bne.n	80059e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800599c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fbed 	bl	8006180 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e139      	b.n	8005c24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059e2:	e10b      	b.n	8005bfc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d14e      	bne.n	8005a8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	2200      	movs	r2, #0
 80059f4:	4906      	ldr	r1, [pc, #24]	; (8005a10 <HAL_I2C_Master_Receive+0x22c>)
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 fa6a 	bl	8005ed0 <I2C_WaitOnFlagUntilTimeout>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e10e      	b.n	8005c24 <HAL_I2C_Master_Receive+0x440>
 8005a06:	bf00      	nop
 8005a08:	00100002 	.word	0x00100002
 8005a0c:	ffff0000 	.word	0xffff0000
 8005a10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a88:	e0b8      	b.n	8005bfc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	2200      	movs	r2, #0
 8005a92:	4966      	ldr	r1, [pc, #408]	; (8005c2c <HAL_I2C_Master_Receive+0x448>)
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fa1b 	bl	8005ed0 <I2C_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0bf      	b.n	8005c24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	2200      	movs	r2, #0
 8005aee:	494f      	ldr	r1, [pc, #316]	; (8005c2c <HAL_I2C_Master_Receive+0x448>)
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f9ed 	bl	8005ed0 <I2C_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e091      	b.n	8005c24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b74:	e042      	b.n	8005bfc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 fb00 	bl	8006180 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e04c      	b.n	8005c24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d118      	bne.n	8005bfc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f47f aec2 	bne.w	800598a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e000      	b.n	8005c24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c22:	2302      	movs	r3, #2
  }
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3728      	adds	r7, #40	; 0x28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	00010004 	.word	0x00010004

08005c30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d006      	beq.n	8005c5a <I2C_MasterRequestWrite+0x2a>
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d003      	beq.n	8005c5a <I2C_MasterRequestWrite+0x2a>
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c58:	d108      	bne.n	8005c6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	e00b      	b.n	8005c84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c70:	2b12      	cmp	r3, #18
 8005c72:	d107      	bne.n	8005c84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f91d 	bl	8005ed0 <I2C_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00d      	beq.n	8005cb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005caa:	d103      	bne.n	8005cb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e035      	b.n	8005d24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cc0:	d108      	bne.n	8005cd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cc2:	897b      	ldrh	r3, [r7, #10]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cd0:	611a      	str	r2, [r3, #16]
 8005cd2:	e01b      	b.n	8005d0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cd4:	897b      	ldrh	r3, [r7, #10]
 8005cd6:	11db      	asrs	r3, r3, #7
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f003 0306 	and.w	r3, r3, #6
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f063 030f 	orn	r3, r3, #15
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	490e      	ldr	r1, [pc, #56]	; (8005d2c <I2C_MasterRequestWrite+0xfc>)
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f943 	bl	8005f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e010      	b.n	8005d24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d02:	897b      	ldrh	r3, [r7, #10]
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	4907      	ldr	r1, [pc, #28]	; (8005d30 <I2C_MasterRequestWrite+0x100>)
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f933 	bl	8005f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e000      	b.n	8005d24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	00010008 	.word	0x00010008
 8005d30:	00010002 	.word	0x00010002

08005d34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	460b      	mov	r3, r1
 8005d42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d006      	beq.n	8005d6e <I2C_MasterRequestRead+0x3a>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d003      	beq.n	8005d6e <I2C_MasterRequestRead+0x3a>
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d6c:	d108      	bne.n	8005d80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e00b      	b.n	8005d98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	2b11      	cmp	r3, #17
 8005d86:	d107      	bne.n	8005d98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f893 	bl	8005ed0 <I2C_WaitOnFlagUntilTimeout>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00d      	beq.n	8005dcc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dbe:	d103      	bne.n	8005dc8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e079      	b.n	8005ec0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dd4:	d108      	bne.n	8005de8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005dd6:	897b      	ldrh	r3, [r7, #10]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	611a      	str	r2, [r3, #16]
 8005de6:	e05f      	b.n	8005ea8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005de8:	897b      	ldrh	r3, [r7, #10]
 8005dea:	11db      	asrs	r3, r3, #7
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	f003 0306 	and.w	r3, r3, #6
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f063 030f 	orn	r3, r3, #15
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	4930      	ldr	r1, [pc, #192]	; (8005ec8 <I2C_MasterRequestRead+0x194>)
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 f8b9 	bl	8005f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e054      	b.n	8005ec0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e16:	897b      	ldrh	r3, [r7, #10]
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	4929      	ldr	r1, [pc, #164]	; (8005ecc <I2C_MasterRequestRead+0x198>)
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f8a9 	bl	8005f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e044      	b.n	8005ec0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e36:	2300      	movs	r3, #0
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f831 	bl	8005ed0 <I2C_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00d      	beq.n	8005e90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e82:	d103      	bne.n	8005e8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e017      	b.n	8005ec0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e90:	897b      	ldrh	r3, [r7, #10]
 8005e92:	11db      	asrs	r3, r3, #7
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	f003 0306 	and.w	r3, r3, #6
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f063 030e 	orn	r3, r3, #14
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	4907      	ldr	r1, [pc, #28]	; (8005ecc <I2C_MasterRequestRead+0x198>)
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 f865 	bl	8005f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	00010008 	.word	0x00010008
 8005ecc:	00010002 	.word	0x00010002

08005ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	4613      	mov	r3, r2
 8005ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ee0:	e025      	b.n	8005f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee8:	d021      	beq.n	8005f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eea:	f7fd fabd 	bl	8003468 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d302      	bcc.n	8005f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d116      	bne.n	8005f2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f043 0220 	orr.w	r2, r3, #32
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e023      	b.n	8005f76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	0c1b      	lsrs	r3, r3, #16
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d10d      	bne.n	8005f54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	43da      	mvns	r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4013      	ands	r3, r2
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bf0c      	ite	eq
 8005f4a:	2301      	moveq	r3, #1
 8005f4c:	2300      	movne	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	e00c      	b.n	8005f6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	43da      	mvns	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bf0c      	ite	eq
 8005f66:	2301      	moveq	r3, #1
 8005f68:	2300      	movne	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d0b6      	beq.n	8005ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	607a      	str	r2, [r7, #4]
 8005f8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f8c:	e051      	b.n	8006032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9c:	d123      	bne.n	8005fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f043 0204 	orr.w	r2, r3, #4
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e046      	b.n	8006074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d021      	beq.n	8006032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fee:	f7fd fa3b 	bl	8003468 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d302      	bcc.n	8006004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d116      	bne.n	8006032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	f043 0220 	orr.w	r2, r3, #32
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e020      	b.n	8006074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	0c1b      	lsrs	r3, r3, #16
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	d10c      	bne.n	8006056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	43da      	mvns	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4013      	ands	r3, r2
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	bf14      	ite	ne
 800604e:	2301      	movne	r3, #1
 8006050:	2300      	moveq	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	e00b      	b.n	800606e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	43da      	mvns	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4013      	ands	r3, r2
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf14      	ite	ne
 8006068:	2301      	movne	r3, #1
 800606a:	2300      	moveq	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d18d      	bne.n	8005f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006088:	e02d      	b.n	80060e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 f8ce 	bl	800622c <I2C_IsAcknowledgeFailed>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e02d      	b.n	80060f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d021      	beq.n	80060e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a2:	f7fd f9e1 	bl	8003468 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d302      	bcc.n	80060b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d116      	bne.n	80060e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	f043 0220 	orr.w	r2, r3, #32
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e007      	b.n	80060f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f0:	2b80      	cmp	r3, #128	; 0x80
 80060f2:	d1ca      	bne.n	800608a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800610a:	e02d      	b.n	8006168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f88d 	bl	800622c <I2C_IsAcknowledgeFailed>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e02d      	b.n	8006178 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d021      	beq.n	8006168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006124:	f7fd f9a0 	bl	8003468 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	429a      	cmp	r2, r3
 8006132:	d302      	bcc.n	800613a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d116      	bne.n	8006168 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	f043 0220 	orr.w	r2, r3, #32
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e007      	b.n	8006178 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b04      	cmp	r3, #4
 8006174:	d1ca      	bne.n	800610c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800618c:	e042      	b.n	8006214 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b10      	cmp	r3, #16
 800619a:	d119      	bne.n	80061d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0210 	mvn.w	r2, #16
 80061a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e029      	b.n	8006224 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d0:	f7fd f94a 	bl	8003468 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d302      	bcc.n	80061e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d116      	bne.n	8006214 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	f043 0220 	orr.w	r2, r3, #32
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e007      	b.n	8006224 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d1b5      	bne.n	800618e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800623e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006242:	d11b      	bne.n	800627c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800624c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006268:	f043 0204 	orr.w	r2, r3, #4
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e000      	b.n	800627e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e128      	b.n	80064f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a90      	ldr	r2, [pc, #576]	; (80064f8 <HAL_I2S_Init+0x26c>)
 80062b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7fc fe59 	bl	8002f70 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80062d4:	f023 030f 	bic.w	r3, r3, #15
 80062d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2202      	movs	r2, #2
 80062e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d060      	beq.n	80063ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80062f2:	2310      	movs	r3, #16
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	e001      	b.n	80062fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80062f8:	2320      	movs	r3, #32
 80062fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b20      	cmp	r3, #32
 8006302:	d802      	bhi.n	800630a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800630a:	2001      	movs	r0, #1
 800630c:	f001 f9e6 	bl	80076dc <HAL_RCCEx_GetPeriphCLKFreq>
 8006310:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800631a:	d125      	bne.n	8006368 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d010      	beq.n	8006346 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	fbb2 f2f3 	udiv	r2, r2, r3
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006340:	3305      	adds	r3, #5
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	e01f      	b.n	8006386 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	461a      	mov	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006362:	3305      	adds	r3, #5
 8006364:	613b      	str	r3, [r7, #16]
 8006366:	e00e      	b.n	8006386 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	461a      	mov	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006382:	3305      	adds	r3, #5
 8006384:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	4a5c      	ldr	r2, [pc, #368]	; (80064fc <HAL_I2S_Init+0x270>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	08db      	lsrs	r3, r3, #3
 8006390:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	e003      	b.n	80063b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80063ac:	2302      	movs	r3, #2
 80063ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d902      	bls.n	80063c0 <HAL_I2S_Init+0x134>
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	2bff      	cmp	r3, #255	; 0xff
 80063be:	d907      	bls.n	80063d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c4:	f043 0210 	orr.w	r2, r3, #16
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e08f      	b.n	80064f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	ea42 0103 	orr.w	r1, r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80063ee:	f023 030f 	bic.w	r3, r3, #15
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6851      	ldr	r1, [r2, #4]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	6892      	ldr	r2, [r2, #8]
 80063fa:	4311      	orrs	r1, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	68d2      	ldr	r2, [r2, #12]
 8006400:	4311      	orrs	r1, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6992      	ldr	r2, [r2, #24]
 8006406:	430a      	orrs	r2, r1
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006412:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d161      	bne.n	80064e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a38      	ldr	r2, [pc, #224]	; (8006500 <HAL_I2S_Init+0x274>)
 8006420:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a37      	ldr	r2, [pc, #220]	; (8006504 <HAL_I2S_Init+0x278>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d101      	bne.n	8006430 <HAL_I2S_Init+0x1a4>
 800642c:	4b36      	ldr	r3, [pc, #216]	; (8006508 <HAL_I2S_Init+0x27c>)
 800642e:	e001      	b.n	8006434 <HAL_I2S_Init+0x1a8>
 8006430:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	4932      	ldr	r1, [pc, #200]	; (8006504 <HAL_I2S_Init+0x278>)
 800643c:	428a      	cmp	r2, r1
 800643e:	d101      	bne.n	8006444 <HAL_I2S_Init+0x1b8>
 8006440:	4a31      	ldr	r2, [pc, #196]	; (8006508 <HAL_I2S_Init+0x27c>)
 8006442:	e001      	b.n	8006448 <HAL_I2S_Init+0x1bc>
 8006444:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006448:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800644c:	f023 030f 	bic.w	r3, r3, #15
 8006450:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a2b      	ldr	r2, [pc, #172]	; (8006504 <HAL_I2S_Init+0x278>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d101      	bne.n	8006460 <HAL_I2S_Init+0x1d4>
 800645c:	4b2a      	ldr	r3, [pc, #168]	; (8006508 <HAL_I2S_Init+0x27c>)
 800645e:	e001      	b.n	8006464 <HAL_I2S_Init+0x1d8>
 8006460:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006464:	2202      	movs	r2, #2
 8006466:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a25      	ldr	r2, [pc, #148]	; (8006504 <HAL_I2S_Init+0x278>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d101      	bne.n	8006476 <HAL_I2S_Init+0x1ea>
 8006472:	4b25      	ldr	r3, [pc, #148]	; (8006508 <HAL_I2S_Init+0x27c>)
 8006474:	e001      	b.n	800647a <HAL_I2S_Init+0x1ee>
 8006476:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006486:	d003      	beq.n	8006490 <HAL_I2S_Init+0x204>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d103      	bne.n	8006498 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	e001      	b.n	800649c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80064a6:	4313      	orrs	r3, r2
 80064a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80064b0:	4313      	orrs	r3, r2
 80064b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80064ba:	4313      	orrs	r3, r2
 80064bc:	b29a      	uxth	r2, r3
 80064be:	897b      	ldrh	r3, [r7, #10]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a0d      	ldr	r2, [pc, #52]	; (8006504 <HAL_I2S_Init+0x278>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d101      	bne.n	80064d8 <HAL_I2S_Init+0x24c>
 80064d4:	4b0c      	ldr	r3, [pc, #48]	; (8006508 <HAL_I2S_Init+0x27c>)
 80064d6:	e001      	b.n	80064dc <HAL_I2S_Init+0x250>
 80064d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064dc:	897a      	ldrh	r2, [r7, #10]
 80064de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3720      	adds	r7, #32
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	08006603 	.word	0x08006603
 80064fc:	cccccccd 	.word	0xcccccccd
 8006500:	08006719 	.word	0x08006719
 8006504:	40003800 	.word	0x40003800
 8006508:	40003400 	.word	0x40003400

0800650c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	881a      	ldrh	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	1c9a      	adds	r2, r3, #2
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10e      	bne.n	800659c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800658c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7ff ffb8 	bl	800650c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800659c:	bf00      	nop
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b6:	b292      	uxth	r2, r2
 80065b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	1c9a      	adds	r2, r3, #2
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10e      	bne.n	80065fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff ff93 	bl	8006520 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80065fa:	bf00      	nop
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b086      	sub	sp, #24
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b04      	cmp	r3, #4
 800661c:	d13a      	bne.n	8006694 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b01      	cmp	r3, #1
 8006626:	d109      	bne.n	800663c <I2S_IRQHandler+0x3a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	d102      	bne.n	800663c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7ff ffb4 	bl	80065a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d126      	bne.n	8006694 <I2S_IRQHandler+0x92>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b20      	cmp	r3, #32
 8006652:	d11f      	bne.n	8006694 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006662:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006664:	2300      	movs	r3, #0
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006686:	f043 0202 	orr.w	r2, r3, #2
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff ff50 	bl	8006534 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b03      	cmp	r3, #3
 800669e:	d136      	bne.n	800670e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d109      	bne.n	80066be <I2S_IRQHandler+0xbc>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b4:	2b80      	cmp	r3, #128	; 0x80
 80066b6:	d102      	bne.n	80066be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff ff45 	bl	8006548 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d122      	bne.n	800670e <I2S_IRQHandler+0x10c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	d11b      	bne.n	800670e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006700:	f043 0204 	orr.w	r2, r3, #4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7ff ff13 	bl	8006534 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800670e:	bf00      	nop
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a92      	ldr	r2, [pc, #584]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d101      	bne.n	8006736 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006732:	4b92      	ldr	r3, [pc, #584]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006734:	e001      	b.n	800673a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006736:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a8b      	ldr	r2, [pc, #556]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d101      	bne.n	8006754 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006750:	4b8a      	ldr	r3, [pc, #552]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006752:	e001      	b.n	8006758 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006764:	d004      	beq.n	8006770 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 8099 	bne.w	80068a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b02      	cmp	r3, #2
 8006778:	d107      	bne.n	800678a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f925 	bl	80069d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b01      	cmp	r3, #1
 8006792:	d107      	bne.n	80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f9c8 	bl	8006b34 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067aa:	2b40      	cmp	r3, #64	; 0x40
 80067ac:	d13a      	bne.n	8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d035      	beq.n	8006824 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a6e      	ldr	r2, [pc, #440]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d101      	bne.n	80067c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80067c2:	4b6e      	ldr	r3, [pc, #440]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067c4:	e001      	b.n	80067ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80067c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4969      	ldr	r1, [pc, #420]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067d2:	428b      	cmp	r3, r1
 80067d4:	d101      	bne.n	80067da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80067d6:	4b69      	ldr	r3, [pc, #420]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067d8:	e001      	b.n	80067de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80067da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	f043 0202 	orr.w	r2, r3, #2
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff fe88 	bl	8006534 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b08      	cmp	r3, #8
 800682c:	f040 80c3 	bne.w	80069b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80bd 	beq.w	80069b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800684a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a49      	ldr	r2, [pc, #292]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d101      	bne.n	800685a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006856:	4b49      	ldr	r3, [pc, #292]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006858:	e001      	b.n	800685e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800685a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4944      	ldr	r1, [pc, #272]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006866:	428b      	cmp	r3, r1
 8006868:	d101      	bne.n	800686e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800686a:	4b44      	ldr	r3, [pc, #272]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800686c:	e001      	b.n	8006872 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800686e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006872:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006876:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006878:	2300      	movs	r3, #0
 800687a:	60bb      	str	r3, [r7, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	60bb      	str	r3, [r7, #8]
 8006884:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006892:	f043 0204 	orr.w	r2, r3, #4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff fe4a 	bl	8006534 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80068a0:	e089      	b.n	80069b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d107      	bne.n	80068bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f8be 	bl	8006a38 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d107      	bne.n	80068d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f8fd 	bl	8006ad0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068dc:	2b40      	cmp	r3, #64	; 0x40
 80068de:	d12f      	bne.n	8006940 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d02a      	beq.n	8006940 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1e      	ldr	r2, [pc, #120]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d101      	bne.n	8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006904:	4b1d      	ldr	r3, [pc, #116]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006906:	e001      	b.n	800690c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006908:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4919      	ldr	r1, [pc, #100]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006914:	428b      	cmp	r3, r1
 8006916:	d101      	bne.n	800691c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006918:	4b18      	ldr	r3, [pc, #96]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800691a:	e001      	b.n	8006920 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800691c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006920:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006924:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006932:	f043 0202 	orr.w	r2, r3, #2
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7ff fdfa 	bl	8006534 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b08      	cmp	r3, #8
 8006948:	d136      	bne.n	80069b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	d031      	beq.n	80069b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a07      	ldr	r2, [pc, #28]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d101      	bne.n	8006962 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800695e:	4b07      	ldr	r3, [pc, #28]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006960:	e001      	b.n	8006966 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4902      	ldr	r1, [pc, #8]	; (8006978 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800696e:	428b      	cmp	r3, r1
 8006970:	d106      	bne.n	8006980 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006972:	4b02      	ldr	r3, [pc, #8]	; (800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006974:	e006      	b.n	8006984 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006976:	bf00      	nop
 8006978:	40003800 	.word	0x40003800
 800697c:	40003400 	.word	0x40003400
 8006980:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006984:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006988:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006998:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a6:	f043 0204 	orr.w	r2, r3, #4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff fdc0 	bl	8006534 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069b4:	e000      	b.n	80069b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069b6:	bf00      	nop
}
 80069b8:	bf00      	nop
 80069ba:	3720      	adds	r7, #32
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	1c99      	adds	r1, r3, #2
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6251      	str	r1, [r2, #36]	; 0x24
 80069e6:	881a      	ldrh	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d113      	bne.n	8006a2e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff ffc9 	bl	80069c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a44:	1c99      	adds	r1, r3, #2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6251      	str	r1, [r2, #36]	; 0x24
 8006a4a:	8819      	ldrh	r1, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1d      	ldr	r2, [pc, #116]	; (8006ac8 <I2SEx_TxISR_I2SExt+0x90>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d101      	bne.n	8006a5a <I2SEx_TxISR_I2SExt+0x22>
 8006a56:	4b1d      	ldr	r3, [pc, #116]	; (8006acc <I2SEx_TxISR_I2SExt+0x94>)
 8006a58:	e001      	b.n	8006a5e <I2SEx_TxISR_I2SExt+0x26>
 8006a5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a5e:	460a      	mov	r2, r1
 8006a60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d121      	bne.n	8006abe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a12      	ldr	r2, [pc, #72]	; (8006ac8 <I2SEx_TxISR_I2SExt+0x90>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d101      	bne.n	8006a88 <I2SEx_TxISR_I2SExt+0x50>
 8006a84:	4b11      	ldr	r3, [pc, #68]	; (8006acc <I2SEx_TxISR_I2SExt+0x94>)
 8006a86:	e001      	b.n	8006a8c <I2SEx_TxISR_I2SExt+0x54>
 8006a88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	490d      	ldr	r1, [pc, #52]	; (8006ac8 <I2SEx_TxISR_I2SExt+0x90>)
 8006a94:	428b      	cmp	r3, r1
 8006a96:	d101      	bne.n	8006a9c <I2SEx_TxISR_I2SExt+0x64>
 8006a98:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <I2SEx_TxISR_I2SExt+0x94>)
 8006a9a:	e001      	b.n	8006aa0 <I2SEx_TxISR_I2SExt+0x68>
 8006a9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006aa4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d106      	bne.n	8006abe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff ff81 	bl	80069c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40003800 	.word	0x40003800
 8006acc:	40003400 	.word	0x40003400

08006ad0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68d8      	ldr	r0, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	1c99      	adds	r1, r3, #2
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006ae8:	b282      	uxth	r2, r0
 8006aea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d113      	bne.n	8006b2c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b12:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff ff4a 	bl	80069c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a20      	ldr	r2, [pc, #128]	; (8006bc4 <I2SEx_RxISR_I2SExt+0x90>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d101      	bne.n	8006b4a <I2SEx_RxISR_I2SExt+0x16>
 8006b46:	4b20      	ldr	r3, [pc, #128]	; (8006bc8 <I2SEx_RxISR_I2SExt+0x94>)
 8006b48:	e001      	b.n	8006b4e <I2SEx_RxISR_I2SExt+0x1a>
 8006b4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b4e:	68d8      	ldr	r0, [r3, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	1c99      	adds	r1, r3, #2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006b5a:	b282      	uxth	r2, r0
 8006b5c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d121      	bne.n	8006bba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <I2SEx_RxISR_I2SExt+0x90>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <I2SEx_RxISR_I2SExt+0x50>
 8006b80:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <I2SEx_RxISR_I2SExt+0x94>)
 8006b82:	e001      	b.n	8006b88 <I2SEx_RxISR_I2SExt+0x54>
 8006b84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	490d      	ldr	r1, [pc, #52]	; (8006bc4 <I2SEx_RxISR_I2SExt+0x90>)
 8006b90:	428b      	cmp	r3, r1
 8006b92:	d101      	bne.n	8006b98 <I2SEx_RxISR_I2SExt+0x64>
 8006b94:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <I2SEx_RxISR_I2SExt+0x94>)
 8006b96:	e001      	b.n	8006b9c <I2SEx_RxISR_I2SExt+0x68>
 8006b98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ba0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ff03 	bl	80069c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40003800 	.word	0x40003800
 8006bc8:	40003400 	.word	0x40003400

08006bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e267      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d075      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bea:	4b88      	ldr	r3, [pc, #544]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 030c 	and.w	r3, r3, #12
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d00c      	beq.n	8006c10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bf6:	4b85      	ldr	r3, [pc, #532]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d112      	bne.n	8006c28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c02:	4b82      	ldr	r3, [pc, #520]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c0e:	d10b      	bne.n	8006c28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c10:	4b7e      	ldr	r3, [pc, #504]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d05b      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x108>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d157      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e242      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c30:	d106      	bne.n	8006c40 <HAL_RCC_OscConfig+0x74>
 8006c32:	4b76      	ldr	r3, [pc, #472]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a75      	ldr	r2, [pc, #468]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	e01d      	b.n	8006c7c <HAL_RCC_OscConfig+0xb0>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCC_OscConfig+0x98>
 8006c4a:	4b70      	ldr	r3, [pc, #448]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a6f      	ldr	r2, [pc, #444]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	4b6d      	ldr	r3, [pc, #436]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a6c      	ldr	r2, [pc, #432]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	e00b      	b.n	8006c7c <HAL_RCC_OscConfig+0xb0>
 8006c64:	4b69      	ldr	r3, [pc, #420]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a68      	ldr	r2, [pc, #416]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	4b66      	ldr	r3, [pc, #408]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a65      	ldr	r2, [pc, #404]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d013      	beq.n	8006cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c84:	f7fc fbf0 	bl	8003468 <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c8c:	f7fc fbec 	bl	8003468 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b64      	cmp	r3, #100	; 0x64
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e207      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c9e:	4b5b      	ldr	r3, [pc, #364]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0xc0>
 8006caa:	e014      	b.n	8006cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cac:	f7fc fbdc 	bl	8003468 <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cb4:	f7fc fbd8 	bl	8003468 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b64      	cmp	r3, #100	; 0x64
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e1f3      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cc6:	4b51      	ldr	r3, [pc, #324]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f0      	bne.n	8006cb4 <HAL_RCC_OscConfig+0xe8>
 8006cd2:	e000      	b.n	8006cd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d063      	beq.n	8006daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ce2:	4b4a      	ldr	r3, [pc, #296]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 030c 	and.w	r3, r3, #12
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00b      	beq.n	8006d06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cee:	4b47      	ldr	r3, [pc, #284]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d11c      	bne.n	8006d34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cfa:	4b44      	ldr	r3, [pc, #272]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d116      	bne.n	8006d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d06:	4b41      	ldr	r3, [pc, #260]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <HAL_RCC_OscConfig+0x152>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d001      	beq.n	8006d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e1c7      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d1e:	4b3b      	ldr	r3, [pc, #236]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	4937      	ldr	r1, [pc, #220]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d32:	e03a      	b.n	8006daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d020      	beq.n	8006d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d3c:	4b34      	ldr	r3, [pc, #208]	; (8006e10 <HAL_RCC_OscConfig+0x244>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d42:	f7fc fb91 	bl	8003468 <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d48:	e008      	b.n	8006d5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d4a:	f7fc fb8d 	bl	8003468 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d901      	bls.n	8006d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e1a8      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5c:	4b2b      	ldr	r3, [pc, #172]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0f0      	beq.n	8006d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d68:	4b28      	ldr	r3, [pc, #160]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	4925      	ldr	r1, [pc, #148]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	600b      	str	r3, [r1, #0]
 8006d7c:	e015      	b.n	8006daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d7e:	4b24      	ldr	r3, [pc, #144]	; (8006e10 <HAL_RCC_OscConfig+0x244>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d84:	f7fc fb70 	bl	8003468 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d8c:	f7fc fb6c 	bl	8003468 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e187      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d9e:	4b1b      	ldr	r3, [pc, #108]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1f0      	bne.n	8006d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0308 	and.w	r3, r3, #8
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d036      	beq.n	8006e24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dbe:	4b15      	ldr	r3, [pc, #84]	; (8006e14 <HAL_RCC_OscConfig+0x248>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc4:	f7fc fb50 	bl	8003468 <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dcc:	f7fc fb4c 	bl	8003468 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e167      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dde:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <HAL_RCC_OscConfig+0x240>)
 8006de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCC_OscConfig+0x200>
 8006dea:	e01b      	b.n	8006e24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <HAL_RCC_OscConfig+0x248>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006df2:	f7fc fb39 	bl	8003468 <HAL_GetTick>
 8006df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006df8:	e00e      	b.n	8006e18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dfa:	f7fc fb35 	bl	8003468 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d907      	bls.n	8006e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e150      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
 8006e0c:	40023800 	.word	0x40023800
 8006e10:	42470000 	.word	0x42470000
 8006e14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e18:	4b88      	ldr	r3, [pc, #544]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1ea      	bne.n	8006dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8097 	beq.w	8006f60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e32:	2300      	movs	r3, #0
 8006e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e36:	4b81      	ldr	r3, [pc, #516]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10f      	bne.n	8006e62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	4b7d      	ldr	r3, [pc, #500]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	4a7c      	ldr	r2, [pc, #496]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e50:	6413      	str	r3, [r2, #64]	; 0x40
 8006e52:	4b7a      	ldr	r3, [pc, #488]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	60bb      	str	r3, [r7, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e62:	4b77      	ldr	r3, [pc, #476]	; (8007040 <HAL_RCC_OscConfig+0x474>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d118      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e6e:	4b74      	ldr	r3, [pc, #464]	; (8007040 <HAL_RCC_OscConfig+0x474>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a73      	ldr	r2, [pc, #460]	; (8007040 <HAL_RCC_OscConfig+0x474>)
 8006e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e7a:	f7fc faf5 	bl	8003468 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e82:	f7fc faf1 	bl	8003468 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e10c      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e94:	4b6a      	ldr	r3, [pc, #424]	; (8007040 <HAL_RCC_OscConfig+0x474>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0f0      	beq.n	8006e82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d106      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x2ea>
 8006ea8:	4b64      	ldr	r3, [pc, #400]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eac:	4a63      	ldr	r2, [pc, #396]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8006eb4:	e01c      	b.n	8006ef0 <HAL_RCC_OscConfig+0x324>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b05      	cmp	r3, #5
 8006ebc:	d10c      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x30c>
 8006ebe:	4b5f      	ldr	r3, [pc, #380]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec2:	4a5e      	ldr	r2, [pc, #376]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ec4:	f043 0304 	orr.w	r3, r3, #4
 8006ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8006eca:	4b5c      	ldr	r3, [pc, #368]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ece:	4a5b      	ldr	r2, [pc, #364]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ed0:	f043 0301 	orr.w	r3, r3, #1
 8006ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ed6:	e00b      	b.n	8006ef0 <HAL_RCC_OscConfig+0x324>
 8006ed8:	4b58      	ldr	r3, [pc, #352]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006edc:	4a57      	ldr	r2, [pc, #348]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ede:	f023 0301 	bic.w	r3, r3, #1
 8006ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee4:	4b55      	ldr	r3, [pc, #340]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee8:	4a54      	ldr	r2, [pc, #336]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006eea:	f023 0304 	bic.w	r3, r3, #4
 8006eee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d015      	beq.n	8006f24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef8:	f7fc fab6 	bl	8003468 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006efe:	e00a      	b.n	8006f16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f00:	f7fc fab2 	bl	8003468 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e0cb      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f16:	4b49      	ldr	r3, [pc, #292]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0ee      	beq.n	8006f00 <HAL_RCC_OscConfig+0x334>
 8006f22:	e014      	b.n	8006f4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f24:	f7fc faa0 	bl	8003468 <HAL_GetTick>
 8006f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f2a:	e00a      	b.n	8006f42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f2c:	f7fc fa9c 	bl	8003468 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e0b5      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f42:	4b3e      	ldr	r3, [pc, #248]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1ee      	bne.n	8006f2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d105      	bne.n	8006f60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f54:	4b39      	ldr	r3, [pc, #228]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	4a38      	ldr	r2, [pc, #224]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80a1 	beq.w	80070ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f6a:	4b34      	ldr	r3, [pc, #208]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 030c 	and.w	r3, r3, #12
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d05c      	beq.n	8007030 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d141      	bne.n	8007002 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f7e:	4b31      	ldr	r3, [pc, #196]	; (8007044 <HAL_RCC_OscConfig+0x478>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f84:	f7fc fa70 	bl	8003468 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f8c:	f7fc fa6c 	bl	8003468 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e087      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f9e:	4b27      	ldr	r3, [pc, #156]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69da      	ldr	r2, [r3, #28]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	019b      	lsls	r3, r3, #6
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	085b      	lsrs	r3, r3, #1
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	041b      	lsls	r3, r3, #16
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	061b      	lsls	r3, r3, #24
 8006fce:	491b      	ldr	r1, [pc, #108]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fd4:	4b1b      	ldr	r3, [pc, #108]	; (8007044 <HAL_RCC_OscConfig+0x478>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fda:	f7fc fa45 	bl	8003468 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fe2:	f7fc fa41 	bl	8003468 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e05c      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ff4:	4b11      	ldr	r3, [pc, #68]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x416>
 8007000:	e054      	b.n	80070ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007002:	4b10      	ldr	r3, [pc, #64]	; (8007044 <HAL_RCC_OscConfig+0x478>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007008:	f7fc fa2e 	bl	8003468 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007010:	f7fc fa2a 	bl	8003468 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e045      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007022:	4b06      	ldr	r3, [pc, #24]	; (800703c <HAL_RCC_OscConfig+0x470>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1f0      	bne.n	8007010 <HAL_RCC_OscConfig+0x444>
 800702e:	e03d      	b.n	80070ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d107      	bne.n	8007048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e038      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
 800703c:	40023800 	.word	0x40023800
 8007040:	40007000 	.word	0x40007000
 8007044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007048:	4b1b      	ldr	r3, [pc, #108]	; (80070b8 <HAL_RCC_OscConfig+0x4ec>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d028      	beq.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007060:	429a      	cmp	r2, r3
 8007062:	d121      	bne.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800706e:	429a      	cmp	r2, r3
 8007070:	d11a      	bne.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007078:	4013      	ands	r3, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800707e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007080:	4293      	cmp	r3, r2
 8007082:	d111      	bne.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708e:	085b      	lsrs	r3, r3, #1
 8007090:	3b01      	subs	r3, #1
 8007092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007094:	429a      	cmp	r2, r3
 8007096:	d107      	bne.n	80070a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d001      	beq.n	80070ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e000      	b.n	80070ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40023800 	.word	0x40023800

080070bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0cc      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070d0:	4b68      	ldr	r3, [pc, #416]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d90c      	bls.n	80070f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070de:	4b65      	ldr	r3, [pc, #404]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e6:	4b63      	ldr	r3, [pc, #396]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d001      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e0b8      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d020      	beq.n	8007146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007110:	4b59      	ldr	r3, [pc, #356]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	4a58      	ldr	r2, [pc, #352]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800711a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007128:	4b53      	ldr	r3, [pc, #332]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	4a52      	ldr	r2, [pc, #328]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800712e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007134:	4b50      	ldr	r3, [pc, #320]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	494d      	ldr	r1, [pc, #308]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	4313      	orrs	r3, r2
 8007144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0301 	and.w	r3, r3, #1
 800714e:	2b00      	cmp	r3, #0
 8007150:	d044      	beq.n	80071dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d107      	bne.n	800716a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715a:	4b47      	ldr	r3, [pc, #284]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d119      	bne.n	800719a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e07f      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d003      	beq.n	800717a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007176:	2b03      	cmp	r3, #3
 8007178:	d107      	bne.n	800718a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800717a:	4b3f      	ldr	r3, [pc, #252]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e06f      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800718a:	4b3b      	ldr	r3, [pc, #236]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e067      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800719a:	4b37      	ldr	r3, [pc, #220]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f023 0203 	bic.w	r2, r3, #3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	4934      	ldr	r1, [pc, #208]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071ac:	f7fc f95c 	bl	8003468 <HAL_GetTick>
 80071b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071b2:	e00a      	b.n	80071ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071b4:	f7fc f958 	bl	8003468 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e04f      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ca:	4b2b      	ldr	r3, [pc, #172]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 020c 	and.w	r2, r3, #12
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	429a      	cmp	r2, r3
 80071da:	d1eb      	bne.n	80071b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071dc:	4b25      	ldr	r3, [pc, #148]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d20c      	bcs.n	8007204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ea:	4b22      	ldr	r3, [pc, #136]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071f2:	4b20      	ldr	r3, [pc, #128]	; (8007274 <HAL_RCC_ClockConfig+0x1b8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d001      	beq.n	8007204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e032      	b.n	800726a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0304 	and.w	r3, r3, #4
 800720c:	2b00      	cmp	r3, #0
 800720e:	d008      	beq.n	8007222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007210:	4b19      	ldr	r3, [pc, #100]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	4916      	ldr	r1, [pc, #88]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800721e:	4313      	orrs	r3, r2
 8007220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800722e:	4b12      	ldr	r3, [pc, #72]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	490e      	ldr	r1, [pc, #56]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800723e:	4313      	orrs	r3, r2
 8007240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007242:	f000 f821 	bl	8007288 <HAL_RCC_GetSysClockFreq>
 8007246:	4602      	mov	r2, r0
 8007248:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	091b      	lsrs	r3, r3, #4
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	490a      	ldr	r1, [pc, #40]	; (800727c <HAL_RCC_ClockConfig+0x1c0>)
 8007254:	5ccb      	ldrb	r3, [r1, r3]
 8007256:	fa22 f303 	lsr.w	r3, r2, r3
 800725a:	4a09      	ldr	r2, [pc, #36]	; (8007280 <HAL_RCC_ClockConfig+0x1c4>)
 800725c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800725e:	4b09      	ldr	r3, [pc, #36]	; (8007284 <HAL_RCC_ClockConfig+0x1c8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	f7fc f8bc 	bl	80033e0 <HAL_InitTick>

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40023c00 	.word	0x40023c00
 8007278:	40023800 	.word	0x40023800
 800727c:	0800bfac 	.word	0x0800bfac
 8007280:	20000000 	.word	0x20000000
 8007284:	20000004 	.word	0x20000004

08007288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800728c:	b094      	sub	sp, #80	; 0x50
 800728e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	647b      	str	r3, [r7, #68]	; 0x44
 8007294:	2300      	movs	r3, #0
 8007296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007298:	2300      	movs	r3, #0
 800729a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072a0:	4b79      	ldr	r3, [pc, #484]	; (8007488 <HAL_RCC_GetSysClockFreq+0x200>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f003 030c 	and.w	r3, r3, #12
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d00d      	beq.n	80072c8 <HAL_RCC_GetSysClockFreq+0x40>
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	f200 80e1 	bhi.w	8007474 <HAL_RCC_GetSysClockFreq+0x1ec>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <HAL_RCC_GetSysClockFreq+0x34>
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d003      	beq.n	80072c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80072ba:	e0db      	b.n	8007474 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072bc:	4b73      	ldr	r3, [pc, #460]	; (800748c <HAL_RCC_GetSysClockFreq+0x204>)
 80072be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80072c0:	e0db      	b.n	800747a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072c2:	4b73      	ldr	r3, [pc, #460]	; (8007490 <HAL_RCC_GetSysClockFreq+0x208>)
 80072c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072c6:	e0d8      	b.n	800747a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072c8:	4b6f      	ldr	r3, [pc, #444]	; (8007488 <HAL_RCC_GetSysClockFreq+0x200>)
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072d2:	4b6d      	ldr	r3, [pc, #436]	; (8007488 <HAL_RCC_GetSysClockFreq+0x200>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d063      	beq.n	80073a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072de:	4b6a      	ldr	r3, [pc, #424]	; (8007488 <HAL_RCC_GetSysClockFreq+0x200>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	099b      	lsrs	r3, r3, #6
 80072e4:	2200      	movs	r2, #0
 80072e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80072e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80072ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f0:	633b      	str	r3, [r7, #48]	; 0x30
 80072f2:	2300      	movs	r3, #0
 80072f4:	637b      	str	r3, [r7, #52]	; 0x34
 80072f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80072fa:	4622      	mov	r2, r4
 80072fc:	462b      	mov	r3, r5
 80072fe:	f04f 0000 	mov.w	r0, #0
 8007302:	f04f 0100 	mov.w	r1, #0
 8007306:	0159      	lsls	r1, r3, #5
 8007308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800730c:	0150      	lsls	r0, r2, #5
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4621      	mov	r1, r4
 8007314:	1a51      	subs	r1, r2, r1
 8007316:	6139      	str	r1, [r7, #16]
 8007318:	4629      	mov	r1, r5
 800731a:	eb63 0301 	sbc.w	r3, r3, r1
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	f04f 0200 	mov.w	r2, #0
 8007324:	f04f 0300 	mov.w	r3, #0
 8007328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800732c:	4659      	mov	r1, fp
 800732e:	018b      	lsls	r3, r1, #6
 8007330:	4651      	mov	r1, sl
 8007332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007336:	4651      	mov	r1, sl
 8007338:	018a      	lsls	r2, r1, #6
 800733a:	4651      	mov	r1, sl
 800733c:	ebb2 0801 	subs.w	r8, r2, r1
 8007340:	4659      	mov	r1, fp
 8007342:	eb63 0901 	sbc.w	r9, r3, r1
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800735a:	4690      	mov	r8, r2
 800735c:	4699      	mov	r9, r3
 800735e:	4623      	mov	r3, r4
 8007360:	eb18 0303 	adds.w	r3, r8, r3
 8007364:	60bb      	str	r3, [r7, #8]
 8007366:	462b      	mov	r3, r5
 8007368:	eb49 0303 	adc.w	r3, r9, r3
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	f04f 0200 	mov.w	r2, #0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800737a:	4629      	mov	r1, r5
 800737c:	024b      	lsls	r3, r1, #9
 800737e:	4621      	mov	r1, r4
 8007380:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007384:	4621      	mov	r1, r4
 8007386:	024a      	lsls	r2, r1, #9
 8007388:	4610      	mov	r0, r2
 800738a:	4619      	mov	r1, r3
 800738c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800738e:	2200      	movs	r2, #0
 8007390:	62bb      	str	r3, [r7, #40]	; 0x28
 8007392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007398:	f7f9 fbc4 	bl	8000b24 <__aeabi_uldivmod>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4613      	mov	r3, r2
 80073a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073a4:	e058      	b.n	8007458 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073a6:	4b38      	ldr	r3, [pc, #224]	; (8007488 <HAL_RCC_GetSysClockFreq+0x200>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	099b      	lsrs	r3, r3, #6
 80073ac:	2200      	movs	r2, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	4611      	mov	r1, r2
 80073b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80073b6:	623b      	str	r3, [r7, #32]
 80073b8:	2300      	movs	r3, #0
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
 80073bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80073c0:	4642      	mov	r2, r8
 80073c2:	464b      	mov	r3, r9
 80073c4:	f04f 0000 	mov.w	r0, #0
 80073c8:	f04f 0100 	mov.w	r1, #0
 80073cc:	0159      	lsls	r1, r3, #5
 80073ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073d2:	0150      	lsls	r0, r2, #5
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4641      	mov	r1, r8
 80073da:	ebb2 0a01 	subs.w	sl, r2, r1
 80073de:	4649      	mov	r1, r9
 80073e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80073f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80073f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80073f8:	ebb2 040a 	subs.w	r4, r2, sl
 80073fc:	eb63 050b 	sbc.w	r5, r3, fp
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	00eb      	lsls	r3, r5, #3
 800740a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800740e:	00e2      	lsls	r2, r4, #3
 8007410:	4614      	mov	r4, r2
 8007412:	461d      	mov	r5, r3
 8007414:	4643      	mov	r3, r8
 8007416:	18e3      	adds	r3, r4, r3
 8007418:	603b      	str	r3, [r7, #0]
 800741a:	464b      	mov	r3, r9
 800741c:	eb45 0303 	adc.w	r3, r5, r3
 8007420:	607b      	str	r3, [r7, #4]
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800742e:	4629      	mov	r1, r5
 8007430:	028b      	lsls	r3, r1, #10
 8007432:	4621      	mov	r1, r4
 8007434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007438:	4621      	mov	r1, r4
 800743a:	028a      	lsls	r2, r1, #10
 800743c:	4610      	mov	r0, r2
 800743e:	4619      	mov	r1, r3
 8007440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007442:	2200      	movs	r2, #0
 8007444:	61bb      	str	r3, [r7, #24]
 8007446:	61fa      	str	r2, [r7, #28]
 8007448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800744c:	f7f9 fb6a 	bl	8000b24 <__aeabi_uldivmod>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4613      	mov	r3, r2
 8007456:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007458:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <HAL_RCC_GetSysClockFreq+0x200>)
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	0c1b      	lsrs	r3, r3, #16
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	3301      	adds	r3, #1
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800746a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007472:	e002      	b.n	800747a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007474:	4b05      	ldr	r3, [pc, #20]	; (800748c <HAL_RCC_GetSysClockFreq+0x204>)
 8007476:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800747a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800747c:	4618      	mov	r0, r3
 800747e:	3750      	adds	r7, #80	; 0x50
 8007480:	46bd      	mov	sp, r7
 8007482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007486:	bf00      	nop
 8007488:	40023800 	.word	0x40023800
 800748c:	00f42400 	.word	0x00f42400
 8007490:	007a1200 	.word	0x007a1200

08007494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007498:	4b03      	ldr	r3, [pc, #12]	; (80074a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800749a:	681b      	ldr	r3, [r3, #0]
}
 800749c:	4618      	mov	r0, r3
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	20000000 	.word	0x20000000

080074ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80074b0:	f7ff fff0 	bl	8007494 <HAL_RCC_GetHCLKFreq>
 80074b4:	4602      	mov	r2, r0
 80074b6:	4b05      	ldr	r3, [pc, #20]	; (80074cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	0a9b      	lsrs	r3, r3, #10
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	4903      	ldr	r1, [pc, #12]	; (80074d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074c2:	5ccb      	ldrb	r3, [r1, r3]
 80074c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40023800 	.word	0x40023800
 80074d0:	0800bfbc 	.word	0x0800bfbc

080074d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80074d8:	f7ff ffdc 	bl	8007494 <HAL_RCC_GetHCLKFreq>
 80074dc:	4602      	mov	r2, r0
 80074de:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	0b5b      	lsrs	r3, r3, #13
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	4903      	ldr	r1, [pc, #12]	; (80074f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074ea:	5ccb      	ldrb	r3, [r1, r3]
 80074ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	40023800 	.word	0x40023800
 80074f8:	0800bfbc 	.word	0x0800bfbc

080074fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b00      	cmp	r3, #0
 8007516:	d105      	bne.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007520:	2b00      	cmp	r3, #0
 8007522:	d038      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007524:	4b68      	ldr	r3, [pc, #416]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007526:	2200      	movs	r2, #0
 8007528:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800752a:	f7fb ff9d 	bl	8003468 <HAL_GetTick>
 800752e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007530:	e008      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007532:	f7fb ff99 	bl	8003468 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d901      	bls.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e0bd      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007544:	4b61      	ldr	r3, [pc, #388]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1f0      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	019b      	lsls	r3, r3, #6
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	071b      	lsls	r3, r3, #28
 8007562:	495a      	ldr	r1, [pc, #360]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007564:	4313      	orrs	r3, r2
 8007566:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800756a:	4b57      	ldr	r3, [pc, #348]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800756c:	2201      	movs	r2, #1
 800756e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007570:	f7fb ff7a 	bl	8003468 <HAL_GetTick>
 8007574:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007576:	e008      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007578:	f7fb ff76 	bl	8003468 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b02      	cmp	r3, #2
 8007584:	d901      	bls.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e09a      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800758a:	4b50      	ldr	r3, [pc, #320]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0f0      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 8083 	beq.w	80076aa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	4b48      	ldr	r3, [pc, #288]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	4a47      	ldr	r2, [pc, #284]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b2:	6413      	str	r3, [r2, #64]	; 0x40
 80075b4:	4b45      	ldr	r3, [pc, #276]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80075c0:	4b43      	ldr	r3, [pc, #268]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a42      	ldr	r2, [pc, #264]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80075c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075cc:	f7fb ff4c 	bl	8003468 <HAL_GetTick>
 80075d0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80075d2:	e008      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80075d4:	f7fb ff48 	bl	8003468 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e06c      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80075e6:	4b3a      	ldr	r3, [pc, #232]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0f0      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075f2:	4b36      	ldr	r3, [pc, #216]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d02f      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	429a      	cmp	r2, r3
 800760e:	d028      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007610:	4b2e      	ldr	r3, [pc, #184]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007618:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800761a:	4b2e      	ldr	r3, [pc, #184]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800761c:	2201      	movs	r2, #1
 800761e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007620:	4b2c      	ldr	r3, [pc, #176]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007626:	4a29      	ldr	r2, [pc, #164]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800762c:	4b27      	ldr	r3, [pc, #156]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800762e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b01      	cmp	r3, #1
 8007636:	d114      	bne.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007638:	f7fb ff16 	bl	8003468 <HAL_GetTick>
 800763c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800763e:	e00a      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007640:	f7fb ff12 	bl	8003468 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	f241 3288 	movw	r2, #5000	; 0x1388
 800764e:	4293      	cmp	r3, r2
 8007650:	d901      	bls.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e034      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007656:	4b1d      	ldr	r3, [pc, #116]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0ee      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800766a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800766e:	d10d      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007670:	4b16      	ldr	r3, [pc, #88]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007684:	4911      	ldr	r1, [pc, #68]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007686:	4313      	orrs	r3, r2
 8007688:	608b      	str	r3, [r1, #8]
 800768a:	e005      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800768c:	4b0f      	ldr	r3, [pc, #60]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	4a0e      	ldr	r2, [pc, #56]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007692:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007696:	6093      	str	r3, [r2, #8]
 8007698:	4b0c      	ldr	r3, [pc, #48]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800769a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076a4:	4909      	ldr	r1, [pc, #36]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	7d1a      	ldrb	r2, [r3, #20]
 80076ba:	4b07      	ldr	r3, [pc, #28]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80076bc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	42470068 	.word	0x42470068
 80076cc:	40023800 	.word	0x40023800
 80076d0:	40007000 	.word	0x40007000
 80076d4:	42470e40 	.word	0x42470e40
 80076d8:	424711e0 	.word	0x424711e0

080076dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d140      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80076fa:	4b24      	ldr	r3, [pc, #144]	; (800778c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d131      	bne.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007710:	4b1f      	ldr	r3, [pc, #124]	; (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007712:	617b      	str	r3, [r7, #20]
          break;
 8007714:	e031      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007716:	4b1d      	ldr	r3, [pc, #116]	; (800778c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800771e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007722:	d109      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007724:	4b19      	ldr	r3, [pc, #100]	; (800778c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800772a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800772e:	4a19      	ldr	r2, [pc, #100]	; (8007794 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007730:	fbb2 f3f3 	udiv	r3, r2, r3
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	e008      	b.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007738:	4b14      	ldr	r3, [pc, #80]	; (800778c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800773a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800773e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007742:	4a15      	ldr	r2, [pc, #84]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007744:	fbb2 f3f3 	udiv	r3, r2, r3
 8007748:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800774a:	4b10      	ldr	r3, [pc, #64]	; (800778c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800774c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007750:	099b      	lsrs	r3, r3, #6
 8007752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	fb02 f303 	mul.w	r3, r2, r3
 800775c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800775e:	4b0b      	ldr	r3, [pc, #44]	; (800778c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007764:	0f1b      	lsrs	r3, r3, #28
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007770:	617b      	str	r3, [r7, #20]
          break;
 8007772:	e002      	b.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	617b      	str	r3, [r7, #20]
          break;
 8007778:	bf00      	nop
        }
      }
      break;
 800777a:	bf00      	nop
    }
  }
  return frequency;
 800777c:	697b      	ldr	r3, [r7, #20]
}
 800777e:	4618      	mov	r0, r3
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40023800 	.word	0x40023800
 8007790:	00bb8000 	.word	0x00bb8000
 8007794:	007a1200 	.word	0x007a1200
 8007798:	00f42400 	.word	0x00f42400

0800779c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e07b      	b.n	80078a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d108      	bne.n	80077c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077be:	d009      	beq.n	80077d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	61da      	str	r2, [r3, #28]
 80077c6:	e005      	b.n	80077d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fb fc8c 	bl	800310c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800780a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007858:	ea42 0103 	orr.w	r1, r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007860:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	0c1b      	lsrs	r3, r3, #16
 8007872:	f003 0104 	and.w	r1, r3, #4
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	f003 0210 	and.w	r2, r3, #16
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69da      	ldr	r2, [r3, #28]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007894:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e03f      	b.n	8007940 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d106      	bne.n	80078da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7fb fc61 	bl	800319c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2224      	movs	r2, #36	; 0x24
 80078de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fc7a 	bl	80081ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691a      	ldr	r2, [r3, #16]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007906:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695a      	ldr	r2, [r3, #20]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007916:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007926:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2220      	movs	r2, #32
 800793a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b0ba      	sub	sp, #232	; 0xe8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800796e:	2300      	movs	r3, #0
 8007970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007974:	2300      	movs	r3, #0
 8007976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800797a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797e:	f003 030f 	and.w	r3, r3, #15
 8007982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10f      	bne.n	80079ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800798e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b00      	cmp	r3, #0
 8007998:	d009      	beq.n	80079ae <HAL_UART_IRQHandler+0x66>
 800799a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fb65 	bl	8008076 <UART_Receive_IT>
      return;
 80079ac:	e256      	b.n	8007e5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 80de 	beq.w	8007b74 <HAL_UART_IRQHandler+0x22c>
 80079b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d106      	bne.n	80079d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80d1 	beq.w	8007b74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <HAL_UART_IRQHandler+0xae>
 80079de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f043 0201 	orr.w	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <HAL_UART_IRQHandler+0xd2>
 8007a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	f043 0202 	orr.w	r2, r3, #2
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00b      	beq.n	8007a3e <HAL_UART_IRQHandler+0xf6>
 8007a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	f043 0204 	orr.w	r2, r3, #4
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a42:	f003 0308 	and.w	r3, r3, #8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d011      	beq.n	8007a6e <HAL_UART_IRQHandler+0x126>
 8007a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d105      	bne.n	8007a62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a66:	f043 0208 	orr.w	r2, r3, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 81ed 	beq.w	8007e52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d008      	beq.n	8007a96 <HAL_UART_IRQHandler+0x14e>
 8007a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a88:	f003 0320 	and.w	r3, r3, #32
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 faf0 	bl	8008076 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa0:	2b40      	cmp	r3, #64	; 0x40
 8007aa2:	bf0c      	ite	eq
 8007aa4:	2301      	moveq	r3, #1
 8007aa6:	2300      	movne	r3, #0
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d103      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x17a>
 8007aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d04f      	beq.n	8007b62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f9f8 	bl	8007eb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	d141      	bne.n	8007b5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3314      	adds	r3, #20
 8007adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3314      	adds	r3, #20
 8007afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1d9      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d013      	beq.n	8007b52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	4a7d      	ldr	r2, [pc, #500]	; (8007d24 <HAL_UART_IRQHandler+0x3dc>)
 8007b30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fb fe47 	bl	80037ca <HAL_DMA_Abort_IT>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d016      	beq.n	8007b70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b50:	e00e      	b.n	8007b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f99a 	bl	8007e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	e00a      	b.n	8007b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f996 	bl	8007e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	e006      	b.n	8007b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f992 	bl	8007e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b6e:	e170      	b.n	8007e52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b70:	bf00      	nop
    return;
 8007b72:	e16e      	b.n	8007e52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	f040 814a 	bne.w	8007e12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b82:	f003 0310 	and.w	r3, r3, #16
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 8143 	beq.w	8007e12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 813c 	beq.w	8007e12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60bb      	str	r3, [r7, #8]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	60bb      	str	r3, [r7, #8]
 8007bae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	f040 80b4 	bne.w	8007d28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8140 	beq.w	8007e56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bde:	429a      	cmp	r2, r3
 8007be0:	f080 8139 	bcs.w	8007e56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf6:	f000 8088 	beq.w	8007d0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	330c      	adds	r3, #12
 8007c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	330c      	adds	r3, #12
 8007c22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1d9      	bne.n	8007bfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3314      	adds	r3, #20
 8007c4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c58:	f023 0301 	bic.w	r3, r3, #1
 8007c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3314      	adds	r3, #20
 8007c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e1      	bne.n	8007c46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3314      	adds	r3, #20
 8007c88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3314      	adds	r3, #20
 8007ca2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ca6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ca8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e3      	bne.n	8007c82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	330c      	adds	r3, #12
 8007cce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cda:	f023 0310 	bic.w	r3, r3, #16
 8007cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	330c      	adds	r3, #12
 8007ce8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007cec:	65ba      	str	r2, [r7, #88]	; 0x58
 8007cee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e3      	bne.n	8007cc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fb fcf0 	bl	80036ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f8c0 	bl	8007ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d20:	e099      	b.n	8007e56 <HAL_UART_IRQHandler+0x50e>
 8007d22:	bf00      	nop
 8007d24:	08007f7f 	.word	0x08007f7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 808b 	beq.w	8007e5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 8086 	beq.w	8007e5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	330c      	adds	r3, #12
 8007d54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	e853 3f00 	ldrex	r3, [r3]
 8007d5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d72:	647a      	str	r2, [r7, #68]	; 0x44
 8007d74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e3      	bne.n	8007d4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3314      	adds	r3, #20
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	623b      	str	r3, [r7, #32]
   return(result);
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	f023 0301 	bic.w	r3, r3, #1
 8007d9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3314      	adds	r3, #20
 8007da6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007daa:	633a      	str	r2, [r7, #48]	; 0x30
 8007dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db2:	e841 2300 	strex	r3, r2, [r1]
 8007db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1e3      	bne.n	8007d86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0310 	bic.w	r3, r3, #16
 8007de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	330c      	adds	r3, #12
 8007dec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007df0:	61fa      	str	r2, [r7, #28]
 8007df2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	69b9      	ldr	r1, [r7, #24]
 8007df6:	69fa      	ldr	r2, [r7, #28]
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e3      	bne.n	8007dcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f848 	bl	8007ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e10:	e023      	b.n	8007e5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d009      	beq.n	8007e32 <HAL_UART_IRQHandler+0x4ea>
 8007e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f8bb 	bl	8007fa6 <UART_Transmit_IT>
    return;
 8007e30:	e014      	b.n	8007e5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00e      	beq.n	8007e5c <HAL_UART_IRQHandler+0x514>
 8007e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d008      	beq.n	8007e5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f8fb 	bl	8008046 <UART_EndTransmit_IT>
    return;
 8007e50:	e004      	b.n	8007e5c <HAL_UART_IRQHandler+0x514>
    return;
 8007e52:	bf00      	nop
 8007e54:	e002      	b.n	8007e5c <HAL_UART_IRQHandler+0x514>
      return;
 8007e56:	bf00      	nop
 8007e58:	e000      	b.n	8007e5c <HAL_UART_IRQHandler+0x514>
      return;
 8007e5a:	bf00      	nop
  }
}
 8007e5c:	37e8      	adds	r7, #232	; 0xe8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop

08007e64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b095      	sub	sp, #84	; 0x54
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	330c      	adds	r3, #12
 8007ec6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eca:	e853 3f00 	ldrex	r3, [r3]
 8007ece:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	330c      	adds	r3, #12
 8007ede:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ee0:	643a      	str	r2, [r7, #64]	; 0x40
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ee6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e5      	bne.n	8007ec0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3314      	adds	r3, #20
 8007efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	f023 0301 	bic.w	r3, r3, #1
 8007f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3314      	adds	r3, #20
 8007f12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e5      	bne.n	8007ef4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d119      	bne.n	8007f64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	330c      	adds	r3, #12
 8007f36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	e853 3f00 	ldrex	r3, [r3]
 8007f3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	f023 0310 	bic.w	r3, r3, #16
 8007f46:	647b      	str	r3, [r7, #68]	; 0x44
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	330c      	adds	r3, #12
 8007f4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f50:	61ba      	str	r2, [r7, #24]
 8007f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f54:	6979      	ldr	r1, [r7, #20]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	e841 2300 	strex	r3, r2, [r1]
 8007f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1e5      	bne.n	8007f30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f72:	bf00      	nop
 8007f74:	3754      	adds	r7, #84	; 0x54
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7ff ff77 	bl	8007e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b085      	sub	sp, #20
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b21      	cmp	r3, #33	; 0x21
 8007fb8:	d13e      	bne.n	8008038 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc2:	d114      	bne.n	8007fee <UART_Transmit_IT+0x48>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d110      	bne.n	8007fee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fe0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	1c9a      	adds	r2, r3, #2
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	621a      	str	r2, [r3, #32]
 8007fec:	e008      	b.n	8008000 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	1c59      	adds	r1, r3, #1
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	6211      	str	r1, [r2, #32]
 8007ff8:	781a      	ldrb	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	b29b      	uxth	r3, r3
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	4619      	mov	r1, r3
 800800e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10f      	bne.n	8008034 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008022:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008032:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	e000      	b.n	800803a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008038:	2302      	movs	r3, #2
  }
}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68da      	ldr	r2, [r3, #12]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800805c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2220      	movs	r2, #32
 8008062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7ff fefc 	bl	8007e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b08c      	sub	sp, #48	; 0x30
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b22      	cmp	r3, #34	; 0x22
 8008088:	f040 80ab 	bne.w	80081e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008094:	d117      	bne.n	80080c6 <UART_Receive_IT+0x50>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d113      	bne.n	80080c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	1c9a      	adds	r2, r3, #2
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	629a      	str	r2, [r3, #40]	; 0x28
 80080c4:	e026      	b.n	8008114 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d8:	d007      	beq.n	80080ea <UART_Receive_IT+0x74>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <UART_Receive_IT+0x82>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	701a      	strb	r2, [r3, #0]
 80080f6:	e008      	b.n	800810a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008104:	b2da      	uxtb	r2, r3
 8008106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008108:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008118:	b29b      	uxth	r3, r3
 800811a:	3b01      	subs	r3, #1
 800811c:	b29b      	uxth	r3, r3
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	4619      	mov	r1, r3
 8008122:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008124:	2b00      	cmp	r3, #0
 8008126:	d15a      	bne.n	80081de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0220 	bic.w	r2, r2, #32
 8008136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	695a      	ldr	r2, [r3, #20]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f022 0201 	bic.w	r2, r2, #1
 8008156:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008164:	2b01      	cmp	r3, #1
 8008166:	d135      	bne.n	80081d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	330c      	adds	r3, #12
 8008174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	613b      	str	r3, [r7, #16]
   return(result);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f023 0310 	bic.w	r3, r3, #16
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	330c      	adds	r3, #12
 800818c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818e:	623a      	str	r2, [r7, #32]
 8008190:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	69f9      	ldr	r1, [r7, #28]
 8008194:	6a3a      	ldr	r2, [r7, #32]
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	61bb      	str	r3, [r7, #24]
   return(result);
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1e5      	bne.n	800816e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0310 	and.w	r3, r3, #16
 80081ac:	2b10      	cmp	r3, #16
 80081ae:	d10a      	bne.n	80081c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff fe67 	bl	8007ea0 <HAL_UARTEx_RxEventCallback>
 80081d2:	e002      	b.n	80081da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff fe4f 	bl	8007e78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	e002      	b.n	80081e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	e000      	b.n	80081e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80081e2:	2302      	movs	r3, #2
  }
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3730      	adds	r7, #48	; 0x30
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081f0:	b0c0      	sub	sp, #256	; 0x100
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008208:	68d9      	ldr	r1, [r3, #12]
 800820a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	ea40 0301 	orr.w	r3, r0, r1
 8008214:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	431a      	orrs	r2, r3
 8008224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	431a      	orrs	r2, r3
 800822c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	4313      	orrs	r3, r2
 8008234:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008244:	f021 010c 	bic.w	r1, r1, #12
 8008248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008252:	430b      	orrs	r3, r1
 8008254:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008266:	6999      	ldr	r1, [r3, #24]
 8008268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	ea40 0301 	orr.w	r3, r0, r1
 8008272:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	4b8f      	ldr	r3, [pc, #572]	; (80084b8 <UART_SetConfig+0x2cc>)
 800827c:	429a      	cmp	r2, r3
 800827e:	d005      	beq.n	800828c <UART_SetConfig+0xa0>
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4b8d      	ldr	r3, [pc, #564]	; (80084bc <UART_SetConfig+0x2d0>)
 8008288:	429a      	cmp	r2, r3
 800828a:	d104      	bne.n	8008296 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800828c:	f7ff f922 	bl	80074d4 <HAL_RCC_GetPCLK2Freq>
 8008290:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008294:	e003      	b.n	800829e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008296:	f7ff f909 	bl	80074ac <HAL_RCC_GetPCLK1Freq>
 800829a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800829e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082a8:	f040 810c 	bne.w	80084c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082b0:	2200      	movs	r2, #0
 80082b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082be:	4622      	mov	r2, r4
 80082c0:	462b      	mov	r3, r5
 80082c2:	1891      	adds	r1, r2, r2
 80082c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80082c6:	415b      	adcs	r3, r3
 80082c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082ce:	4621      	mov	r1, r4
 80082d0:	eb12 0801 	adds.w	r8, r2, r1
 80082d4:	4629      	mov	r1, r5
 80082d6:	eb43 0901 	adc.w	r9, r3, r1
 80082da:	f04f 0200 	mov.w	r2, #0
 80082de:	f04f 0300 	mov.w	r3, #0
 80082e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082ee:	4690      	mov	r8, r2
 80082f0:	4699      	mov	r9, r3
 80082f2:	4623      	mov	r3, r4
 80082f4:	eb18 0303 	adds.w	r3, r8, r3
 80082f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082fc:	462b      	mov	r3, r5
 80082fe:	eb49 0303 	adc.w	r3, r9, r3
 8008302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008312:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008316:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800831a:	460b      	mov	r3, r1
 800831c:	18db      	adds	r3, r3, r3
 800831e:	653b      	str	r3, [r7, #80]	; 0x50
 8008320:	4613      	mov	r3, r2
 8008322:	eb42 0303 	adc.w	r3, r2, r3
 8008326:	657b      	str	r3, [r7, #84]	; 0x54
 8008328:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800832c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008330:	f7f8 fbf8 	bl	8000b24 <__aeabi_uldivmod>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	4b61      	ldr	r3, [pc, #388]	; (80084c0 <UART_SetConfig+0x2d4>)
 800833a:	fba3 2302 	umull	r2, r3, r3, r2
 800833e:	095b      	lsrs	r3, r3, #5
 8008340:	011c      	lsls	r4, r3, #4
 8008342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008346:	2200      	movs	r2, #0
 8008348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800834c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008350:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008354:	4642      	mov	r2, r8
 8008356:	464b      	mov	r3, r9
 8008358:	1891      	adds	r1, r2, r2
 800835a:	64b9      	str	r1, [r7, #72]	; 0x48
 800835c:	415b      	adcs	r3, r3
 800835e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008360:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008364:	4641      	mov	r1, r8
 8008366:	eb12 0a01 	adds.w	sl, r2, r1
 800836a:	4649      	mov	r1, r9
 800836c:	eb43 0b01 	adc.w	fp, r3, r1
 8008370:	f04f 0200 	mov.w	r2, #0
 8008374:	f04f 0300 	mov.w	r3, #0
 8008378:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800837c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008384:	4692      	mov	sl, r2
 8008386:	469b      	mov	fp, r3
 8008388:	4643      	mov	r3, r8
 800838a:	eb1a 0303 	adds.w	r3, sl, r3
 800838e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008392:	464b      	mov	r3, r9
 8008394:	eb4b 0303 	adc.w	r3, fp, r3
 8008398:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800839c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083b0:	460b      	mov	r3, r1
 80083b2:	18db      	adds	r3, r3, r3
 80083b4:	643b      	str	r3, [r7, #64]	; 0x40
 80083b6:	4613      	mov	r3, r2
 80083b8:	eb42 0303 	adc.w	r3, r2, r3
 80083bc:	647b      	str	r3, [r7, #68]	; 0x44
 80083be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083c6:	f7f8 fbad 	bl	8000b24 <__aeabi_uldivmod>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	4b3b      	ldr	r3, [pc, #236]	; (80084c0 <UART_SetConfig+0x2d4>)
 80083d2:	fba3 2301 	umull	r2, r3, r3, r1
 80083d6:	095b      	lsrs	r3, r3, #5
 80083d8:	2264      	movs	r2, #100	; 0x64
 80083da:	fb02 f303 	mul.w	r3, r2, r3
 80083de:	1acb      	subs	r3, r1, r3
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083e6:	4b36      	ldr	r3, [pc, #216]	; (80084c0 <UART_SetConfig+0x2d4>)
 80083e8:	fba3 2302 	umull	r2, r3, r3, r2
 80083ec:	095b      	lsrs	r3, r3, #5
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083f4:	441c      	add	r4, r3
 80083f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008400:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008404:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008408:	4642      	mov	r2, r8
 800840a:	464b      	mov	r3, r9
 800840c:	1891      	adds	r1, r2, r2
 800840e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008410:	415b      	adcs	r3, r3
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008418:	4641      	mov	r1, r8
 800841a:	1851      	adds	r1, r2, r1
 800841c:	6339      	str	r1, [r7, #48]	; 0x30
 800841e:	4649      	mov	r1, r9
 8008420:	414b      	adcs	r3, r1
 8008422:	637b      	str	r3, [r7, #52]	; 0x34
 8008424:	f04f 0200 	mov.w	r2, #0
 8008428:	f04f 0300 	mov.w	r3, #0
 800842c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008430:	4659      	mov	r1, fp
 8008432:	00cb      	lsls	r3, r1, #3
 8008434:	4651      	mov	r1, sl
 8008436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800843a:	4651      	mov	r1, sl
 800843c:	00ca      	lsls	r2, r1, #3
 800843e:	4610      	mov	r0, r2
 8008440:	4619      	mov	r1, r3
 8008442:	4603      	mov	r3, r0
 8008444:	4642      	mov	r2, r8
 8008446:	189b      	adds	r3, r3, r2
 8008448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800844c:	464b      	mov	r3, r9
 800844e:	460a      	mov	r2, r1
 8008450:	eb42 0303 	adc.w	r3, r2, r3
 8008454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008464:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008468:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800846c:	460b      	mov	r3, r1
 800846e:	18db      	adds	r3, r3, r3
 8008470:	62bb      	str	r3, [r7, #40]	; 0x28
 8008472:	4613      	mov	r3, r2
 8008474:	eb42 0303 	adc.w	r3, r2, r3
 8008478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800847a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800847e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008482:	f7f8 fb4f 	bl	8000b24 <__aeabi_uldivmod>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <UART_SetConfig+0x2d4>)
 800848c:	fba3 1302 	umull	r1, r3, r3, r2
 8008490:	095b      	lsrs	r3, r3, #5
 8008492:	2164      	movs	r1, #100	; 0x64
 8008494:	fb01 f303 	mul.w	r3, r1, r3
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	3332      	adds	r3, #50	; 0x32
 800849e:	4a08      	ldr	r2, [pc, #32]	; (80084c0 <UART_SetConfig+0x2d4>)
 80084a0:	fba2 2303 	umull	r2, r3, r2, r3
 80084a4:	095b      	lsrs	r3, r3, #5
 80084a6:	f003 0207 	and.w	r2, r3, #7
 80084aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4422      	add	r2, r4
 80084b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084b4:	e106      	b.n	80086c4 <UART_SetConfig+0x4d8>
 80084b6:	bf00      	nop
 80084b8:	40011000 	.word	0x40011000
 80084bc:	40011400 	.word	0x40011400
 80084c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084c8:	2200      	movs	r2, #0
 80084ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084d6:	4642      	mov	r2, r8
 80084d8:	464b      	mov	r3, r9
 80084da:	1891      	adds	r1, r2, r2
 80084dc:	6239      	str	r1, [r7, #32]
 80084de:	415b      	adcs	r3, r3
 80084e0:	627b      	str	r3, [r7, #36]	; 0x24
 80084e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084e6:	4641      	mov	r1, r8
 80084e8:	1854      	adds	r4, r2, r1
 80084ea:	4649      	mov	r1, r9
 80084ec:	eb43 0501 	adc.w	r5, r3, r1
 80084f0:	f04f 0200 	mov.w	r2, #0
 80084f4:	f04f 0300 	mov.w	r3, #0
 80084f8:	00eb      	lsls	r3, r5, #3
 80084fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084fe:	00e2      	lsls	r2, r4, #3
 8008500:	4614      	mov	r4, r2
 8008502:	461d      	mov	r5, r3
 8008504:	4643      	mov	r3, r8
 8008506:	18e3      	adds	r3, r4, r3
 8008508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800850c:	464b      	mov	r3, r9
 800850e:	eb45 0303 	adc.w	r3, r5, r3
 8008512:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008522:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008526:	f04f 0200 	mov.w	r2, #0
 800852a:	f04f 0300 	mov.w	r3, #0
 800852e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008532:	4629      	mov	r1, r5
 8008534:	008b      	lsls	r3, r1, #2
 8008536:	4621      	mov	r1, r4
 8008538:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800853c:	4621      	mov	r1, r4
 800853e:	008a      	lsls	r2, r1, #2
 8008540:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008544:	f7f8 faee 	bl	8000b24 <__aeabi_uldivmod>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4b60      	ldr	r3, [pc, #384]	; (80086d0 <UART_SetConfig+0x4e4>)
 800854e:	fba3 2302 	umull	r2, r3, r3, r2
 8008552:	095b      	lsrs	r3, r3, #5
 8008554:	011c      	lsls	r4, r3, #4
 8008556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800855a:	2200      	movs	r2, #0
 800855c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008560:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008564:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008568:	4642      	mov	r2, r8
 800856a:	464b      	mov	r3, r9
 800856c:	1891      	adds	r1, r2, r2
 800856e:	61b9      	str	r1, [r7, #24]
 8008570:	415b      	adcs	r3, r3
 8008572:	61fb      	str	r3, [r7, #28]
 8008574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008578:	4641      	mov	r1, r8
 800857a:	1851      	adds	r1, r2, r1
 800857c:	6139      	str	r1, [r7, #16]
 800857e:	4649      	mov	r1, r9
 8008580:	414b      	adcs	r3, r1
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	f04f 0200 	mov.w	r2, #0
 8008588:	f04f 0300 	mov.w	r3, #0
 800858c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008590:	4659      	mov	r1, fp
 8008592:	00cb      	lsls	r3, r1, #3
 8008594:	4651      	mov	r1, sl
 8008596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800859a:	4651      	mov	r1, sl
 800859c:	00ca      	lsls	r2, r1, #3
 800859e:	4610      	mov	r0, r2
 80085a0:	4619      	mov	r1, r3
 80085a2:	4603      	mov	r3, r0
 80085a4:	4642      	mov	r2, r8
 80085a6:	189b      	adds	r3, r3, r2
 80085a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085ac:	464b      	mov	r3, r9
 80085ae:	460a      	mov	r2, r1
 80085b0:	eb42 0303 	adc.w	r3, r2, r3
 80085b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80085c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	f04f 0300 	mov.w	r3, #0
 80085cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085d0:	4649      	mov	r1, r9
 80085d2:	008b      	lsls	r3, r1, #2
 80085d4:	4641      	mov	r1, r8
 80085d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085da:	4641      	mov	r1, r8
 80085dc:	008a      	lsls	r2, r1, #2
 80085de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085e2:	f7f8 fa9f 	bl	8000b24 <__aeabi_uldivmod>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4611      	mov	r1, r2
 80085ec:	4b38      	ldr	r3, [pc, #224]	; (80086d0 <UART_SetConfig+0x4e4>)
 80085ee:	fba3 2301 	umull	r2, r3, r3, r1
 80085f2:	095b      	lsrs	r3, r3, #5
 80085f4:	2264      	movs	r2, #100	; 0x64
 80085f6:	fb02 f303 	mul.w	r3, r2, r3
 80085fa:	1acb      	subs	r3, r1, r3
 80085fc:	011b      	lsls	r3, r3, #4
 80085fe:	3332      	adds	r3, #50	; 0x32
 8008600:	4a33      	ldr	r2, [pc, #204]	; (80086d0 <UART_SetConfig+0x4e4>)
 8008602:	fba2 2303 	umull	r2, r3, r2, r3
 8008606:	095b      	lsrs	r3, r3, #5
 8008608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800860c:	441c      	add	r4, r3
 800860e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008612:	2200      	movs	r2, #0
 8008614:	673b      	str	r3, [r7, #112]	; 0x70
 8008616:	677a      	str	r2, [r7, #116]	; 0x74
 8008618:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800861c:	4642      	mov	r2, r8
 800861e:	464b      	mov	r3, r9
 8008620:	1891      	adds	r1, r2, r2
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	415b      	adcs	r3, r3
 8008626:	60fb      	str	r3, [r7, #12]
 8008628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800862c:	4641      	mov	r1, r8
 800862e:	1851      	adds	r1, r2, r1
 8008630:	6039      	str	r1, [r7, #0]
 8008632:	4649      	mov	r1, r9
 8008634:	414b      	adcs	r3, r1
 8008636:	607b      	str	r3, [r7, #4]
 8008638:	f04f 0200 	mov.w	r2, #0
 800863c:	f04f 0300 	mov.w	r3, #0
 8008640:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008644:	4659      	mov	r1, fp
 8008646:	00cb      	lsls	r3, r1, #3
 8008648:	4651      	mov	r1, sl
 800864a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800864e:	4651      	mov	r1, sl
 8008650:	00ca      	lsls	r2, r1, #3
 8008652:	4610      	mov	r0, r2
 8008654:	4619      	mov	r1, r3
 8008656:	4603      	mov	r3, r0
 8008658:	4642      	mov	r2, r8
 800865a:	189b      	adds	r3, r3, r2
 800865c:	66bb      	str	r3, [r7, #104]	; 0x68
 800865e:	464b      	mov	r3, r9
 8008660:	460a      	mov	r2, r1
 8008662:	eb42 0303 	adc.w	r3, r2, r3
 8008666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	663b      	str	r3, [r7, #96]	; 0x60
 8008672:	667a      	str	r2, [r7, #100]	; 0x64
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	f04f 0300 	mov.w	r3, #0
 800867c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008680:	4649      	mov	r1, r9
 8008682:	008b      	lsls	r3, r1, #2
 8008684:	4641      	mov	r1, r8
 8008686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800868a:	4641      	mov	r1, r8
 800868c:	008a      	lsls	r2, r1, #2
 800868e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008692:	f7f8 fa47 	bl	8000b24 <__aeabi_uldivmod>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4b0d      	ldr	r3, [pc, #52]	; (80086d0 <UART_SetConfig+0x4e4>)
 800869c:	fba3 1302 	umull	r1, r3, r3, r2
 80086a0:	095b      	lsrs	r3, r3, #5
 80086a2:	2164      	movs	r1, #100	; 0x64
 80086a4:	fb01 f303 	mul.w	r3, r1, r3
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	011b      	lsls	r3, r3, #4
 80086ac:	3332      	adds	r3, #50	; 0x32
 80086ae:	4a08      	ldr	r2, [pc, #32]	; (80086d0 <UART_SetConfig+0x4e4>)
 80086b0:	fba2 2303 	umull	r2, r3, r2, r3
 80086b4:	095b      	lsrs	r3, r3, #5
 80086b6:	f003 020f 	and.w	r2, r3, #15
 80086ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4422      	add	r2, r4
 80086c2:	609a      	str	r2, [r3, #8]
}
 80086c4:	bf00      	nop
 80086c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086ca:	46bd      	mov	sp, r7
 80086cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086d0:	51eb851f 	.word	0x51eb851f

080086d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086d4:	b084      	sub	sp, #16
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	f107 001c 	add.w	r0, r7, #28
 80086e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d122      	bne.n	8008732 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008716:	2b01      	cmp	r3, #1
 8008718:	d105      	bne.n	8008726 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f9c0 	bl	8008aac <USB_CoreReset>
 800872c:	4603      	mov	r3, r0
 800872e:	73fb      	strb	r3, [r7, #15]
 8008730:	e01a      	b.n	8008768 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f9b4 	bl	8008aac <USB_CoreReset>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	d106      	bne.n	800875c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008752:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	639a      	str	r2, [r3, #56]	; 0x38
 800875a:	e005      	b.n	8008768 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	2b01      	cmp	r3, #1
 800876c:	d10b      	bne.n	8008786 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f043 0206 	orr.w	r2, r3, #6
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f043 0220 	orr.w	r2, r3, #32
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008792:	b004      	add	sp, #16
 8008794:	4770      	bx	lr

08008796 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f043 0201 	orr.w	r2, r3, #1
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f023 0201 	bic.w	r2, r3, #1
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d115      	bne.n	8008828 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008808:	2001      	movs	r0, #1
 800880a:	f7fa fe39 	bl	8003480 <HAL_Delay>
      ms++;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3301      	adds	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f93a 	bl	8008a8e <USB_GetMode>
 800881a:	4603      	mov	r3, r0
 800881c:	2b01      	cmp	r3, #1
 800881e:	d01e      	beq.n	800885e <USB_SetCurrentMode+0x84>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b31      	cmp	r3, #49	; 0x31
 8008824:	d9f0      	bls.n	8008808 <USB_SetCurrentMode+0x2e>
 8008826:	e01a      	b.n	800885e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008828:	78fb      	ldrb	r3, [r7, #3]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d115      	bne.n	800885a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800883a:	2001      	movs	r0, #1
 800883c:	f7fa fe20 	bl	8003480 <HAL_Delay>
      ms++;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3301      	adds	r3, #1
 8008844:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f921 	bl	8008a8e <USB_GetMode>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <USB_SetCurrentMode+0x84>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2b31      	cmp	r3, #49	; 0x31
 8008856:	d9f0      	bls.n	800883a <USB_SetCurrentMode+0x60>
 8008858:	e001      	b.n	800885e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e005      	b.n	800886a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b32      	cmp	r3, #50	; 0x32
 8008862:	d101      	bne.n	8008868 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e000      	b.n	800886a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3301      	adds	r3, #1
 8008886:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4a13      	ldr	r2, [pc, #76]	; (80088d8 <USB_FlushTxFifo+0x64>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d901      	bls.n	8008894 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e01b      	b.n	80088cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	daf2      	bge.n	8008882 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	019b      	lsls	r3, r3, #6
 80088a4:	f043 0220 	orr.w	r2, r3, #32
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3301      	adds	r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4a08      	ldr	r2, [pc, #32]	; (80088d8 <USB_FlushTxFifo+0x64>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d901      	bls.n	80088be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e006      	b.n	80088cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	f003 0320 	and.w	r3, r3, #32
 80088c6:	2b20      	cmp	r3, #32
 80088c8:	d0f0      	beq.n	80088ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	00030d40 	.word	0x00030d40

080088dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3301      	adds	r3, #1
 80088ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4a11      	ldr	r2, [pc, #68]	; (8008938 <USB_FlushRxFifo+0x5c>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d901      	bls.n	80088fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e018      	b.n	800892c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	daf2      	bge.n	80088e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2210      	movs	r2, #16
 800890a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3301      	adds	r3, #1
 8008910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4a08      	ldr	r2, [pc, #32]	; (8008938 <USB_FlushRxFifo+0x5c>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d901      	bls.n	800891e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e006      	b.n	800892c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	f003 0310 	and.w	r3, r3, #16
 8008926:	2b10      	cmp	r3, #16
 8008928:	d0f0      	beq.n	800890c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	00030d40 	.word	0x00030d40

0800893c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800893c:	b480      	push	{r7}
 800893e:	b089      	sub	sp, #36	; 0x24
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	4611      	mov	r1, r2
 8008948:	461a      	mov	r2, r3
 800894a:	460b      	mov	r3, r1
 800894c:	71fb      	strb	r3, [r7, #7]
 800894e:	4613      	mov	r3, r2
 8008950:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800895a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800895e:	2b00      	cmp	r3, #0
 8008960:	d123      	bne.n	80089aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008962:	88bb      	ldrh	r3, [r7, #4]
 8008964:	3303      	adds	r3, #3
 8008966:	089b      	lsrs	r3, r3, #2
 8008968:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800896a:	2300      	movs	r3, #0
 800896c:	61bb      	str	r3, [r7, #24]
 800896e:	e018      	b.n	80089a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	031a      	lsls	r2, r3, #12
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	4413      	add	r3, r2
 8008978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800897c:	461a      	mov	r2, r3
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	3301      	adds	r3, #1
 8008988:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	3301      	adds	r3, #1
 800898e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	3301      	adds	r3, #1
 8008994:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	3301      	adds	r3, #1
 800899a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	3301      	adds	r3, #1
 80089a0:	61bb      	str	r3, [r7, #24]
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d3e2      	bcc.n	8008970 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3724      	adds	r7, #36	; 0x24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b08b      	sub	sp, #44	; 0x2c
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	4613      	mov	r3, r2
 80089c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80089ce:	88fb      	ldrh	r3, [r7, #6]
 80089d0:	089b      	lsrs	r3, r3, #2
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80089d6:	88fb      	ldrh	r3, [r7, #6]
 80089d8:	f003 0303 	and.w	r3, r3, #3
 80089dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80089de:	2300      	movs	r3, #0
 80089e0:	623b      	str	r3, [r7, #32]
 80089e2:	e014      	b.n	8008a0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	3301      	adds	r3, #1
 80089f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	3301      	adds	r3, #1
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	3301      	adds	r3, #1
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	3301      	adds	r3, #1
 8008a06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	623b      	str	r3, [r7, #32]
 8008a0e:	6a3a      	ldr	r2, [r7, #32]
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d3e6      	bcc.n	80089e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a16:	8bfb      	ldrh	r3, [r7, #30]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01e      	beq.n	8008a5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a26:	461a      	mov	r2, r3
 8008a28:	f107 0310 	add.w	r3, r7, #16
 8008a2c:	6812      	ldr	r2, [r2, #0]
 8008a2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	00db      	lsls	r3, r3, #3
 8008a38:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	701a      	strb	r2, [r3, #0]
      i++;
 8008a42:	6a3b      	ldr	r3, [r7, #32]
 8008a44:	3301      	adds	r3, #1
 8008a46:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008a4e:	8bfb      	ldrh	r3, [r7, #30]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a54:	8bfb      	ldrh	r3, [r7, #30]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1ea      	bne.n	8008a30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	372c      	adds	r7, #44	; 0x2c
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a80:	68fb      	ldr	r3, [r7, #12]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f003 0301 	and.w	r3, r3, #1
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
	...

08008aac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3301      	adds	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4a13      	ldr	r2, [pc, #76]	; (8008b10 <USB_CoreReset+0x64>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d901      	bls.n	8008aca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e01b      	b.n	8008b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	daf2      	bge.n	8008ab8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	f043 0201 	orr.w	r2, r3, #1
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4a09      	ldr	r2, [pc, #36]	; (8008b10 <USB_CoreReset+0x64>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d901      	bls.n	8008af4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e006      	b.n	8008b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d0f0      	beq.n	8008ae2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	00030d40 	.word	0x00030d40

08008b14 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b14:	b084      	sub	sp, #16
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b086      	sub	sp, #24
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b34:	461a      	mov	r2, r3
 8008b36:	2300      	movs	r3, #0
 8008b38:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b56:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d018      	beq.n	8008b9c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d10a      	bne.n	8008b86 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b7e:	f043 0304 	orr.w	r3, r3, #4
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	e014      	b.n	8008bb0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008b94:	f023 0304 	bic.w	r3, r3, #4
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	e009      	b.n	8008bb0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008baa:	f023 0304 	bic.w	r3, r3, #4
 8008bae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bb0:	2110      	movs	r1, #16
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff fe5e 	bl	8008874 <USB_FlushTxFifo>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7ff fe8a 	bl	80088dc <USB_FlushRxFifo>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	e015      	b.n	8008c04 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be4:	461a      	mov	r2, r3
 8008be6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	3301      	adds	r3, #1
 8008c02:	613b      	str	r3, [r7, #16]
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d3e5      	bcc.n	8008bd8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f04f 32ff 	mov.w	r2, #4294967295
 8008c18:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00b      	beq.n	8008c3e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c2c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a13      	ldr	r2, [pc, #76]	; (8008c80 <USB_HostInit+0x16c>)
 8008c32:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a13      	ldr	r2, [pc, #76]	; (8008c84 <USB_HostInit+0x170>)
 8008c38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008c3c:	e009      	b.n	8008c52 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2280      	movs	r2, #128	; 0x80
 8008c42:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a10      	ldr	r2, [pc, #64]	; (8008c88 <USB_HostInit+0x174>)
 8008c48:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a0f      	ldr	r2, [pc, #60]	; (8008c8c <USB_HostInit+0x178>)
 8008c4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d105      	bne.n	8008c64 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	f043 0210 	orr.w	r2, r3, #16
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	699a      	ldr	r2, [r3, #24]
 8008c68:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <USB_HostInit+0x17c>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c7c:	b004      	add	sp, #16
 8008c7e:	4770      	bx	lr
 8008c80:	01000200 	.word	0x01000200
 8008c84:	00e00300 	.word	0x00e00300
 8008c88:	00600080 	.word	0x00600080
 8008c8c:	004000e0 	.word	0x004000e0
 8008c90:	a3200008 	.word	0xa3200008

08008c94 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008cb2:	f023 0303 	bic.w	r3, r3, #3
 8008cb6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	f003 0303 	and.w	r3, r3, #3
 8008cc6:	68f9      	ldr	r1, [r7, #12]
 8008cc8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d107      	bne.n	8008ce6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008ce2:	6053      	str	r3, [r2, #4]
 8008ce4:	e009      	b.n	8008cfa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008ce6:	78fb      	ldrb	r3, [r7, #3]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d106      	bne.n	8008cfa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	f241 7370 	movw	r3, #6000	; 0x1770
 8008cf8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d28:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d36:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008d38:	2064      	movs	r0, #100	; 0x64
 8008d3a:	f7fa fba1 	bl	8003480 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008d4c:	200a      	movs	r0, #10
 8008d4e:	f7fa fb97 	bl	8003480 <HAL_Delay>

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	460b      	mov	r3, r1
 8008d66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d109      	bne.n	8008da0 <USB_DriveVbus+0x44>
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d106      	bne.n	8008da0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d9e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008daa:	d109      	bne.n	8008dc0 <USB_DriveVbus+0x64>
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dbe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	0c5b      	lsrs	r3, r3, #17
 8008dec:	f003 0303 	and.w	r3, r3, #3
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	b29b      	uxth	r3, r3
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
	...

08008e20 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	4608      	mov	r0, r1
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4603      	mov	r3, r0
 8008e30:	70fb      	strb	r3, [r7, #3]
 8008e32:	460b      	mov	r3, r1
 8008e34:	70bb      	strb	r3, [r7, #2]
 8008e36:	4613      	mov	r3, r2
 8008e38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f04f 33ff 	mov.w	r3, #4294967295
 8008e54:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008e56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d87e      	bhi.n	8008f5c <USB_HC_Init+0x13c>
 8008e5e:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <USB_HC_Init+0x44>)
 8008e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e64:	08008e75 	.word	0x08008e75
 8008e68:	08008f1f 	.word	0x08008f1f
 8008e6c:	08008e75 	.word	0x08008e75
 8008e70:	08008ee1 	.word	0x08008ee1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e74:	78fb      	ldrb	r3, [r7, #3]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e80:	461a      	mov	r2, r3
 8008e82:	f240 439d 	movw	r3, #1181	; 0x49d
 8008e86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008e88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	da10      	bge.n	8008eb2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	78fa      	ldrb	r2, [r7, #3]
 8008ea0:	0151      	lsls	r1, r2, #5
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	440a      	add	r2, r1
 8008ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eae:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008eb0:	e057      	b.n	8008f62 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d051      	beq.n	8008f62 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	015a      	lsls	r2, r3, #5
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	78fa      	ldrb	r2, [r7, #3]
 8008ece:	0151      	lsls	r1, r2, #5
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	440a      	add	r2, r1
 8008ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ed8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008edc:	60d3      	str	r3, [r2, #12]
      break;
 8008ede:	e040      	b.n	8008f62 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eec:	461a      	mov	r2, r3
 8008eee:	f240 639d 	movw	r3, #1693	; 0x69d
 8008ef2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ef4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	da34      	bge.n	8008f66 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	78fa      	ldrb	r2, [r7, #3]
 8008f0c:	0151      	lsls	r1, r2, #5
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	440a      	add	r2, r1
 8008f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f1a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008f1c:	e023      	b.n	8008f66 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f240 2325 	movw	r3, #549	; 0x225
 8008f30:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da17      	bge.n	8008f6a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	78fa      	ldrb	r2, [r7, #3]
 8008f4a:	0151      	lsls	r1, r2, #5
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	440a      	add	r2, r1
 8008f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f54:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008f58:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008f5a:	e006      	b.n	8008f6a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	77fb      	strb	r3, [r7, #31]
      break;
 8008f60:	e004      	b.n	8008f6c <USB_HC_Init+0x14c>
      break;
 8008f62:	bf00      	nop
 8008f64:	e002      	b.n	8008f6c <USB_HC_Init+0x14c>
      break;
 8008f66:	bf00      	nop
 8008f68:	e000      	b.n	8008f6c <USB_HC_Init+0x14c>
      break;
 8008f6a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008f6c:	78fb      	ldrb	r3, [r7, #3]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	78fa      	ldrb	r2, [r7, #3]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f86:	f043 0302 	orr.w	r3, r3, #2
 8008f8a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f92:	699a      	ldr	r2, [r3, #24]
 8008f94:	78fb      	ldrb	r3, [r7, #3]
 8008f96:	f003 030f 	and.w	r3, r3, #15
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa0:	6939      	ldr	r1, [r7, #16]
 8008fa2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008fb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	da03      	bge.n	8008fc6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fc2:	61bb      	str	r3, [r7, #24]
 8008fc4:	e001      	b.n	8008fca <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7ff feff 	bl	8008dce <USB_GetHostSpeed>
 8008fd0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008fd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d106      	bne.n	8008fe8 <USB_HC_Init+0x1c8>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d003      	beq.n	8008fe8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	e001      	b.n	8008fec <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fec:	787b      	ldrb	r3, [r7, #1]
 8008fee:	059b      	lsls	r3, r3, #22
 8008ff0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008ff4:	78bb      	ldrb	r3, [r7, #2]
 8008ff6:	02db      	lsls	r3, r3, #11
 8008ff8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008ffc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008ffe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009002:	049b      	lsls	r3, r3, #18
 8009004:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009008:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800900a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800900c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009010:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	0159      	lsls	r1, r3, #5
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	440b      	add	r3, r1
 800901e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009022:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009028:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800902a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800902e:	2b03      	cmp	r3, #3
 8009030:	d003      	beq.n	800903a <USB_HC_Init+0x21a>
 8009032:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009036:	2b01      	cmp	r3, #1
 8009038:	d10f      	bne.n	800905a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	4413      	add	r3, r2
 8009042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	0151      	lsls	r1, r2, #5
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	440a      	add	r2, r1
 8009050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009058:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800905a:	7ffb      	ldrb	r3, [r7, #31]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3720      	adds	r7, #32
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08c      	sub	sp, #48	; 0x30
 8009068:	af02      	add	r7, sp, #8
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	785b      	ldrb	r3, [r3, #1]
 800907a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800907c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009080:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908a:	2b00      	cmp	r3, #0
 800908c:	d02d      	beq.n	80090ea <USB_HC_StartXfer+0x86>
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	791b      	ldrb	r3, [r3, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d129      	bne.n	80090ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009096:	79fb      	ldrb	r3, [r7, #7]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d117      	bne.n	80090cc <USB_HC_StartXfer+0x68>
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	79db      	ldrb	r3, [r3, #7]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d003      	beq.n	80090ac <USB_HC_StartXfer+0x48>
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	79db      	ldrb	r3, [r3, #7]
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d10f      	bne.n	80090cc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	015a      	lsls	r2, r3, #5
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	4413      	add	r3, r2
 80090b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	0151      	lsls	r1, r2, #5
 80090be:	6a3a      	ldr	r2, [r7, #32]
 80090c0:	440a      	add	r2, r1
 80090c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10b      	bne.n	80090ea <USB_HC_StartXfer+0x86>
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	795b      	ldrb	r3, [r3, #5]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d107      	bne.n	80090ea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	785b      	ldrb	r3, [r3, #1]
 80090de:	4619      	mov	r1, r3
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 fa0f 	bl	8009504 <USB_DoPing>
      return HAL_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	e0f8      	b.n	80092dc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d018      	beq.n	8009124 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	8912      	ldrh	r2, [r2, #8]
 80090fa:	4413      	add	r3, r2
 80090fc:	3b01      	subs	r3, #1
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	8912      	ldrh	r2, [r2, #8]
 8009102:	fbb3 f3f2 	udiv	r3, r3, r2
 8009106:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009108:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800910a:	8b7b      	ldrh	r3, [r7, #26]
 800910c:	429a      	cmp	r2, r3
 800910e:	d90b      	bls.n	8009128 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009110:	8b7b      	ldrh	r3, [r7, #26]
 8009112:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	8912      	ldrh	r2, [r2, #8]
 800911a:	fb03 f202 	mul.w	r2, r3, r2
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	611a      	str	r2, [r3, #16]
 8009122:	e001      	b.n	8009128 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009124:	2301      	movs	r3, #1
 8009126:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	78db      	ldrb	r3, [r3, #3]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d007      	beq.n	8009140 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009130:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	8912      	ldrh	r2, [r2, #8]
 8009136:	fb03 f202 	mul.w	r2, r3, r2
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	611a      	str	r2, [r3, #16]
 800913e:	e003      	b.n	8009148 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	695a      	ldr	r2, [r3, #20]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009152:	04d9      	lsls	r1, r3, #19
 8009154:	4b63      	ldr	r3, [pc, #396]	; (80092e4 <USB_HC_StartXfer+0x280>)
 8009156:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009158:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	7a9b      	ldrb	r3, [r3, #10]
 800915e:	075b      	lsls	r3, r3, #29
 8009160:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009164:	69f9      	ldr	r1, [r7, #28]
 8009166:	0148      	lsls	r0, r1, #5
 8009168:	6a39      	ldr	r1, [r7, #32]
 800916a:	4401      	add	r1, r0
 800916c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009170:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009172:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d009      	beq.n	800918e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	68d9      	ldr	r1, [r3, #12]
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	6a3b      	ldr	r3, [r7, #32]
 8009184:	4413      	add	r3, r2
 8009186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918a:	460a      	mov	r2, r1
 800918c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	bf0c      	ite	eq
 800919e:	2301      	moveq	r3, #1
 80091a0:	2300      	movne	r3, #0
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69fa      	ldr	r2, [r7, #28]
 80091b6:	0151      	lsls	r1, r2, #5
 80091b8:	6a3a      	ldr	r2, [r7, #32]
 80091ba:	440a      	add	r2, r1
 80091bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	7e7b      	ldrb	r3, [r7, #25]
 80091d6:	075b      	lsls	r3, r3, #29
 80091d8:	69f9      	ldr	r1, [r7, #28]
 80091da:	0148      	lsls	r0, r1, #5
 80091dc:	6a39      	ldr	r1, [r7, #32]
 80091de:	4401      	add	r1, r0
 80091e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80091e4:	4313      	orrs	r3, r2
 80091e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091fe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	78db      	ldrb	r3, [r3, #3]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	e003      	b.n	800921a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009218:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009220:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	4413      	add	r3, r2
 800922a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800922e:	461a      	mov	r2, r3
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	e04e      	b.n	80092dc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	78db      	ldrb	r3, [r3, #3]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d149      	bne.n	80092da <USB_HC_StartXfer+0x276>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d045      	beq.n	80092da <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	79db      	ldrb	r3, [r3, #7]
 8009252:	2b03      	cmp	r3, #3
 8009254:	d830      	bhi.n	80092b8 <USB_HC_StartXfer+0x254>
 8009256:	a201      	add	r2, pc, #4	; (adr r2, 800925c <USB_HC_StartXfer+0x1f8>)
 8009258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925c:	0800926d 	.word	0x0800926d
 8009260:	08009291 	.word	0x08009291
 8009264:	0800926d 	.word	0x0800926d
 8009268:	08009291 	.word	0x08009291
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	3303      	adds	r3, #3
 8009272:	089b      	lsrs	r3, r3, #2
 8009274:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009276:	8afa      	ldrh	r2, [r7, #22]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	b29b      	uxth	r3, r3
 800927e:	429a      	cmp	r2, r3
 8009280:	d91c      	bls.n	80092bc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	f043 0220 	orr.w	r2, r3, #32
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	619a      	str	r2, [r3, #24]
        }
        break;
 800928e:	e015      	b.n	80092bc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	3303      	adds	r3, #3
 8009296:	089b      	lsrs	r3, r3, #2
 8009298:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800929a:	8afa      	ldrh	r2, [r7, #22]
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d90a      	bls.n	80092c0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80092b6:	e003      	b.n	80092c0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80092b8:	bf00      	nop
 80092ba:	e002      	b.n	80092c2 <USB_HC_StartXfer+0x25e>
        break;
 80092bc:	bf00      	nop
 80092be:	e000      	b.n	80092c2 <USB_HC_StartXfer+0x25e>
        break;
 80092c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	68d9      	ldr	r1, [r3, #12]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	785a      	ldrb	r2, [r3, #1]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	2000      	movs	r0, #0
 80092d2:	9000      	str	r0, [sp, #0]
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff fb31 	bl	800893c <USB_WritePacket>
  }

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3728      	adds	r7, #40	; 0x28
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	1ff80000 	.word	0x1ff80000

080092e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092fa:	695b      	ldr	r3, [r3, #20]
 80092fc:	b29b      	uxth	r3, r3
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800930a:	b480      	push	{r7}
 800930c:	b089      	sub	sp, #36	; 0x24
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	460b      	mov	r3, r1
 8009314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	015a      	lsls	r2, r3, #5
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	4413      	add	r3, r2
 800932a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	0c9b      	lsrs	r3, r3, #18
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	4413      	add	r3, r2
 8009340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	0fdb      	lsrs	r3, r3, #31
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b20      	cmp	r3, #32
 8009358:	d104      	bne.n	8009364 <USB_HC_Halt+0x5a>
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	e0c8      	b.n	80094f6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <USB_HC_Halt+0x66>
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b02      	cmp	r3, #2
 800936e:	d163      	bne.n	8009438 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	4413      	add	r3, r2
 8009378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69ba      	ldr	r2, [r7, #24]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	69fa      	ldr	r2, [r7, #28]
 8009384:	440a      	add	r2, r1
 8009386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800938a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800938e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	2b00      	cmp	r3, #0
 800939a:	f040 80ab 	bne.w	80094f4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d133      	bne.n	8009412 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	69ba      	ldr	r2, [r7, #24]
 80093ba:	0151      	lsls	r1, r2, #5
 80093bc:	69fa      	ldr	r2, [r7, #28]
 80093be:	440a      	add	r2, r1
 80093c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093c8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	0151      	lsls	r1, r2, #5
 80093dc:	69fa      	ldr	r2, [r7, #28]
 80093de:	440a      	add	r2, r1
 80093e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093e8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3301      	adds	r3, #1
 80093ee:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093f6:	d81d      	bhi.n	8009434 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800940a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800940e:	d0ec      	beq.n	80093ea <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009410:	e070      	b.n	80094f4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	4413      	add	r3, r2
 800941a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	0151      	lsls	r1, r2, #5
 8009424:	69fa      	ldr	r2, [r7, #28]
 8009426:	440a      	add	r2, r1
 8009428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800942c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009430:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009432:	e05f      	b.n	80094f4 <USB_HC_Halt+0x1ea>
            break;
 8009434:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009436:	e05d      	b.n	80094f4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	4413      	add	r3, r2
 8009440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	69ba      	ldr	r2, [r7, #24]
 8009448:	0151      	lsls	r1, r2, #5
 800944a:	69fa      	ldr	r2, [r7, #28]
 800944c:	440a      	add	r2, r1
 800944e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009456:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d133      	bne.n	80094d0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	4413      	add	r3, r2
 8009470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	0151      	lsls	r1, r2, #5
 800947a:	69fa      	ldr	r2, [r7, #28]
 800947c:	440a      	add	r2, r1
 800947e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009482:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009486:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	4413      	add	r3, r2
 8009490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69ba      	ldr	r2, [r7, #24]
 8009498:	0151      	lsls	r1, r2, #5
 800949a:	69fa      	ldr	r2, [r7, #28]
 800949c:	440a      	add	r2, r1
 800949e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094a6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	3301      	adds	r3, #1
 80094ac:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094b4:	d81d      	bhi.n	80094f2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094cc:	d0ec      	beq.n	80094a8 <USB_HC_Halt+0x19e>
 80094ce:	e011      	b.n	80094f4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	69ba      	ldr	r2, [r7, #24]
 80094e0:	0151      	lsls	r1, r2, #5
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	440a      	add	r2, r1
 80094e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	e000      	b.n	80094f4 <USB_HC_Halt+0x1ea>
          break;
 80094f2:	bf00      	nop
    }
  }

  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3724      	adds	r7, #36	; 0x24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
	...

08009504 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009504:	b480      	push	{r7}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009514:	78fb      	ldrb	r3, [r7, #3]
 8009516:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009518:	2301      	movs	r3, #1
 800951a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	04da      	lsls	r2, r3, #19
 8009520:	4b15      	ldr	r3, [pc, #84]	; (8009578 <USB_DoPing+0x74>)
 8009522:	4013      	ands	r3, r2
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	0151      	lsls	r1, r2, #5
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	440a      	add	r2, r1
 800952c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009530:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009534:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	4413      	add	r3, r2
 800953e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800954c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009554:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	4413      	add	r3, r2
 800955e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009562:	461a      	mov	r2, r3
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	371c      	adds	r7, #28
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	1ff80000 	.word	0x1ff80000

0800957c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff f911 	bl	80087b8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009596:	2110      	movs	r1, #16
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff f96b 	bl	8008874 <USB_FlushTxFifo>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff f997 	bl	80088dc <USB_FlushRxFifo>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80095b8:	2300      	movs	r3, #0
 80095ba:	61bb      	str	r3, [r7, #24]
 80095bc:	e01f      	b.n	80095fe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f2:	461a      	mov	r2, r3
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	3301      	adds	r3, #1
 80095fc:	61bb      	str	r3, [r7, #24]
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	2b0f      	cmp	r3, #15
 8009602:	d9dc      	bls.n	80095be <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009604:	2300      	movs	r3, #0
 8009606:	61bb      	str	r3, [r7, #24]
 8009608:	e034      	b.n	8009674 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	4413      	add	r3, r2
 8009612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009620:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009628:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009630:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	4413      	add	r3, r2
 800963a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800963e:	461a      	mov	r2, r3
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	3301      	adds	r3, #1
 8009648:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009650:	d80c      	bhi.n	800966c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	015a      	lsls	r2, r3, #5
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	4413      	add	r3, r2
 800965a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009668:	d0ec      	beq.n	8009644 <USB_StopHost+0xc8>
 800966a:	e000      	b.n	800966e <USB_StopHost+0xf2>
        break;
 800966c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	3301      	adds	r3, #1
 8009672:	61bb      	str	r3, [r7, #24]
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	2b0f      	cmp	r3, #15
 8009678:	d9c7      	bls.n	800960a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009680:	461a      	mov	r2, r3
 8009682:	f04f 33ff 	mov.w	r3, #4294967295
 8009686:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f04f 32ff 	mov.w	r2, #4294967295
 800968e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff f880 	bl	8008796 <USB_EnableGlobalInt>

  return ret;
 8009696:	7ffb      	ldrb	r3, [r7, #31]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3720      	adds	r7, #32
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80096a0:	b590      	push	{r4, r7, lr}
 80096a2:	b089      	sub	sp, #36	; 0x24
 80096a4:	af04      	add	r7, sp, #16
 80096a6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80096a8:	2301      	movs	r3, #1
 80096aa:	2202      	movs	r2, #2
 80096ac:	2102      	movs	r1, #2
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fc66 	bl	8009f80 <USBH_FindInterface>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	2bff      	cmp	r3, #255	; 0xff
 80096bc:	d002      	beq.n	80096c4 <USBH_CDC_InterfaceInit+0x24>
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d901      	bls.n	80096c8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80096c4:	2302      	movs	r3, #2
 80096c6:	e13d      	b.n	8009944 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fc3b 	bl	8009f48 <USBH_SelectInterface>
 80096d2:	4603      	mov	r3, r0
 80096d4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80096dc:	2302      	movs	r3, #2
 80096de:	e131      	b.n	8009944 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80096e6:	2050      	movs	r0, #80	; 0x50
 80096e8:	f002 fad2 	bl	800bc90 <malloc>
 80096ec:	4603      	mov	r3, r0
 80096ee:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009700:	2302      	movs	r3, #2
 8009702:	e11f      	b.n	8009944 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009704:	2250      	movs	r2, #80	; 0x50
 8009706:	2100      	movs	r1, #0
 8009708:	68b8      	ldr	r0, [r7, #8]
 800970a:	f002 fb7d 	bl	800be08 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800970e:	7bfb      	ldrb	r3, [r7, #15]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	211a      	movs	r1, #26
 8009714:	fb01 f303 	mul.w	r3, r1, r3
 8009718:	4413      	add	r3, r2
 800971a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	b25b      	sxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	da15      	bge.n	8009752 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	211a      	movs	r1, #26
 800972c:	fb01 f303 	mul.w	r3, r1, r3
 8009730:	4413      	add	r3, r2
 8009732:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009736:	781a      	ldrb	r2, [r3, #0]
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	211a      	movs	r1, #26
 8009742:	fb01 f303 	mul.w	r3, r1, r3
 8009746:	4413      	add	r3, r2
 8009748:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800974c:	881a      	ldrh	r2, [r3, #0]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	785b      	ldrb	r3, [r3, #1]
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f001 ff2e 	bl	800b5ba <USBH_AllocPipe>
 800975e:	4603      	mov	r3, r0
 8009760:	461a      	mov	r2, r3
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	7819      	ldrb	r1, [r3, #0]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	7858      	ldrb	r0, [r3, #1]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	8952      	ldrh	r2, [r2, #10]
 800977e:	9202      	str	r2, [sp, #8]
 8009780:	2203      	movs	r2, #3
 8009782:	9201      	str	r2, [sp, #4]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	4623      	mov	r3, r4
 8009788:	4602      	mov	r2, r0
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 fee6 	bl	800b55c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2200      	movs	r2, #0
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f002 f9f5 	bl	800bb88 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800979e:	2300      	movs	r3, #0
 80097a0:	2200      	movs	r2, #0
 80097a2:	210a      	movs	r1, #10
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fbeb 	bl	8009f80 <USBH_FindInterface>
 80097aa:	4603      	mov	r3, r0
 80097ac:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
 80097b0:	2bff      	cmp	r3, #255	; 0xff
 80097b2:	d002      	beq.n	80097ba <USBH_CDC_InterfaceInit+0x11a>
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d901      	bls.n	80097be <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80097ba:	2302      	movs	r3, #2
 80097bc:	e0c2      	b.n	8009944 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	211a      	movs	r1, #26
 80097c4:	fb01 f303 	mul.w	r3, r1, r3
 80097c8:	4413      	add	r3, r2
 80097ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	b25b      	sxtb	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	da16      	bge.n	8009804 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	211a      	movs	r1, #26
 80097dc:	fb01 f303 	mul.w	r3, r1, r3
 80097e0:	4413      	add	r3, r2
 80097e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80097e6:	781a      	ldrb	r2, [r3, #0]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	211a      	movs	r1, #26
 80097f2:	fb01 f303 	mul.w	r3, r1, r3
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80097fc:	881a      	ldrh	r2, [r3, #0]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	835a      	strh	r2, [r3, #26]
 8009802:	e015      	b.n	8009830 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	211a      	movs	r1, #26
 800980a:	fb01 f303 	mul.w	r3, r1, r3
 800980e:	4413      	add	r3, r2
 8009810:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009814:	781a      	ldrb	r2, [r3, #0]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	211a      	movs	r1, #26
 8009820:	fb01 f303 	mul.w	r3, r1, r3
 8009824:	4413      	add	r3, r2
 8009826:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800982a:	881a      	ldrh	r2, [r3, #0]
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	211a      	movs	r1, #26
 8009836:	fb01 f303 	mul.w	r3, r1, r3
 800983a:	4413      	add	r3, r2
 800983c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	b25b      	sxtb	r3, r3
 8009844:	2b00      	cmp	r3, #0
 8009846:	da16      	bge.n	8009876 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	211a      	movs	r1, #26
 800984e:	fb01 f303 	mul.w	r3, r1, r3
 8009852:	4413      	add	r3, r2
 8009854:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009858:	781a      	ldrb	r2, [r3, #0]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	211a      	movs	r1, #26
 8009864:	fb01 f303 	mul.w	r3, r1, r3
 8009868:	4413      	add	r3, r2
 800986a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800986e:	881a      	ldrh	r2, [r3, #0]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	835a      	strh	r2, [r3, #26]
 8009874:	e015      	b.n	80098a2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	211a      	movs	r1, #26
 800987c:	fb01 f303 	mul.w	r3, r1, r3
 8009880:	4413      	add	r3, r2
 8009882:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009886:	781a      	ldrb	r2, [r3, #0]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800988c:	7bfb      	ldrb	r3, [r7, #15]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	211a      	movs	r1, #26
 8009892:	fb01 f303 	mul.w	r3, r1, r3
 8009896:	4413      	add	r3, r2
 8009898:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800989c:	881a      	ldrh	r2, [r3, #0]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	7b9b      	ldrb	r3, [r3, #14]
 80098a6:	4619      	mov	r1, r3
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f001 fe86 	bl	800b5ba <USBH_AllocPipe>
 80098ae:	4603      	mov	r3, r0
 80098b0:	461a      	mov	r2, r3
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	7bdb      	ldrb	r3, [r3, #15]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f001 fe7c 	bl	800b5ba <USBH_AllocPipe>
 80098c2:	4603      	mov	r3, r0
 80098c4:	461a      	mov	r2, r3
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	7b59      	ldrb	r1, [r3, #13]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	7b98      	ldrb	r0, [r3, #14]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	8b12      	ldrh	r2, [r2, #24]
 80098e2:	9202      	str	r2, [sp, #8]
 80098e4:	2202      	movs	r2, #2
 80098e6:	9201      	str	r2, [sp, #4]
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	4623      	mov	r3, r4
 80098ec:	4602      	mov	r2, r0
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f001 fe34 	bl	800b55c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	7b19      	ldrb	r1, [r3, #12]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	7bd8      	ldrb	r0, [r3, #15]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	8b52      	ldrh	r2, [r2, #26]
 800990c:	9202      	str	r2, [sp, #8]
 800990e:	2202      	movs	r2, #2
 8009910:	9201      	str	r2, [sp, #4]
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	4623      	mov	r3, r4
 8009916:	4602      	mov	r2, r0
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f001 fe1f 	bl	800b55c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	7b5b      	ldrb	r3, [r3, #13]
 800992a:	2200      	movs	r2, #0
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f002 f92a 	bl	800bb88 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	7b1b      	ldrb	r3, [r3, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f002 f923 	bl	800bb88 <USBH_LL_SetToggle>

  return USBH_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	bd90      	pop	{r4, r7, pc}

0800994c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00e      	beq.n	8009984 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 fe14 	bl	800b59a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f001 fe3f 	bl	800b5fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	7b1b      	ldrb	r3, [r3, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00e      	beq.n	80099aa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	7b1b      	ldrb	r3, [r3, #12]
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 fe01 	bl	800b59a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	7b1b      	ldrb	r3, [r3, #12]
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f001 fe2c 	bl	800b5fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	7b5b      	ldrb	r3, [r3, #13]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00e      	beq.n	80099d0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	7b5b      	ldrb	r3, [r3, #13]
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f001 fdee 	bl	800b59a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	7b5b      	ldrb	r3, [r3, #13]
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 fe19 	bl	800b5fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f002 f95b 	bl	800bca0 <free>
    phost->pActiveClass->pData = 0U;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099f0:	2200      	movs	r2, #0
 80099f2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	3340      	adds	r3, #64	; 0x40
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f8b1 	bl	8009b7e <GetLineCoding>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009a20:	7afb      	ldrb	r3, [r7, #11]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d105      	bne.n	8009a32 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a2c:	2102      	movs	r1, #2
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009a32:	7afb      	ldrb	r3, [r7, #11]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a44:	2301      	movs	r3, #1
 8009a46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	d877      	bhi.n	8009b50 <USBH_CDC_Process+0x114>
 8009a60:	a201      	add	r2, pc, #4	; (adr r2, 8009a68 <USBH_CDC_Process+0x2c>)
 8009a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a66:	bf00      	nop
 8009a68:	08009a7d 	.word	0x08009a7d
 8009a6c:	08009a83 	.word	0x08009a83
 8009a70:	08009ab3 	.word	0x08009ab3
 8009a74:	08009b27 	.word	0x08009b27
 8009a78:	08009b35 	.word	0x08009b35
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a80:	e06d      	b.n	8009b5e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f897 	bl	8009bbc <SetLineCoding>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d104      	bne.n	8009aa2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009aa0:	e058      	b.n	8009b54 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d055      	beq.n	8009b54 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2204      	movs	r2, #4
 8009aac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009ab0:	e050      	b.n	8009b54 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	3340      	adds	r3, #64	; 0x40
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f860 	bl	8009b7e <GetLineCoding>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d126      	bne.n	8009b16 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ada:	791b      	ldrb	r3, [r3, #4]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d13b      	bne.n	8009b58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aea:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d133      	bne.n	8009b58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009afa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d12b      	bne.n	8009b58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b08:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d124      	bne.n	8009b58 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f958 	bl	8009dc4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009b14:	e020      	b.n	8009b58 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009b16:	7bbb      	ldrb	r3, [r7, #14]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d01d      	beq.n	8009b58 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	2204      	movs	r2, #4
 8009b20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009b24:	e018      	b.n	8009b58 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f867 	bl	8009bfa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f8da 	bl	8009ce6 <CDC_ProcessReception>
      break;
 8009b32:	e014      	b.n	8009b5e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009b34:	2100      	movs	r1, #0
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 ffef 	bl	800ab1a <USBH_ClrFeature>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009b4e:	e005      	b.n	8009b5c <USBH_CDC_Process+0x120>

    default:
      break;
 8009b50:	bf00      	nop
 8009b52:	e004      	b.n	8009b5e <USBH_CDC_Process+0x122>
      break;
 8009b54:	bf00      	nop
 8009b56:	e002      	b.n	8009b5e <USBH_CDC_Process+0x122>
      break;
 8009b58:	bf00      	nop
 8009b5a:	e000      	b.n	8009b5e <USBH_CDC_Process+0x122>
      break;
 8009b5c:	bf00      	nop

  }

  return status;
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	22a1      	movs	r2, #161	; 0xa1
 8009b8c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2221      	movs	r2, #33	; 0x21
 8009b92:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2207      	movs	r2, #7
 8009ba4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2207      	movs	r2, #7
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 fa83 	bl	800b0b8 <USBH_CtlReq>
 8009bb2:	4603      	mov	r3, r0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2221      	movs	r2, #33	; 0x21
 8009bca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2207      	movs	r2, #7
 8009be2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2207      	movs	r2, #7
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f001 fa64 	bl	800b0b8 <USBH_CtlReq>
 8009bf0:	4603      	mov	r3, r0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b086      	sub	sp, #24
 8009bfe:	af02      	add	r7, sp, #8
 8009c00:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d002      	beq.n	8009c20 <CDC_ProcessTransmission+0x26>
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d023      	beq.n	8009c66 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009c1e:	e05e      	b.n	8009cde <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	8b12      	ldrh	r2, [r2, #24]
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d90b      	bls.n	8009c44 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	69d9      	ldr	r1, [r3, #28]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	8b1a      	ldrh	r2, [r3, #24]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	7b5b      	ldrb	r3, [r3, #13]
 8009c38:	2001      	movs	r0, #1
 8009c3a:	9000      	str	r0, [sp, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f001 fc4a 	bl	800b4d6 <USBH_BulkSendData>
 8009c42:	e00b      	b.n	8009c5c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	7b5b      	ldrb	r3, [r3, #13]
 8009c52:	2001      	movs	r0, #1
 8009c54:	9000      	str	r0, [sp, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f001 fc3d 	bl	800b4d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009c64:	e03b      	b.n	8009cde <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	7b5b      	ldrb	r3, [r3, #13]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f001 ff61 	bl	800bb34 <USBH_LL_GetURBState>
 8009c72:	4603      	mov	r3, r0
 8009c74:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009c76:	7afb      	ldrb	r3, [r7, #11]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d128      	bne.n	8009cce <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	8b12      	ldrh	r2, [r2, #24]
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d90e      	bls.n	8009ca6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	8b12      	ldrh	r2, [r2, #24]
 8009c90:	1a9a      	subs	r2, r3, r2
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	69db      	ldr	r3, [r3, #28]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	8b12      	ldrh	r2, [r2, #24]
 8009c9e:	441a      	add	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	61da      	str	r2, [r3, #28]
 8009ca4:	e002      	b.n	8009cac <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d004      	beq.n	8009cbe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009cbc:	e00e      	b.n	8009cdc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f868 	bl	8009d9c <USBH_CDC_TransmitCallback>
      break;
 8009ccc:	e006      	b.n	8009cdc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009cce:	7afb      	ldrb	r3, [r7, #11]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d103      	bne.n	8009cdc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009cdc:	bf00      	nop
  }
}
 8009cde:	bf00      	nop
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b086      	sub	sp, #24
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009d02:	2b03      	cmp	r3, #3
 8009d04:	d002      	beq.n	8009d0c <CDC_ProcessReception+0x26>
 8009d06:	2b04      	cmp	r3, #4
 8009d08:	d00e      	beq.n	8009d28 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009d0a:	e043      	b.n	8009d94 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	6a19      	ldr	r1, [r3, #32]
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	8b5a      	ldrh	r2, [r3, #26]
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	7b1b      	ldrb	r3, [r3, #12]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f001 fc01 	bl	800b520 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	2204      	movs	r2, #4
 8009d22:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009d26:	e035      	b.n	8009d94 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	7b1b      	ldrb	r3, [r3, #12]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f001 ff00 	bl	800bb34 <USBH_LL_GetURBState>
 8009d34:	4603      	mov	r3, r0
 8009d36:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009d38:	7cfb      	ldrb	r3, [r7, #19]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d129      	bne.n	8009d92 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	7b1b      	ldrb	r3, [r3, #12]
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 fe63 	bl	800ba10 <USBH_LL_GetLastXferSize>
 8009d4a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d016      	beq.n	8009d84 <CDC_ProcessReception+0x9e>
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	8b5b      	ldrh	r3, [r3, #26]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d910      	bls.n	8009d84 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	1ad2      	subs	r2, r2, r3
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	6a1a      	ldr	r2, [r3, #32]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	441a      	add	r2, r3
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2203      	movs	r2, #3
 8009d7e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009d82:	e006      	b.n	8009d92 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f80f 	bl	8009db0 <USBH_CDC_ReceiveCallback>
      break;
 8009d92:	bf00      	nop
  }
}
 8009d94:	bf00      	nop
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	4613      	mov	r3, r2
 8009de4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009dec:	2302      	movs	r3, #2
 8009dee:	e029      	b.n	8009e44 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	79fa      	ldrb	r2, [r7, #7]
 8009df4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 f81f 	bl	8009e4c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d003      	beq.n	8009e3c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f001 fd33 	bl	800b8a8 <USBH_LL_Init>

  return USBH_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60fb      	str	r3, [r7, #12]
 8009e5c:	e009      	b.n	8009e72 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	33e0      	adds	r3, #224	; 0xe0
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	2200      	movs	r2, #0
 8009e6a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2b0f      	cmp	r3, #15
 8009e76:	d9f2      	bls.n	8009e5e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	e009      	b.n	8009e92 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e88:	2200      	movs	r2, #0
 8009e8a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	60fb      	str	r3, [r7, #12]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e98:	d3f1      	bcc.n	8009e7e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2240      	movs	r2, #64	; 0x40
 8009ebe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d016      	beq.n	8009f36 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10e      	bne.n	8009f30 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009f18:	1c59      	adds	r1, r3, #1
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	33de      	adds	r3, #222	; 0xde
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	73fb      	strb	r3, [r7, #15]
 8009f2e:	e004      	b.n	8009f3a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009f30:	2302      	movs	r3, #2
 8009f32:	73fb      	strb	r3, [r7, #15]
 8009f34:	e001      	b.n	8009f3a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009f36:	2302      	movs	r3, #2
 8009f38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009f5e:	78fa      	ldrb	r2, [r7, #3]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d204      	bcs.n	8009f6e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	78fa      	ldrb	r2, [r7, #3]
 8009f68:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009f6c:	e001      	b.n	8009f72 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009f6e:	2302      	movs	r3, #2
 8009f70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	4608      	mov	r0, r1
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	4603      	mov	r3, r0
 8009f90:	70fb      	strb	r3, [r7, #3]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70bb      	strb	r3, [r7, #2]
 8009f96:	4613      	mov	r3, r2
 8009f98:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009fa8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009faa:	e025      	b.n	8009ff8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
 8009fae:	221a      	movs	r2, #26
 8009fb0:	fb02 f303 	mul.w	r3, r2, r3
 8009fb4:	3308      	adds	r3, #8
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	4413      	add	r3, r2
 8009fba:	3302      	adds	r3, #2
 8009fbc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	795b      	ldrb	r3, [r3, #5]
 8009fc2:	78fa      	ldrb	r2, [r7, #3]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d002      	beq.n	8009fce <USBH_FindInterface+0x4e>
 8009fc8:	78fb      	ldrb	r3, [r7, #3]
 8009fca:	2bff      	cmp	r3, #255	; 0xff
 8009fcc:	d111      	bne.n	8009ff2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009fd2:	78ba      	ldrb	r2, [r7, #2]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d002      	beq.n	8009fde <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009fd8:	78bb      	ldrb	r3, [r7, #2]
 8009fda:	2bff      	cmp	r3, #255	; 0xff
 8009fdc:	d109      	bne.n	8009ff2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009fe2:	787a      	ldrb	r2, [r7, #1]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d002      	beq.n	8009fee <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009fe8:	787b      	ldrb	r3, [r7, #1]
 8009fea:	2bff      	cmp	r3, #255	; 0xff
 8009fec:	d101      	bne.n	8009ff2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009fee:	7dfb      	ldrb	r3, [r7, #23]
 8009ff0:	e006      	b.n	800a000 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009ff8:	7dfb      	ldrb	r3, [r7, #23]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d9d6      	bls.n	8009fac <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009ffe:	23ff      	movs	r3, #255	; 0xff
}
 800a000:	4618      	mov	r0, r3
 800a002:	371c      	adds	r7, #28
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f001 fc83 	bl	800b920 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a01a:	2101      	movs	r1, #1
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f001 fd9c 	bl	800bb5a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b088      	sub	sp, #32
 800a030:	af04      	add	r7, sp, #16
 800a032:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a034:	2302      	movs	r3, #2
 800a036:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b01      	cmp	r3, #1
 800a046:	d102      	bne.n	800a04e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2203      	movs	r2, #3
 800a04c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b0b      	cmp	r3, #11
 800a056:	f200 81be 	bhi.w	800a3d6 <USBH_Process+0x3aa>
 800a05a:	a201      	add	r2, pc, #4	; (adr r2, 800a060 <USBH_Process+0x34>)
 800a05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a060:	0800a091 	.word	0x0800a091
 800a064:	0800a0c3 	.word	0x0800a0c3
 800a068:	0800a12b 	.word	0x0800a12b
 800a06c:	0800a371 	.word	0x0800a371
 800a070:	0800a3d7 	.word	0x0800a3d7
 800a074:	0800a1cf 	.word	0x0800a1cf
 800a078:	0800a317 	.word	0x0800a317
 800a07c:	0800a205 	.word	0x0800a205
 800a080:	0800a225 	.word	0x0800a225
 800a084:	0800a245 	.word	0x0800a245
 800a088:	0800a289 	.word	0x0800a289
 800a08c:	0800a359 	.word	0x0800a359
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f000 819e 	beq.w	800a3da <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a0a4:	20c8      	movs	r0, #200	; 0xc8
 800a0a6:	f001 fd9f 	bl	800bbe8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f001 fc95 	bl	800b9da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a0c0:	e18b      	b.n	800a3da <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d107      	bne.n	800a0dc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a0da:	e18d      	b.n	800a3f8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a0e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0e6:	d914      	bls.n	800a112 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d903      	bls.n	800a10a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	220d      	movs	r2, #13
 800a106:	701a      	strb	r2, [r3, #0]
      break;
 800a108:	e176      	b.n	800a3f8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	701a      	strb	r2, [r3, #0]
      break;
 800a110:	e172      	b.n	800a3f8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a118:	f103 020a 	add.w	r2, r3, #10
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a122:	200a      	movs	r0, #10
 800a124:	f001 fd60 	bl	800bbe8 <USBH_Delay>
      break;
 800a128:	e166      	b.n	800a3f8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a130:	2b00      	cmp	r3, #0
 800a132:	d005      	beq.n	800a140 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a13a:	2104      	movs	r1, #4
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a140:	2064      	movs	r0, #100	; 0x64
 800a142:	f001 fd51 	bl	800bbe8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f001 fc20 	bl	800b98c <USBH_LL_GetSpeed>
 800a14c:	4603      	mov	r3, r0
 800a14e:	461a      	mov	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2205      	movs	r2, #5
 800a15a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a15c:	2100      	movs	r1, #0
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f001 fa2b 	bl	800b5ba <USBH_AllocPipe>
 800a164:	4603      	mov	r3, r0
 800a166:	461a      	mov	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a16c:	2180      	movs	r1, #128	; 0x80
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f001 fa23 	bl	800b5ba <USBH_AllocPipe>
 800a174:	4603      	mov	r3, r0
 800a176:	461a      	mov	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	7919      	ldrb	r1, [r3, #4]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a190:	b292      	uxth	r2, r2
 800a192:	9202      	str	r2, [sp, #8]
 800a194:	2200      	movs	r2, #0
 800a196:	9201      	str	r2, [sp, #4]
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	4603      	mov	r3, r0
 800a19c:	2280      	movs	r2, #128	; 0x80
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f001 f9dc 	bl	800b55c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	7959      	ldrb	r1, [r3, #5]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a1b8:	b292      	uxth	r2, r2
 800a1ba:	9202      	str	r2, [sp, #8]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	9201      	str	r2, [sp, #4]
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f001 f9c8 	bl	800b55c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a1cc:	e114      	b.n	800a3f8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f918 	bl	800a404 <USBH_HandleEnum>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a1d8:	7bbb      	ldrb	r3, [r7, #14]
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f040 80fe 	bne.w	800a3de <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d103      	bne.n	800a1fc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2208      	movs	r2, #8
 800a1f8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a1fa:	e0f0      	b.n	800a3de <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2207      	movs	r2, #7
 800a200:	701a      	strb	r2, [r3, #0]
      break;
 800a202:	e0ec      	b.n	800a3de <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f000 80e9 	beq.w	800a3e2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a216:	2101      	movs	r1, #1
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2208      	movs	r2, #8
 800a220:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a222:	e0de      	b.n	800a3e2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	4619      	mov	r1, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fc2c 	bl	800aa8c <USBH_SetCfg>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	f040 80d5 	bne.w	800a3e6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2209      	movs	r2, #9
 800a240:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a242:	e0d0      	b.n	800a3e6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d016      	beq.n	800a280 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a252:	2101      	movs	r1, #1
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fc3c 	bl	800aad2 <USBH_SetFeature>
 800a25a:	4603      	mov	r3, r0
 800a25c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a25e:	7bbb      	ldrb	r3, [r7, #14]
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b00      	cmp	r3, #0
 800a264:	d103      	bne.n	800a26e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	220a      	movs	r2, #10
 800a26a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a26c:	e0bd      	b.n	800a3ea <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b03      	cmp	r3, #3
 800a274:	f040 80b9 	bne.w	800a3ea <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	220a      	movs	r2, #10
 800a27c:	701a      	strb	r2, [r3, #0]
      break;
 800a27e:	e0b4      	b.n	800a3ea <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	220a      	movs	r2, #10
 800a284:	701a      	strb	r2, [r3, #0]
      break;
 800a286:	e0b0      	b.n	800a3ea <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f000 80ad 	beq.w	800a3ee <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a29c:	2300      	movs	r3, #0
 800a29e:	73fb      	strb	r3, [r7, #15]
 800a2a0:	e016      	b.n	800a2d0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a2a2:	7bfa      	ldrb	r2, [r7, #15]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	32de      	adds	r2, #222	; 0xde
 800a2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ac:	791a      	ldrb	r2, [r3, #4]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d108      	bne.n	800a2ca <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a2b8:	7bfa      	ldrb	r2, [r7, #15]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	32de      	adds	r2, #222	; 0xde
 800a2be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a2c8:	e005      	b.n	800a2d6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	73fb      	strb	r3, [r7, #15]
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0e5      	beq.n	800a2a2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d016      	beq.n	800a30e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	4798      	blx	r3
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d109      	bne.n	800a306 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2206      	movs	r2, #6
 800a2f6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2fe:	2103      	movs	r1, #3
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a304:	e073      	b.n	800a3ee <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	220d      	movs	r2, #13
 800a30a:	701a      	strb	r2, [r3, #0]
      break;
 800a30c:	e06f      	b.n	800a3ee <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	220d      	movs	r2, #13
 800a312:	701a      	strb	r2, [r3, #0]
      break;
 800a314:	e06b      	b.n	800a3ee <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d017      	beq.n	800a350 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	4798      	blx	r3
 800a32c:	4603      	mov	r3, r0
 800a32e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a330:	7bbb      	ldrb	r3, [r7, #14]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2b00      	cmp	r3, #0
 800a336:	d103      	bne.n	800a340 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	220b      	movs	r2, #11
 800a33c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a33e:	e058      	b.n	800a3f2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a340:	7bbb      	ldrb	r3, [r7, #14]
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b02      	cmp	r3, #2
 800a346:	d154      	bne.n	800a3f2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	220d      	movs	r2, #13
 800a34c:	701a      	strb	r2, [r3, #0]
      break;
 800a34e:	e050      	b.n	800a3f2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	220d      	movs	r2, #13
 800a354:	701a      	strb	r2, [r3, #0]
      break;
 800a356:	e04c      	b.n	800a3f2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d049      	beq.n	800a3f6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a368:	695b      	ldr	r3, [r3, #20]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	4798      	blx	r3
      }
      break;
 800a36e:	e042      	b.n	800a3f6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7ff fd67 	bl	8009e4c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a384:	2b00      	cmp	r3, #0
 800a386:	d009      	beq.n	800a39c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d005      	beq.n	800a3b2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3ac:	2105      	movs	r1, #5
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d107      	bne.n	800a3ce <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7ff fe20 	bl	800a00c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a3cc:	e014      	b.n	800a3f8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f001 faa6 	bl	800b920 <USBH_LL_Start>
      break;
 800a3d4:	e010      	b.n	800a3f8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a3d6:	bf00      	nop
 800a3d8:	e00e      	b.n	800a3f8 <USBH_Process+0x3cc>
      break;
 800a3da:	bf00      	nop
 800a3dc:	e00c      	b.n	800a3f8 <USBH_Process+0x3cc>
      break;
 800a3de:	bf00      	nop
 800a3e0:	e00a      	b.n	800a3f8 <USBH_Process+0x3cc>
    break;
 800a3e2:	bf00      	nop
 800a3e4:	e008      	b.n	800a3f8 <USBH_Process+0x3cc>
      break;
 800a3e6:	bf00      	nop
 800a3e8:	e006      	b.n	800a3f8 <USBH_Process+0x3cc>
      break;
 800a3ea:	bf00      	nop
 800a3ec:	e004      	b.n	800a3f8 <USBH_Process+0x3cc>
      break;
 800a3ee:	bf00      	nop
 800a3f0:	e002      	b.n	800a3f8 <USBH_Process+0x3cc>
      break;
 800a3f2:	bf00      	nop
 800a3f4:	e000      	b.n	800a3f8 <USBH_Process+0x3cc>
      break;
 800a3f6:	bf00      	nop
  }
  return USBH_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop

0800a404 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af04      	add	r7, sp, #16
 800a40a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a40c:	2301      	movs	r3, #1
 800a40e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a410:	2301      	movs	r3, #1
 800a412:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	785b      	ldrb	r3, [r3, #1]
 800a418:	2b07      	cmp	r3, #7
 800a41a:	f200 81c1 	bhi.w	800a7a0 <USBH_HandleEnum+0x39c>
 800a41e:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <USBH_HandleEnum+0x20>)
 800a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a424:	0800a445 	.word	0x0800a445
 800a428:	0800a503 	.word	0x0800a503
 800a42c:	0800a56d 	.word	0x0800a56d
 800a430:	0800a5fb 	.word	0x0800a5fb
 800a434:	0800a665 	.word	0x0800a665
 800a438:	0800a6d5 	.word	0x0800a6d5
 800a43c:	0800a71b 	.word	0x0800a71b
 800a440:	0800a761 	.word	0x0800a761
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a444:	2108      	movs	r1, #8
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fa50 	bl	800a8ec <USBH_Get_DevDesc>
 800a44c:	4603      	mov	r3, r0
 800a44e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a450:	7bbb      	ldrb	r3, [r7, #14]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d130      	bne.n	800a4b8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	7919      	ldrb	r1, [r3, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a47a:	b292      	uxth	r2, r2
 800a47c:	9202      	str	r2, [sp, #8]
 800a47e:	2200      	movs	r2, #0
 800a480:	9201      	str	r2, [sp, #4]
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	4603      	mov	r3, r0
 800a486:	2280      	movs	r2, #128	; 0x80
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 f867 	bl	800b55c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	7959      	ldrb	r1, [r3, #5]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a4a2:	b292      	uxth	r2, r2
 800a4a4:	9202      	str	r2, [sp, #8]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	9201      	str	r2, [sp, #4]
 800a4aa:	9300      	str	r3, [sp, #0]
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f001 f853 	bl	800b55c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a4b6:	e175      	b.n	800a7a4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	f040 8172 	bne.w	800a7a4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d903      	bls.n	800a4e2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	220d      	movs	r2, #13
 800a4de:	701a      	strb	r2, [r3, #0]
      break;
 800a4e0:	e160      	b.n	800a7a4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	795b      	ldrb	r3, [r3, #5]
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 f887 	bl	800b5fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	791b      	ldrb	r3, [r3, #4]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f001 f881 	bl	800b5fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	701a      	strb	r2, [r3, #0]
      break;
 800a500:	e150      	b.n	800a7a4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a502:	2112      	movs	r1, #18
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 f9f1 	bl	800a8ec <USBH_Get_DevDesc>
 800a50a:	4603      	mov	r3, r0
 800a50c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a50e:	7bbb      	ldrb	r3, [r7, #14]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d103      	bne.n	800a51c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2202      	movs	r2, #2
 800a518:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a51a:	e145      	b.n	800a7a8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a51c:	7bbb      	ldrb	r3, [r7, #14]
 800a51e:	2b03      	cmp	r3, #3
 800a520:	f040 8142 	bne.w	800a7a8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a52a:	3301      	adds	r3, #1
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a53a:	2b03      	cmp	r3, #3
 800a53c:	d903      	bls.n	800a546 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	220d      	movs	r2, #13
 800a542:	701a      	strb	r2, [r3, #0]
      break;
 800a544:	e130      	b.n	800a7a8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	795b      	ldrb	r3, [r3, #5]
 800a54a:	4619      	mov	r1, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f001 f855 	bl	800b5fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	791b      	ldrb	r3, [r3, #4]
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f001 f84f 	bl	800b5fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	701a      	strb	r2, [r3, #0]
      break;
 800a56a:	e11d      	b.n	800a7a8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a56c:	2101      	movs	r1, #1
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fa68 	bl	800aa44 <USBH_SetAddress>
 800a574:	4603      	mov	r3, r0
 800a576:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a578:	7bbb      	ldrb	r3, [r7, #14]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d132      	bne.n	800a5e4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a57e:	2002      	movs	r0, #2
 800a580:	f001 fb32 	bl	800bbe8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2203      	movs	r2, #3
 800a590:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	7919      	ldrb	r1, [r3, #4]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a5a6:	b292      	uxth	r2, r2
 800a5a8:	9202      	str	r2, [sp, #8]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	9201      	str	r2, [sp, #4]
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2280      	movs	r2, #128	; 0x80
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 ffd1 	bl	800b55c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	7959      	ldrb	r1, [r3, #5]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5ce:	b292      	uxth	r2, r2
 800a5d0:	9202      	str	r2, [sp, #8]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	9201      	str	r2, [sp, #4]
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2200      	movs	r2, #0
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 ffbd 	bl	800b55c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a5e2:	e0e3      	b.n	800a7ac <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	f040 80e0 	bne.w	800a7ac <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	220d      	movs	r2, #13
 800a5f0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	705a      	strb	r2, [r3, #1]
      break;
 800a5f8:	e0d8      	b.n	800a7ac <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a5fa:	2109      	movs	r1, #9
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f99d 	bl	800a93c <USBH_Get_CfgDesc>
 800a602:	4603      	mov	r3, r0
 800a604:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a606:	7bbb      	ldrb	r3, [r7, #14]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d103      	bne.n	800a614 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2204      	movs	r2, #4
 800a610:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a612:	e0cd      	b.n	800a7b0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a614:	7bbb      	ldrb	r3, [r7, #14]
 800a616:	2b03      	cmp	r3, #3
 800a618:	f040 80ca 	bne.w	800a7b0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a622:	3301      	adds	r3, #1
 800a624:	b2da      	uxtb	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a632:	2b03      	cmp	r3, #3
 800a634:	d903      	bls.n	800a63e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	220d      	movs	r2, #13
 800a63a:	701a      	strb	r2, [r3, #0]
      break;
 800a63c:	e0b8      	b.n	800a7b0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	795b      	ldrb	r3, [r3, #5]
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 ffd9 	bl	800b5fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	791b      	ldrb	r3, [r3, #4]
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 ffd3 	bl	800b5fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	701a      	strb	r2, [r3, #0]
      break;
 800a662:	e0a5      	b.n	800a7b0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f965 	bl	800a93c <USBH_Get_CfgDesc>
 800a672:	4603      	mov	r3, r0
 800a674:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a676:	7bbb      	ldrb	r3, [r7, #14]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d103      	bne.n	800a684 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2205      	movs	r2, #5
 800a680:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a682:	e097      	b.n	800a7b4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a684:	7bbb      	ldrb	r3, [r7, #14]
 800a686:	2b03      	cmp	r3, #3
 800a688:	f040 8094 	bne.w	800a7b4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a692:	3301      	adds	r3, #1
 800a694:	b2da      	uxtb	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d903      	bls.n	800a6ae <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	220d      	movs	r2, #13
 800a6aa:	701a      	strb	r2, [r3, #0]
      break;
 800a6ac:	e082      	b.n	800a7b4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	795b      	ldrb	r3, [r3, #5]
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 ffa1 	bl	800b5fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	791b      	ldrb	r3, [r3, #4]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 ff9b 	bl	800b5fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	701a      	strb	r2, [r3, #0]
      break;
 800a6d2:	e06f      	b.n	800a7b4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d019      	beq.n	800a712 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a6ea:	23ff      	movs	r3, #255	; 0xff
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f949 	bl	800a984 <USBH_Get_StringDesc>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d103      	bne.n	800a704 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2206      	movs	r2, #6
 800a700:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a702:	e059      	b.n	800a7b8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a704:	7bbb      	ldrb	r3, [r7, #14]
 800a706:	2b03      	cmp	r3, #3
 800a708:	d156      	bne.n	800a7b8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2206      	movs	r2, #6
 800a70e:	705a      	strb	r2, [r3, #1]
      break;
 800a710:	e052      	b.n	800a7b8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2206      	movs	r2, #6
 800a716:	705a      	strb	r2, [r3, #1]
      break;
 800a718:	e04e      	b.n	800a7b8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a720:	2b00      	cmp	r3, #0
 800a722:	d019      	beq.n	800a758 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a730:	23ff      	movs	r3, #255	; 0xff
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f926 	bl	800a984 <USBH_Get_StringDesc>
 800a738:	4603      	mov	r3, r0
 800a73a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a73c:	7bbb      	ldrb	r3, [r7, #14]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d103      	bne.n	800a74a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2207      	movs	r2, #7
 800a746:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a748:	e038      	b.n	800a7bc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d135      	bne.n	800a7bc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2207      	movs	r2, #7
 800a754:	705a      	strb	r2, [r3, #1]
      break;
 800a756:	e031      	b.n	800a7bc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2207      	movs	r2, #7
 800a75c:	705a      	strb	r2, [r3, #1]
      break;
 800a75e:	e02d      	b.n	800a7bc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a766:	2b00      	cmp	r3, #0
 800a768:	d017      	beq.n	800a79a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a776:	23ff      	movs	r3, #255	; 0xff
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f903 	bl	800a984 <USBH_Get_StringDesc>
 800a77e:	4603      	mov	r3, r0
 800a780:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d102      	bne.n	800a78e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a78c:	e018      	b.n	800a7c0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a78e:	7bbb      	ldrb	r3, [r7, #14]
 800a790:	2b03      	cmp	r3, #3
 800a792:	d115      	bne.n	800a7c0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	73fb      	strb	r3, [r7, #15]
      break;
 800a798:	e012      	b.n	800a7c0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	73fb      	strb	r3, [r7, #15]
      break;
 800a79e:	e00f      	b.n	800a7c0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a7a0:	bf00      	nop
 800a7a2:	e00e      	b.n	800a7c2 <USBH_HandleEnum+0x3be>
      break;
 800a7a4:	bf00      	nop
 800a7a6:	e00c      	b.n	800a7c2 <USBH_HandleEnum+0x3be>
      break;
 800a7a8:	bf00      	nop
 800a7aa:	e00a      	b.n	800a7c2 <USBH_HandleEnum+0x3be>
      break;
 800a7ac:	bf00      	nop
 800a7ae:	e008      	b.n	800a7c2 <USBH_HandleEnum+0x3be>
      break;
 800a7b0:	bf00      	nop
 800a7b2:	e006      	b.n	800a7c2 <USBH_HandleEnum+0x3be>
      break;
 800a7b4:	bf00      	nop
 800a7b6:	e004      	b.n	800a7c2 <USBH_HandleEnum+0x3be>
      break;
 800a7b8:	bf00      	nop
 800a7ba:	e002      	b.n	800a7c2 <USBH_HandleEnum+0x3be>
      break;
 800a7bc:	bf00      	nop
 800a7be:	e000      	b.n	800a7c2 <USBH_HandleEnum+0x3be>
      break;
 800a7c0:	bf00      	nop
  }
  return Status;
 800a7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a7de:	bf00      	nop
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f804 	bl	800a80e <USBH_HandleSof>
}
 800a806:	bf00      	nop
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b082      	sub	sp, #8
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b0b      	cmp	r3, #11
 800a81e:	d10a      	bne.n	800a836 <USBH_HandleSof+0x28>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a826:	2b00      	cmp	r3, #0
 800a828:	d005      	beq.n	800a836 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	4798      	blx	r3
  }
}
 800a836:	bf00      	nop
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a83e:	b480      	push	{r7}
 800a840:	b083      	sub	sp, #12
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a84e:	bf00      	nop
}
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a86a:	bf00      	nop
}
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a876:	b480      	push	{r7}
 800a878:	b083      	sub	sp, #12
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f001 f846 	bl	800b956 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	791b      	ldrb	r3, [r3, #4]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fe93 	bl	800b5fc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	795b      	ldrb	r3, [r3, #5]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fe8d 	bl	800b5fc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af02      	add	r7, sp, #8
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a8fe:	78fb      	ldrb	r3, [r7, #3]
 800a900:	b29b      	uxth	r3, r3
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	4613      	mov	r3, r2
 800a906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a90a:	2100      	movs	r1, #0
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f864 	bl	800a9da <USBH_GetDescriptor>
 800a912:	4603      	mov	r3, r0
 800a914:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a916:	7bfb      	ldrb	r3, [r7, #15]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10a      	bne.n	800a932 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a928:	78fa      	ldrb	r2, [r7, #3]
 800a92a:	b292      	uxth	r2, r2
 800a92c:	4619      	mov	r1, r3
 800a92e:	f000 f919 	bl	800ab64 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a932:	7bfb      	ldrb	r3, [r7, #15]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af02      	add	r7, sp, #8
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	331c      	adds	r3, #28
 800a94c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a94e:	887b      	ldrh	r3, [r7, #2]
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a958:	2100      	movs	r1, #0
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f83d 	bl	800a9da <USBH_GetDescriptor>
 800a960:	4603      	mov	r3, r0
 800a962:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a964:	7bfb      	ldrb	r3, [r7, #15]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d107      	bne.n	800a97a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a96a:	887b      	ldrh	r3, [r7, #2]
 800a96c:	461a      	mov	r2, r3
 800a96e:	68b9      	ldr	r1, [r7, #8]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f989 	bl	800ac88 <USBH_ParseCfgDesc>
 800a976:	4603      	mov	r3, r0
 800a978:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af02      	add	r7, sp, #8
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	607a      	str	r2, [r7, #4]
 800a98e:	461a      	mov	r2, r3
 800a990:	460b      	mov	r3, r1
 800a992:	72fb      	strb	r3, [r7, #11]
 800a994:	4613      	mov	r3, r2
 800a996:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a998:	7afb      	ldrb	r3, [r7, #11]
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a9a0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a9a8:	893b      	ldrh	r3, [r7, #8]
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f000 f812 	bl	800a9da <USBH_GetDescriptor>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d107      	bne.n	800a9d0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a9c6:	893a      	ldrh	r2, [r7, #8]
 800a9c8:	6879      	ldr	r1, [r7, #4]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 fb26 	bl	800b01c <USBH_ParseStringDesc>
  }

  return status;
 800a9d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3718      	adds	r7, #24
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b084      	sub	sp, #16
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	60f8      	str	r0, [r7, #12]
 800a9e2:	607b      	str	r3, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	72fb      	strb	r3, [r7, #11]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	789b      	ldrb	r3, [r3, #2]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d11c      	bne.n	800aa2e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a9f4:	7afb      	ldrb	r3, [r7, #11]
 800a9f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2206      	movs	r2, #6
 800aa04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	893a      	ldrh	r2, [r7, #8]
 800aa0a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aa0c:	893b      	ldrh	r3, [r7, #8]
 800aa0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aa12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa16:	d104      	bne.n	800aa22 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f240 4209 	movw	r2, #1033	; 0x409
 800aa1e:	829a      	strh	r2, [r3, #20]
 800aa20:	e002      	b.n	800aa28 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	8b3a      	ldrh	r2, [r7, #24]
 800aa2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aa2e:	8b3b      	ldrh	r3, [r7, #24]
 800aa30:	461a      	mov	r2, r3
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f000 fb3f 	bl	800b0b8 <USBH_CtlReq>
 800aa3a:	4603      	mov	r3, r0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	789b      	ldrb	r3, [r3, #2]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d10f      	bne.n	800aa78 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2205      	movs	r2, #5
 800aa62:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aa64:	78fb      	ldrb	r3, [r7, #3]
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aa78:	2200      	movs	r2, #0
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fb1b 	bl	800b0b8 <USBH_CtlReq>
 800aa82:	4603      	mov	r3, r0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	789b      	ldrb	r3, [r3, #2]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d10e      	bne.n	800aabe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2209      	movs	r2, #9
 800aaaa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	887a      	ldrh	r2, [r7, #2]
 800aab0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aabe:	2200      	movs	r2, #0
 800aac0:	2100      	movs	r1, #0
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 faf8 	bl	800b0b8 <USBH_CtlReq>
 800aac8:	4603      	mov	r3, r0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	460b      	mov	r3, r1
 800aadc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	789b      	ldrb	r3, [r3, #2]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d10f      	bne.n	800ab06 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2203      	movs	r2, #3
 800aaf0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800aaf2:	78fb      	ldrb	r3, [r7, #3]
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ab06:	2200      	movs	r2, #0
 800ab08:	2100      	movs	r1, #0
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fad4 	bl	800b0b8 <USBH_CtlReq>
 800ab10:	4603      	mov	r3, r0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
 800ab22:	460b      	mov	r3, r1
 800ab24:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	789b      	ldrb	r3, [r3, #2]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d10f      	bne.n	800ab4e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2202      	movs	r2, #2
 800ab32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2100      	movs	r1, #0
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fab0 	bl	800b0b8 <USBH_CtlReq>
 800ab58:	4603      	mov	r3, r0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	781a      	ldrb	r2, [r3, #0]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	785a      	ldrb	r2, [r3, #1]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	3302      	adds	r3, #2
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	3303      	adds	r3, #3
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	021b      	lsls	r3, r3, #8
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	4313      	orrs	r3, r2
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	791a      	ldrb	r2, [r3, #4]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	795a      	ldrb	r2, [r3, #5]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	799a      	ldrb	r2, [r3, #6]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	79da      	ldrb	r2, [r3, #7]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	79db      	ldrb	r3, [r3, #7]
 800abc2:	2b20      	cmp	r3, #32
 800abc4:	dc0f      	bgt.n	800abe6 <USBH_ParseDevDesc+0x82>
 800abc6:	2b08      	cmp	r3, #8
 800abc8:	db14      	blt.n	800abf4 <USBH_ParseDevDesc+0x90>
 800abca:	3b08      	subs	r3, #8
 800abcc:	4a2d      	ldr	r2, [pc, #180]	; (800ac84 <USBH_ParseDevDesc+0x120>)
 800abce:	fa22 f303 	lsr.w	r3, r2, r3
 800abd2:	f003 0301 	and.w	r3, r3, #1
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	bf14      	ite	ne
 800abda:	2301      	movne	r3, #1
 800abdc:	2300      	moveq	r3, #0
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d102      	bne.n	800abea <USBH_ParseDevDesc+0x86>
 800abe4:	e006      	b.n	800abf4 <USBH_ParseDevDesc+0x90>
 800abe6:	2b40      	cmp	r3, #64	; 0x40
 800abe8:	d104      	bne.n	800abf4 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	79da      	ldrb	r2, [r3, #7]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	71da      	strb	r2, [r3, #7]
      break;
 800abf2:	e003      	b.n	800abfc <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2240      	movs	r2, #64	; 0x40
 800abf8:	71da      	strb	r2, [r3, #7]
      break;
 800abfa:	bf00      	nop
  }

  if (length > 8U)
 800abfc:	88fb      	ldrh	r3, [r7, #6]
 800abfe:	2b08      	cmp	r3, #8
 800ac00:	d939      	bls.n	800ac76 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	3308      	adds	r3, #8
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	3309      	adds	r3, #9
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	021b      	lsls	r3, r3, #8
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	4313      	orrs	r3, r2
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	330a      	adds	r3, #10
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	330b      	adds	r3, #11
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	021b      	lsls	r3, r3, #8
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	4313      	orrs	r3, r2
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	330c      	adds	r3, #12
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	330d      	adds	r3, #13
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	021b      	lsls	r3, r3, #8
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	7b9a      	ldrb	r2, [r3, #14]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	7bda      	ldrb	r2, [r3, #15]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	7c1a      	ldrb	r2, [r3, #16]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	7c5a      	ldrb	r2, [r3, #17]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	745a      	strb	r2, [r3, #17]
  }
}
 800ac76:	bf00      	nop
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	01000101 	.word	0x01000101

0800ac88 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08c      	sub	sp, #48	; 0x30
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	4613      	mov	r3, r2
 800ac94:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ac9c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aca8:	2300      	movs	r3, #0
 800acaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	781a      	ldrb	r2, [r3, #0]
 800acbc:	6a3b      	ldr	r3, [r7, #32]
 800acbe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	785a      	ldrb	r2, [r3, #1]
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	3302      	adds	r3, #2
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	b29a      	uxth	r2, r3
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	3303      	adds	r3, #3
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	021b      	lsls	r3, r3, #8
 800acda:	b29b      	uxth	r3, r3
 800acdc:	4313      	orrs	r3, r2
 800acde:	b29b      	uxth	r3, r3
 800ace0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ace4:	bf28      	it	cs
 800ace6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800acea:	b29a      	uxth	r2, r3
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	791a      	ldrb	r2, [r3, #4]
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	795a      	ldrb	r2, [r3, #5]
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	799a      	ldrb	r2, [r3, #6]
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	79da      	ldrb	r2, [r3, #7]
 800ad0c:	6a3b      	ldr	r3, [r7, #32]
 800ad0e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	7a1a      	ldrb	r2, [r3, #8]
 800ad14:	6a3b      	ldr	r3, [r7, #32]
 800ad16:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ad18:	6a3b      	ldr	r3, [r7, #32]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b09      	cmp	r3, #9
 800ad1e:	d002      	beq.n	800ad26 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	2209      	movs	r2, #9
 800ad24:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ad26:	88fb      	ldrh	r3, [r7, #6]
 800ad28:	2b09      	cmp	r3, #9
 800ad2a:	f240 809d 	bls.w	800ae68 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800ad2e:	2309      	movs	r3, #9
 800ad30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ad32:	2300      	movs	r3, #0
 800ad34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ad36:	e081      	b.n	800ae3c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ad38:	f107 0316 	add.w	r3, r7, #22
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad40:	f000 f99f 	bl	800b082 <USBH_GetNextDesc>
 800ad44:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ad46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad48:	785b      	ldrb	r3, [r3, #1]
 800ad4a:	2b04      	cmp	r3, #4
 800ad4c:	d176      	bne.n	800ae3c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ad4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	2b09      	cmp	r3, #9
 800ad54:	d002      	beq.n	800ad5c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ad56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad58:	2209      	movs	r2, #9
 800ad5a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ad5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad60:	221a      	movs	r2, #26
 800ad62:	fb02 f303 	mul.w	r3, r2, r3
 800ad66:	3308      	adds	r3, #8
 800ad68:	6a3a      	ldr	r2, [r7, #32]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	3302      	adds	r3, #2
 800ad6e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ad70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad72:	69f8      	ldr	r0, [r7, #28]
 800ad74:	f000 f87e 	bl	800ae74 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ad82:	e043      	b.n	800ae0c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ad84:	f107 0316 	add.w	r3, r7, #22
 800ad88:	4619      	mov	r1, r3
 800ad8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad8c:	f000 f979 	bl	800b082 <USBH_GetNextDesc>
 800ad90:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad94:	785b      	ldrb	r3, [r3, #1]
 800ad96:	2b05      	cmp	r3, #5
 800ad98:	d138      	bne.n	800ae0c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	795b      	ldrb	r3, [r3, #5]
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d10f      	bne.n	800adc2 <USBH_ParseCfgDesc+0x13a>
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	799b      	ldrb	r3, [r3, #6]
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d10b      	bne.n	800adc2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	79db      	ldrb	r3, [r3, #7]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10f      	bne.n	800add2 <USBH_ParseCfgDesc+0x14a>
 800adb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	2b09      	cmp	r3, #9
 800adb8:	d00b      	beq.n	800add2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800adba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbc:	2209      	movs	r2, #9
 800adbe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800adc0:	e007      	b.n	800add2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	2b07      	cmp	r3, #7
 800adc8:	d004      	beq.n	800add4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800adca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adcc:	2207      	movs	r2, #7
 800adce:	701a      	strb	r2, [r3, #0]
 800add0:	e000      	b.n	800add4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800add2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800add4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800add8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800addc:	3201      	adds	r2, #1
 800adde:	00d2      	lsls	r2, r2, #3
 800ade0:	211a      	movs	r1, #26
 800ade2:	fb01 f303 	mul.w	r3, r1, r3
 800ade6:	4413      	add	r3, r2
 800ade8:	3308      	adds	r3, #8
 800adea:	6a3a      	ldr	r2, [r7, #32]
 800adec:	4413      	add	r3, r2
 800adee:	3304      	adds	r3, #4
 800adf0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800adf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adf4:	69b9      	ldr	r1, [r7, #24]
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f000 f86b 	bl	800aed2 <USBH_ParseEPDesc>
 800adfc:	4603      	mov	r3, r0
 800adfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800ae02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ae06:	3301      	adds	r3, #1
 800ae08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	791b      	ldrb	r3, [r3, #4]
 800ae10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d204      	bcs.n	800ae22 <USBH_ParseCfgDesc+0x19a>
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	885a      	ldrh	r2, [r3, #2]
 800ae1c:	8afb      	ldrh	r3, [r7, #22]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d8b0      	bhi.n	800ad84 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	791b      	ldrb	r3, [r3, #4]
 800ae26:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d201      	bcs.n	800ae32 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	e01c      	b.n	800ae6c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800ae32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae36:	3301      	adds	r3, #1
 800ae38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ae3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d805      	bhi.n	800ae50 <USBH_ParseCfgDesc+0x1c8>
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	885a      	ldrh	r2, [r3, #2]
 800ae48:	8afb      	ldrh	r3, [r7, #22]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	f63f af74 	bhi.w	800ad38 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	791b      	ldrb	r3, [r3, #4]
 800ae54:	2b02      	cmp	r3, #2
 800ae56:	bf28      	it	cs
 800ae58:	2302      	movcs	r3, #2
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d201      	bcs.n	800ae68 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e001      	b.n	800ae6c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ae68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3730      	adds	r7, #48	; 0x30
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	781a      	ldrb	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	785a      	ldrb	r2, [r3, #1]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	789a      	ldrb	r2, [r3, #2]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	78da      	ldrb	r2, [r3, #3]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	791a      	ldrb	r2, [r3, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	795a      	ldrb	r2, [r3, #5]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	799a      	ldrb	r2, [r3, #6]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	79da      	ldrb	r2, [r3, #7]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	7a1a      	ldrb	r2, [r3, #8]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	721a      	strb	r2, [r3, #8]
}
 800aec6:	bf00      	nop
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800aed2:	b480      	push	{r7}
 800aed4:	b087      	sub	sp, #28
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	60f8      	str	r0, [r7, #12]
 800aeda:	60b9      	str	r1, [r7, #8]
 800aedc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	781a      	ldrb	r2, [r3, #0]
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	785a      	ldrb	r2, [r3, #1]
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	789a      	ldrb	r2, [r3, #2]
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	78da      	ldrb	r2, [r3, #3]
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	3304      	adds	r3, #4
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	b29a      	uxth	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3305      	adds	r3, #5
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	b29b      	uxth	r3, r3
 800af12:	021b      	lsls	r3, r3, #8
 800af14:	b29b      	uxth	r3, r3
 800af16:	4313      	orrs	r3, r2
 800af18:	b29a      	uxth	r2, r3
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	799a      	ldrb	r2, [r3, #6]
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	889b      	ldrh	r3, [r3, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d102      	bne.n	800af34 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800af2e:	2303      	movs	r3, #3
 800af30:	75fb      	strb	r3, [r7, #23]
 800af32:	e033      	b.n	800af9c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	889b      	ldrh	r3, [r3, #4]
 800af38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800af3c:	f023 0307 	bic.w	r3, r3, #7
 800af40:	b29a      	uxth	r2, r3
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	889b      	ldrh	r3, [r3, #4]
 800af4a:	b21a      	sxth	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3304      	adds	r3, #4
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	b299      	uxth	r1, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	3305      	adds	r3, #5
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	021b      	lsls	r3, r3, #8
 800af5e:	b29b      	uxth	r3, r3
 800af60:	430b      	orrs	r3, r1
 800af62:	b29b      	uxth	r3, r3
 800af64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d110      	bne.n	800af8e <USBH_ParseEPDesc+0xbc>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	3304      	adds	r3, #4
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	b299      	uxth	r1, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3305      	adds	r3, #5
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	021b      	lsls	r3, r3, #8
 800af7e:	b29b      	uxth	r3, r3
 800af80:	430b      	orrs	r3, r1
 800af82:	b29b      	uxth	r3, r3
 800af84:	b21b      	sxth	r3, r3
 800af86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af8a:	b21b      	sxth	r3, r3
 800af8c:	e001      	b.n	800af92 <USBH_ParseEPDesc+0xc0>
 800af8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af92:	4313      	orrs	r3, r2
 800af94:	b21b      	sxth	r3, r3
 800af96:	b29a      	uxth	r2, r3
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d116      	bne.n	800afd4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	78db      	ldrb	r3, [r3, #3]
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d005      	beq.n	800afbe <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	78db      	ldrb	r3, [r3, #3]
 800afb6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800afba:	2b03      	cmp	r3, #3
 800afbc:	d127      	bne.n	800b00e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	799b      	ldrb	r3, [r3, #6]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d003      	beq.n	800afce <USBH_ParseEPDesc+0xfc>
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	799b      	ldrb	r3, [r3, #6]
 800afca:	2b10      	cmp	r3, #16
 800afcc:	d91f      	bls.n	800b00e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800afce:	2303      	movs	r3, #3
 800afd0:	75fb      	strb	r3, [r7, #23]
 800afd2:	e01c      	b.n	800b00e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	78db      	ldrb	r3, [r3, #3]
 800afd8:	f003 0303 	and.w	r3, r3, #3
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d10a      	bne.n	800aff6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	799b      	ldrb	r3, [r3, #6]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d003      	beq.n	800aff0 <USBH_ParseEPDesc+0x11e>
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	799b      	ldrb	r3, [r3, #6]
 800afec:	2b10      	cmp	r3, #16
 800afee:	d90e      	bls.n	800b00e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800aff0:	2303      	movs	r3, #3
 800aff2:	75fb      	strb	r3, [r7, #23]
 800aff4:	e00b      	b.n	800b00e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	78db      	ldrb	r3, [r3, #3]
 800affa:	f003 0303 	and.w	r3, r3, #3
 800affe:	2b03      	cmp	r3, #3
 800b000:	d105      	bne.n	800b00e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	799b      	ldrb	r3, [r3, #6]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b00a:	2303      	movs	r3, #3
 800b00c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b010:	4618      	mov	r0, r3
 800b012:	371c      	adds	r7, #28
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	4613      	mov	r3, r2
 800b028:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3301      	adds	r3, #1
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	2b03      	cmp	r3, #3
 800b032:	d120      	bne.n	800b076 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	1e9a      	subs	r2, r3, #2
 800b03a:	88fb      	ldrh	r3, [r7, #6]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	bf28      	it	cs
 800b040:	4613      	movcs	r3, r2
 800b042:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3302      	adds	r3, #2
 800b048:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b04a:	2300      	movs	r3, #0
 800b04c:	82fb      	strh	r3, [r7, #22]
 800b04e:	e00b      	b.n	800b068 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b050:	8afb      	ldrh	r3, [r7, #22]
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	4413      	add	r3, r2
 800b056:	781a      	ldrb	r2, [r3, #0]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	3301      	adds	r3, #1
 800b060:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b062:	8afb      	ldrh	r3, [r7, #22]
 800b064:	3302      	adds	r3, #2
 800b066:	82fb      	strh	r3, [r7, #22]
 800b068:	8afa      	ldrh	r2, [r7, #22]
 800b06a:	8abb      	ldrh	r3, [r7, #20]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d3ef      	bcc.n	800b050 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	2200      	movs	r2, #0
 800b074:	701a      	strb	r2, [r3, #0]
  }
}
 800b076:	bf00      	nop
 800b078:	371c      	adds	r7, #28
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b082:	b480      	push	{r7}
 800b084:	b085      	sub	sp, #20
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	881a      	ldrh	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	b29b      	uxth	r3, r3
 800b096:	4413      	add	r3, r2
 800b098:	b29a      	uxth	r2, r3
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	789b      	ldrb	r3, [r3, #2]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d002      	beq.n	800b0d8 <USBH_CtlReq+0x20>
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d00f      	beq.n	800b0f6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b0d6:	e027      	b.n	800b128 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	88fa      	ldrh	r2, [r7, #6]
 800b0e2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b0f4:	e018      	b.n	800b128 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f000 f81c 	bl	800b134 <USBH_HandleControl>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b100:	7dfb      	ldrb	r3, [r7, #23]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d002      	beq.n	800b10c <USBH_CtlReq+0x54>
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	2b03      	cmp	r3, #3
 800b10a:	d106      	bne.n	800b11a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2201      	movs	r2, #1
 800b110:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	761a      	strb	r2, [r3, #24]
      break;
 800b118:	e005      	b.n	800b126 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d102      	bne.n	800b126 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2201      	movs	r2, #1
 800b124:	709a      	strb	r2, [r3, #2]
      break;
 800b126:	bf00      	nop
  }
  return status;
 800b128:	7dfb      	ldrb	r3, [r7, #23]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
	...

0800b134 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af02      	add	r7, sp, #8
 800b13a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b13c:	2301      	movs	r3, #1
 800b13e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b140:	2300      	movs	r3, #0
 800b142:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	7e1b      	ldrb	r3, [r3, #24]
 800b148:	3b01      	subs	r3, #1
 800b14a:	2b0a      	cmp	r3, #10
 800b14c:	f200 8156 	bhi.w	800b3fc <USBH_HandleControl+0x2c8>
 800b150:	a201      	add	r2, pc, #4	; (adr r2, 800b158 <USBH_HandleControl+0x24>)
 800b152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b156:	bf00      	nop
 800b158:	0800b185 	.word	0x0800b185
 800b15c:	0800b19f 	.word	0x0800b19f
 800b160:	0800b209 	.word	0x0800b209
 800b164:	0800b22f 	.word	0x0800b22f
 800b168:	0800b267 	.word	0x0800b267
 800b16c:	0800b291 	.word	0x0800b291
 800b170:	0800b2e3 	.word	0x0800b2e3
 800b174:	0800b305 	.word	0x0800b305
 800b178:	0800b341 	.word	0x0800b341
 800b17c:	0800b367 	.word	0x0800b367
 800b180:	0800b3a5 	.word	0x0800b3a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f103 0110 	add.w	r1, r3, #16
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	795b      	ldrb	r3, [r3, #5]
 800b18e:	461a      	mov	r2, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 f943 	bl	800b41c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2202      	movs	r2, #2
 800b19a:	761a      	strb	r2, [r3, #24]
      break;
 800b19c:	e139      	b.n	800b412 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	795b      	ldrb	r3, [r3, #5]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fcc5 	bl	800bb34 <USBH_LL_GetURBState>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d11e      	bne.n	800b1f2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	7c1b      	ldrb	r3, [r3, #16]
 800b1b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b1bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	8adb      	ldrh	r3, [r3, #22]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00a      	beq.n	800b1dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b1c6:	7b7b      	ldrb	r3, [r7, #13]
 800b1c8:	2b80      	cmp	r3, #128	; 0x80
 800b1ca:	d103      	bne.n	800b1d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2203      	movs	r2, #3
 800b1d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b1d2:	e115      	b.n	800b400 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2205      	movs	r2, #5
 800b1d8:	761a      	strb	r2, [r3, #24]
      break;
 800b1da:	e111      	b.n	800b400 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b1dc:	7b7b      	ldrb	r3, [r7, #13]
 800b1de:	2b80      	cmp	r3, #128	; 0x80
 800b1e0:	d103      	bne.n	800b1ea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2209      	movs	r2, #9
 800b1e6:	761a      	strb	r2, [r3, #24]
      break;
 800b1e8:	e10a      	b.n	800b400 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2207      	movs	r2, #7
 800b1ee:	761a      	strb	r2, [r3, #24]
      break;
 800b1f0:	e106      	b.n	800b400 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d003      	beq.n	800b200 <USBH_HandleControl+0xcc>
 800b1f8:	7bbb      	ldrb	r3, [r7, #14]
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	f040 8100 	bne.w	800b400 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	220b      	movs	r2, #11
 800b204:	761a      	strb	r2, [r3, #24]
      break;
 800b206:	e0fb      	b.n	800b400 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b20e:	b29a      	uxth	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6899      	ldr	r1, [r3, #8]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	899a      	ldrh	r2, [r3, #12]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	791b      	ldrb	r3, [r3, #4]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f93a 	bl	800b49a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2204      	movs	r2, #4
 800b22a:	761a      	strb	r2, [r3, #24]
      break;
 800b22c:	e0f1      	b.n	800b412 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	791b      	ldrb	r3, [r3, #4]
 800b232:	4619      	mov	r1, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 fc7d 	bl	800bb34 <USBH_LL_GetURBState>
 800b23a:	4603      	mov	r3, r0
 800b23c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b23e:	7bbb      	ldrb	r3, [r7, #14]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d102      	bne.n	800b24a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2209      	movs	r2, #9
 800b248:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b24a:	7bbb      	ldrb	r3, [r7, #14]
 800b24c:	2b05      	cmp	r3, #5
 800b24e:	d102      	bne.n	800b256 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b250:	2303      	movs	r3, #3
 800b252:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b254:	e0d6      	b.n	800b404 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b256:	7bbb      	ldrb	r3, [r7, #14]
 800b258:	2b04      	cmp	r3, #4
 800b25a:	f040 80d3 	bne.w	800b404 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	220b      	movs	r2, #11
 800b262:	761a      	strb	r2, [r3, #24]
      break;
 800b264:	e0ce      	b.n	800b404 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6899      	ldr	r1, [r3, #8]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	899a      	ldrh	r2, [r3, #12]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	795b      	ldrb	r3, [r3, #5]
 800b272:	2001      	movs	r0, #1
 800b274:	9000      	str	r0, [sp, #0]
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f8ea 	bl	800b450 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b282:	b29a      	uxth	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2206      	movs	r2, #6
 800b28c:	761a      	strb	r2, [r3, #24]
      break;
 800b28e:	e0c0      	b.n	800b412 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	795b      	ldrb	r3, [r3, #5]
 800b294:	4619      	mov	r1, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 fc4c 	bl	800bb34 <USBH_LL_GetURBState>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b2a0:	7bbb      	ldrb	r3, [r7, #14]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d103      	bne.n	800b2ae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2207      	movs	r2, #7
 800b2aa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b2ac:	e0ac      	b.n	800b408 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
 800b2b0:	2b05      	cmp	r3, #5
 800b2b2:	d105      	bne.n	800b2c0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	220c      	movs	r2, #12
 800b2b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b2be:	e0a3      	b.n	800b408 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b2c0:	7bbb      	ldrb	r3, [r7, #14]
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d103      	bne.n	800b2ce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2205      	movs	r2, #5
 800b2ca:	761a      	strb	r2, [r3, #24]
      break;
 800b2cc:	e09c      	b.n	800b408 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b2ce:	7bbb      	ldrb	r3, [r7, #14]
 800b2d0:	2b04      	cmp	r3, #4
 800b2d2:	f040 8099 	bne.w	800b408 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	220b      	movs	r2, #11
 800b2da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b2dc:	2302      	movs	r3, #2
 800b2de:	73fb      	strb	r3, [r7, #15]
      break;
 800b2e0:	e092      	b.n	800b408 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	791b      	ldrb	r3, [r3, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f8d5 	bl	800b49a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2208      	movs	r2, #8
 800b300:	761a      	strb	r2, [r3, #24]

      break;
 800b302:	e086      	b.n	800b412 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	791b      	ldrb	r3, [r3, #4]
 800b308:	4619      	mov	r1, r3
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fc12 	bl	800bb34 <USBH_LL_GetURBState>
 800b310:	4603      	mov	r3, r0
 800b312:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b314:	7bbb      	ldrb	r3, [r7, #14]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d105      	bne.n	800b326 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	220d      	movs	r2, #13
 800b31e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b324:	e072      	b.n	800b40c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b326:	7bbb      	ldrb	r3, [r7, #14]
 800b328:	2b04      	cmp	r3, #4
 800b32a:	d103      	bne.n	800b334 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	220b      	movs	r2, #11
 800b330:	761a      	strb	r2, [r3, #24]
      break;
 800b332:	e06b      	b.n	800b40c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b334:	7bbb      	ldrb	r3, [r7, #14]
 800b336:	2b05      	cmp	r3, #5
 800b338:	d168      	bne.n	800b40c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b33a:	2303      	movs	r3, #3
 800b33c:	73fb      	strb	r3, [r7, #15]
      break;
 800b33e:	e065      	b.n	800b40c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	795b      	ldrb	r3, [r3, #5]
 800b344:	2201      	movs	r2, #1
 800b346:	9200      	str	r2, [sp, #0]
 800b348:	2200      	movs	r2, #0
 800b34a:	2100      	movs	r1, #0
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f87f 	bl	800b450 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b358:	b29a      	uxth	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	220a      	movs	r2, #10
 800b362:	761a      	strb	r2, [r3, #24]
      break;
 800b364:	e055      	b.n	800b412 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	795b      	ldrb	r3, [r3, #5]
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fbe1 	bl	800bb34 <USBH_LL_GetURBState>
 800b372:	4603      	mov	r3, r0
 800b374:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b376:	7bbb      	ldrb	r3, [r7, #14]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d105      	bne.n	800b388 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b37c:	2300      	movs	r3, #0
 800b37e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	220d      	movs	r2, #13
 800b384:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b386:	e043      	b.n	800b410 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d103      	bne.n	800b396 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2209      	movs	r2, #9
 800b392:	761a      	strb	r2, [r3, #24]
      break;
 800b394:	e03c      	b.n	800b410 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b396:	7bbb      	ldrb	r3, [r7, #14]
 800b398:	2b04      	cmp	r3, #4
 800b39a:	d139      	bne.n	800b410 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	220b      	movs	r2, #11
 800b3a0:	761a      	strb	r2, [r3, #24]
      break;
 800b3a2:	e035      	b.n	800b410 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	7e5b      	ldrb	r3, [r3, #25]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	765a      	strb	r2, [r3, #25]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	7e5b      	ldrb	r3, [r3, #25]
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d806      	bhi.n	800b3c6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b3c4:	e025      	b.n	800b412 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3cc:	2106      	movs	r1, #6
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	795b      	ldrb	r3, [r3, #5]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f90c 	bl	800b5fc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	791b      	ldrb	r3, [r3, #4]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f906 	bl	800b5fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b3f6:	2302      	movs	r3, #2
 800b3f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b3fa:	e00a      	b.n	800b412 <USBH_HandleControl+0x2de>

    default:
      break;
 800b3fc:	bf00      	nop
 800b3fe:	e008      	b.n	800b412 <USBH_HandleControl+0x2de>
      break;
 800b400:	bf00      	nop
 800b402:	e006      	b.n	800b412 <USBH_HandleControl+0x2de>
      break;
 800b404:	bf00      	nop
 800b406:	e004      	b.n	800b412 <USBH_HandleControl+0x2de>
      break;
 800b408:	bf00      	nop
 800b40a:	e002      	b.n	800b412 <USBH_HandleControl+0x2de>
      break;
 800b40c:	bf00      	nop
 800b40e:	e000      	b.n	800b412 <USBH_HandleControl+0x2de>
      break;
 800b410:	bf00      	nop
  }

  return status;
 800b412:	7bfb      	ldrb	r3, [r7, #15]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b088      	sub	sp, #32
 800b420:	af04      	add	r7, sp, #16
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b42a:	79f9      	ldrb	r1, [r7, #7]
 800b42c:	2300      	movs	r3, #0
 800b42e:	9303      	str	r3, [sp, #12]
 800b430:	2308      	movs	r3, #8
 800b432:	9302      	str	r3, [sp, #8]
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	9301      	str	r3, [sp, #4]
 800b438:	2300      	movs	r3, #0
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	2300      	movs	r3, #0
 800b43e:	2200      	movs	r2, #0
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f000 fb46 	bl	800bad2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af04      	add	r7, sp, #16
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	4611      	mov	r1, r2
 800b45c:	461a      	mov	r2, r3
 800b45e:	460b      	mov	r3, r1
 800b460:	80fb      	strh	r3, [r7, #6]
 800b462:	4613      	mov	r3, r2
 800b464:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b470:	2300      	movs	r3, #0
 800b472:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b474:	7979      	ldrb	r1, [r7, #5]
 800b476:	7e3b      	ldrb	r3, [r7, #24]
 800b478:	9303      	str	r3, [sp, #12]
 800b47a:	88fb      	ldrh	r3, [r7, #6]
 800b47c:	9302      	str	r3, [sp, #8]
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	2301      	movs	r3, #1
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	2300      	movs	r3, #0
 800b488:	2200      	movs	r2, #0
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f000 fb21 	bl	800bad2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b088      	sub	sp, #32
 800b49e:	af04      	add	r7, sp, #16
 800b4a0:	60f8      	str	r0, [r7, #12]
 800b4a2:	60b9      	str	r1, [r7, #8]
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	80fb      	strh	r3, [r7, #6]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b4b0:	7979      	ldrb	r1, [r7, #5]
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	9303      	str	r3, [sp, #12]
 800b4b6:	88fb      	ldrh	r3, [r7, #6]
 800b4b8:	9302      	str	r3, [sp, #8]
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	9301      	str	r3, [sp, #4]
 800b4be:	2301      	movs	r3, #1
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f000 fb03 	bl	800bad2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b4cc:	2300      	movs	r3, #0

}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b088      	sub	sp, #32
 800b4da:	af04      	add	r7, sp, #16
 800b4dc:	60f8      	str	r0, [r7, #12]
 800b4de:	60b9      	str	r1, [r7, #8]
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	80fb      	strh	r3, [r7, #6]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b4fa:	7979      	ldrb	r1, [r7, #5]
 800b4fc:	7e3b      	ldrb	r3, [r7, #24]
 800b4fe:	9303      	str	r3, [sp, #12]
 800b500:	88fb      	ldrh	r3, [r7, #6]
 800b502:	9302      	str	r3, [sp, #8]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	9301      	str	r3, [sp, #4]
 800b508:	2301      	movs	r3, #1
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	2302      	movs	r3, #2
 800b50e:	2200      	movs	r2, #0
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f000 fade 	bl	800bad2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b088      	sub	sp, #32
 800b524:	af04      	add	r7, sp, #16
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	4611      	mov	r1, r2
 800b52c:	461a      	mov	r2, r3
 800b52e:	460b      	mov	r3, r1
 800b530:	80fb      	strh	r3, [r7, #6]
 800b532:	4613      	mov	r3, r2
 800b534:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b536:	7979      	ldrb	r1, [r7, #5]
 800b538:	2300      	movs	r3, #0
 800b53a:	9303      	str	r3, [sp, #12]
 800b53c:	88fb      	ldrh	r3, [r7, #6]
 800b53e:	9302      	str	r3, [sp, #8]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	2301      	movs	r3, #1
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	2302      	movs	r3, #2
 800b54a:	2201      	movs	r2, #1
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f000 fac0 	bl	800bad2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af04      	add	r7, sp, #16
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	4608      	mov	r0, r1
 800b566:	4611      	mov	r1, r2
 800b568:	461a      	mov	r2, r3
 800b56a:	4603      	mov	r3, r0
 800b56c:	70fb      	strb	r3, [r7, #3]
 800b56e:	460b      	mov	r3, r1
 800b570:	70bb      	strb	r3, [r7, #2]
 800b572:	4613      	mov	r3, r2
 800b574:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b576:	7878      	ldrb	r0, [r7, #1]
 800b578:	78ba      	ldrb	r2, [r7, #2]
 800b57a:	78f9      	ldrb	r1, [r7, #3]
 800b57c:	8b3b      	ldrh	r3, [r7, #24]
 800b57e:	9302      	str	r3, [sp, #8]
 800b580:	7d3b      	ldrb	r3, [r7, #20]
 800b582:	9301      	str	r3, [sp, #4]
 800b584:	7c3b      	ldrb	r3, [r7, #16]
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	4603      	mov	r3, r0
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fa53 	bl	800ba36 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b082      	sub	sp, #8
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b5a6:	78fb      	ldrb	r3, [r7, #3]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fa72 	bl	800ba94 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b084      	sub	sp, #16
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f836 	bl	800b638 <USBH_GetFreePipe>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b5d0:	89fb      	ldrh	r3, [r7, #14]
 800b5d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d00a      	beq.n	800b5f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b5da:	78fa      	ldrb	r2, [r7, #3]
 800b5dc:	89fb      	ldrh	r3, [r7, #14]
 800b5de:	f003 030f 	and.w	r3, r3, #15
 800b5e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b5e6:	6879      	ldr	r1, [r7, #4]
 800b5e8:	33e0      	adds	r3, #224	; 0xe0
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	440b      	add	r3, r1
 800b5ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b5f0:	89fb      	ldrh	r3, [r7, #14]
 800b5f2:	b2db      	uxtb	r3, r3
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	460b      	mov	r3, r1
 800b606:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b608:	78fb      	ldrb	r3, [r7, #3]
 800b60a:	2b0f      	cmp	r3, #15
 800b60c:	d80d      	bhi.n	800b62a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b60e:	78fb      	ldrb	r3, [r7, #3]
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	33e0      	adds	r3, #224	; 0xe0
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4413      	add	r3, r2
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	78fb      	ldrb	r3, [r7, #3]
 800b61c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b620:	6879      	ldr	r1, [r7, #4]
 800b622:	33e0      	adds	r3, #224	; 0xe0
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	440b      	add	r3, r1
 800b628:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b62a:	2300      	movs	r3, #0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b640:	2300      	movs	r3, #0
 800b642:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b644:	2300      	movs	r3, #0
 800b646:	73fb      	strb	r3, [r7, #15]
 800b648:	e00f      	b.n	800b66a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	33e0      	adds	r3, #224	; 0xe0
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	4413      	add	r3, r2
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d102      	bne.n	800b664 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
 800b660:	b29b      	uxth	r3, r3
 800b662:	e007      	b.n	800b674 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b664:	7bfb      	ldrb	r3, [r7, #15]
 800b666:	3301      	adds	r3, #1
 800b668:	73fb      	strb	r3, [r7, #15]
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
 800b66c:	2b0f      	cmp	r3, #15
 800b66e:	d9ec      	bls.n	800b64a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b670:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b674:	4618      	mov	r0, r3
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b684:	2201      	movs	r2, #1
 800b686:	490e      	ldr	r1, [pc, #56]	; (800b6c0 <MX_USB_HOST_Init+0x40>)
 800b688:	480e      	ldr	r0, [pc, #56]	; (800b6c4 <MX_USB_HOST_Init+0x44>)
 800b68a:	f7fe fba5 	bl	8009dd8 <USBH_Init>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d001      	beq.n	800b698 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b694:	f7f7 fbf6 	bl	8002e84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b698:	490b      	ldr	r1, [pc, #44]	; (800b6c8 <MX_USB_HOST_Init+0x48>)
 800b69a:	480a      	ldr	r0, [pc, #40]	; (800b6c4 <MX_USB_HOST_Init+0x44>)
 800b69c:	f7fe fc2a 	bl	8009ef4 <USBH_RegisterClass>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d001      	beq.n	800b6aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b6a6:	f7f7 fbed 	bl	8002e84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b6aa:	4806      	ldr	r0, [pc, #24]	; (800b6c4 <MX_USB_HOST_Init+0x44>)
 800b6ac:	f7fe fcae 	bl	800a00c <USBH_Start>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b6b6:	f7f7 fbe5 	bl	8002e84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b6ba:	bf00      	nop
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	0800b6e1 	.word	0x0800b6e1
 800b6c4:	20000424 	.word	0x20000424
 800b6c8:	2000000c 	.word	0x2000000c

0800b6cc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b6d0:	4802      	ldr	r0, [pc, #8]	; (800b6dc <MX_USB_HOST_Process+0x10>)
 800b6d2:	f7fe fcab 	bl	800a02c <USBH_Process>
}
 800b6d6:	bf00      	nop
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	20000424 	.word	0x20000424

0800b6e0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b6ec:	78fb      	ldrb	r3, [r7, #3]
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	2b04      	cmp	r3, #4
 800b6f2:	d819      	bhi.n	800b728 <USBH_UserProcess+0x48>
 800b6f4:	a201      	add	r2, pc, #4	; (adr r2, 800b6fc <USBH_UserProcess+0x1c>)
 800b6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fa:	bf00      	nop
 800b6fc:	0800b729 	.word	0x0800b729
 800b700:	0800b719 	.word	0x0800b719
 800b704:	0800b729 	.word	0x0800b729
 800b708:	0800b721 	.word	0x0800b721
 800b70c:	0800b711 	.word	0x0800b711
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b710:	4b09      	ldr	r3, [pc, #36]	; (800b738 <USBH_UserProcess+0x58>)
 800b712:	2203      	movs	r2, #3
 800b714:	701a      	strb	r2, [r3, #0]
  break;
 800b716:	e008      	b.n	800b72a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b718:	4b07      	ldr	r3, [pc, #28]	; (800b738 <USBH_UserProcess+0x58>)
 800b71a:	2202      	movs	r2, #2
 800b71c:	701a      	strb	r2, [r3, #0]
  break;
 800b71e:	e004      	b.n	800b72a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b720:	4b05      	ldr	r3, [pc, #20]	; (800b738 <USBH_UserProcess+0x58>)
 800b722:	2201      	movs	r2, #1
 800b724:	701a      	strb	r2, [r3, #0]
  break;
 800b726:	e000      	b.n	800b72a <USBH_UserProcess+0x4a>

  default:
  break;
 800b728:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b72a:	bf00      	nop
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	200007fc 	.word	0x200007fc

0800b73c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08a      	sub	sp, #40	; 0x28
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b744:	f107 0314 	add.w	r3, r7, #20
 800b748:	2200      	movs	r2, #0
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	605a      	str	r2, [r3, #4]
 800b74e:	609a      	str	r2, [r3, #8]
 800b750:	60da      	str	r2, [r3, #12]
 800b752:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b75c:	d147      	bne.n	800b7ee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b75e:	2300      	movs	r3, #0
 800b760:	613b      	str	r3, [r7, #16]
 800b762:	4b25      	ldr	r3, [pc, #148]	; (800b7f8 <HAL_HCD_MspInit+0xbc>)
 800b764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b766:	4a24      	ldr	r2, [pc, #144]	; (800b7f8 <HAL_HCD_MspInit+0xbc>)
 800b768:	f043 0301 	orr.w	r3, r3, #1
 800b76c:	6313      	str	r3, [r2, #48]	; 0x30
 800b76e:	4b22      	ldr	r3, [pc, #136]	; (800b7f8 <HAL_HCD_MspInit+0xbc>)
 800b770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b772:	f003 0301 	and.w	r3, r3, #1
 800b776:	613b      	str	r3, [r7, #16]
 800b778:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b77a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b77e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b780:	2300      	movs	r3, #0
 800b782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b784:	2300      	movs	r3, #0
 800b786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b788:	f107 0314 	add.w	r3, r7, #20
 800b78c:	4619      	mov	r1, r3
 800b78e:	481b      	ldr	r0, [pc, #108]	; (800b7fc <HAL_HCD_MspInit+0xc0>)
 800b790:	f7f8 f83e 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b794:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b79a:	2302      	movs	r3, #2
 800b79c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b7a6:	230a      	movs	r3, #10
 800b7a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7aa:	f107 0314 	add.w	r3, r7, #20
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	4812      	ldr	r0, [pc, #72]	; (800b7fc <HAL_HCD_MspInit+0xc0>)
 800b7b2:	f7f8 f82d 	bl	8003810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b7b6:	4b10      	ldr	r3, [pc, #64]	; (800b7f8 <HAL_HCD_MspInit+0xbc>)
 800b7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ba:	4a0f      	ldr	r2, [pc, #60]	; (800b7f8 <HAL_HCD_MspInit+0xbc>)
 800b7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7c0:	6353      	str	r3, [r2, #52]	; 0x34
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60fb      	str	r3, [r7, #12]
 800b7c6:	4b0c      	ldr	r3, [pc, #48]	; (800b7f8 <HAL_HCD_MspInit+0xbc>)
 800b7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ca:	4a0b      	ldr	r2, [pc, #44]	; (800b7f8 <HAL_HCD_MspInit+0xbc>)
 800b7cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b7d0:	6453      	str	r3, [r2, #68]	; 0x44
 800b7d2:	4b09      	ldr	r3, [pc, #36]	; (800b7f8 <HAL_HCD_MspInit+0xbc>)
 800b7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7da:	60fb      	str	r3, [r7, #12]
 800b7dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b7de:	2200      	movs	r2, #0
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	2043      	movs	r0, #67	; 0x43
 800b7e4:	f7f7 ff4b 	bl	800367e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b7e8:	2043      	movs	r0, #67	; 0x43
 800b7ea:	f7f7 ff64 	bl	80036b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b7ee:	bf00      	nop
 800b7f0:	3728      	adds	r7, #40	; 0x28
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	40023800 	.word	0x40023800
 800b7fc:	40020000 	.word	0x40020000

0800b800 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe ffeb 	bl	800a7ea <USBH_LL_IncTimer>
}
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7ff f823 	bl	800a876 <USBH_LL_Connect>
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b846:	4618      	mov	r0, r3
 800b848:	f7ff f82c 	bl	800a8a4 <USBH_LL_Disconnect>
}
 800b84c:	bf00      	nop
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	460b      	mov	r3, r1
 800b85e:	70fb      	strb	r3, [r7, #3]
 800b860:	4613      	mov	r3, r2
 800b862:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b864:	bf00      	nop
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe ffdd 	bl	800a83e <USBH_LL_PortEnabled>
}
 800b884:	bf00      	nop
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe ffdd 	bl	800a85a <USBH_LL_PortDisabled>
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d12a      	bne.n	800b910 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b8ba:	4a18      	ldr	r2, [pc, #96]	; (800b91c <USBH_LL_Init+0x74>)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a15      	ldr	r2, [pc, #84]	; (800b91c <USBH_LL_Init+0x74>)
 800b8c6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8ca:	4b14      	ldr	r3, [pc, #80]	; (800b91c <USBH_LL_Init+0x74>)
 800b8cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b8d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b8d2:	4b12      	ldr	r3, [pc, #72]	; (800b91c <USBH_LL_Init+0x74>)
 800b8d4:	2208      	movs	r2, #8
 800b8d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b8d8:	4b10      	ldr	r3, [pc, #64]	; (800b91c <USBH_LL_Init+0x74>)
 800b8da:	2201      	movs	r2, #1
 800b8dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b8de:	4b0f      	ldr	r3, [pc, #60]	; (800b91c <USBH_LL_Init+0x74>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b8e4:	4b0d      	ldr	r3, [pc, #52]	; (800b91c <USBH_LL_Init+0x74>)
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8ea:	4b0c      	ldr	r3, [pc, #48]	; (800b91c <USBH_LL_Init+0x74>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b8f0:	480a      	ldr	r0, [pc, #40]	; (800b91c <USBH_LL_Init+0x74>)
 800b8f2:	f7f8 f92a 	bl	8003b4a <HAL_HCD_Init>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b8fc:	f7f7 fac2 	bl	8002e84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b900:	4806      	ldr	r0, [pc, #24]	; (800b91c <USBH_LL_Init+0x74>)
 800b902:	f7f8 fd0e 	bl	8004322 <HAL_HCD_GetCurrentFrame>
 800b906:	4603      	mov	r3, r0
 800b908:	4619      	mov	r1, r3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7fe ff5e 	bl	800a7cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20000800 	.word	0x20000800

0800b920 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b928:	2300      	movs	r3, #0
 800b92a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b936:	4618      	mov	r0, r3
 800b938:	f7f8 fc7d 	bl	8004236 <HAL_HCD_Start>
 800b93c:	4603      	mov	r3, r0
 800b93e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b940:	7bfb      	ldrb	r3, [r7, #15]
 800b942:	4618      	mov	r0, r3
 800b944:	f000 f95c 	bl	800bc00 <USBH_Get_USB_Status>
 800b948:	4603      	mov	r3, r0
 800b94a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b94c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b084      	sub	sp, #16
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b95e:	2300      	movs	r3, #0
 800b960:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7f8 fc85 	bl	800427c <HAL_HCD_Stop>
 800b972:	4603      	mov	r3, r0
 800b974:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b976:	7bfb      	ldrb	r3, [r7, #15]
 800b978:	4618      	mov	r0, r3
 800b97a:	f000 f941 	bl	800bc00 <USBH_Get_USB_Status>
 800b97e:	4603      	mov	r3, r0
 800b980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b982:	7bbb      	ldrb	r3, [r7, #14]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b994:	2301      	movs	r3, #1
 800b996:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7f8 fccd 	bl	800433e <HAL_HCD_GetCurrentSpeed>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	d00c      	beq.n	800b9c4 <USBH_LL_GetSpeed+0x38>
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d80d      	bhi.n	800b9ca <USBH_LL_GetSpeed+0x3e>
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <USBH_LL_GetSpeed+0x2c>
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d003      	beq.n	800b9be <USBH_LL_GetSpeed+0x32>
 800b9b6:	e008      	b.n	800b9ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b9bc:	e008      	b.n	800b9d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c2:	e005      	b.n	800b9d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9c8:	e002      	b.n	800b9d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b9ce:	bf00      	nop
  }
  return  speed;
 800b9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7f8 fc60 	bl	80042b6 <HAL_HCD_ResetPort>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f000 f8ff 	bl	800bc00 <USBH_Get_USB_Status>
 800ba02:	4603      	mov	r3, r0
 800ba04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba22:	78fa      	ldrb	r2, [r7, #3]
 800ba24:	4611      	mov	r1, r2
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7f8 fc67 	bl	80042fa <HAL_HCD_HC_GetXferCount>
 800ba2c:	4603      	mov	r3, r0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ba36:	b590      	push	{r4, r7, lr}
 800ba38:	b089      	sub	sp, #36	; 0x24
 800ba3a:	af04      	add	r7, sp, #16
 800ba3c:	6078      	str	r0, [r7, #4]
 800ba3e:	4608      	mov	r0, r1
 800ba40:	4611      	mov	r1, r2
 800ba42:	461a      	mov	r2, r3
 800ba44:	4603      	mov	r3, r0
 800ba46:	70fb      	strb	r3, [r7, #3]
 800ba48:	460b      	mov	r3, r1
 800ba4a:	70bb      	strb	r3, [r7, #2]
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ba5e:	787c      	ldrb	r4, [r7, #1]
 800ba60:	78ba      	ldrb	r2, [r7, #2]
 800ba62:	78f9      	ldrb	r1, [r7, #3]
 800ba64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ba66:	9302      	str	r3, [sp, #8]
 800ba68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba6c:	9301      	str	r3, [sp, #4]
 800ba6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	4623      	mov	r3, r4
 800ba76:	f7f8 f8ca 	bl	8003c0e <HAL_HCD_HC_Init>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f000 f8bd 	bl	800bc00 <USBH_Get_USB_Status>
 800ba86:	4603      	mov	r3, r0
 800ba88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd90      	pop	{r4, r7, pc}

0800ba94 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800baa4:	2300      	movs	r3, #0
 800baa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800baae:	78fa      	ldrb	r2, [r7, #3]
 800bab0:	4611      	mov	r1, r2
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7f8 f93a 	bl	8003d2c <HAL_HCD_HC_Halt>
 800bab8:	4603      	mov	r3, r0
 800baba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800babc:	7bfb      	ldrb	r3, [r7, #15]
 800babe:	4618      	mov	r0, r3
 800bac0:	f000 f89e 	bl	800bc00 <USBH_Get_USB_Status>
 800bac4:	4603      	mov	r3, r0
 800bac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bac8:	7bbb      	ldrb	r3, [r7, #14]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bad2:	b590      	push	{r4, r7, lr}
 800bad4:	b089      	sub	sp, #36	; 0x24
 800bad6:	af04      	add	r7, sp, #16
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	4608      	mov	r0, r1
 800badc:	4611      	mov	r1, r2
 800bade:	461a      	mov	r2, r3
 800bae0:	4603      	mov	r3, r0
 800bae2:	70fb      	strb	r3, [r7, #3]
 800bae4:	460b      	mov	r3, r1
 800bae6:	70bb      	strb	r3, [r7, #2]
 800bae8:	4613      	mov	r3, r2
 800baea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bafa:	787c      	ldrb	r4, [r7, #1]
 800bafc:	78ba      	ldrb	r2, [r7, #2]
 800bafe:	78f9      	ldrb	r1, [r7, #3]
 800bb00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bb04:	9303      	str	r3, [sp, #12]
 800bb06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb08:	9302      	str	r3, [sp, #8]
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0c:	9301      	str	r3, [sp, #4]
 800bb0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	4623      	mov	r3, r4
 800bb16:	f7f8 f92d 	bl	8003d74 <HAL_HCD_HC_SubmitRequest>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
 800bb20:	4618      	mov	r0, r3
 800bb22:	f000 f86d 	bl	800bc00 <USBH_Get_USB_Status>
 800bb26:	4603      	mov	r3, r0
 800bb28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3714      	adds	r7, #20
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd90      	pop	{r4, r7, pc}

0800bb34 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb46:	78fa      	ldrb	r2, [r7, #3]
 800bb48:	4611      	mov	r1, r2
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7f8 fbc1 	bl	80042d2 <HAL_HCD_HC_GetURBState>
 800bb50:	4603      	mov	r3, r0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b082      	sub	sp, #8
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	460b      	mov	r3, r1
 800bb64:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d103      	bne.n	800bb78 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bb70:	78fb      	ldrb	r3, [r7, #3]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 f870 	bl	800bc58 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bb78:	20c8      	movs	r0, #200	; 0xc8
 800bb7a:	f7f7 fc81 	bl	8003480 <HAL_Delay>
  return USBH_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	460b      	mov	r3, r1
 800bb92:	70fb      	strb	r3, [r7, #3]
 800bb94:	4613      	mov	r3, r2
 800bb96:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb9e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bba0:	78fb      	ldrb	r3, [r7, #3]
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	212c      	movs	r1, #44	; 0x2c
 800bba6:	fb01 f303 	mul.w	r3, r1, r3
 800bbaa:	4413      	add	r3, r2
 800bbac:	333b      	adds	r3, #59	; 0x3b
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d009      	beq.n	800bbc8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	212c      	movs	r1, #44	; 0x2c
 800bbba:	fb01 f303 	mul.w	r3, r1, r3
 800bbbe:	4413      	add	r3, r2
 800bbc0:	3354      	adds	r3, #84	; 0x54
 800bbc2:	78ba      	ldrb	r2, [r7, #2]
 800bbc4:	701a      	strb	r2, [r3, #0]
 800bbc6:	e008      	b.n	800bbda <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bbc8:	78fb      	ldrb	r3, [r7, #3]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	212c      	movs	r1, #44	; 0x2c
 800bbce:	fb01 f303 	mul.w	r3, r1, r3
 800bbd2:	4413      	add	r3, r2
 800bbd4:	3355      	adds	r3, #85	; 0x55
 800bbd6:	78ba      	ldrb	r2, [r7, #2]
 800bbd8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7f7 fc45 	bl	8003480 <HAL_Delay>
}
 800bbf6:	bf00      	nop
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
	...

0800bc00 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	4603      	mov	r3, r0
 800bc08:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	2b03      	cmp	r3, #3
 800bc12:	d817      	bhi.n	800bc44 <USBH_Get_USB_Status+0x44>
 800bc14:	a201      	add	r2, pc, #4	; (adr r2, 800bc1c <USBH_Get_USB_Status+0x1c>)
 800bc16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc1a:	bf00      	nop
 800bc1c:	0800bc2d 	.word	0x0800bc2d
 800bc20:	0800bc33 	.word	0x0800bc33
 800bc24:	0800bc39 	.word	0x0800bc39
 800bc28:	0800bc3f 	.word	0x0800bc3f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc30:	e00b      	b.n	800bc4a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bc32:	2302      	movs	r3, #2
 800bc34:	73fb      	strb	r3, [r7, #15]
    break;
 800bc36:	e008      	b.n	800bc4a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc3c:	e005      	b.n	800bc4a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bc3e:	2302      	movs	r3, #2
 800bc40:	73fb      	strb	r3, [r7, #15]
    break;
 800bc42:	e002      	b.n	800bc4a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bc44:	2302      	movs	r3, #2
 800bc46:	73fb      	strb	r3, [r7, #15]
    break;
 800bc48:	bf00      	nop
  }
  return usb_status;
 800bc4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bc62:	79fb      	ldrb	r3, [r7, #7]
 800bc64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bc66:	79fb      	ldrb	r3, [r7, #7]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d102      	bne.n	800bc72 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	73fb      	strb	r3, [r7, #15]
 800bc70:	e001      	b.n	800bc76 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bc72:	2301      	movs	r3, #1
 800bc74:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	2101      	movs	r1, #1
 800bc7c:	4803      	ldr	r0, [pc, #12]	; (800bc8c <MX_DriverVbusFS+0x34>)
 800bc7e:	f7f7 ff4b 	bl	8003b18 <HAL_GPIO_WritePin>
}
 800bc82:	bf00      	nop
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	40020800 	.word	0x40020800

0800bc90 <malloc>:
 800bc90:	4b02      	ldr	r3, [pc, #8]	; (800bc9c <malloc+0xc>)
 800bc92:	4601      	mov	r1, r0
 800bc94:	6818      	ldr	r0, [r3, #0]
 800bc96:	f000 b82b 	b.w	800bcf0 <_malloc_r>
 800bc9a:	bf00      	nop
 800bc9c:	20000078 	.word	0x20000078

0800bca0 <free>:
 800bca0:	4b02      	ldr	r3, [pc, #8]	; (800bcac <free+0xc>)
 800bca2:	4601      	mov	r1, r0
 800bca4:	6818      	ldr	r0, [r3, #0]
 800bca6:	f000 b901 	b.w	800beac <_free_r>
 800bcaa:	bf00      	nop
 800bcac:	20000078 	.word	0x20000078

0800bcb0 <sbrk_aligned>:
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	4e0e      	ldr	r6, [pc, #56]	; (800bcec <sbrk_aligned+0x3c>)
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	6831      	ldr	r1, [r6, #0]
 800bcb8:	4605      	mov	r5, r0
 800bcba:	b911      	cbnz	r1, 800bcc2 <sbrk_aligned+0x12>
 800bcbc:	f000 f8ac 	bl	800be18 <_sbrk_r>
 800bcc0:	6030      	str	r0, [r6, #0]
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	f000 f8a7 	bl	800be18 <_sbrk_r>
 800bcca:	1c43      	adds	r3, r0, #1
 800bccc:	d00a      	beq.n	800bce4 <sbrk_aligned+0x34>
 800bcce:	1cc4      	adds	r4, r0, #3
 800bcd0:	f024 0403 	bic.w	r4, r4, #3
 800bcd4:	42a0      	cmp	r0, r4
 800bcd6:	d007      	beq.n	800bce8 <sbrk_aligned+0x38>
 800bcd8:	1a21      	subs	r1, r4, r0
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f000 f89c 	bl	800be18 <_sbrk_r>
 800bce0:	3001      	adds	r0, #1
 800bce2:	d101      	bne.n	800bce8 <sbrk_aligned+0x38>
 800bce4:	f04f 34ff 	mov.w	r4, #4294967295
 800bce8:	4620      	mov	r0, r4
 800bcea:	bd70      	pop	{r4, r5, r6, pc}
 800bcec:	20000b08 	.word	0x20000b08

0800bcf0 <_malloc_r>:
 800bcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf4:	1ccd      	adds	r5, r1, #3
 800bcf6:	f025 0503 	bic.w	r5, r5, #3
 800bcfa:	3508      	adds	r5, #8
 800bcfc:	2d0c      	cmp	r5, #12
 800bcfe:	bf38      	it	cc
 800bd00:	250c      	movcc	r5, #12
 800bd02:	2d00      	cmp	r5, #0
 800bd04:	4607      	mov	r7, r0
 800bd06:	db01      	blt.n	800bd0c <_malloc_r+0x1c>
 800bd08:	42a9      	cmp	r1, r5
 800bd0a:	d905      	bls.n	800bd18 <_malloc_r+0x28>
 800bd0c:	230c      	movs	r3, #12
 800bd0e:	603b      	str	r3, [r7, #0]
 800bd10:	2600      	movs	r6, #0
 800bd12:	4630      	mov	r0, r6
 800bd14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bdec <_malloc_r+0xfc>
 800bd1c:	f000 f868 	bl	800bdf0 <__malloc_lock>
 800bd20:	f8d8 3000 	ldr.w	r3, [r8]
 800bd24:	461c      	mov	r4, r3
 800bd26:	bb5c      	cbnz	r4, 800bd80 <_malloc_r+0x90>
 800bd28:	4629      	mov	r1, r5
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	f7ff ffc0 	bl	800bcb0 <sbrk_aligned>
 800bd30:	1c43      	adds	r3, r0, #1
 800bd32:	4604      	mov	r4, r0
 800bd34:	d155      	bne.n	800bde2 <_malloc_r+0xf2>
 800bd36:	f8d8 4000 	ldr.w	r4, [r8]
 800bd3a:	4626      	mov	r6, r4
 800bd3c:	2e00      	cmp	r6, #0
 800bd3e:	d145      	bne.n	800bdcc <_malloc_r+0xdc>
 800bd40:	2c00      	cmp	r4, #0
 800bd42:	d048      	beq.n	800bdd6 <_malloc_r+0xe6>
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	4631      	mov	r1, r6
 800bd48:	4638      	mov	r0, r7
 800bd4a:	eb04 0903 	add.w	r9, r4, r3
 800bd4e:	f000 f863 	bl	800be18 <_sbrk_r>
 800bd52:	4581      	cmp	r9, r0
 800bd54:	d13f      	bne.n	800bdd6 <_malloc_r+0xe6>
 800bd56:	6821      	ldr	r1, [r4, #0]
 800bd58:	1a6d      	subs	r5, r5, r1
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	4638      	mov	r0, r7
 800bd5e:	f7ff ffa7 	bl	800bcb0 <sbrk_aligned>
 800bd62:	3001      	adds	r0, #1
 800bd64:	d037      	beq.n	800bdd6 <_malloc_r+0xe6>
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	442b      	add	r3, r5
 800bd6a:	6023      	str	r3, [r4, #0]
 800bd6c:	f8d8 3000 	ldr.w	r3, [r8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d038      	beq.n	800bde6 <_malloc_r+0xf6>
 800bd74:	685a      	ldr	r2, [r3, #4]
 800bd76:	42a2      	cmp	r2, r4
 800bd78:	d12b      	bne.n	800bdd2 <_malloc_r+0xe2>
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	605a      	str	r2, [r3, #4]
 800bd7e:	e00f      	b.n	800bda0 <_malloc_r+0xb0>
 800bd80:	6822      	ldr	r2, [r4, #0]
 800bd82:	1b52      	subs	r2, r2, r5
 800bd84:	d41f      	bmi.n	800bdc6 <_malloc_r+0xd6>
 800bd86:	2a0b      	cmp	r2, #11
 800bd88:	d917      	bls.n	800bdba <_malloc_r+0xca>
 800bd8a:	1961      	adds	r1, r4, r5
 800bd8c:	42a3      	cmp	r3, r4
 800bd8e:	6025      	str	r5, [r4, #0]
 800bd90:	bf18      	it	ne
 800bd92:	6059      	strne	r1, [r3, #4]
 800bd94:	6863      	ldr	r3, [r4, #4]
 800bd96:	bf08      	it	eq
 800bd98:	f8c8 1000 	streq.w	r1, [r8]
 800bd9c:	5162      	str	r2, [r4, r5]
 800bd9e:	604b      	str	r3, [r1, #4]
 800bda0:	4638      	mov	r0, r7
 800bda2:	f104 060b 	add.w	r6, r4, #11
 800bda6:	f000 f829 	bl	800bdfc <__malloc_unlock>
 800bdaa:	f026 0607 	bic.w	r6, r6, #7
 800bdae:	1d23      	adds	r3, r4, #4
 800bdb0:	1af2      	subs	r2, r6, r3
 800bdb2:	d0ae      	beq.n	800bd12 <_malloc_r+0x22>
 800bdb4:	1b9b      	subs	r3, r3, r6
 800bdb6:	50a3      	str	r3, [r4, r2]
 800bdb8:	e7ab      	b.n	800bd12 <_malloc_r+0x22>
 800bdba:	42a3      	cmp	r3, r4
 800bdbc:	6862      	ldr	r2, [r4, #4]
 800bdbe:	d1dd      	bne.n	800bd7c <_malloc_r+0x8c>
 800bdc0:	f8c8 2000 	str.w	r2, [r8]
 800bdc4:	e7ec      	b.n	800bda0 <_malloc_r+0xb0>
 800bdc6:	4623      	mov	r3, r4
 800bdc8:	6864      	ldr	r4, [r4, #4]
 800bdca:	e7ac      	b.n	800bd26 <_malloc_r+0x36>
 800bdcc:	4634      	mov	r4, r6
 800bdce:	6876      	ldr	r6, [r6, #4]
 800bdd0:	e7b4      	b.n	800bd3c <_malloc_r+0x4c>
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	e7cc      	b.n	800bd70 <_malloc_r+0x80>
 800bdd6:	230c      	movs	r3, #12
 800bdd8:	603b      	str	r3, [r7, #0]
 800bdda:	4638      	mov	r0, r7
 800bddc:	f000 f80e 	bl	800bdfc <__malloc_unlock>
 800bde0:	e797      	b.n	800bd12 <_malloc_r+0x22>
 800bde2:	6025      	str	r5, [r4, #0]
 800bde4:	e7dc      	b.n	800bda0 <_malloc_r+0xb0>
 800bde6:	605b      	str	r3, [r3, #4]
 800bde8:	deff      	udf	#255	; 0xff
 800bdea:	bf00      	nop
 800bdec:	20000b04 	.word	0x20000b04

0800bdf0 <__malloc_lock>:
 800bdf0:	4801      	ldr	r0, [pc, #4]	; (800bdf8 <__malloc_lock+0x8>)
 800bdf2:	f000 b84b 	b.w	800be8c <__retarget_lock_acquire_recursive>
 800bdf6:	bf00      	nop
 800bdf8:	20000c48 	.word	0x20000c48

0800bdfc <__malloc_unlock>:
 800bdfc:	4801      	ldr	r0, [pc, #4]	; (800be04 <__malloc_unlock+0x8>)
 800bdfe:	f000 b846 	b.w	800be8e <__retarget_lock_release_recursive>
 800be02:	bf00      	nop
 800be04:	20000c48 	.word	0x20000c48

0800be08 <memset>:
 800be08:	4402      	add	r2, r0
 800be0a:	4603      	mov	r3, r0
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d100      	bne.n	800be12 <memset+0xa>
 800be10:	4770      	bx	lr
 800be12:	f803 1b01 	strb.w	r1, [r3], #1
 800be16:	e7f9      	b.n	800be0c <memset+0x4>

0800be18 <_sbrk_r>:
 800be18:	b538      	push	{r3, r4, r5, lr}
 800be1a:	4d06      	ldr	r5, [pc, #24]	; (800be34 <_sbrk_r+0x1c>)
 800be1c:	2300      	movs	r3, #0
 800be1e:	4604      	mov	r4, r0
 800be20:	4608      	mov	r0, r1
 800be22:	602b      	str	r3, [r5, #0]
 800be24:	f7f7 fa48 	bl	80032b8 <_sbrk>
 800be28:	1c43      	adds	r3, r0, #1
 800be2a:	d102      	bne.n	800be32 <_sbrk_r+0x1a>
 800be2c:	682b      	ldr	r3, [r5, #0]
 800be2e:	b103      	cbz	r3, 800be32 <_sbrk_r+0x1a>
 800be30:	6023      	str	r3, [r4, #0]
 800be32:	bd38      	pop	{r3, r4, r5, pc}
 800be34:	20000c44 	.word	0x20000c44

0800be38 <__errno>:
 800be38:	4b01      	ldr	r3, [pc, #4]	; (800be40 <__errno+0x8>)
 800be3a:	6818      	ldr	r0, [r3, #0]
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	20000078 	.word	0x20000078

0800be44 <__libc_init_array>:
 800be44:	b570      	push	{r4, r5, r6, lr}
 800be46:	4d0d      	ldr	r5, [pc, #52]	; (800be7c <__libc_init_array+0x38>)
 800be48:	4c0d      	ldr	r4, [pc, #52]	; (800be80 <__libc_init_array+0x3c>)
 800be4a:	1b64      	subs	r4, r4, r5
 800be4c:	10a4      	asrs	r4, r4, #2
 800be4e:	2600      	movs	r6, #0
 800be50:	42a6      	cmp	r6, r4
 800be52:	d109      	bne.n	800be68 <__libc_init_array+0x24>
 800be54:	4d0b      	ldr	r5, [pc, #44]	; (800be84 <__libc_init_array+0x40>)
 800be56:	4c0c      	ldr	r4, [pc, #48]	; (800be88 <__libc_init_array+0x44>)
 800be58:	f000 f874 	bl	800bf44 <_init>
 800be5c:	1b64      	subs	r4, r4, r5
 800be5e:	10a4      	asrs	r4, r4, #2
 800be60:	2600      	movs	r6, #0
 800be62:	42a6      	cmp	r6, r4
 800be64:	d105      	bne.n	800be72 <__libc_init_array+0x2e>
 800be66:	bd70      	pop	{r4, r5, r6, pc}
 800be68:	f855 3b04 	ldr.w	r3, [r5], #4
 800be6c:	4798      	blx	r3
 800be6e:	3601      	adds	r6, #1
 800be70:	e7ee      	b.n	800be50 <__libc_init_array+0xc>
 800be72:	f855 3b04 	ldr.w	r3, [r5], #4
 800be76:	4798      	blx	r3
 800be78:	3601      	adds	r6, #1
 800be7a:	e7f2      	b.n	800be62 <__libc_init_array+0x1e>
 800be7c:	0800bfcc 	.word	0x0800bfcc
 800be80:	0800bfcc 	.word	0x0800bfcc
 800be84:	0800bfcc 	.word	0x0800bfcc
 800be88:	0800bfd0 	.word	0x0800bfd0

0800be8c <__retarget_lock_acquire_recursive>:
 800be8c:	4770      	bx	lr

0800be8e <__retarget_lock_release_recursive>:
 800be8e:	4770      	bx	lr

0800be90 <memcpy>:
 800be90:	440a      	add	r2, r1
 800be92:	4291      	cmp	r1, r2
 800be94:	f100 33ff 	add.w	r3, r0, #4294967295
 800be98:	d100      	bne.n	800be9c <memcpy+0xc>
 800be9a:	4770      	bx	lr
 800be9c:	b510      	push	{r4, lr}
 800be9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bea6:	4291      	cmp	r1, r2
 800bea8:	d1f9      	bne.n	800be9e <memcpy+0xe>
 800beaa:	bd10      	pop	{r4, pc}

0800beac <_free_r>:
 800beac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800beae:	2900      	cmp	r1, #0
 800beb0:	d044      	beq.n	800bf3c <_free_r+0x90>
 800beb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beb6:	9001      	str	r0, [sp, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f1a1 0404 	sub.w	r4, r1, #4
 800bebe:	bfb8      	it	lt
 800bec0:	18e4      	addlt	r4, r4, r3
 800bec2:	f7ff ff95 	bl	800bdf0 <__malloc_lock>
 800bec6:	4a1e      	ldr	r2, [pc, #120]	; (800bf40 <_free_r+0x94>)
 800bec8:	9801      	ldr	r0, [sp, #4]
 800beca:	6813      	ldr	r3, [r2, #0]
 800becc:	b933      	cbnz	r3, 800bedc <_free_r+0x30>
 800bece:	6063      	str	r3, [r4, #4]
 800bed0:	6014      	str	r4, [r2, #0]
 800bed2:	b003      	add	sp, #12
 800bed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bed8:	f7ff bf90 	b.w	800bdfc <__malloc_unlock>
 800bedc:	42a3      	cmp	r3, r4
 800bede:	d908      	bls.n	800bef2 <_free_r+0x46>
 800bee0:	6825      	ldr	r5, [r4, #0]
 800bee2:	1961      	adds	r1, r4, r5
 800bee4:	428b      	cmp	r3, r1
 800bee6:	bf01      	itttt	eq
 800bee8:	6819      	ldreq	r1, [r3, #0]
 800beea:	685b      	ldreq	r3, [r3, #4]
 800beec:	1949      	addeq	r1, r1, r5
 800beee:	6021      	streq	r1, [r4, #0]
 800bef0:	e7ed      	b.n	800bece <_free_r+0x22>
 800bef2:	461a      	mov	r2, r3
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	b10b      	cbz	r3, 800befc <_free_r+0x50>
 800bef8:	42a3      	cmp	r3, r4
 800befa:	d9fa      	bls.n	800bef2 <_free_r+0x46>
 800befc:	6811      	ldr	r1, [r2, #0]
 800befe:	1855      	adds	r5, r2, r1
 800bf00:	42a5      	cmp	r5, r4
 800bf02:	d10b      	bne.n	800bf1c <_free_r+0x70>
 800bf04:	6824      	ldr	r4, [r4, #0]
 800bf06:	4421      	add	r1, r4
 800bf08:	1854      	adds	r4, r2, r1
 800bf0a:	42a3      	cmp	r3, r4
 800bf0c:	6011      	str	r1, [r2, #0]
 800bf0e:	d1e0      	bne.n	800bed2 <_free_r+0x26>
 800bf10:	681c      	ldr	r4, [r3, #0]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	6053      	str	r3, [r2, #4]
 800bf16:	440c      	add	r4, r1
 800bf18:	6014      	str	r4, [r2, #0]
 800bf1a:	e7da      	b.n	800bed2 <_free_r+0x26>
 800bf1c:	d902      	bls.n	800bf24 <_free_r+0x78>
 800bf1e:	230c      	movs	r3, #12
 800bf20:	6003      	str	r3, [r0, #0]
 800bf22:	e7d6      	b.n	800bed2 <_free_r+0x26>
 800bf24:	6825      	ldr	r5, [r4, #0]
 800bf26:	1961      	adds	r1, r4, r5
 800bf28:	428b      	cmp	r3, r1
 800bf2a:	bf04      	itt	eq
 800bf2c:	6819      	ldreq	r1, [r3, #0]
 800bf2e:	685b      	ldreq	r3, [r3, #4]
 800bf30:	6063      	str	r3, [r4, #4]
 800bf32:	bf04      	itt	eq
 800bf34:	1949      	addeq	r1, r1, r5
 800bf36:	6021      	streq	r1, [r4, #0]
 800bf38:	6054      	str	r4, [r2, #4]
 800bf3a:	e7ca      	b.n	800bed2 <_free_r+0x26>
 800bf3c:	b003      	add	sp, #12
 800bf3e:	bd30      	pop	{r4, r5, pc}
 800bf40:	20000b04 	.word	0x20000b04

0800bf44 <_init>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	bf00      	nop
 800bf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf4a:	bc08      	pop	{r3}
 800bf4c:	469e      	mov	lr, r3
 800bf4e:	4770      	bx	lr

0800bf50 <_fini>:
 800bf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf52:	bf00      	nop
 800bf54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf56:	bc08      	pop	{r3}
 800bf58:	469e      	mov	lr, r3
 800bf5a:	4770      	bx	lr
