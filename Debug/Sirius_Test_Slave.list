
Sirius_Test_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd0c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800cea8  0800cea8  0001cea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf40  0800cf40  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf40  0800cf40  0001cf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf48  0800cf48  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf48  0800cf48  0001cf48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf4c  0800cf4c  0001cf4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800cf50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd0  20000090  0800cfe0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c60  0800cfe0  00020c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b8f8  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004121  00000000  00000000  0003b9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0003fb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112a  00000000  00000000  00041130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c9c6  00000000  00000000  0004225a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d72e  00000000  00000000  0005ec20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000963ef  00000000  00000000  0007c34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000656c  00000000  00000000  00112740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00118cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ce8c 	.word	0x0800ce8c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800ce8c 	.word	0x0800ce8c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b970 	b.w	8000e48 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9e08      	ldr	r6, [sp, #32]
 8000b86:	460d      	mov	r5, r1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	460f      	mov	r7, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14a      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4694      	mov	ip, r2
 8000b94:	d965      	bls.n	8000c62 <__udivmoddi4+0xe2>
 8000b96:	fab2 f382 	clz	r3, r2
 8000b9a:	b143      	cbz	r3, 8000bae <__udivmoddi4+0x2e>
 8000b9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba0:	f1c3 0220 	rsb	r2, r3, #32
 8000ba4:	409f      	lsls	r7, r3
 8000ba6:	fa20 f202 	lsr.w	r2, r0, r2
 8000baa:	4317      	orrs	r7, r2
 8000bac:	409c      	lsls	r4, r3
 8000bae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bb2:	fa1f f58c 	uxth.w	r5, ip
 8000bb6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bba:	0c22      	lsrs	r2, r4, #16
 8000bbc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc4:	fb01 f005 	mul.w	r0, r1, r5
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x62>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bd4:	f080 811c 	bcs.w	8000e10 <__udivmoddi4+0x290>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f240 8119 	bls.w	8000e10 <__udivmoddi4+0x290>
 8000bde:	3902      	subs	r1, #2
 8000be0:	4462      	add	r2, ip
 8000be2:	1a12      	subs	r2, r2, r0
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf2:	fb00 f505 	mul.w	r5, r0, r5
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x90>
 8000bfa:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c02:	f080 8107 	bcs.w	8000e14 <__udivmoddi4+0x294>
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	f240 8104 	bls.w	8000e14 <__udivmoddi4+0x294>
 8000c0c:	4464      	add	r4, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c14:	1b64      	subs	r4, r4, r5
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11e      	cbz	r6, 8000c22 <__udivmoddi4+0xa2>
 8000c1a:	40dc      	lsrs	r4, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0xbc>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	f000 80ed 	beq.w	8000e0a <__udivmoddi4+0x28a>
 8000c30:	2100      	movs	r1, #0
 8000c32:	e9c6 0500 	strd	r0, r5, [r6]
 8000c36:	4608      	mov	r0, r1
 8000c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3c:	fab3 f183 	clz	r1, r3
 8000c40:	2900      	cmp	r1, #0
 8000c42:	d149      	bne.n	8000cd8 <__udivmoddi4+0x158>
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	d302      	bcc.n	8000c4e <__udivmoddi4+0xce>
 8000c48:	4282      	cmp	r2, r0
 8000c4a:	f200 80f8 	bhi.w	8000e3e <__udivmoddi4+0x2be>
 8000c4e:	1a84      	subs	r4, r0, r2
 8000c50:	eb65 0203 	sbc.w	r2, r5, r3
 8000c54:	2001      	movs	r0, #1
 8000c56:	4617      	mov	r7, r2
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d0e2      	beq.n	8000c22 <__udivmoddi4+0xa2>
 8000c5c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c60:	e7df      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c62:	b902      	cbnz	r2, 8000c66 <__udivmoddi4+0xe6>
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8090 	bne.w	8000d90 <__udivmoddi4+0x210>
 8000c70:	1a8a      	subs	r2, r1, r2
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c80:	fb07 2015 	mls	r0, r7, r5, r2
 8000c84:	0c22      	lsrs	r2, r4, #16
 8000c86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8a:	fb0e f005 	mul.w	r0, lr, r5
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x124>
 8000c92:	eb1c 0202 	adds.w	r2, ip, r2
 8000c96:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x122>
 8000c9c:	4290      	cmp	r0, r2
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2b8>
 8000ca2:	4645      	mov	r5, r8
 8000ca4:	1a12      	subs	r2, r2, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cac:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x14e>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x14c>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2c2>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cd6:	e79f      	b.n	8000c18 <__udivmoddi4+0x98>
 8000cd8:	f1c1 0720 	rsb	r7, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cea:	fa20 f307 	lsr.w	r3, r0, r7
 8000cee:	40fd      	lsrs	r5, r7
 8000cf0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	fb09 5518 	mls	r5, r9, r8, r5
 8000d02:	0c1c      	lsrs	r4, r3, #16
 8000d04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d08:	fb08 f50e 	mul.w	r5, r8, lr
 8000d0c:	42a5      	cmp	r5, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	fa00 f001 	lsl.w	r0, r0, r1
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b0>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2b4>
 8000d24:	42a5      	cmp	r5, r4
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2b4>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4464      	add	r4, ip
 8000d30:	1b64      	subs	r4, r4, r5
 8000d32:	b29d      	uxth	r5, r3
 8000d34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d38:	fb09 4413 	mls	r4, r9, r3, r4
 8000d3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d40:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1da>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2ac>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2ac>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	4464      	add	r4, ip
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	42ac      	cmp	r4, r5
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46ae      	mov	lr, r5
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x29c>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x298>
 8000d70:	b156      	cbz	r6, 8000d88 <__udivmoddi4+0x208>
 8000d72:	ebb0 0208 	subs.w	r2, r0, r8
 8000d76:	eb64 040e 	sbc.w	r4, r4, lr
 8000d7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7e:	40ca      	lsrs	r2, r1
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	4317      	orrs	r7, r2
 8000d84:	e9c6 7400 	strd	r7, r4, [r6]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	f1c3 0120 	rsb	r1, r3, #32
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	fa20 f201 	lsr.w	r2, r0, r1
 8000d9c:	fa25 f101 	lsr.w	r1, r5, r1
 8000da0:	409d      	lsls	r5, r3
 8000da2:	432a      	orrs	r2, r5
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db0:	fb07 1510 	mls	r5, r7, r0, r1
 8000db4:	0c11      	lsrs	r1, r2, #16
 8000db6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dba:	fb00 f50e 	mul.w	r5, r0, lr
 8000dbe:	428d      	cmp	r5, r1
 8000dc0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x258>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd0:	428d      	cmp	r5, r1
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4461      	add	r1, ip
 8000dd8:	1b49      	subs	r1, r1, r5
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de0:	fb07 1115 	mls	r1, r7, r5, r1
 8000de4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dec:	4291      	cmp	r1, r2
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x282>
 8000df0:	eb1c 0202 	adds.w	r2, ip, r2
 8000df4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfa:	4291      	cmp	r1, r2
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfe:	3d02      	subs	r5, #2
 8000e00:	4462      	add	r2, ip
 8000e02:	1a52      	subs	r2, r2, r1
 8000e04:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0xfc>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000e10:	4639      	mov	r1, r7
 8000e12:	e6e6      	b.n	8000be2 <__udivmoddi4+0x62>
 8000e14:	4610      	mov	r0, r2
 8000e16:	e6fb      	b.n	8000c10 <__udivmoddi4+0x90>
 8000e18:	4548      	cmp	r0, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f0>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e24:	3b01      	subs	r3, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f0>
 8000e28:	4645      	mov	r5, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x282>
 8000e2c:	462b      	mov	r3, r5
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1da>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x258>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b0>
 8000e38:	3d02      	subs	r5, #2
 8000e3a:	4462      	add	r2, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x124>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e70a      	b.n	8000c58 <__udivmoddi4+0xd8>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x14e>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f001 fbda 	bl	8002612 <null_ptr_check>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d131      	bne.n	8000ece <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7a1b      	ldrb	r3, [r3, #8]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d003      	beq.n	8000e7a <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	729a      	strb	r2, [r3, #10]
 8000e78:	e002      	b.n	8000e80 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000e80:	f107 010e 	add.w	r1, r7, #14
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2201      	movs	r2, #1
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f000 f826 	bl	8000eda <bmp3_get_regs>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d119      	bne.n	8000ece <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	2b50      	cmp	r3, #80	; 0x50
 8000e9e:	d002      	beq.n	8000ea6 <bmp3_init+0x5a>
 8000ea0:	7bbb      	ldrb	r3, [r7, #14]
 8000ea2:	2b60      	cmp	r3, #96	; 0x60
 8000ea4:	d111      	bne.n	8000eca <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000ea6:	7bba      	ldrb	r2, [r7, #14]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f9b2 	bl	8001216 <bmp3_soft_reset>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d107      	bne.n	8000ece <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 fb52 	bl	8001568 <get_calib_data>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000ec8:	e001      	b.n	8000ece <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000eca:	23f9      	movs	r3, #249	; 0xf9
 8000ecc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8000eda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ede:	b08b      	sub	sp, #44	; 0x2c
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4603      	mov	r3, r0
 8000eea:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000eec:	6838      	ldr	r0, [r7, #0]
 8000eee:	f001 fb90 	bl	8002612 <null_ptr_check>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8000ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d172      	bne.n	8000fe6 <bmp3_get_regs+0x10c>
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d06f      	beq.n	8000fe6 <bmp3_get_regs+0x10c>
    {
 8000f06:	466b      	mov	r3, sp
 8000f08:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	7a9b      	ldrb	r3, [r3, #10]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	7a9b      	ldrb	r3, [r3, #10]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	18d1      	adds	r1, r2, r3
 8000f20:	460b      	mov	r3, r1
 8000f22:	3b01      	subs	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	2300      	movs	r3, #0
 8000f28:	4688      	mov	r8, r1
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000f38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000f3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000f40:	2300      	movs	r3, #0
 8000f42:	460c      	mov	r4, r1
 8000f44:	461d      	mov	r5, r3
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	00eb      	lsls	r3, r5, #3
 8000f50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f54:	00e2      	lsls	r2, r4, #3
 8000f56:	1dcb      	adds	r3, r1, #7
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	ebad 0d03 	sub.w	sp, sp, r3
 8000f60:	466b      	mov	r3, sp
 8000f62:	3300      	adds	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	7a1b      	ldrb	r3, [r3, #8]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d025      	beq.n	8000fba <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f74:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68dc      	ldr	r4, [r3, #12]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	7bf8      	ldrb	r0, [r7, #15]
 8000f80:	69fa      	ldr	r2, [r7, #28]
 8000f82:	6979      	ldr	r1, [r7, #20]
 8000f84:	47a0      	blx	r4
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
 8000f92:	e00d      	b.n	8000fb0 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	7a9b      	ldrb	r3, [r3, #10]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	441a      	add	r2, r3
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	6a3b      	ldr	r3, [r7, #32]
 8000fa2:	440b      	add	r3, r1
 8000fa4:	6979      	ldr	r1, [r7, #20]
 8000fa6:	5c8a      	ldrb	r2, [r1, r2]
 8000fa8:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	3301      	adds	r3, #1
 8000fae:	623b      	str	r3, [r7, #32]
 8000fb0:	6a3a      	ldr	r2, [r7, #32]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3ed      	bcc.n	8000f94 <bmp3_get_regs+0xba>
 8000fb8:	e00b      	b.n	8000fd2 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68dc      	ldr	r4, [r3, #12]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	7bf8      	ldrb	r0, [r7, #15]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	68b9      	ldr	r1, [r7, #8]
 8000fc8:	47a0      	blx	r4
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 8000fdc:	23fe      	movs	r3, #254	; 0xfe
 8000fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fe2:	46b5      	mov	sp, r6
    {
 8000fe4:	e002      	b.n	8000fec <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8000fe6:	23ff      	movs	r3, #255	; 0xff
 8000fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8000fec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	372c      	adds	r7, #44	; 0x2c
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000ffa <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8000ffa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ffe:	b08b      	sub	sp, #44	; 0x2c
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	466b      	mov	r3, sp
 800100c:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	0059      	lsls	r1, r3, #1
 8001012:	460b      	mov	r3, r1
 8001014:	3b01      	subs	r3, #1
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	2300      	movs	r3, #0
 800101a:	4688      	mov	r8, r1
 800101c:	4699      	mov	r9, r3
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800102a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800102e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001032:	2300      	movs	r3, #0
 8001034:	460c      	mov	r4, r1
 8001036:	461d      	mov	r5, r3
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	00eb      	lsls	r3, r5, #3
 8001042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001046:	00e2      	lsls	r2, r4, #3
 8001048:	1dcb      	adds	r3, r1, #7
 800104a:	08db      	lsrs	r3, r3, #3
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	ebad 0d03 	sub.w	sp, sp, r3
 8001052:	466b      	mov	r3, sp
 8001054:	3300      	adds	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001058:	6838      	ldr	r0, [r7, #0]
 800105a:	f001 fada 	bl	8002612 <null_ptr_check>
 800105e:	4603      	mov	r3, r0
 8001060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001064:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001068:	2b00      	cmp	r3, #0
 800106a:	d14e      	bne.n	800110a <bmp3_set_regs+0x110>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d04b      	beq.n	800110a <bmp3_set_regs+0x110>
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d048      	beq.n	800110a <bmp3_set_regs+0x110>
    {
        if (len != 0)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d041      	beq.n	8001102 <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	7a1b      	ldrb	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d114      	bne.n	80010b8 <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800108e:	2300      	movs	r3, #0
 8001090:	77fb      	strb	r3, [r7, #31]
 8001092:	e00d      	b.n	80010b0 <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001094:	7ffb      	ldrb	r3, [r7, #31]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	7ffb      	ldrb	r3, [r7, #31]
 800109e:	68f9      	ldr	r1, [r7, #12]
 80010a0:	440b      	add	r3, r1
 80010a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010aa:	7ffb      	ldrb	r3, [r7, #31]
 80010ac:	3301      	adds	r3, #1
 80010ae:	77fb      	strb	r3, [r7, #31]
 80010b0:	7ffb      	ldrb	r3, [r7, #31]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8ed      	bhi.n	8001094 <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d909      	bls.n	80010d2 <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	6979      	ldr	r1, [r7, #20]
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f000 fa74 	bl	80015b2 <interleave_reg_addr>
                temp_len = len * 2;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
 80010d0:	e001      	b.n	80010d6 <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	691c      	ldr	r4, [r3, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	7818      	ldrb	r0, [r3, #0]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	6a3a      	ldr	r2, [r7, #32]
 80010e4:	6979      	ldr	r1, [r7, #20]
 80010e6:	47a0      	blx	r4
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 80010fa:	23fe      	movs	r3, #254	; 0xfe
 80010fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 8001100:	e007      	b.n	8001112 <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 8001102:	23fa      	movs	r3, #250	; 0xfa
 8001104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 8001108:	e003      	b.n	8001112 <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800110a:	23ff      	movs	r3, #255	; 0xff
 800110c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001110:	e000      	b.n	8001114 <bmp3_set_regs+0x11a>
        if (len != 0)
 8001112:	bf00      	nop
    }

    return rslt;
 8001114:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001118:	46b5      	mov	sp, r6
}
 800111a:	4618      	mov	r0, r3
 800111c:	372c      	adds	r7, #44	; 0x2c
 800111e:	46bd      	mov	sp, r7
 8001120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001124 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d03a      	beq.n	80011b0 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 800113a:	68f9      	ldr	r1, [r7, #12]
 800113c:	2006      	movs	r0, #6
 800113e:	f001 fa50 	bl	80025e2 <are_settings_changed>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 fa96 	bl	800167e <set_pwr_ctrl_settings>
 8001152:	4603      	mov	r3, r0
 8001154:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 8001156:	68f9      	ldr	r1, [r7, #12]
 8001158:	20f0      	movs	r0, #240	; 0xf0
 800115a:	f001 fa42 	bl	80025e2 <are_settings_changed>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	68b9      	ldr	r1, [r7, #8]
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f000 fad7 	bl	800171c <set_odr_filter_settings>
 800116e:	4603      	mov	r3, r0
 8001170:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 8001172:	68f9      	ldr	r1, [r7, #12]
 8001174:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001178:	f001 fa33 	bl	80025e2 <are_settings_changed>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 fb36 	bl	80017f8 <set_int_ctrl_settings>
 800118c:	4603      	mov	r3, r0
 800118e:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 8001190:	68f9      	ldr	r1, [r7, #12]
 8001192:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001196:	f001 fa24 	bl	80025e2 <are_settings_changed>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d009      	beq.n	80011b4 <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	68b9      	ldr	r1, [r7, #8]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f000 fba1 	bl	80018ec <set_advance_settings>
 80011aa:	4603      	mov	r3, r0
 80011ac:	75fb      	strb	r3, [r7, #23]
 80011ae:	e001      	b.n	80011b4 <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80011b0:	23ff      	movs	r3, #255	; 0xff
 80011b2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80011b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01a      	beq.n	8001206 <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 80011d0:	6839      	ldr	r1, [r7, #0]
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f001 fa41 	bl	800265a <get_sensor_status>
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 80011dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d112      	bne.n	800120a <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f001 fa7a 	bl	80026e0 <get_int_status>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 80011f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d108      	bne.n	800120a <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 80011f8:	6839      	ldr	r1, [r7, #0]
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f001 fa9e 	bl	800273c <get_err_status>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e001      	b.n	800120a <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001206:	23ff      	movs	r3, #255	; 0xff
 8001208:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 800121e:	237e      	movs	r3, #126	; 0x7e
 8001220:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8001222:	23b6      	movs	r3, #182	; 0xb6
 8001224:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 8001226:	f107 010c 	add.w	r1, r7, #12
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	2003      	movs	r0, #3
 8001230:	f7ff fe53 	bl	8000eda <bmp3_get_regs>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8001238:	7b3b      	ldrb	r3, [r7, #12]
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	2b00      	cmp	r3, #0
 8001240:	d02d      	beq.n	800129e <bmp3_soft_reset+0x88>
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d129      	bne.n	800129e <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800124a:	f107 010d 	add.w	r1, r7, #13
 800124e:	f107 000e 	add.w	r0, r7, #14
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f7ff fed0 	bl	8000ffa <bmp3_set_regs>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d11b      	bne.n	800129e <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6852      	ldr	r2, [r2, #4]
 800126e:	4611      	mov	r1, r2
 8001270:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001274:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 8001276:	f107 010b 	add.w	r1, r7, #11
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	2002      	movs	r0, #2
 8001280:	f7ff fe2b 	bl	8000eda <bmp3_get_regs>
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <bmp3_soft_reset+0x84>
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 800129a:	23fc      	movs	r3, #252	; 0xfc
 800129c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80012b4:	6838      	ldr	r0, [r7, #0]
 80012b6:	f001 f9ac 	bl	8002612 <null_ptr_check>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d139      	bne.n	800133a <bmp3_set_op_mode+0x90>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d036      	beq.n	800133a <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80012d2:	f107 030d 	add.w	r3, r7, #13
 80012d6:	6839      	ldr	r1, [r7, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f838 	bl	800134e <bmp3_get_op_mode>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 80012e2:	7b7b      	ldrb	r3, [r7, #13]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d010      	beq.n	800130a <bmp3_set_op_mode+0x60>
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10c      	bne.n	800130a <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 80012f0:	6838      	ldr	r0, [r7, #0]
 80012f2:	f000 f8f7 	bl	80014e4 <put_device_to_sleep>
 80012f6:	4603      	mov	r3, r0
 80012f8:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	6852      	ldr	r2, [r2, #4]
 8001302:	4611      	mov	r1, r2
 8001304:	f241 3088 	movw	r0, #5000	; 0x1388
 8001308:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	2b03      	cmp	r3, #3
 8001316:	d106      	bne.n	8001326 <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f879 	bl	8001412 <set_normal_mode>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
    {
 8001324:	e00c      	b.n	8001340 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 8001326:	7bbb      	ldrb	r3, [r7, #14]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d109      	bne.n	8001340 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 800132c:	6839      	ldr	r1, [r7, #0]
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f8a2 	bl	8001478 <write_power_mode>
 8001334:	4603      	mov	r3, r0
 8001336:	73fb      	strb	r3, [r7, #15]
    {
 8001338:	e002      	b.n	8001340 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800133a:	23ff      	movs	r3, #255	; 0xff
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e000      	b.n	8001342 <bmp3_set_op_mode+0x98>
    {
 8001340:	bf00      	nop
    }

    return rslt;
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d011      	beq.n	8001382 <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	2201      	movs	r2, #1
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	201b      	movs	r0, #27
 8001366:	f7ff fdb8 	bl	8000eda <bmp3_get_regs>
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	111b      	asrs	r3, r3, #4
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	b2da      	uxtb	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	e001      	b.n	8001386 <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001382:	23ff      	movs	r3, #255	; 0xff
 8001384:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b08a      	sub	sp, #40	; 0x28
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
 80013a4:	2300      	movs	r3, #0
 80013a6:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d021      	beq.n	8001400 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80013bc:	f107 0120 	add.w	r1, r7, #32
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2206      	movs	r2, #6
 80013c4:	2004      	movs	r0, #4
 80013c6:	f7ff fd88 	bl	8000eda <bmp3_get_regs>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 80013d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d116      	bne.n	8001406 <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 80013d8:	f107 0210 	add.w	r2, r7, #16
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fc70 	bl	8001cc8 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3318      	adds	r3, #24
 80013ec:	f107 0110 	add.w	r1, r7, #16
 80013f0:	7bf8      	ldrb	r0, [r7, #15]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f000 fca3 	bl	8001d3e <compensate_data>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013fe:	e002      	b.n	8001406 <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001400:	23ff      	movs	r3, #255	; 0xff
 8001402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8001406:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800140a:	4618      	mov	r0, r3
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 800141c:	6839      	ldr	r1, [r7, #0]
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f888 	bl	8001534 <validate_normal_mode_settings>
 8001424:	4603      	mov	r3, r0
 8001426:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8001428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d11d      	bne.n	800146c <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001430:	6839      	ldr	r1, [r7, #0]
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f820 	bl	8001478 <write_power_mode>
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 800143c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d113      	bne.n	800146c <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8001444:	f107 010e 	add.w	r1, r7, #14
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2201      	movs	r2, #1
 800144c:	2002      	movs	r0, #2
 800144e:	f7ff fd44 	bl	8000eda <bmp3_get_regs>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8001468:	23fb      	movs	r3, #251	; 0xfb
 800146a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800146c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001482:	231b      	movs	r3, #27
 8001484:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 800148c:	7b78      	ldrb	r0, [r7, #13]
 800148e:	f107 010c 	add.w	r1, r7, #12
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2201      	movs	r2, #1
 8001496:	f7ff fd20 	bl	8000eda <bmp3_get_regs>
 800149a:	4603      	mov	r3, r0
 800149c:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d118      	bne.n	80014d8 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80014a6:	7b3b      	ldrb	r3, [r7, #12]
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	7bbb      	ldrb	r3, [r7, #14]
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80014c4:	f107 010c 	add.w	r1, r7, #12
 80014c8:	f107 000d 	add.w	r0, r7, #13
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f7ff fd93 	bl	8000ffa <bmp3_set_regs>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80014ec:	231b      	movs	r3, #27
 80014ee:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 80014f0:	f107 010d 	add.w	r1, r7, #13
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	201b      	movs	r0, #27
 80014fa:	f7ff fcee 	bl	8000eda <bmp3_get_regs>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10e      	bne.n	8001528 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 800150a:	7b7b      	ldrb	r3, [r7, #13]
 800150c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001510:	b2db      	uxtb	r3, r3
 8001512:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8001514:	f107 010d 	add.w	r1, r7, #13
 8001518:	f107 000e 	add.w	r0, r7, #14
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f7ff fd6b 	bl	8000ffa <bmp3_set_regs>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 800153e:	6839      	ldr	r1, [r7, #0]
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 fa26 	bl	8001992 <get_odr_filter_settings>
 8001546:	4603      	mov	r3, r0
 8001548:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d104      	bne.n	800155c <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fa3a 	bl	80019cc <validate_osr_and_odr_settings>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001570:	2331      	movs	r3, #49	; 0x31
 8001572:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 8001588:	f107 0108 	add.w	r1, r7, #8
 800158c:	7ff8      	ldrb	r0, [r7, #31]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2215      	movs	r2, #21
 8001592:	f7ff fca2 	bl	8000eda <bmp3_get_regs>
 8001596:	4603      	mov	r3, r0
 8001598:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fc3f 	bl	8001e24 <parse_calib_data>

    return rslt;
 80015a6:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b087      	sub	sp, #28
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80015c0:	2301      	movs	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e015      	b.n	80015f2 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	441a      	add	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	3b01      	subs	r3, #1
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	440b      	add	r3, r1
 80015d6:	7812      	ldrb	r2, [r2, #0]
 80015d8:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	441a      	add	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	440b      	add	r3, r1
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3301      	adds	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3e5      	bcc.n	80015c6 <interleave_reg_addr+0x14>
    }
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	b2da      	uxtb	r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	10db      	asrs	r3, r3, #3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	b2da      	uxtb	r2, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	3301      	adds	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	b2da      	uxtb	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	3302      	adds	r3, #2
 800165a:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	105b      	asrs	r3, r3, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	b2da      	uxtb	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	709a      	strb	r2, [r3, #2]
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800168a:	231b      	movs	r3, #27
 800168c:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800168e:	7db8      	ldrb	r0, [r7, #22]
 8001690:	f107 0115 	add.w	r1, r7, #21
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f7ff fc1f 	bl	8000eda <bmp3_get_regs>
 800169c:	4603      	mov	r3, r0
 800169e:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80016a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d132      	bne.n	800170e <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00e      	beq.n	80016d0 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80016b2:	7d7b      	ldrb	r3, [r7, #21]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	b25a      	sxtb	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	785b      	ldrb	r3, [r3, #1]
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00f      	beq.n	80016fa <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 80016da:	7d7b      	ldrb	r3, [r7, #21]
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	f023 0302 	bic.w	r3, r3, #2
 80016e2:	b25a      	sxtb	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	789b      	ldrb	r3, [r3, #2]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80016fa:	f107 0115 	add.w	r1, r7, #21
 80016fe:	f107 0016 	add.w	r0, r7, #22
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f7ff fc78 	bl	8000ffa <bmp3_set_regs>
 800170a:	4603      	mov	r3, r0
 800170c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800170e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af02      	add	r7, sp, #8
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <set_odr_filter_settings+0xd8>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	83bb      	strh	r3, [r7, #28]
 800172e:	2300      	movs	r3, #0
 8001730:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001736:	f107 0118 	add.w	r1, r7, #24
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2204      	movs	r2, #4
 800173e:	201c      	movs	r0, #28
 8001740:	f7ff fbcb 	bl	8000eda <bmp3_get_regs>
 8001744:	4603      	mov	r3, r0
 8001746:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001748:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d14a      	bne.n	80017e6 <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001750:	68f9      	ldr	r1, [r7, #12]
 8001752:	2030      	movs	r0, #48	; 0x30
 8001754:	f000 ff45 	bl	80025e2 <are_settings_changed>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 800175e:	f107 0017 	add.w	r0, r7, #23
 8001762:	f107 0218 	add.w	r2, r7, #24
 8001766:	f107 011c 	add.w	r1, r7, #28
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	4603      	mov	r3, r0
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f9e1 	bl	8001b38 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8001776:	68f9      	ldr	r1, [r7, #12]
 8001778:	2080      	movs	r0, #128	; 0x80
 800177a:	f000 ff32 	bl	80025e2 <are_settings_changed>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 8001784:	f107 0217 	add.w	r2, r7, #23
 8001788:	f107 0118 	add.w	r1, r7, #24
 800178c:	f107 001c 	add.w	r0, r7, #28
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f000 fa29 	bl	8001be8 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8001796:	68f9      	ldr	r1, [r7, #12]
 8001798:	2040      	movs	r0, #64	; 0x40
 800179a:	f000 ff22 	bl	80025e2 <are_settings_changed>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80017a4:	f107 0217 	add.w	r2, r7, #23
 80017a8:	f107 0118 	add.w	r1, r7, #24
 80017ac:	f107 001c 	add.w	r0, r7, #28
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f000 fa53 	bl	8001c5c <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d104      	bne.n	80017c8 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 80017be:	68b8      	ldr	r0, [r7, #8]
 80017c0:	f000 f904 	bl	80019cc <validate_osr_and_odr_settings>
 80017c4:	4603      	mov	r3, r0
 80017c6:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 80017c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10a      	bne.n	80017e6 <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	461a      	mov	r2, r3
 80017d4:	f107 0118 	add.w	r1, r7, #24
 80017d8:	f107 001c 	add.w	r0, r7, #28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f7ff fc0c 	bl	8000ffa <bmp3_set_regs>
 80017e2:	4603      	mov	r3, r0
 80017e4:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 80017e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3720      	adds	r7, #32
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	0800cea8 	.word	0x0800cea8

080017f8 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 8001804:	2319      	movs	r3, #25
 8001806:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001808:	7d78      	ldrb	r0, [r7, #21]
 800180a:	f107 0116 	add.w	r1, r7, #22
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f7ff fb62 	bl	8000eda <bmp3_get_regs>
 8001816:	4603      	mov	r3, r0
 8001818:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 800181a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d15e      	bne.n	80018e0 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	3207      	adds	r2, #7
 800182a:	6810      	ldr	r0, [r2, #0]
 800182c:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00d      	beq.n	8001854 <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001838:	7dbb      	ldrb	r3, [r7, #22]
 800183a:	b25b      	sxtb	r3, r3
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	b25a      	sxtb	r2, r3
 8001842:	7c3b      	ldrb	r3, [r7, #16]
 8001844:	b25b      	sxtb	r3, r3
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	b25b      	sxtb	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	b25b      	sxtb	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00e      	beq.n	800187c <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 800185e:	7dbb      	ldrb	r3, [r7, #22]
 8001860:	b25b      	sxtb	r3, r3
 8001862:	f023 0302 	bic.w	r3, r3, #2
 8001866:	b25a      	sxtb	r2, r3
 8001868:	7c7b      	ldrb	r3, [r7, #17]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	b25b      	sxtb	r3, r3
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	b25b      	sxtb	r3, r3
 8001874:	4313      	orrs	r3, r2
 8001876:	b25b      	sxtb	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00e      	beq.n	80018a4 <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8001886:	7dbb      	ldrb	r3, [r7, #22]
 8001888:	b25b      	sxtb	r3, r3
 800188a:	f023 0304 	bic.w	r3, r3, #4
 800188e:	b25a      	sxtb	r2, r3
 8001890:	7cbb      	ldrb	r3, [r7, #18]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	b25b      	sxtb	r3, r3
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	b25b      	sxtb	r3, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	b25b      	sxtb	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00e      	beq.n	80018cc <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80018ae:	7dbb      	ldrb	r3, [r7, #22]
 80018b0:	b25b      	sxtb	r3, r3
 80018b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018b6:	b25a      	sxtb	r2, r3
 80018b8:	7cfb      	ldrb	r3, [r7, #19]
 80018ba:	019b      	lsls	r3, r3, #6
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c2:	b25b      	sxtb	r3, r3
 80018c4:	4313      	orrs	r3, r2
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80018cc:	f107 0116 	add.w	r1, r7, #22
 80018d0:	f107 0015 	add.w	r0, r7, #21
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f7ff fb8f 	bl	8000ffa <bmp3_set_regs>
 80018dc:	4603      	mov	r3, r0
 80018de:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80018e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	f107 0310 	add.w	r3, r7, #16
 80018fe:	320b      	adds	r2, #11
 8001900:	8812      	ldrh	r2, [r2, #0]
 8001902:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001904:	231a      	movs	r3, #26
 8001906:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001908:	7db8      	ldrb	r0, [r7, #22]
 800190a:	f107 0115 	add.w	r1, r7, #21
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f7ff fae2 	bl	8000eda <bmp3_get_regs>
 8001916:	4603      	mov	r3, r0
 8001918:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 800191a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d131      	bne.n	8001986 <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00e      	beq.n	800194a <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 800192c:	7d7b      	ldrb	r3, [r7, #21]
 800192e:	b25b      	sxtb	r3, r3
 8001930:	f023 0302 	bic.w	r3, r3, #2
 8001934:	b25a      	sxtb	r2, r3
 8001936:	7c3b      	ldrb	r3, [r7, #16]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	b25b      	sxtb	r3, r3
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	b25b      	sxtb	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b25b      	sxtb	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00e      	beq.n	8001972 <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001954:	7d7b      	ldrb	r3, [r7, #21]
 8001956:	b25b      	sxtb	r3, r3
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	b25a      	sxtb	r2, r3
 800195e:	7c7b      	ldrb	r3, [r7, #17]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	b25b      	sxtb	r3, r3
 800196a:	4313      	orrs	r3, r2
 800196c:	b25b      	sxtb	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001972:	f107 0115 	add.w	r1, r7, #21
 8001976:	f107 0016 	add.w	r0, r7, #22
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f7ff fb3c 	bl	8000ffa <bmp3_set_regs>
 8001982:	4603      	mov	r3, r0
 8001984:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800199c:	f107 0108 	add.w	r1, r7, #8
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	2204      	movs	r2, #4
 80019a4:	201c      	movs	r0, #28
 80019a6:	f7ff fa98 	bl	8000eda <bmp3_get_regs>
 80019aa:	4603      	mov	r3, r0
 80019ac:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	1cda      	adds	r2, r3, #3
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fe25 	bl	8001608 <parse_odr_filter_settings>

    return rslt;
 80019be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b098      	sub	sp, #96	; 0x60
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 80019d4:	23ea      	movs	r3, #234	; 0xea
 80019d6:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 80019dc:	4a1a      	ldr	r2, [pc, #104]	; (8001a48 <validate_osr_and_odr_settings+0x7c>)
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	4611      	mov	r1, r2
 80019e4:	2248      	movs	r2, #72	; 0x48
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00b f9f6 	bl	800cdd8 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f83f 	bl	8001a78 <calculate_press_meas_time>
 80019fa:	4602      	mov	r2, r0
 80019fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019fe:	4413      	add	r3, r2
 8001a00:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	789b      	ldrb	r3, [r3, #2]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d006      	beq.n	8001a18 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f864 	bl	8001ad8 <calculate_temp_meas_time>
 8001a10:	4602      	mov	r2, r0
 8001a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a14:	4413      	add	r3, r2
 8001a16:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001a18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a1c:	4413      	add	r3, r2
 8001a1e:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	799b      	ldrb	r3, [r3, #6]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	3360      	adds	r3, #96	; 0x60
 8001a28:	443b      	add	r3, r7
 8001a2a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001a32:	f000 f80b 	bl	8001a4c <verify_meas_time_and_odr_duration>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001a3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3760      	adds	r7, #96	; 0x60
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	0800ceac 	.word	0x0800ceac

08001a4c <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d202      	bcs.n	8001a64 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e001      	b.n	8001a68 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001a64:	23fd      	movs	r3, #253	; 0xfd
 8001a66:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	3203      	adds	r2, #3
 8001a88:	6810      	ldr	r0, [r2, #0]
 8001a8a:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001a98:	7b3b      	ldrb	r3, [r7, #12]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	ed97 0b06 	vldr	d0, [r7, #24]
 8001aa0:	f000 fd7a 	bl	8002598 <pow_bmp3>
 8001aa4:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001aa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001ad0 <calculate_press_meas_time+0x58>
 8001ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001ad4 <calculate_press_meas_time+0x5c>
 8001ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac0:	ee17 3a90 	vmov	r3, s15
 8001ac4:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8001ac6:	693b      	ldr	r3, [r7, #16]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	44fa0000 	.word	0x44fa0000
 8001ad4:	43c40000 	.word	0x43c40000

08001ad8 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	3203      	adds	r2, #3
 8001ae8:	6810      	ldr	r0, [r2, #0]
 8001aea:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001af8:	7b7b      	ldrb	r3, [r7, #13]
 8001afa:	4618      	mov	r0, r3
 8001afc:	ed97 0b06 	vldr	d0, [r7, #24]
 8001b00:	f000 fd4a 	bl	8002598 <pow_bmp3>
 8001b04:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001b30 <calculate_temp_meas_time+0x58>
 8001b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b14:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001b34 <calculate_temp_meas_time+0x5c>
 8001b18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b20:	ee17 3a90 	vmov	r3, s15
 8001b24:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8001b26:	693b      	ldr	r3, [r7, #16]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	44fa0000 	.word	0x44fa0000
 8001b34:	439c8000 	.word	0x439c8000

08001b38 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001b46:	6a3a      	ldr	r2, [r7, #32]
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	3203      	adds	r2, #3
 8001b4e:	6810      	ldr	r0, [r2, #0]
 8001b50:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d03f      	beq.n	8001bdc <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d013      	beq.n	8001b8e <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b25b      	sxtb	r3, r3
 8001b6c:	f023 0307 	bic.w	r3, r3, #7
 8001b70:	b25a      	sxtb	r2, r3
 8001b72:	7d3b      	ldrb	r3, [r7, #20]
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	b25b      	sxtb	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b25a      	sxtb	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	440b      	add	r3, r1
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d014      	beq.n	8001bc2 <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001ba2:	b25a      	sxtb	r2, r3
 8001ba4:	7d7b      	ldrb	r3, [r7, #21]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	b25a      	sxtb	r2, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	440b      	add	r3, r1
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4413      	add	r3, r2
 8001bcc:	221c      	movs	r2, #28
 8001bce:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	701a      	strb	r2, [r3, #0]
    }
}
 8001bdc:	bf00      	nop
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	78db      	ldrb	r3, [r3, #3]
 8001c00:	2b11      	cmp	r3, #17
 8001c02:	d902      	bls.n	8001c0a <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2211      	movs	r2, #17
 8001c08:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	f023 031f 	bic.w	r3, r3, #31
 8001c16:	b25a      	sxtb	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	78db      	ldrb	r3, [r3, #3]
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	b25b      	sxtb	r3, r3
 8001c24:	4313      	orrs	r3, r2
 8001c26:	b25a      	sxtb	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	440b      	add	r3, r1
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	221d      	movs	r2, #29
 8001c42:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	701a      	strb	r2, [r3, #0]
}
 8001c50:	bf00      	nop
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	3203      	adds	r2, #3
 8001c72:	6810      	ldr	r0, [r2, #0]
 8001c74:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3303      	adds	r3, #3
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b25b      	sxtb	r3, r3
 8001c7e:	f023 030e 	bic.w	r3, r3, #14
 8001c82:	b25a      	sxtb	r2, r3
 8001c84:	7dbb      	ldrb	r3, [r7, #22]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	f003 030e 	and.w	r3, r3, #14
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b25a      	sxtb	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	440b      	add	r3, r1
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	221f      	movs	r2, #31
 8001cae:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	701a      	strb	r2, [r3, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8001cc8:	b4b0      	push	{r4, r5, r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	7809      	ldrb	r1, [r1, #0]
 8001cd6:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	3101      	adds	r1, #1
 8001cdc:	7809      	ldrb	r1, [r1, #0]
 8001cde:	0209      	lsls	r1, r1, #8
 8001ce0:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	3102      	adds	r1, #2
 8001ce6:	7809      	ldrb	r1, [r1, #0]
 8001ce8:	0409      	lsls	r1, r1, #16
 8001cea:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	6939      	ldr	r1, [r7, #16]
 8001cf0:	4308      	orrs	r0, r1
 8001cf2:	6979      	ldr	r1, [r7, #20]
 8001cf4:	4301      	orrs	r1, r0
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	460c      	mov	r4, r1
 8001cfa:	4605      	mov	r5, r0
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	3103      	adds	r1, #3
 8001d06:	7809      	ldrb	r1, [r1, #0]
 8001d08:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	3104      	adds	r1, #4
 8001d0e:	7809      	ldrb	r1, [r1, #0]
 8001d10:	0209      	lsls	r1, r1, #8
 8001d12:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	3105      	adds	r1, #5
 8001d18:	7809      	ldrb	r1, [r1, #0]
 8001d1a:	0409      	lsls	r1, r1, #16
 8001d1c:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	6939      	ldr	r1, [r7, #16]
 8001d22:	4308      	orrs	r0, r1
 8001d24:	6979      	ldr	r1, [r7, #20]
 8001d26:	4301      	orrs	r1, r0
 8001d28:	2000      	movs	r0, #0
 8001d2a:	460a      	mov	r2, r1
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	6839      	ldr	r1, [r7, #0]
 8001d30:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001d34:	bf00      	nop
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bcb0      	pop	{r4, r5, r7}
 8001d3c:	4770      	bx	lr

08001d3e <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d05a      	beq.n	8001e0e <compensate_data+0xd0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d057      	beq.n	8001e0e <compensate_data+0xd0>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d054      	beq.n	8001e0e <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d115      	bne.n	8001d96 <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fa1f 	bl	80021b4 <compensate_temperature>
 8001d76:	4603      	mov	r3, r0
 8001d78:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8001d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d148      	bne.n	8001e14 <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3308      	adds	r3, #8
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fa8c 	bl	80022a8 <compensate_pressure>
 8001d90:	4603      	mov	r3, r0
 8001d92:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001d94:	e03e      	b.n	8001e14 <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d116      	bne.n	8001dca <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 fa06 	bl	80021b4 <compensate_temperature>
            comp_data->temperature = 0;
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3308      	adds	r3, #8
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fa72 	bl	80022a8 <compensate_pressure>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001dc8:	e024      	b.n	8001e14 <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d10f      	bne.n	8001df0 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f9ec 	bl	80021b4 <compensate_temperature>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001dee:	e011      	b.n	8001e14 <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e0c:	e002      	b.n	8001e14 <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001e0e:	23ff      	movs	r3, #255	; 0xff
 8001e10:	75fb      	strb	r3, [r7, #23]
 8001e12:	e000      	b.n	8001e16 <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e14:	bf00      	nop
    }

    return rslt;
 8001e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	3390      	adds	r3, #144	; 0x90
 8001e32:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	3318      	adds	r3, #24
 8001e38:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	4ba4      	ldr	r3, [pc, #656]	; (80020d0 <parse_calib_data+0x2ac>)
 8001e40:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3301      	adds	r3, #1
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	b21a      	sxth	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b21b      	sxth	r3, r3
 8001e54:	4313      	orrs	r3, r2
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fafa 	bl	800045c <__aeabi_ui2d>
 8001e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e6c:	f7fe fc9a 	bl	80007a4 <__aeabi_ddiv>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	6939      	ldr	r1, [r7, #16]
 8001e76:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3302      	adds	r3, #2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b21b      	sxth	r3, r3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	4b8e      	ldr	r3, [pc, #568]	; (80020d4 <parse_calib_data+0x2b0>)
 8001e9c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	885b      	ldrh	r3, [r3, #2]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fad9 	bl	800045c <__aeabi_ui2d>
 8001eaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eae:	f7fe fc79 	bl	80007a4 <__aeabi_ddiv>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	6939      	ldr	r1, [r7, #16]
 8001eb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b25a      	sxtb	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	4b82      	ldr	r3, [pc, #520]	; (80020d8 <parse_calib_data+0x2b4>)
 8001ece:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe facf 	bl	800047c <__aeabi_i2d>
 8001ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ee2:	f7fe fc5f 	bl	80007a4 <__aeabi_ddiv>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	6939      	ldr	r1, [r7, #16]
 8001eec:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3306      	adds	r3, #6
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3305      	adds	r3, #5
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	4b73      	ldr	r3, [pc, #460]	; (80020dc <parse_calib_data+0x2b8>)
 8001f10:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe faac 	bl	800047c <__aeabi_i2d>
 8001f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f28:	f7fe fc3c 	bl	80007a4 <__aeabi_ddiv>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	6939      	ldr	r1, [r7, #16]
 8001f32:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3308      	adds	r3, #8
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3307      	adds	r3, #7
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4b62      	ldr	r3, [pc, #392]	; (80020e0 <parse_calib_data+0x2bc>)
 8001f56:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f60:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fa89 	bl	800047c <__aeabi_i2d>
 8001f6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f6e:	f7fe fc19 	bl	80007a4 <__aeabi_ddiv>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	6939      	ldr	r1, [r7, #16]
 8001f78:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3309      	adds	r3, #9
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b25a      	sxtb	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b55      	ldr	r3, [pc, #340]	; (80020e4 <parse_calib_data+0x2c0>)
 8001f8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fa6f 	bl	800047c <__aeabi_i2d>
 8001f9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fa2:	f7fe fbff 	bl	80007a4 <__aeabi_ddiv>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	6939      	ldr	r1, [r7, #16]
 8001fac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	330a      	adds	r3, #10
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b25a      	sxtb	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <parse_calib_data+0x2c4>)
 8001fc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fa55 	bl	800047c <__aeabi_i2d>
 8001fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd6:	f7fe fbe5 	bl	80007a4 <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	b21a      	sxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	330b      	adds	r3, #11
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002008:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	899b      	ldrh	r3, [r3, #12]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa23 	bl	800045c <__aeabi_ui2d>
 8002016:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800201a:	f7fe fbc3 	bl	80007a4 <__aeabi_ddiv>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	6939      	ldr	r1, [r7, #16]
 8002024:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	330e      	adds	r3, #14
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	b21a      	sxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	330d      	adds	r3, #13
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b21b      	sxth	r3, r3
 800203a:	4313      	orrs	r3, r2
 800203c:	b21b      	sxth	r3, r3
 800203e:	b29a      	uxth	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b28      	ldr	r3, [pc, #160]	; (80020ec <parse_calib_data+0x2c8>)
 800204a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	89db      	ldrh	r3, [r3, #14]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa02 	bl	800045c <__aeabi_ui2d>
 8002058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800205c:	f7fe fba2 	bl	80007a4 <__aeabi_ddiv>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	6939      	ldr	r1, [r7, #16]
 8002066:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	330f      	adds	r3, #15
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b25a      	sxtb	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <parse_calib_data+0x2cc>)
 800207c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe f9f8 	bl	800047c <__aeabi_i2d>
 800208c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002090:	f7fe fb88 	bl	80007a4 <__aeabi_ddiv>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	6939      	ldr	r1, [r7, #16]
 800209a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3310      	adds	r3, #16
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b25a      	sxtb	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <parse_calib_data+0x2d0>)
 80020b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe f9de 	bl	800047c <__aeabi_i2d>
 80020c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020c4:	f7fe fb6e 	bl	80007a4 <__aeabi_ddiv>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	6939      	ldr	r1, [r7, #16]
 80020ce:	e013      	b.n	80020f8 <parse_calib_data+0x2d4>
 80020d0:	3f700000 	.word	0x3f700000
 80020d4:	41d00000 	.word	0x41d00000
 80020d8:	42f00000 	.word	0x42f00000
 80020dc:	41300000 	.word	0x41300000
 80020e0:	41c00000 	.word	0x41c00000
 80020e4:	41f00000 	.word	0x41f00000
 80020e8:	42400000 	.word	0x42400000
 80020ec:	40500000 	.word	0x40500000
 80020f0:	40700000 	.word	0x40700000
 80020f4:	40e00000 	.word	0x40e00000
 80020f8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3312      	adds	r3, #18
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	b21a      	sxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3311      	adds	r3, #17
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b21b      	sxth	r3, r3
 800210e:	4313      	orrs	r3, r2
 8002110:	b21a      	sxth	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <parse_calib_data+0x38c>)
 800211c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe f9a8 	bl	800047c <__aeabi_i2d>
 800212c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002130:	f7fe fb38 	bl	80007a4 <__aeabi_ddiv>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	6939      	ldr	r1, [r7, #16]
 800213a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3313      	adds	r3, #19
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b25a      	sxtb	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <parse_calib_data+0x38c>)
 8002150:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f98e 	bl	800047c <__aeabi_i2d>
 8002160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002164:	f7fe fb1e 	bl	80007a4 <__aeabi_ddiv>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	6939      	ldr	r1, [r7, #16]
 800216e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3314      	adds	r3, #20
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b25a      	sxtb	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8002186:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe f973 	bl	800047c <__aeabi_i2d>
 8002196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800219a:	f7fe fb03 	bl	80007a4 <__aeabi_ddiv>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	6939      	ldr	r1, [r7, #16]
 80021a4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80021a8:	bf00      	nop
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	42f00000 	.word	0x42f00000

080021b4 <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	; 0x30
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80021d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021d4:	f7fe f98e 	bl	80004f4 <__aeabi_l2d>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	f7fd ffff 	bl	80001e0 <__aeabi_dsub>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021f4:	f7fe f9ac 	bl	8000550 <__aeabi_dmul>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002204:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002208:	f7fe f9a2 	bl	8000550 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800221a:	f7fe f999 	bl	8000550 <__aeabi_dmul>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800222a:	f7fd ffdb 	bl	80001e4 <__adddf3>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <compensate_temperature+0xec>)
 8002244:	f7fe fbf6 	bl	8000a34 <__aeabi_dcmplt>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <compensate_temperature+0xec>)
 8002256:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 800225a:	2303      	movs	r3, #3
 800225c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <compensate_temperature+0xf0>)
 800226c:	f7fe fc00 	bl	8000a70 <__aeabi_dcmpgt>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <compensate_temperature+0xf0>)
 800227e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 8002282:	2304      	movs	r3, #4
 8002284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800228e:	68f9      	ldr	r1, [r7, #12]
 8002290:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8002294:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002298:	4618      	mov	r0, r3
 800229a:	3730      	adds	r7, #48	; 0x30
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	c0440000 	.word	0xc0440000
 80022a4:	40554000 	.word	0x40554000

080022a8 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b096      	sub	sp, #88	; 0x58
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80022be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80022c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80022ca:	f7fe f941 	bl	8000550 <__aeabi_dmul>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80022d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d8:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80022dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022de:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80022e2:	2002      	movs	r0, #2
 80022e4:	eeb0 0a47 	vmov.f32	s0, s14
 80022e8:	eef0 0a67 	vmov.f32	s1, s15
 80022ec:	f000 f954 	bl	8002598 <pow_bmp3>
 80022f0:	ee10 3a10 	vmov	r3, s0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f8d3 	bl	80004a0 <__aeabi_f2d>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4620      	mov	r0, r4
 8002300:	4629      	mov	r1, r5
 8002302:	f7fe f925 	bl	8000550 <__aeabi_dmul>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800230e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002310:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002316:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800231a:	2003      	movs	r0, #3
 800231c:	eeb0 0a47 	vmov.f32	s0, s14
 8002320:	eef0 0a67 	vmov.f32	s1, s15
 8002324:	f000 f938 	bl	8002598 <pow_bmp3>
 8002328:	ee10 3a10 	vmov	r3, s0
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe f8b7 	bl	80004a0 <__aeabi_f2d>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4620      	mov	r0, r4
 8002338:	4629      	mov	r1, r5
 800233a:	f7fe f909 	bl	8000550 <__aeabi_dmul>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 8002346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002348:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800234c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002350:	f7fd ff48 	bl	80001e4 <__adddf3>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002360:	f7fd ff40 	bl	80001e4 <__adddf3>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800236c:	f7fd ff3a 	bl	80001e4 <__adddf3>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8002378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800237a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800237e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002380:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002384:	f7fe f8e4 	bl	8000550 <__aeabi_dmul>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8002390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002392:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002398:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800239c:	2002      	movs	r0, #2
 800239e:	eeb0 0a47 	vmov.f32	s0, s14
 80023a2:	eef0 0a67 	vmov.f32	s1, s15
 80023a6:	f000 f8f7 	bl	8002598 <pow_bmp3>
 80023aa:	ee10 3a10 	vmov	r3, s0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f876 	bl	80004a0 <__aeabi_f2d>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fe f8c8 	bl	8000550 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80023c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ca:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80023ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023d0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80023d4:	2003      	movs	r0, #3
 80023d6:	eeb0 0a47 	vmov.f32	s0, s14
 80023da:	eef0 0a67 	vmov.f32	s1, s15
 80023de:	f000 f8db 	bl	8002598 <pow_bmp3>
 80023e2:	ee10 3a10 	vmov	r3, s0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f85a 	bl	80004a0 <__aeabi_f2d>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4620      	mov	r0, r4
 80023f2:	4629      	mov	r1, r5
 80023f4:	f7fe f8ac 	bl	8000550 <__aeabi_dmul>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f7fe f86b 	bl	80004e4 <__aeabi_ul2d>
 800240e:	4604      	mov	r4, r0
 8002410:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 8002412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002414:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800241c:	f7fd fee2 	bl	80001e4 <__adddf3>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800242c:	f7fd feda 	bl	80001e4 <__adddf3>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800243c:	f7fd fed2 	bl	80001e4 <__adddf3>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 8002444:	4620      	mov	r0, r4
 8002446:	4629      	mov	r1, r5
 8002448:	f7fe f882 	bl	8000550 <__aeabi_dmul>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f7fe f841 	bl	80004e4 <__aeabi_ul2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	2002      	movs	r0, #2
 8002468:	ec43 2b10 	vmov	d0, r2, r3
 800246c:	f000 f894 	bl	8002598 <pow_bmp3>
 8002470:	ee10 3a10 	vmov	r3, s0
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe f813 	bl	80004a0 <__aeabi_f2d>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 8002482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002484:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8002488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800248a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800248e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002490:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002494:	f7fe f85c 	bl	8000550 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4620      	mov	r0, r4
 800249e:	4629      	mov	r1, r5
 80024a0:	f7fd fea0 	bl	80001e4 <__adddf3>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 80024ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80024b4:	f7fe f84c 	bl	8000550 <__aeabi_dmul>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7fe f80b 	bl	80004e4 <__aeabi_ul2d>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	2003      	movs	r0, #3
 80024d4:	ec43 2b10 	vmov	d0, r2, r3
 80024d8:	f000 f85e 	bl	8002598 <pow_bmp3>
 80024dc:	ee10 3a10 	vmov	r3, s0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd ffdd 	bl	80004a0 <__aeabi_f2d>
 80024e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80024ec:	f7fe f830 	bl	8000550 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024f8:	f7fd fe74 	bl	80001e4 <__adddf3>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 8002504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002508:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800250c:	f7fd fe6a 	bl	80001e4 <__adddf3>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002518:	f7fd fe64 	bl	80001e4 <__adddf3>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 8002524:	a318      	add	r3, pc, #96	; (adr r3, 8002588 <compensate_pressure+0x2e0>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800252e:	f7fe fa81 	bl	8000a34 <__aeabi_dcmplt>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8002538:	a313      	add	r3, pc, #76	; (adr r3, 8002588 <compensate_pressure+0x2e0>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 8002542:	2305      	movs	r3, #5
 8002544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8002548:	a311      	add	r3, pc, #68	; (adr r3, 8002590 <compensate_pressure+0x2e8>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002552:	f7fe fa8d 	bl	8000a70 <__aeabi_dcmpgt>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 800255c:	a30c      	add	r3, pc, #48	; (adr r3, 8002590 <compensate_pressure+0x2e8>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 8002566:	2306      	movs	r3, #6
 8002568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 800256c:	68f9      	ldr	r1, [r7, #12]
 800256e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002572:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8002576:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800257a:	4618      	mov	r0, r3
 800257c:	3758      	adds	r7, #88	; 0x58
 800257e:	46bd      	mov	sp, r7
 8002580:	bdb0      	pop	{r4, r5, r7, pc}
 8002582:	bf00      	nop
 8002584:	f3af 8000 	nop.w
 8002588:	00000000 	.word	0x00000000
 800258c:	40dd4c00 	.word	0x40dd4c00
 8002590:	00000000 	.word	0x00000000
 8002594:	40fe8480 	.word	0x40fe8480

08002598 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	ed87 0b02 	vstr	d0, [r7, #8]
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80025a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80025aa:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80025ac:	e00e      	b.n	80025cc <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 80025ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025b2:	f7fe fa7d 	bl	8000ab0 <__aeabi_d2f>
 80025b6:	ee07 0a10 	vmov	s14, r0
 80025ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80025be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c2:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1ed      	bne.n	80025ae <pow_bmp3+0x16>
    }

    return pow_output;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	ee07 3a90 	vmov	s15, r3
}
 80025d8:	eeb0 0a67 	vmov.f32	s0, s15
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e001      	b.n	8002604 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00f      	beq.n	8002640 <null_ptr_check+0x2e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00b      	beq.n	8002640 <null_ptr_check+0x2e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <null_ptr_check+0x2e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002640:	23ff      	movs	r3, #255	; 0xff
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e001      	b.n	800264a <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800264a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 8002664:	2303      	movs	r3, #3
 8002666:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002668:	f107 010d 	add.w	r1, r7, #13
 800266c:	7bb8      	ldrb	r0, [r7, #14]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2201      	movs	r2, #1
 8002672:	f7fe fc32 	bl	8000eda <bmp3_get_regs>
 8002676:	4603      	mov	r3, r0
 8002678:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800267a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d128      	bne.n	80026d4 <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 8002682:	7b7b      	ldrb	r3, [r7, #13]
 8002684:	111b      	asrs	r3, r3, #4
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	b2da      	uxtb	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 8002692:	7b7b      	ldrb	r3, [r7, #13]
 8002694:	115b      	asrs	r3, r3, #5
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 80026a2:	7b7b      	ldrb	r3, [r7, #13]
 80026a4:	119b      	asrs	r3, r3, #6
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 80026b2:	2310      	movs	r3, #16
 80026b4:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80026b6:	f107 010d 	add.w	r1, r7, #13
 80026ba:	7bb8      	ldrb	r0, [r7, #14]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2201      	movs	r2, #1
 80026c0:	f7fe fc0b 	bl	8000eda <bmp3_get_regs>
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 80026c8:	7b7b      	ldrb	r3, [r7, #13]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80026d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 80026ea:	f107 010e 	add.w	r1, r7, #14
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2201      	movs	r2, #1
 80026f2:	2011      	movs	r0, #17
 80026f4:	f7fe fbf1 	bl	8000eda <bmp3_get_regs>
 80026f8:	4603      	mov	r3, r0
 80026fa:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80026fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d115      	bne.n	8002730 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 8002704:	7bbb      	ldrb	r3, [r7, #14]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	b2da      	uxtb	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002710:	7bbb      	ldrb	r3, [r7, #14]
 8002712:	105b      	asrs	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	b2da      	uxtb	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002720:	7bbb      	ldrb	r3, [r7, #14]
 8002722:	10db      	asrs	r3, r3, #3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	b2da      	uxtb	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 8002746:	f107 010e 	add.w	r1, r7, #14
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2201      	movs	r2, #1
 800274e:	2002      	movs	r0, #2
 8002750:	f7fe fbc3 	bl	8000eda <bmp3_get_regs>
 8002754:	4603      	mov	r3, r0
 8002756:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d115      	bne.n	800278c <get_err_status+0x50>
    {
        status->err.fatal = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002760:	7bbb      	ldrb	r3, [r7, #14]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	b2da      	uxtb	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	719a      	strb	r2, [r3, #6]
        status->err.cmd = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 800276c:	7bbb      	ldrb	r3, [r7, #14]
 800276e:	105b      	asrs	r3, r3, #1
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	b2da      	uxtb	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	109b      	asrs	r3, r3, #2
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	b2da      	uxtb	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	721a      	strb	r2, [r3, #8]
    }

    return rslt;
 800278c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <_Z19SensorAPI_I2Cx_ReadhPhtPv>:
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr);
int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr);
void bmp3_delay_us(uint32_t period, void *intf_ptr);

int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af02      	add	r7, sp, #8
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	4603      	mov	r3, r0
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	4613      	mov	r3, r2
 80027a8:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, 1000);
 80027b8:	f107 020f 	add.w	r2, r7, #15
 80027bc:	8ab9      	ldrh	r1, [r7, #20]
 80027be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2301      	movs	r3, #1
 80027c6:	4808      	ldr	r0, [pc, #32]	; (80027e8 <_Z19SensorAPI_I2Cx_ReadhPhtPv+0x50>)
 80027c8:	f002 ff78 	bl	80056bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, 1000);
 80027cc:	89bb      	ldrh	r3, [r7, #12]
 80027ce:	8ab9      	ldrh	r1, [r7, #20]
 80027d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027d4:	9200      	str	r2, [sp, #0]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	4803      	ldr	r0, [pc, #12]	; (80027e8 <_Z19SensorAPI_I2Cx_ReadhPhtPv+0x50>)
 80027da:	f003 f86d 	bl	80058b8 <HAL_I2C_Master_Receive>
	return 0;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200000ac 	.word	0x200000ac

080027ec <_Z20SensorAPI_I2Cx_WritehPhtPv>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	4603      	mov	r3, r0
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	4613      	mov	r3, r2
 80027fc:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	b29b      	uxth	r3, r3
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 800280c:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <_Z20SensorAPI_I2Cx_WritehPhtPv+0x54>)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 8002812:	89bb      	ldrh	r3, [r7, #12]
 8002814:	461a      	mov	r2, r3
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	480a      	ldr	r0, [pc, #40]	; (8002844 <_Z20SensorAPI_I2Cx_WritehPhtPv+0x58>)
 800281a:	f00a fadd 	bl	800cdd8 <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, 1000);
 800281e:	89bb      	ldrh	r3, [r7, #12]
 8002820:	3301      	adds	r3, #1
 8002822:	b29b      	uxth	r3, r3
 8002824:	8ab9      	ldrh	r1, [r7, #20]
 8002826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800282a:	9200      	str	r2, [sp, #0]
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <_Z20SensorAPI_I2Cx_WritehPhtPv+0x54>)
 800282e:	4806      	ldr	r0, [pc, #24]	; (8002848 <_Z20SensorAPI_I2Cx_WritehPhtPv+0x5c>)
 8002830:	f002 ff44 	bl	80056bc <HAL_I2C_Master_Transmit>
	return 0;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2000022c 	.word	0x2000022c
 8002844:	2000022d 	.word	0x2000022d
 8002848:	200000ac 	.word	0x200000ac

0800284c <_Z13bmp3_delay_usmPv>:

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 8002856:	e008      	b.n	800286a <_Z13bmp3_delay_usmPv+0x1e>
	{
		for(i = 0; i < 84; i++)
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e002      	b.n	8002864 <_Z13bmp3_delay_usmPv+0x18>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3301      	adds	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b53      	cmp	r3, #83	; 0x53
 8002868:	d9f9      	bls.n	800285e <_Z13bmp3_delay_usmPv+0x12>
	while(period--)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	1e5a      	subs	r2, r3, #1
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1ec      	bne.n	8002858 <_Z13bmp3_delay_usmPv+0xc>
		{
			;
		}
	}
}
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	0000      	movs	r0, r0
	...

08002890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b0c0      	sub	sp, #256	; 0x100
 8002894:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002896:	f000 fdeb 	bl	8003470 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800289a:	f000 f8f5 	bl	8002a88 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800289e:	f000 f965 	bl	8002b6c <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028a2:	f000 fa8b 	bl	8002dbc <_ZL12MX_GPIO_Initv>
  MX_I2S2_Init();
 80028a6:	f000 f9bb 	bl	8002c20 <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 80028aa:	f000 f9ed 	bl	8002c88 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 80028ae:	f000 fa1f 	bl	8002cf0 <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 80028b2:	f008 ff4f 	bl	800b754 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80028b6:	f000 fa53 	bl	8002d60 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 80028ba:	f000 f97d 	bl	8002bb8 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  int8_t rslt;
  uint8_t loop = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
  uint16_t settings_sel;
  struct bmp3_dev dev;
  struct bmp3_data data = { 0 };
 80028c4:	f107 0320 	add.w	r3, r7, #32
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
  struct bmp3_settings settings = { 0 };
 80028d2:	f107 0310 	add.w	r3, r7, #16
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	731a      	strb	r2, [r3, #12]
  struct bmp3_status status = { { 0 } };
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	811a      	strh	r2, [r3, #8]

  //rslt = bmp3_interface_init(&dev, BMP3_I2C_INTF);
	//dev_addr = BMP3_ADDR_I2C_SEC;
  	dev_addr = BMP3_ADDR_I2C_SEC;
 80028ea:	4b61      	ldr	r3, [pc, #388]	; (8002a70 <main+0x1e0>)
 80028ec:	2277      	movs	r2, #119	; 0x77
 80028ee:	701a      	strb	r2, [r3, #0]
	dev.read = (bmp3_read_fptr_t)SensorAPI_I2Cx_Read;
 80028f0:	4b60      	ldr	r3, [pc, #384]	; (8002a74 <main+0x1e4>)
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	dev.write = (bmp3_write_fptr_t)SensorAPI_I2Cx_Write;
 80028f4:	4b60      	ldr	r3, [pc, #384]	; (8002a78 <main+0x1e8>)
 80028f6:	643b      	str	r3, [r7, #64]	; 0x40
	dev.intf = BMP3_I2C_INTF;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	dev.delay_us = bmp3_delay_us;
 80028fe:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <main+0x1ec>)
 8002900:	647b      	str	r3, [r7, #68]	; 0x44
	dev.intf_ptr = &dev_addr;
 8002902:	4b5b      	ldr	r3, [pc, #364]	; (8002a70 <main+0x1e0>)
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
	dev.dummy_byte = 0x0;
 8002906:	2300      	movs	r3, #0
 8002908:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  //bmp3_check_rslt("bmp3_interface_init", rslt);

  rslt = bmp3_init(&dev);
 800290c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fa9b 	bl	8000e4c <bmp3_init>
 8002916:	4603      	mov	r3, r0
 8002918:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
  //bmp3_check_rslt("bmp3_init", rslt);

  settings.int_settings.drdy_en = BMP3_ENABLE;
 800291c:	2301      	movs	r3, #1
 800291e:	76bb      	strb	r3, [r7, #26]
  settings.press_en = BMP3_ENABLE;
 8002920:	2301      	movs	r3, #1
 8002922:	747b      	strb	r3, [r7, #17]
  settings.temp_en = BMP3_ENABLE;
 8002924:	2301      	movs	r3, #1
 8002926:	74bb      	strb	r3, [r7, #18]


  settings.odr_filter.press_os = BMP3_OVERSAMPLING_2X;
 8002928:	2301      	movs	r3, #1
 800292a:	74fb      	strb	r3, [r7, #19]
  settings.odr_filter.temp_os = BMP3_OVERSAMPLING_2X;
 800292c:	2301      	movs	r3, #1
 800292e:	753b      	strb	r3, [r7, #20]
  settings.odr_filter.odr = BMP3_ODR_100_HZ;
 8002930:	2301      	movs	r3, #1
 8002932:	75bb      	strb	r3, [r7, #22]

  settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 8002934:	23be      	movs	r3, #190	; 0xbe
 8002936:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
                 BMP3_SEL_DRDY_EN;

  rslt = bmp3_set_sensor_settings(settings_sel, &settings, &dev);
 800293a:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 800293e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002942:	f107 0110 	add.w	r1, r7, #16
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fbec 	bl	8001124 <bmp3_set_sensor_settings>
 800294c:	4603      	mov	r3, r0
 800294e:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
  //bmp3_check_rslt("bmp3_set_sensor_settings", rslt);

  settings.op_mode = BMP3_MODE_NORMAL;
 8002952:	2303      	movs	r3, #3
 8002954:	743b      	strb	r3, [r7, #16]
  rslt = bmp3_set_op_mode(&settings, &dev);
 8002956:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800295a:	f107 0310 	add.w	r3, r7, #16
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fca2 	bl	80012aa <bmp3_set_op_mode>
 8002966:	4603      	mov	r3, r0
 8002968:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	MX_USB_HOST_Process();
 800296c:	f008 ff18 	bl	800b7a0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    rslt = bmp3_get_status(&status, &dev);
 8002970:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fc21 	bl	80011c0 <bmp3_get_status>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
    //bmp3_check_rslt("bmp3_get_status", rslt);

    /* Read temperature and pressure data iteratively based on data ready interrupt */
    if ((rslt == BMP3_OK) && (status.intr.drdy == BMP3_ENABLE))
 8002984:	f997 30fe 	ldrsb.w	r3, [r7, #254]	; 0xfe
 8002988:	2b00      	cmp	r3, #0
 800298a:	d15f      	bne.n	8002a4c <main+0x1bc>
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d15c      	bne.n	8002a4c <main+0x1bc>
         * First parameter indicates the type of data to be read
         * BMP3_PRESS_TEMP : To read pressure and temperature data
         * BMP3_TEMP       : To read only temperature data
         * BMP3_PRESS      : To read only pressure data
         */
        rslt = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &data, &dev);
 8002992:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002996:	f107 0320 	add.w	r3, r7, #32
 800299a:	4619      	mov	r1, r3
 800299c:	2003      	movs	r0, #3
 800299e:	f7fe fcf8 	bl	8001392 <bmp3_get_sensor_data>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
        double sealevelpressure_hpa = 1013.25;
 80029a8:	a32b      	add	r3, pc, #172	; (adr r3, 8002a58 <main+0x1c8>)
 80029aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ae:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
        double altitude = 0.0;
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
        float atmospheric = data.pressure / 100.0F;
 80029be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <main+0x1f0>)
 80029c8:	f7fd feec 	bl	80007a4 <__aeabi_ddiv>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	f7fe f86c 	bl	8000ab0 <__aeabi_d2f>
 80029d8:	4603      	mov	r3, r0
 80029da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	    altitude = 44330.0 * (1.0 - std::pow(atmospheric / sealevelpressure_hpa, 0.1903));
 80029de:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80029e2:	f7fd fd5d 	bl	80004a0 <__aeabi_f2d>
 80029e6:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80029ea:	f7fd fedb 	bl	80007a4 <__aeabi_ddiv>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	ec43 2b17 	vmov	d7, r2, r3
 80029f6:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8002a60 <main+0x1d0>
 80029fa:	eeb0 0a47 	vmov.f32	s0, s14
 80029fe:	eef0 0a67 	vmov.f32	s1, s15
 8002a02:	f009 f9af 	bl	800bd64 <pow>
 8002a06:	ec53 2b10 	vmov	r2, r3, d0
 8002a0a:	f04f 0000 	mov.w	r0, #0
 8002a0e:	491d      	ldr	r1, [pc, #116]	; (8002a84 <main+0x1f4>)
 8002a10:	f7fd fbe6 	bl	80001e0 <__aeabi_dsub>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	a312      	add	r3, pc, #72	; (adr r3, 8002a68 <main+0x1d8>)
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f7fd fd95 	bl	8000550 <__aeabi_dmul>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

        //bmp3_check_rslt("bmp3_get_sensor_data", rslt);

        /* NOTE : Read status register again to clear data ready interrupt status */
        rslt = bmp3_get_status(&status, &dev);
 8002a2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fbc2 	bl	80011c0 <bmp3_get_status>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
        #else
        printf("Data[%d]  T: %ld deg C, P: %lu Pa\n", loop, (long int)(int32_t)(data.temperature / 100),
               (long unsigned int)(uint32_t)(data.pressure / 100));
        #endif*/

        loop = loop + 1;
 8002a42:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002a46:	3301      	adds	r3, #1
 8002a48:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
    }

	HAL_Delay(5000);
 8002a4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002a50:	f000 fd80 	bl	8003554 <HAL_Delay>

    // HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 5000);
    // HAL_UART_Receive(&huart2, RX_Data, sizeof(RX_Data), 1000);
    // HAL_Delay(2000);
  }
 8002a54:	e78a      	b.n	800296c <main+0xdc>
 8002a56:	bf00      	nop
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	408faa00 	.word	0x408faa00
 8002a60:	1a36e2eb 	.word	0x1a36e2eb
 8002a64:	3fc85bc0 	.word	0x3fc85bc0
 8002a68:	00000000 	.word	0x00000000
 8002a6c:	40e5a540 	.word	0x40e5a540
 8002a70:	2000042c 	.word	0x2000042c
 8002a74:	08002799 	.word	0x08002799
 8002a78:	080027ed 	.word	0x080027ed
 8002a7c:	0800284d 	.word	0x0800284d
 8002a80:	40590000 	.word	0x40590000
 8002a84:	3ff00000 	.word	0x3ff00000

08002a88 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b094      	sub	sp, #80	; 0x50
 8002a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a8e:	f107 0320 	add.w	r3, r7, #32
 8002a92:	2230      	movs	r2, #48	; 0x30
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f00a f95a 	bl	800cd50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <_Z18SystemClock_Configv+0xdc>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <_Z18SystemClock_Configv+0xdc>)
 8002ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aba:	6413      	str	r3, [r2, #64]	; 0x40
 8002abc:	4b29      	ldr	r3, [pc, #164]	; (8002b64 <_Z18SystemClock_Configv+0xdc>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <_Z18SystemClock_Configv+0xe0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a25      	ldr	r2, [pc, #148]	; (8002b68 <_Z18SystemClock_Configv+0xe0>)
 8002ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <_Z18SystemClock_Configv+0xe0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aee:	2302      	movs	r3, #2
 8002af0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002af2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002af8:	2304      	movs	r3, #4
 8002afa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002afc:	23c0      	movs	r3, #192	; 0xc0
 8002afe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b00:	2304      	movs	r3, #4
 8002b02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002b04:	2308      	movs	r3, #8
 8002b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b08:	f107 0320 	add.w	r3, r7, #32
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 f8c7 	bl	8006ca0 <HAL_RCC_OscConfig>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf14      	ite	ne
 8002b18:	2301      	movne	r3, #1
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002b22:	f000 fa19 	bl	8002f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b26:	230f      	movs	r3, #15
 8002b28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002b3c:	f107 030c 	add.w	r3, r7, #12
 8002b40:	2103      	movs	r1, #3
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 fb24 	bl	8007190 <HAL_RCC_ClockConfig>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002b58:	f000 f9fe 	bl	8002f58 <Error_Handler>
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3750      	adds	r7, #80	; 0x50
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40007000 	.word	0x40007000

08002b6c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b72:	463b      	mov	r3, r7
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
 8002b80:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002b82:	2301      	movs	r3, #1
 8002b84:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8002b86:	23c8      	movs	r3, #200	; 0xc8
 8002b88:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8002b8a:	2305      	movs	r3, #5
 8002b8c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b92:	463b      	mov	r3, r7
 8002b94:	4618      	mov	r0, r3
 8002b96:	f004 fd1b 	bl	80075d0 <HAL_RCCEx_PeriphCLKConfig>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 8002baa:	f000 f9d5 	bl	8002f58 <Error_Handler>
  }
}
 8002bae:	bf00      	nop
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <_ZL12MX_I2C1_Initv+0x60>)
 8002bc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <_ZL12MX_I2C1_Initv+0x64>)
 8002bc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8002bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bf4:	4807      	ldr	r0, [pc, #28]	; (8002c14 <_ZL12MX_I2C1_Initv+0x5c>)
 8002bf6:	f002 fc1d 	bl	8005434 <HAL_I2C_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002c0a:	f000 f9a5 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200000ac 	.word	0x200000ac
 8002c18:	40005400 	.word	0x40005400
 8002c1c:	000186a0 	.word	0x000186a0

08002c20 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <_ZL12MX_I2S2_Initv+0x5c>)
 8002c26:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <_ZL12MX_I2S2_Initv+0x60>)
 8002c28:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <_ZL12MX_I2S2_Initv+0x5c>)
 8002c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c30:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <_ZL12MX_I2S2_Initv+0x5c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002c38:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <_ZL12MX_I2S2_Initv+0x5c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <_ZL12MX_I2S2_Initv+0x5c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002c44:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <_ZL12MX_I2S2_Initv+0x5c>)
 8002c46:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <_ZL12MX_I2S2_Initv+0x64>)
 8002c48:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <_ZL12MX_I2S2_Initv+0x5c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <_ZL12MX_I2S2_Initv+0x5c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <_ZL12MX_I2S2_Initv+0x5c>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002c5c:	4807      	ldr	r0, [pc, #28]	; (8002c7c <_ZL12MX_I2S2_Initv+0x5c>)
 8002c5e:	f003 fb7f 	bl	8006360 <HAL_I2S_Init>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <_ZL12MX_I2S2_Initv+0x56>
  {
    Error_Handler();
 8002c72:	f000 f971 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000100 	.word	0x20000100
 8002c80:	40003800 	.word	0x40003800
 8002c84:	00017700 	.word	0x00017700

08002c88 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002c8c:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002c8e:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <_ZL12MX_I2S3_Initv+0x60>)
 8002c90:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002c92:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c98:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002ca0:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002cb0:	4a0e      	ldr	r2, [pc, #56]	; (8002cec <_ZL12MX_I2S3_Initv+0x64>)
 8002cb2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002cc6:	4807      	ldr	r0, [pc, #28]	; (8002ce4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002cc8:	f003 fb4a 	bl	8006360 <HAL_I2S_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8002cdc:	f000 f93c 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000148 	.word	0x20000148
 8002ce8:	40003c00 	.word	0x40003c00
 8002cec:	00017700 	.word	0x00017700

08002cf0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <_ZL12MX_SPI1_Initv+0x68>)
 8002cf6:	4a19      	ldr	r2, [pc, #100]	; (8002d5c <_ZL12MX_SPI1_Initv+0x6c>)
 8002cf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002cfa:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <_ZL12MX_SPI1_Initv+0x68>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d00:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <_ZL12MX_SPI1_Initv+0x68>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d06:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <_ZL12MX_SPI1_Initv+0x68>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <_ZL12MX_SPI1_Initv+0x68>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <_ZL12MX_SPI1_Initv+0x68>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <_ZL12MX_SPI1_Initv+0x68>)
 8002d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d20:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <_ZL12MX_SPI1_Initv+0x68>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <_ZL12MX_SPI1_Initv+0x68>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <_ZL12MX_SPI1_Initv+0x68>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <_ZL12MX_SPI1_Initv+0x68>)
 8002d34:	220a      	movs	r2, #10
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d38:	4807      	ldr	r0, [pc, #28]	; (8002d58 <_ZL12MX_SPI1_Initv+0x68>)
 8002d3a:	f004 fd99 	bl	8007870 <HAL_SPI_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bf14      	ite	ne
 8002d44:	2301      	movne	r3, #1
 8002d46:	2300      	moveq	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <_ZL12MX_SPI1_Initv+0x62>
  {
    Error_Handler();
 8002d4e:	f000 f903 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000190 	.word	0x20000190
 8002d5c:	40013000 	.word	0x40013000

08002d60 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d64:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d66:	4a14      	ldr	r2, [pc, #80]	; (8002db8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002d68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d86:	220c      	movs	r2, #12
 8002d88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d96:	4807      	ldr	r0, [pc, #28]	; (8002db4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d98:	f004 fdf3 	bl	8007982 <HAL_UART_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bf14      	ite	ne
 8002da2:	2301      	movne	r3, #1
 8002da4:	2300      	moveq	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002dac:	f000 f8d4 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200001e8 	.word	0x200001e8
 8002db8:	40004400 	.word	0x40004400

08002dbc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	; 0x30
 8002dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc2:	f107 031c 	add.w	r3, r7, #28
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	4b5b      	ldr	r3, [pc, #364]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a5a      	ldr	r2, [pc, #360]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002ddc:	f043 0310 	orr.w	r3, r3, #16
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b58      	ldr	r3, [pc, #352]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	4b54      	ldr	r3, [pc, #336]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a53      	ldr	r2, [pc, #332]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002df8:	f043 0304 	orr.w	r3, r3, #4
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b51      	ldr	r3, [pc, #324]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	4b4d      	ldr	r3, [pc, #308]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a4c      	ldr	r2, [pc, #304]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b46      	ldr	r3, [pc, #280]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a45      	ldr	r2, [pc, #276]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b43      	ldr	r3, [pc, #268]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a3e      	ldr	r2, [pc, #248]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e4c:	f043 0302 	orr.w	r3, r3, #2
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b3c      	ldr	r3, [pc, #240]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	4b38      	ldr	r3, [pc, #224]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a37      	ldr	r2, [pc, #220]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e68:	f043 0308 	orr.w	r3, r3, #8
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <_ZL12MX_GPIO_Initv+0x188>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2108      	movs	r1, #8
 8002e7e:	4832      	ldr	r0, [pc, #200]	; (8002f48 <_ZL12MX_GPIO_Initv+0x18c>)
 8002e80:	f000 feb4 	bl	8003bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002e84:	2201      	movs	r2, #1
 8002e86:	2101      	movs	r1, #1
 8002e88:	4830      	ldr	r0, [pc, #192]	; (8002f4c <_ZL12MX_GPIO_Initv+0x190>)
 8002e8a:	f000 feaf 	bl	8003bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002e94:	482e      	ldr	r0, [pc, #184]	; (8002f50 <_ZL12MX_GPIO_Initv+0x194>)
 8002e96:	f000 fea9 	bl	8003bec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8002ea6:	f107 031c 	add.w	r3, r7, #28
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4826      	ldr	r0, [pc, #152]	; (8002f48 <_ZL12MX_GPIO_Initv+0x18c>)
 8002eae:	f000 fd19 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002ec2:	f107 031c 	add.w	r3, r7, #28
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	481f      	ldr	r0, [pc, #124]	; (8002f48 <_ZL12MX_GPIO_Initv+0x18c>)
 8002eca:	f000 fd0b 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8002ece:	2332      	movs	r3, #50	; 0x32
 8002ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ed2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002edc:	f107 031c 	add.w	r3, r7, #28
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4819      	ldr	r0, [pc, #100]	; (8002f48 <_ZL12MX_GPIO_Initv+0x18c>)
 8002ee4:	f000 fcfe 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eec:	2301      	movs	r3, #1
 8002eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	4619      	mov	r1, r3
 8002efe:	4813      	ldr	r0, [pc, #76]	; (8002f4c <_ZL12MX_GPIO_Initv+0x190>)
 8002f00:	f000 fcf0 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f04:	2301      	movs	r3, #1
 8002f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002f08:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f12:	f107 031c 	add.w	r3, r7, #28
 8002f16:	4619      	mov	r1, r3
 8002f18:	480e      	ldr	r0, [pc, #56]	; (8002f54 <_ZL12MX_GPIO_Initv+0x198>)
 8002f1a:	f000 fce3 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002f1e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002f22:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f24:	2301      	movs	r3, #1
 8002f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f30:	f107 031c 	add.w	r3, r7, #28
 8002f34:	4619      	mov	r1, r3
 8002f36:	4806      	ldr	r0, [pc, #24]	; (8002f50 <_ZL12MX_GPIO_Initv+0x194>)
 8002f38:	f000 fcd4 	bl	80038e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f3c:	bf00      	nop
 8002f3e:	3730      	adds	r7, #48	; 0x30
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	40020c00 	.word	0x40020c00
 8002f54:	40020000 	.word	0x40020000

08002f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f5c:	b672      	cpsid	i
}
 8002f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f60:	e7fe      	b.n	8002f60 <Error_Handler+0x8>
	...

08002f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a0f      	ldr	r2, [pc, #60]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f78:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_MspInit+0x4c>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002fa2:	2007      	movs	r0, #7
 8002fa4:	f000 fbca 	bl	800373c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800

08002fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_I2C_MspInit+0x84>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d12c      	bne.n	8003030 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	4b18      	ldr	r3, [pc, #96]	; (800303c <HAL_I2C_MspInit+0x88>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <HAL_I2C_MspInit+0x88>)
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_I2C_MspInit+0x88>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ff2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ff8:	2312      	movs	r3, #18
 8002ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003000:	2303      	movs	r3, #3
 8003002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003004:	2304      	movs	r3, #4
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	4619      	mov	r1, r3
 800300e:	480c      	ldr	r0, [pc, #48]	; (8003040 <HAL_I2C_MspInit+0x8c>)
 8003010:	f000 fc68 	bl	80038e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <HAL_I2C_MspInit+0x88>)
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	4a07      	ldr	r2, [pc, #28]	; (800303c <HAL_I2C_MspInit+0x88>)
 800301e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003022:	6413      	str	r3, [r2, #64]	; 0x40
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_I2C_MspInit+0x88>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003030:	bf00      	nop
 8003032:	3728      	adds	r7, #40	; 0x28
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40005400 	.word	0x40005400
 800303c:	40023800 	.word	0x40023800
 8003040:	40020400 	.word	0x40020400

08003044 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08e      	sub	sp, #56	; 0x38
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a59      	ldr	r2, [pc, #356]	; (80031c8 <HAL_I2S_MspInit+0x184>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d15b      	bne.n	800311e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	623b      	str	r3, [r7, #32]
 800306a:	4b58      	ldr	r3, [pc, #352]	; (80031cc <HAL_I2S_MspInit+0x188>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	4a57      	ldr	r2, [pc, #348]	; (80031cc <HAL_I2S_MspInit+0x188>)
 8003070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003074:	6413      	str	r3, [r2, #64]	; 0x40
 8003076:	4b55      	ldr	r3, [pc, #340]	; (80031cc <HAL_I2S_MspInit+0x188>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307e:	623b      	str	r3, [r7, #32]
 8003080:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	4b51      	ldr	r3, [pc, #324]	; (80031cc <HAL_I2S_MspInit+0x188>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	4a50      	ldr	r2, [pc, #320]	; (80031cc <HAL_I2S_MspInit+0x188>)
 800308c:	f043 0304 	orr.w	r3, r3, #4
 8003090:	6313      	str	r3, [r2, #48]	; 0x30
 8003092:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <HAL_I2S_MspInit+0x188>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	4b4a      	ldr	r3, [pc, #296]	; (80031cc <HAL_I2S_MspInit+0x188>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	4a49      	ldr	r2, [pc, #292]	; (80031cc <HAL_I2S_MspInit+0x188>)
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	6313      	str	r3, [r2, #48]	; 0x30
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_I2S_MspInit+0x188>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030ba:	2304      	movs	r3, #4
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	2300      	movs	r3, #0
 80030c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80030ca:	2306      	movs	r3, #6
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d2:	4619      	mov	r1, r3
 80030d4:	483e      	ldr	r0, [pc, #248]	; (80031d0 <HAL_I2S_MspInit+0x18c>)
 80030d6:	f000 fc05 	bl	80038e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80030da:	2308      	movs	r3, #8
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030ea:	2305      	movs	r3, #5
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80030ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f2:	4619      	mov	r1, r3
 80030f4:	4836      	ldr	r0, [pc, #216]	; (80031d0 <HAL_I2S_MspInit+0x18c>)
 80030f6:	f000 fbf5 	bl	80038e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80030fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	2300      	movs	r3, #0
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800310c:	2305      	movs	r3, #5
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003114:	4619      	mov	r1, r3
 8003116:	482f      	ldr	r0, [pc, #188]	; (80031d4 <HAL_I2S_MspInit+0x190>)
 8003118:	f000 fbe4 	bl	80038e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800311c:	e04f      	b.n	80031be <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2d      	ldr	r2, [pc, #180]	; (80031d8 <HAL_I2S_MspInit+0x194>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d14a      	bne.n	80031be <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	4b27      	ldr	r3, [pc, #156]	; (80031cc <HAL_I2S_MspInit+0x188>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	4a26      	ldr	r2, [pc, #152]	; (80031cc <HAL_I2S_MspInit+0x188>)
 8003132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003136:	6413      	str	r3, [r2, #64]	; 0x40
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_I2S_MspInit+0x188>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_I2S_MspInit+0x188>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <HAL_I2S_MspInit+0x188>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6313      	str	r3, [r2, #48]	; 0x30
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_I2S_MspInit+0x188>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_I2S_MspInit+0x188>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	4a18      	ldr	r2, [pc, #96]	; (80031cc <HAL_I2S_MspInit+0x188>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	6313      	str	r3, [r2, #48]	; 0x30
 8003170:	4b16      	ldr	r3, [pc, #88]	; (80031cc <HAL_I2S_MspInit+0x188>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800317c:	2310      	movs	r3, #16
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003180:	2302      	movs	r3, #2
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003188:	2300      	movs	r3, #0
 800318a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800318c:	2306      	movs	r3, #6
 800318e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003194:	4619      	mov	r1, r3
 8003196:	4811      	ldr	r0, [pc, #68]	; (80031dc <HAL_I2S_MspInit+0x198>)
 8003198:	f000 fba4 	bl	80038e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800319c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031aa:	2300      	movs	r3, #0
 80031ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031ae:	2306      	movs	r3, #6
 80031b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b6:	4619      	mov	r1, r3
 80031b8:	4805      	ldr	r0, [pc, #20]	; (80031d0 <HAL_I2S_MspInit+0x18c>)
 80031ba:	f000 fb93 	bl	80038e4 <HAL_GPIO_Init>
}
 80031be:	bf00      	nop
 80031c0:	3738      	adds	r7, #56	; 0x38
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40003800 	.word	0x40003800
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40020800 	.word	0x40020800
 80031d4:	40020400 	.word	0x40020400
 80031d8:	40003c00 	.word	0x40003c00
 80031dc:	40020000 	.word	0x40020000

080031e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	; 0x28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a19      	ldr	r2, [pc, #100]	; (8003264 <HAL_SPI_MspInit+0x84>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d12b      	bne.n	800325a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	4b18      	ldr	r3, [pc, #96]	; (8003268 <HAL_SPI_MspInit+0x88>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <HAL_SPI_MspInit+0x88>)
 800320c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003210:	6453      	str	r3, [r2, #68]	; 0x44
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_SPI_MspInit+0x88>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_SPI_MspInit+0x88>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a10      	ldr	r2, [pc, #64]	; (8003268 <HAL_SPI_MspInit+0x88>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HAL_SPI_MspInit+0x88>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800323a:	23e0      	movs	r3, #224	; 0xe0
 800323c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003246:	2303      	movs	r3, #3
 8003248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800324a:	2305      	movs	r3, #5
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324e:	f107 0314 	add.w	r3, r7, #20
 8003252:	4619      	mov	r1, r3
 8003254:	4805      	ldr	r0, [pc, #20]	; (800326c <HAL_SPI_MspInit+0x8c>)
 8003256:	f000 fb45 	bl	80038e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800325a:	bf00      	nop
 800325c:	3728      	adds	r7, #40	; 0x28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40013000 	.word	0x40013000
 8003268:	40023800 	.word	0x40023800
 800326c:	40020000 	.word	0x40020000

08003270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_UART_MspInit+0x94>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d133      	bne.n	80032fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <HAL_UART_MspInit+0x98>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_UART_MspInit+0x98>)
 800329c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a0:	6413      	str	r3, [r2, #64]	; 0x40
 80032a2:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_UART_MspInit+0x98>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <HAL_UART_MspInit+0x98>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a14      	ldr	r2, [pc, #80]	; (8003308 <HAL_UART_MspInit+0x98>)
 80032b8:	f043 0308 	orr.w	r3, r3, #8
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_UART_MspInit+0x98>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80032ca:	2360      	movs	r3, #96	; 0x60
 80032cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2302      	movs	r3, #2
 80032d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d6:	2303      	movs	r3, #3
 80032d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032da:	2307      	movs	r3, #7
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032de:	f107 0314 	add.w	r3, r7, #20
 80032e2:	4619      	mov	r1, r3
 80032e4:	4809      	ldr	r0, [pc, #36]	; (800330c <HAL_UART_MspInit+0x9c>)
 80032e6:	f000 fafd 	bl	80038e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032ea:	2200      	movs	r2, #0
 80032ec:	2100      	movs	r1, #0
 80032ee:	2026      	movs	r0, #38	; 0x26
 80032f0:	f000 fa2f 	bl	8003752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032f4:	2026      	movs	r0, #38	; 0x26
 80032f6:	f000 fa48 	bl	800378a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032fa:	bf00      	nop
 80032fc:	3728      	adds	r7, #40	; 0x28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40004400 	.word	0x40004400
 8003308:	40023800 	.word	0x40023800
 800330c:	40020c00 	.word	0x40020c00

08003310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003314:	e7fe      	b.n	8003314 <NMI_Handler+0x4>

08003316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800331a:	e7fe      	b.n	800331a <HardFault_Handler+0x4>

0800331c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003320:	e7fe      	b.n	8003320 <MemManage_Handler+0x4>

08003322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003326:	e7fe      	b.n	8003326 <BusFault_Handler+0x4>

08003328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800332c:	e7fe      	b.n	800332c <UsageFault_Handler+0x4>

0800332e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800335c:	f000 f8da 	bl	8003514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003360:	bf00      	nop
 8003362:	bd80      	pop	{r7, pc}

08003364 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <USART2_IRQHandler+0x10>)
 800336a:	f004 fb57 	bl	8007a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200001e8 	.word	0x200001e8

08003378 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <OTG_FS_IRQHandler+0x10>)
 800337e:	f000 feb9 	bl	80040f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000814 	.word	0x20000814

0800338c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003394:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <_sbrk+0x5c>)
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <_sbrk+0x60>)
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <_sbrk+0x64>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <_sbrk+0x64>)
 80033aa:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <_sbrk+0x68>)
 80033ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <_sbrk+0x64>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d207      	bcs.n	80033cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033bc:	f009 fce0 	bl	800cd80 <__errno>
 80033c0:	4603      	mov	r3, r0
 80033c2:	220c      	movs	r2, #12
 80033c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ca:	e009      	b.n	80033e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <_sbrk+0x64>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <_sbrk+0x64>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <_sbrk+0x64>)
 80033dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033de:	68fb      	ldr	r3, [r7, #12]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20020000 	.word	0x20020000
 80033ec:	00000400 	.word	0x00000400
 80033f0:	20000430 	.word	0x20000430
 80033f4:	20000c60 	.word	0x20000c60

080033f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <SystemInit+0x20>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	4a05      	ldr	r2, [pc, #20]	; (8003418 <SystemInit+0x20>)
 8003404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800341c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003454 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003420:	480d      	ldr	r0, [pc, #52]	; (8003458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003422:	490e      	ldr	r1, [pc, #56]	; (800345c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003424:	4a0e      	ldr	r2, [pc, #56]	; (8003460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003428:	e002      	b.n	8003430 <LoopCopyDataInit>

0800342a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800342a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800342c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800342e:	3304      	adds	r3, #4

08003430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003434:	d3f9      	bcc.n	800342a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003436:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003438:	4c0b      	ldr	r4, [pc, #44]	; (8003468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800343a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800343c:	e001      	b.n	8003442 <LoopFillZerobss>

0800343e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800343e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003440:	3204      	adds	r2, #4

08003442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003444:	d3fb      	bcc.n	800343e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003446:	f7ff ffd7 	bl	80033f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800344a:	f009 fc9f 	bl	800cd8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800344e:	f7ff fa1f 	bl	8002890 <main>
  bx  lr    
 8003452:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800345c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003460:	0800cf50 	.word	0x0800cf50
  ldr r2, =_sbss
 8003464:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003468:	20000c60 	.word	0x20000c60

0800346c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800346c:	e7fe      	b.n	800346c <ADC_IRQHandler>
	...

08003470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003474:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <HAL_Init+0x40>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a0d      	ldr	r2, [pc, #52]	; (80034b0 <HAL_Init+0x40>)
 800347a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800347e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_Init+0x40>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <HAL_Init+0x40>)
 8003486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800348a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800348c:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <HAL_Init+0x40>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a07      	ldr	r2, [pc, #28]	; (80034b0 <HAL_Init+0x40>)
 8003492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003498:	2003      	movs	r0, #3
 800349a:	f000 f94f 	bl	800373c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800349e:	2000      	movs	r0, #0
 80034a0:	f000 f808 	bl	80034b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034a4:	f7ff fd5e 	bl	8002f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40023c00 	.word	0x40023c00

080034b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034bc:	4b12      	ldr	r3, [pc, #72]	; (8003508 <HAL_InitTick+0x54>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_InitTick+0x58>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	4619      	mov	r1, r3
 80034c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80034ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f967 	bl	80037a6 <HAL_SYSTICK_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e00e      	b.n	8003500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b0f      	cmp	r3, #15
 80034e6:	d80a      	bhi.n	80034fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034e8:	2200      	movs	r2, #0
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	f000 f92f 	bl	8003752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034f4:	4a06      	ldr	r2, [pc, #24]	; (8003510 <HAL_InitTick+0x5c>)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e000      	b.n	8003500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000000 	.word	0x20000000
 800350c:	20000008 	.word	0x20000008
 8003510:	20000004 	.word	0x20000004

08003514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_IncTick+0x20>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_IncTick+0x24>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4413      	add	r3, r2
 8003524:	4a04      	ldr	r2, [pc, #16]	; (8003538 <HAL_IncTick+0x24>)
 8003526:	6013      	str	r3, [r2, #0]
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000008 	.word	0x20000008
 8003538:	20000434 	.word	0x20000434

0800353c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return uwTick;
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_GetTick+0x14>)
 8003542:	681b      	ldr	r3, [r3, #0]
}
 8003544:	4618      	mov	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000434 	.word	0x20000434

08003554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7ff ffee 	bl	800353c <HAL_GetTick>
 8003560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d005      	beq.n	800357a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_Delay+0x44>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800357a:	bf00      	nop
 800357c:	f7ff ffde 	bl	800353c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	429a      	cmp	r2, r3
 800358a:	d8f7      	bhi.n	800357c <HAL_Delay+0x28>
  {
  }
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000008 	.word	0x20000008

0800359c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <__NVIC_SetPriorityGrouping+0x44>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b8:	4013      	ands	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ce:	4a04      	ldr	r2, [pc, #16]	; (80035e0 <__NVIC_SetPriorityGrouping+0x44>)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	60d3      	str	r3, [r2, #12]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <__NVIC_GetPriorityGrouping+0x18>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	f003 0307 	and.w	r3, r3, #7
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	e000ed00 	.word	0xe000ed00

08003600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	2b00      	cmp	r3, #0
 8003610:	db0b      	blt.n	800362a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	f003 021f 	and.w	r2, r3, #31
 8003618:	4907      	ldr	r1, [pc, #28]	; (8003638 <__NVIC_EnableIRQ+0x38>)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2001      	movs	r0, #1
 8003622:	fa00 f202 	lsl.w	r2, r0, r2
 8003626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	e000e100 	.word	0xe000e100

0800363c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	6039      	str	r1, [r7, #0]
 8003646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364c:	2b00      	cmp	r3, #0
 800364e:	db0a      	blt.n	8003666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	490c      	ldr	r1, [pc, #48]	; (8003688 <__NVIC_SetPriority+0x4c>)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	0112      	lsls	r2, r2, #4
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	440b      	add	r3, r1
 8003660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003664:	e00a      	b.n	800367c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	4908      	ldr	r1, [pc, #32]	; (800368c <__NVIC_SetPriority+0x50>)
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	3b04      	subs	r3, #4
 8003674:	0112      	lsls	r2, r2, #4
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	440b      	add	r3, r1
 800367a:	761a      	strb	r2, [r3, #24]
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	e000e100 	.word	0xe000e100
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003690:	b480      	push	{r7}
 8003692:	b089      	sub	sp, #36	; 0x24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f1c3 0307 	rsb	r3, r3, #7
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	bf28      	it	cs
 80036ae:	2304      	movcs	r3, #4
 80036b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3304      	adds	r3, #4
 80036b6:	2b06      	cmp	r3, #6
 80036b8:	d902      	bls.n	80036c0 <NVIC_EncodePriority+0x30>
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3b03      	subs	r3, #3
 80036be:	e000      	b.n	80036c2 <NVIC_EncodePriority+0x32>
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c4:	f04f 32ff 	mov.w	r2, #4294967295
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43da      	mvns	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	401a      	ands	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d8:	f04f 31ff 	mov.w	r1, #4294967295
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	fa01 f303 	lsl.w	r3, r1, r3
 80036e2:	43d9      	mvns	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e8:	4313      	orrs	r3, r2
         );
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3724      	adds	r7, #36	; 0x24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3b01      	subs	r3, #1
 8003704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003708:	d301      	bcc.n	800370e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800370a:	2301      	movs	r3, #1
 800370c:	e00f      	b.n	800372e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800370e:	4a0a      	ldr	r2, [pc, #40]	; (8003738 <SysTick_Config+0x40>)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3b01      	subs	r3, #1
 8003714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003716:	210f      	movs	r1, #15
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	f7ff ff8e 	bl	800363c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <SysTick_Config+0x40>)
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003726:	4b04      	ldr	r3, [pc, #16]	; (8003738 <SysTick_Config+0x40>)
 8003728:	2207      	movs	r2, #7
 800372a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	e000e010 	.word	0xe000e010

0800373c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ff29 	bl	800359c <__NVIC_SetPriorityGrouping>
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	4603      	mov	r3, r0
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003764:	f7ff ff3e 	bl	80035e4 <__NVIC_GetPriorityGrouping>
 8003768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	6978      	ldr	r0, [r7, #20]
 8003770:	f7ff ff8e 	bl	8003690 <NVIC_EncodePriority>
 8003774:	4602      	mov	r2, r0
 8003776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff5d 	bl	800363c <__NVIC_SetPriority>
}
 8003782:	bf00      	nop
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	4603      	mov	r3, r0
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff31 	bl	8003600 <__NVIC_EnableIRQ>
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ffa2 	bl	80036f8 <SysTick_Config>
 80037b4:	4603      	mov	r3, r0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037cc:	f7ff feb6 	bl	800353c <HAL_GetTick>
 80037d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d008      	beq.n	80037f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2280      	movs	r2, #128	; 0x80
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e052      	b.n	8003896 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0216 	bic.w	r2, r2, #22
 80037fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800380e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d103      	bne.n	8003820 <HAL_DMA_Abort+0x62>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381c:	2b00      	cmp	r3, #0
 800381e:	d007      	beq.n	8003830 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0208 	bic.w	r2, r2, #8
 800382e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003840:	e013      	b.n	800386a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003842:	f7ff fe7b 	bl	800353c <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b05      	cmp	r3, #5
 800384e:	d90c      	bls.n	800386a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2203      	movs	r2, #3
 800385a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e015      	b.n	8003896 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e4      	bne.n	8003842 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	223f      	movs	r2, #63	; 0x3f
 800387e:	409a      	lsls	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d004      	beq.n	80038bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2280      	movs	r2, #128	; 0x80
 80038b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e00c      	b.n	80038d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2205      	movs	r2, #5
 80038c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	e159      	b.n	8003bb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003900:	2201      	movs	r2, #1
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	f040 8148 	bne.w	8003bae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d005      	beq.n	8003936 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003932:	2b02      	cmp	r3, #2
 8003934:	d130      	bne.n	8003998 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	2203      	movs	r2, #3
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800396c:	2201      	movs	r2, #1
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 0201 	and.w	r2, r3, #1
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d017      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	2203      	movs	r2, #3
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d123      	bne.n	8003a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	08da      	lsrs	r2, r3, #3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3208      	adds	r2, #8
 80039e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	220f      	movs	r2, #15
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	08da      	lsrs	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3208      	adds	r2, #8
 8003a22:	69b9      	ldr	r1, [r7, #24]
 8003a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	2203      	movs	r2, #3
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0203 	and.w	r2, r3, #3
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80a2 	beq.w	8003bae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	4b57      	ldr	r3, [pc, #348]	; (8003bcc <HAL_GPIO_Init+0x2e8>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	4a56      	ldr	r2, [pc, #344]	; (8003bcc <HAL_GPIO_Init+0x2e8>)
 8003a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a78:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7a:	4b54      	ldr	r3, [pc, #336]	; (8003bcc <HAL_GPIO_Init+0x2e8>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a86:	4a52      	ldr	r2, [pc, #328]	; (8003bd0 <HAL_GPIO_Init+0x2ec>)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	220f      	movs	r2, #15
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a49      	ldr	r2, [pc, #292]	; (8003bd4 <HAL_GPIO_Init+0x2f0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d019      	beq.n	8003ae6 <HAL_GPIO_Init+0x202>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a48      	ldr	r2, [pc, #288]	; (8003bd8 <HAL_GPIO_Init+0x2f4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_GPIO_Init+0x1fe>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a47      	ldr	r2, [pc, #284]	; (8003bdc <HAL_GPIO_Init+0x2f8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00d      	beq.n	8003ade <HAL_GPIO_Init+0x1fa>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a46      	ldr	r2, [pc, #280]	; (8003be0 <HAL_GPIO_Init+0x2fc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <HAL_GPIO_Init+0x1f6>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a45      	ldr	r2, [pc, #276]	; (8003be4 <HAL_GPIO_Init+0x300>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d101      	bne.n	8003ad6 <HAL_GPIO_Init+0x1f2>
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	e008      	b.n	8003ae8 <HAL_GPIO_Init+0x204>
 8003ad6:	2307      	movs	r3, #7
 8003ad8:	e006      	b.n	8003ae8 <HAL_GPIO_Init+0x204>
 8003ada:	2303      	movs	r3, #3
 8003adc:	e004      	b.n	8003ae8 <HAL_GPIO_Init+0x204>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e002      	b.n	8003ae8 <HAL_GPIO_Init+0x204>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_GPIO_Init+0x204>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	f002 0203 	and.w	r2, r2, #3
 8003aee:	0092      	lsls	r2, r2, #2
 8003af0:	4093      	lsls	r3, r2
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af8:	4935      	ldr	r1, [pc, #212]	; (8003bd0 <HAL_GPIO_Init+0x2ec>)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	089b      	lsrs	r3, r3, #2
 8003afe:	3302      	adds	r3, #2
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b06:	4b38      	ldr	r3, [pc, #224]	; (8003be8 <HAL_GPIO_Init+0x304>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b2a:	4a2f      	ldr	r2, [pc, #188]	; (8003be8 <HAL_GPIO_Init+0x304>)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b30:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <HAL_GPIO_Init+0x304>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b54:	4a24      	ldr	r2, [pc, #144]	; (8003be8 <HAL_GPIO_Init+0x304>)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b5a:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <HAL_GPIO_Init+0x304>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b7e:	4a1a      	ldr	r2, [pc, #104]	; (8003be8 <HAL_GPIO_Init+0x304>)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b84:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <HAL_GPIO_Init+0x304>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ba8:	4a0f      	ldr	r2, [pc, #60]	; (8003be8 <HAL_GPIO_Init+0x304>)
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b0f      	cmp	r3, #15
 8003bb8:	f67f aea2 	bls.w	8003900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	3724      	adds	r7, #36	; 0x24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40013800 	.word	0x40013800
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	40020400 	.word	0x40020400
 8003bdc:	40020800 	.word	0x40020800
 8003be0:	40020c00 	.word	0x40020c00
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40013c00 	.word	0x40013c00

08003bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bfc:	787b      	ldrb	r3, [r7, #1]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c02:	887a      	ldrh	r2, [r7, #2]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c08:	e003      	b.n	8003c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c0a:	887b      	ldrh	r3, [r7, #2]
 8003c0c:	041a      	lsls	r2, r3, #16
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	619a      	str	r2, [r3, #24]
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c20:	b08f      	sub	sp, #60	; 0x3c
 8003c22:	af0a      	add	r7, sp, #40	; 0x28
 8003c24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e054      	b.n	8003cda <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f007 fde0 	bl	800b810 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2203      	movs	r2, #3
 8003c54:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f004 fe0c 	bl	800888c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	687e      	ldr	r6, [r7, #4]
 8003c7c:	466d      	mov	r5, sp
 8003c7e:	f106 0410 	add.w	r4, r6, #16
 8003c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c92:	1d33      	adds	r3, r6, #4
 8003c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c96:	6838      	ldr	r0, [r7, #0]
 8003c98:	f004 fd86 	bl	80087a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f004 fe03 	bl	80088ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	687e      	ldr	r6, [r7, #4]
 8003cb0:	466d      	mov	r5, sp
 8003cb2:	f106 0410 	add.w	r4, r6, #16
 8003cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cc6:	1d33      	adds	r3, r6, #4
 8003cc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cca:	6838      	ldr	r0, [r7, #0]
 8003ccc:	f004 ff8c 	bl	8008be8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ce2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003ce2:	b590      	push	{r4, r7, lr}
 8003ce4:	b089      	sub	sp, #36	; 0x24
 8003ce6:	af04      	add	r7, sp, #16
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	4608      	mov	r0, r1
 8003cec:	4611      	mov	r1, r2
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	70fb      	strb	r3, [r7, #3]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70bb      	strb	r3, [r7, #2]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_HCD_HC_Init+0x28>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e076      	b.n	8003df8 <HAL_HCD_HC_Init+0x116>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	333d      	adds	r3, #61	; 0x3d
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	212c      	movs	r1, #44	; 0x2c
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	4413      	add	r3, r2
 8003d30:	3338      	adds	r3, #56	; 0x38
 8003d32:	787a      	ldrb	r2, [r7, #1]
 8003d34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	212c      	movs	r1, #44	; 0x2c
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	3340      	adds	r3, #64	; 0x40
 8003d44:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d46:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	3339      	adds	r3, #57	; 0x39
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	212c      	movs	r1, #44	; 0x2c
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	333f      	adds	r3, #63	; 0x3f
 8003d68:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003d6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	78ba      	ldrb	r2, [r7, #2]
 8003d72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d76:	b2d0      	uxtb	r0, r2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	333a      	adds	r3, #58	; 0x3a
 8003d84:	4602      	mov	r2, r0
 8003d86:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003d88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	da09      	bge.n	8003da4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	212c      	movs	r1, #44	; 0x2c
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	333b      	adds	r3, #59	; 0x3b
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
 8003da2:	e008      	b.n	8003db6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	212c      	movs	r1, #44	; 0x2c
 8003daa:	fb01 f303 	mul.w	r3, r1, r3
 8003dae:	4413      	add	r3, r2
 8003db0:	333b      	adds	r3, #59	; 0x3b
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	212c      	movs	r1, #44	; 0x2c
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	333c      	adds	r3, #60	; 0x3c
 8003dc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003dc8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	787c      	ldrb	r4, [r7, #1]
 8003dd0:	78ba      	ldrb	r2, [r7, #2]
 8003dd2:	78f9      	ldrb	r1, [r7, #3]
 8003dd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003dd6:	9302      	str	r3, [sp, #8]
 8003dd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4623      	mov	r3, r4
 8003de6:	f005 f885 	bl	8008ef4 <USB_HC_Init>
 8003dea:	4603      	mov	r3, r0
 8003dec:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd90      	pop	{r4, r7, pc}

08003e00 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_HCD_HC_Halt+0x1e>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e00f      	b.n	8003e3e <HAL_HCD_HC_Halt+0x3e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f005 fad5 	bl	80093de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	4608      	mov	r0, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	461a      	mov	r2, r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	70fb      	strb	r3, [r7, #3]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	70bb      	strb	r3, [r7, #2]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	212c      	movs	r1, #44	; 0x2c
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	333b      	adds	r3, #59	; 0x3b
 8003e70:	78ba      	ldrb	r2, [r7, #2]
 8003e72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	333f      	adds	r3, #63	; 0x3f
 8003e82:	787a      	ldrb	r2, [r7, #1]
 8003e84:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003e86:	7c3b      	ldrb	r3, [r7, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d112      	bne.n	8003eb2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	212c      	movs	r1, #44	; 0x2c
 8003e92:	fb01 f303 	mul.w	r3, r1, r3
 8003e96:	4413      	add	r3, r2
 8003e98:	3342      	adds	r3, #66	; 0x42
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	212c      	movs	r1, #44	; 0x2c
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	333d      	adds	r3, #61	; 0x3d
 8003eac:	7f3a      	ldrb	r2, [r7, #28]
 8003eae:	701a      	strb	r2, [r3, #0]
 8003eb0:	e008      	b.n	8003ec4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	212c      	movs	r1, #44	; 0x2c
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3342      	adds	r3, #66	; 0x42
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003ec4:	787b      	ldrb	r3, [r7, #1]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	f200 80c6 	bhi.w	8004058 <HAL_HCD_HC_SubmitRequest+0x210>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003ee5 	.word	0x08003ee5
 8003ed8:	08004045 	.word	0x08004045
 8003edc:	08003f49 	.word	0x08003f49
 8003ee0:	08003fc7 	.word	0x08003fc7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003ee4:	7c3b      	ldrb	r3, [r7, #16]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	f040 80b8 	bne.w	800405c <HAL_HCD_HC_SubmitRequest+0x214>
 8003eec:	78bb      	ldrb	r3, [r7, #2]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 80b4 	bne.w	800405c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003ef4:	8b3b      	ldrh	r3, [r7, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d108      	bne.n	8003f0c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	212c      	movs	r1, #44	; 0x2c
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	3355      	adds	r3, #85	; 0x55
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3355      	adds	r3, #85	; 0x55
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	212c      	movs	r1, #44	; 0x2c
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3342      	adds	r3, #66	; 0x42
 8003f2e:	2200      	movs	r2, #0
 8003f30:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003f32:	e093      	b.n	800405c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	212c      	movs	r1, #44	; 0x2c
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	4413      	add	r3, r2
 8003f40:	3342      	adds	r3, #66	; 0x42
 8003f42:	2202      	movs	r2, #2
 8003f44:	701a      	strb	r2, [r3, #0]
      break;
 8003f46:	e089      	b.n	800405c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003f48:	78bb      	ldrb	r3, [r7, #2]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d11d      	bne.n	8003f8a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	3355      	adds	r3, #85	; 0x55
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	212c      	movs	r1, #44	; 0x2c
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3342      	adds	r3, #66	; 0x42
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003f74:	e073      	b.n	800405e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	212c      	movs	r1, #44	; 0x2c
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	4413      	add	r3, r2
 8003f82:	3342      	adds	r3, #66	; 0x42
 8003f84:	2202      	movs	r2, #2
 8003f86:	701a      	strb	r2, [r3, #0]
      break;
 8003f88:	e069      	b.n	800405e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	212c      	movs	r1, #44	; 0x2c
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	3354      	adds	r3, #84	; 0x54
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	212c      	movs	r1, #44	; 0x2c
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	3342      	adds	r3, #66	; 0x42
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
      break;
 8003fb0:	e055      	b.n	800405e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	212c      	movs	r1, #44	; 0x2c
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3342      	adds	r3, #66	; 0x42
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	701a      	strb	r2, [r3, #0]
      break;
 8003fc4:	e04b      	b.n	800405e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003fc6:	78bb      	ldrb	r3, [r7, #2]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11d      	bne.n	8004008 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	212c      	movs	r1, #44	; 0x2c
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3355      	adds	r3, #85	; 0x55
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d109      	bne.n	8003ff4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	212c      	movs	r1, #44	; 0x2c
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	3342      	adds	r3, #66	; 0x42
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003ff2:	e034      	b.n	800405e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	212c      	movs	r1, #44	; 0x2c
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	3342      	adds	r3, #66	; 0x42
 8004002:	2202      	movs	r2, #2
 8004004:	701a      	strb	r2, [r3, #0]
      break;
 8004006:	e02a      	b.n	800405e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	212c      	movs	r1, #44	; 0x2c
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	4413      	add	r3, r2
 8004014:	3354      	adds	r3, #84	; 0x54
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	212c      	movs	r1, #44	; 0x2c
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	4413      	add	r3, r2
 8004028:	3342      	adds	r3, #66	; 0x42
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]
      break;
 800402e:	e016      	b.n	800405e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	212c      	movs	r1, #44	; 0x2c
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	4413      	add	r3, r2
 800403c:	3342      	adds	r3, #66	; 0x42
 800403e:	2202      	movs	r2, #2
 8004040:	701a      	strb	r2, [r3, #0]
      break;
 8004042:	e00c      	b.n	800405e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	212c      	movs	r1, #44	; 0x2c
 800404a:	fb01 f303 	mul.w	r3, r1, r3
 800404e:	4413      	add	r3, r2
 8004050:	3342      	adds	r3, #66	; 0x42
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
      break;
 8004056:	e002      	b.n	800405e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004058:	bf00      	nop
 800405a:	e000      	b.n	800405e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800405c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	212c      	movs	r1, #44	; 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	3344      	adds	r3, #68	; 0x44
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	8b3a      	ldrh	r2, [r7, #24]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	202c      	movs	r0, #44	; 0x2c
 8004078:	fb00 f303 	mul.w	r3, r0, r3
 800407c:	440b      	add	r3, r1
 800407e:	334c      	adds	r3, #76	; 0x4c
 8004080:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	3360      	adds	r3, #96	; 0x60
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	3350      	adds	r3, #80	; 0x50
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	212c      	movs	r1, #44	; 0x2c
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	4413      	add	r3, r2
 80040b2:	3339      	adds	r3, #57	; 0x39
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	212c      	movs	r1, #44	; 0x2c
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	3361      	adds	r3, #97	; 0x61
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	222c      	movs	r2, #44	; 0x2c
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	3338      	adds	r3, #56	; 0x38
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	18d1      	adds	r1, r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	f005 f828 	bl	8009138 <USB_HC_StartXfer>
 80040e8:	4603      	mov	r3, r0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop

080040f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f004 fd29 	bl	8008b62 <USB_GetMode>
 8004110:	4603      	mov	r3, r0
 8004112:	2b01      	cmp	r3, #1
 8004114:	f040 80f6 	bne.w	8004304 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f004 fd0d 	bl	8008b3c <USB_ReadInterrupts>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80ec 	beq.w	8004302 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f004 fd04 	bl	8008b3c <USB_ReadInterrupts>
 8004134:	4603      	mov	r3, r0
 8004136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800413e:	d104      	bne.n	800414a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004148:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f004 fcf4 	bl	8008b3c <USB_ReadInterrupts>
 8004154:	4603      	mov	r3, r0
 8004156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800415e:	d104      	bne.n	800416a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004168:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f004 fce4 	bl	8008b3c <USB_ReadInterrupts>
 8004174:	4603      	mov	r3, r0
 8004176:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800417a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800417e:	d104      	bne.n	800418a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004188:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f004 fcd4 	bl	8008b3c <USB_ReadInterrupts>
 8004194:	4603      	mov	r3, r0
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d103      	bne.n	80041a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2202      	movs	r2, #2
 80041a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f004 fcc6 	bl	8008b3c <USB_ReadInterrupts>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ba:	d11c      	bne.n	80041f6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80041c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10f      	bne.n	80041f6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80041d6:	2110      	movs	r1, #16
 80041d8:	6938      	ldr	r0, [r7, #16]
 80041da:	f004 fbb5 	bl	8008948 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80041de:	6938      	ldr	r0, [r7, #16]
 80041e0:	f004 fbe6 	bl	80089b0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2101      	movs	r1, #1
 80041ea:	4618      	mov	r0, r3
 80041ec:	f004 fdbc 	bl	8008d68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f007 fb8b 	bl	800b90c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f004 fc9e 	bl	8008b3c <USB_ReadInterrupts>
 8004200:	4603      	mov	r3, r0
 8004202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004206:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800420a:	d102      	bne.n	8004212 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f001 f89e 	bl	800534e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f004 fc90 	bl	8008b3c <USB_ReadInterrupts>
 800421c:	4603      	mov	r3, r0
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b08      	cmp	r3, #8
 8004224:	d106      	bne.n	8004234 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f007 fb54 	bl	800b8d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2208      	movs	r2, #8
 8004232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f004 fc7f 	bl	8008b3c <USB_ReadInterrupts>
 800423e:	4603      	mov	r3, r0
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b10      	cmp	r3, #16
 8004246:	d101      	bne.n	800424c <HAL_HCD_IRQHandler+0x158>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <HAL_HCD_IRQHandler+0x15a>
 800424c:	2300      	movs	r3, #0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d012      	beq.n	8004278 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0210 	bic.w	r2, r2, #16
 8004260:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 ffa1 	bl	80051aa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0210 	orr.w	r2, r2, #16
 8004276:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f004 fc5d 	bl	8008b3c <USB_ReadInterrupts>
 8004282:	4603      	mov	r3, r0
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800428c:	d13a      	bne.n	8004304 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f005 f892 	bl	80093bc <USB_HC_ReadInterrupt>
 8004298:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	e025      	b.n	80042ec <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d018      	beq.n	80042e6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ca:	d106      	bne.n	80042da <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	4619      	mov	r1, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f8ab 	bl	800442e <HCD_HC_IN_IRQHandler>
 80042d8:	e005      	b.n	80042e6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fbf9 	bl	8004ad8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	3301      	adds	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d3d4      	bcc.n	80042a0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042fe:	615a      	str	r2, [r3, #20]
 8004300:	e000      	b.n	8004304 <HAL_HCD_IRQHandler+0x210>
      return;
 8004302:	bf00      	nop
    }
  }
}
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_HCD_Start+0x16>
 800431c:	2302      	movs	r3, #2
 800431e:	e013      	b.n	8004348 <HAL_HCD_Start+0x3e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2101      	movs	r1, #1
 800432e:	4618      	mov	r0, r3
 8004330:	f004 fd7e 	bl	8008e30 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f004 fa96 	bl	800886a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_HCD_Stop+0x16>
 8004362:	2302      	movs	r3, #2
 8004364:	e00d      	b.n	8004382 <HAL_HCD_Stop+0x32>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f005 f96c 	bl	8009650 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f004 fd20 	bl	8008ddc <USB_ResetPort>
 800439c:	4603      	mov	r3, r0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	460b      	mov	r3, r1
 80043b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	212c      	movs	r1, #44	; 0x2c
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	4413      	add	r3, r2
 80043be:	3360      	adds	r3, #96	; 0x60
 80043c0:	781b      	ldrb	r3, [r3, #0]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	212c      	movs	r1, #44	; 0x2c
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	4413      	add	r3, r2
 80043e6:	3350      	adds	r3, #80	; 0x50
 80043e8:	681b      	ldr	r3, [r3, #0]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f004 fd64 	bl	8008ed0 <USB_GetCurrentFrame>
 8004408:	4603      	mov	r3, r0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f004 fd3f 	bl	8008ea2 <USB_GetHostSpeed>
 8004424:	4603      	mov	r3, r0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4413      	add	r3, r2
 8004450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b04      	cmp	r3, #4
 800445c:	d11a      	bne.n	8004494 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	461a      	mov	r2, r3
 800446c:	2304      	movs	r3, #4
 800446e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	212c      	movs	r1, #44	; 0x2c
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	4413      	add	r3, r2
 800447c:	3361      	adds	r3, #97	; 0x61
 800447e:	2206      	movs	r2, #6
 8004480:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	4611      	mov	r1, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f004 ffa6 	bl	80093de <USB_HC_Halt>
 8004492:	e0af      	b.n	80045f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4413      	add	r3, r2
 800449c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044aa:	d11b      	bne.n	80044e4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b8:	461a      	mov	r2, r3
 80044ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	212c      	movs	r1, #44	; 0x2c
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	3361      	adds	r3, #97	; 0x61
 80044ce:	2207      	movs	r2, #7
 80044d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f004 ff7e 	bl	80093de <USB_HC_Halt>
 80044e2:	e087      	b.n	80045f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d109      	bne.n	800450e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4413      	add	r3, r2
 8004502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004506:	461a      	mov	r2, r3
 8004508:	2320      	movs	r3, #32
 800450a:	6093      	str	r3, [r2, #8]
 800450c:	e072      	b.n	80045f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b08      	cmp	r3, #8
 8004522:	d11a      	bne.n	800455a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004530:	461a      	mov	r2, r3
 8004532:	2308      	movs	r3, #8
 8004534:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	212c      	movs	r1, #44	; 0x2c
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	4413      	add	r3, r2
 8004542:	3361      	adds	r3, #97	; 0x61
 8004544:	2205      	movs	r2, #5
 8004546:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	4611      	mov	r1, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f004 ff43 	bl	80093de <USB_HC_Halt>
 8004558:	e04c      	b.n	80045f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4413      	add	r3, r2
 8004562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004570:	d11b      	bne.n	80045aa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457e:	461a      	mov	r2, r3
 8004580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004584:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	212c      	movs	r1, #44	; 0x2c
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	4413      	add	r3, r2
 8004592:	3361      	adds	r3, #97	; 0x61
 8004594:	2208      	movs	r2, #8
 8004596:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f004 ff1b 	bl	80093de <USB_HC_Halt>
 80045a8:	e024      	b.n	80045f4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d119      	bne.n	80045f4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045cc:	461a      	mov	r2, r3
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	212c      	movs	r1, #44	; 0x2c
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	3361      	adds	r3, #97	; 0x61
 80045e0:	2206      	movs	r2, #6
 80045e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f004 fef5 	bl	80093de <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460a:	d112      	bne.n	8004632 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	4611      	mov	r1, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f004 fee1 	bl	80093de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004628:	461a      	mov	r2, r3
 800462a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800462e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004630:	e24e      	b.n	8004ad0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4413      	add	r3, r2
 800463a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b01      	cmp	r3, #1
 8004646:	f040 80df 	bne.w	8004808 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d019      	beq.n	8004686 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	212c      	movs	r1, #44	; 0x2c
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	4413      	add	r3, r2
 800465e:	3348      	adds	r3, #72	; 0x48
 8004660:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	0159      	lsls	r1, r3, #5
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	440b      	add	r3, r1
 800466a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004674:	1ad2      	subs	r2, r2, r3
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	202c      	movs	r0, #44	; 0x2c
 800467c:	fb00 f303 	mul.w	r3, r0, r3
 8004680:	440b      	add	r3, r1
 8004682:	3350      	adds	r3, #80	; 0x50
 8004684:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	212c      	movs	r1, #44	; 0x2c
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	3361      	adds	r3, #97	; 0x61
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	212c      	movs	r1, #44	; 0x2c
 800469e:	fb01 f303 	mul.w	r3, r1, r3
 80046a2:	4413      	add	r3, r2
 80046a4:	335c      	adds	r3, #92	; 0x5c
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b6:	461a      	mov	r2, r3
 80046b8:	2301      	movs	r3, #1
 80046ba:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	212c      	movs	r1, #44	; 0x2c
 80046c2:	fb01 f303 	mul.w	r3, r1, r3
 80046c6:	4413      	add	r3, r2
 80046c8:	333f      	adds	r3, #63	; 0x3f
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	212c      	movs	r1, #44	; 0x2c
 80046d6:	fb01 f303 	mul.w	r3, r1, r3
 80046da:	4413      	add	r3, r2
 80046dc:	333f      	adds	r3, #63	; 0x3f
 80046de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d111      	bne.n	8004708 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f004 fe75 	bl	80093de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	461a      	mov	r2, r3
 8004702:	2310      	movs	r3, #16
 8004704:	6093      	str	r3, [r2, #8]
 8004706:	e03a      	b.n	800477e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	212c      	movs	r1, #44	; 0x2c
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	4413      	add	r3, r2
 8004714:	333f      	adds	r3, #63	; 0x3f
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d009      	beq.n	8004730 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	212c      	movs	r1, #44	; 0x2c
 8004722:	fb01 f303 	mul.w	r3, r1, r3
 8004726:	4413      	add	r3, r2
 8004728:	333f      	adds	r3, #63	; 0x3f
 800472a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800472c:	2b01      	cmp	r3, #1
 800472e:	d126      	bne.n	800477e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4413      	add	r3, r2
 8004738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	0151      	lsls	r1, r2, #5
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	440a      	add	r2, r1
 8004746:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800474a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800474e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	212c      	movs	r1, #44	; 0x2c
 8004756:	fb01 f303 	mul.w	r3, r1, r3
 800475a:	4413      	add	r3, r2
 800475c:	3360      	adds	r3, #96	; 0x60
 800475e:	2201      	movs	r2, #1
 8004760:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	b2d9      	uxtb	r1, r3
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	202c      	movs	r0, #44	; 0x2c
 800476c:	fb00 f303 	mul.w	r3, r0, r3
 8004770:	4413      	add	r3, r2
 8004772:	3360      	adds	r3, #96	; 0x60
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f007 f8d5 	bl	800b928 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d12b      	bne.n	80047de <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	212c      	movs	r1, #44	; 0x2c
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	4413      	add	r3, r2
 8004792:	3348      	adds	r3, #72	; 0x48
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	202c      	movs	r0, #44	; 0x2c
 800479c:	fb00 f202 	mul.w	r2, r0, r2
 80047a0:	440a      	add	r2, r1
 80047a2:	3240      	adds	r2, #64	; 0x40
 80047a4:	8812      	ldrh	r2, [r2, #0]
 80047a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 818e 	beq.w	8004ad0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	212c      	movs	r1, #44	; 0x2c
 80047ba:	fb01 f303 	mul.w	r3, r1, r3
 80047be:	4413      	add	r3, r2
 80047c0:	3354      	adds	r3, #84	; 0x54
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	f083 0301 	eor.w	r3, r3, #1
 80047c8:	b2d8      	uxtb	r0, r3
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	212c      	movs	r1, #44	; 0x2c
 80047d0:	fb01 f303 	mul.w	r3, r1, r3
 80047d4:	4413      	add	r3, r2
 80047d6:	3354      	adds	r3, #84	; 0x54
 80047d8:	4602      	mov	r2, r0
 80047da:	701a      	strb	r2, [r3, #0]
}
 80047dc:	e178      	b.n	8004ad0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	212c      	movs	r1, #44	; 0x2c
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	4413      	add	r3, r2
 80047ea:	3354      	adds	r3, #84	; 0x54
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	f083 0301 	eor.w	r3, r3, #1
 80047f2:	b2d8      	uxtb	r0, r3
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	212c      	movs	r1, #44	; 0x2c
 80047fa:	fb01 f303 	mul.w	r3, r1, r3
 80047fe:	4413      	add	r3, r2
 8004800:	3354      	adds	r3, #84	; 0x54
 8004802:	4602      	mov	r2, r0
 8004804:	701a      	strb	r2, [r3, #0]
}
 8004806:	e163      	b.n	8004ad0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b02      	cmp	r3, #2
 800481c:	f040 80f6 	bne.w	8004a0c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	212c      	movs	r1, #44	; 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	3361      	adds	r3, #97	; 0x61
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d109      	bne.n	8004848 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	212c      	movs	r1, #44	; 0x2c
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	4413      	add	r3, r2
 8004840:	3360      	adds	r3, #96	; 0x60
 8004842:	2201      	movs	r2, #1
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	e0c9      	b.n	80049dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	212c      	movs	r1, #44	; 0x2c
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	4413      	add	r3, r2
 8004854:	3361      	adds	r3, #97	; 0x61
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b05      	cmp	r3, #5
 800485a:	d109      	bne.n	8004870 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	212c      	movs	r1, #44	; 0x2c
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	4413      	add	r3, r2
 8004868:	3360      	adds	r3, #96	; 0x60
 800486a:	2205      	movs	r2, #5
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	e0b5      	b.n	80049dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	212c      	movs	r1, #44	; 0x2c
 8004876:	fb01 f303 	mul.w	r3, r1, r3
 800487a:	4413      	add	r3, r2
 800487c:	3361      	adds	r3, #97	; 0x61
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b06      	cmp	r3, #6
 8004882:	d009      	beq.n	8004898 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	212c      	movs	r1, #44	; 0x2c
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	4413      	add	r3, r2
 8004890:	3361      	adds	r3, #97	; 0x61
 8004892:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004894:	2b08      	cmp	r3, #8
 8004896:	d150      	bne.n	800493a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	212c      	movs	r1, #44	; 0x2c
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	4413      	add	r3, r2
 80048a4:	335c      	adds	r3, #92	; 0x5c
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	202c      	movs	r0, #44	; 0x2c
 80048b0:	fb00 f303 	mul.w	r3, r0, r3
 80048b4:	440b      	add	r3, r1
 80048b6:	335c      	adds	r3, #92	; 0x5c
 80048b8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	212c      	movs	r1, #44	; 0x2c
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	4413      	add	r3, r2
 80048c6:	335c      	adds	r3, #92	; 0x5c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d912      	bls.n	80048f4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	212c      	movs	r1, #44	; 0x2c
 80048d4:	fb01 f303 	mul.w	r3, r1, r3
 80048d8:	4413      	add	r3, r2
 80048da:	335c      	adds	r3, #92	; 0x5c
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	212c      	movs	r1, #44	; 0x2c
 80048e6:	fb01 f303 	mul.w	r3, r1, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	3360      	adds	r3, #96	; 0x60
 80048ee:	2204      	movs	r2, #4
 80048f0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048f2:	e073      	b.n	80049dc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	212c      	movs	r1, #44	; 0x2c
 80048fa:	fb01 f303 	mul.w	r3, r1, r3
 80048fe:	4413      	add	r3, r2
 8004900:	3360      	adds	r3, #96	; 0x60
 8004902:	2202      	movs	r2, #2
 8004904:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4413      	add	r3, r2
 800490e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800491c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004924:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4413      	add	r3, r2
 800492e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004932:	461a      	mov	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004938:	e050      	b.n	80049dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	212c      	movs	r1, #44	; 0x2c
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	4413      	add	r3, r2
 8004946:	3361      	adds	r3, #97	; 0x61
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b03      	cmp	r3, #3
 800494c:	d122      	bne.n	8004994 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	3360      	adds	r3, #96	; 0x60
 800495c:	2202      	movs	r2, #2
 800495e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4413      	add	r3, r2
 8004968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004976:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800497e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4413      	add	r3, r2
 8004988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800498c:	461a      	mov	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e023      	b.n	80049dc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	212c      	movs	r1, #44	; 0x2c
 800499a:	fb01 f303 	mul.w	r3, r1, r3
 800499e:	4413      	add	r3, r2
 80049a0:	3361      	adds	r3, #97	; 0x61
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b07      	cmp	r3, #7
 80049a6:	d119      	bne.n	80049dc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	212c      	movs	r1, #44	; 0x2c
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	4413      	add	r3, r2
 80049b4:	335c      	adds	r3, #92	; 0x5c
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	202c      	movs	r0, #44	; 0x2c
 80049c0:	fb00 f303 	mul.w	r3, r0, r3
 80049c4:	440b      	add	r3, r1
 80049c6:	335c      	adds	r3, #92	; 0x5c
 80049c8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	212c      	movs	r1, #44	; 0x2c
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	3360      	adds	r3, #96	; 0x60
 80049d8:	2204      	movs	r2, #4
 80049da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e8:	461a      	mov	r2, r3
 80049ea:	2302      	movs	r3, #2
 80049ec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	b2d9      	uxtb	r1, r3
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	202c      	movs	r0, #44	; 0x2c
 80049f8:	fb00 f303 	mul.w	r3, r0, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	3360      	adds	r3, #96	; 0x60
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f006 ff8f 	bl	800b928 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004a0a:	e061      	b.n	8004ad0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0310 	and.w	r3, r3, #16
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d156      	bne.n	8004ad0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	212c      	movs	r1, #44	; 0x2c
 8004a28:	fb01 f303 	mul.w	r3, r1, r3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	333f      	adds	r3, #63	; 0x3f
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d111      	bne.n	8004a5a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	212c      	movs	r1, #44	; 0x2c
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	335c      	adds	r3, #92	; 0x5c
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	4611      	mov	r1, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f004 fcc3 	bl	80093de <USB_HC_Halt>
 8004a58:	e031      	b.n	8004abe <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	212c      	movs	r1, #44	; 0x2c
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	4413      	add	r3, r2
 8004a66:	333f      	adds	r3, #63	; 0x3f
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	212c      	movs	r1, #44	; 0x2c
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	4413      	add	r3, r2
 8004a7a:	333f      	adds	r3, #63	; 0x3f
 8004a7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d11d      	bne.n	8004abe <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	212c      	movs	r1, #44	; 0x2c
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	335c      	adds	r3, #92	; 0x5c
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d110      	bne.n	8004abe <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	212c      	movs	r1, #44	; 0x2c
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3361      	adds	r3, #97	; 0x61
 8004aaa:	2203      	movs	r2, #3
 8004aac:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f004 fc90 	bl	80093de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aca:	461a      	mov	r2, r3
 8004acc:	2310      	movs	r3, #16
 8004ace:	6093      	str	r3, [r2, #8]
}
 8004ad0:	bf00      	nop
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d11a      	bne.n	8004b3e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b14:	461a      	mov	r2, r3
 8004b16:	2304      	movs	r3, #4
 8004b18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	212c      	movs	r1, #44	; 0x2c
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	4413      	add	r3, r2
 8004b26:	3361      	adds	r3, #97	; 0x61
 8004b28:	2206      	movs	r2, #6
 8004b2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	4611      	mov	r1, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f004 fc51 	bl	80093de <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004b3c:	e331      	b.n	80051a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d12e      	bne.n	8004bb2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b60:	461a      	mov	r2, r3
 8004b62:	2320      	movs	r3, #32
 8004b64:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	212c      	movs	r1, #44	; 0x2c
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	4413      	add	r3, r2
 8004b72:	333d      	adds	r3, #61	; 0x3d
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	f040 8313 	bne.w	80051a2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	212c      	movs	r1, #44	; 0x2c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	333d      	adds	r3, #61	; 0x3d
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	212c      	movs	r1, #44	; 0x2c
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	3360      	adds	r3, #96	; 0x60
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	4611      	mov	r1, r2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f004 fc17 	bl	80093de <USB_HC_Halt>
}
 8004bb0:	e2f7      	b.n	80051a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc8:	d112      	bne.n	8004bf0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bdc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	4611      	mov	r1, r2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f004 fbf8 	bl	80093de <USB_HC_Halt>
}
 8004bee:	e2d8      	b.n	80051a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d140      	bne.n	8004c88 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	335c      	adds	r3, #92	; 0x5c
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b40      	cmp	r3, #64	; 0x40
 8004c2c:	d111      	bne.n	8004c52 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	212c      	movs	r1, #44	; 0x2c
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	4413      	add	r3, r2
 8004c3a:	333d      	adds	r3, #61	; 0x3d
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	2340      	movs	r3, #64	; 0x40
 8004c50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5e:	461a      	mov	r2, r3
 8004c60:	2301      	movs	r3, #1
 8004c62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	212c      	movs	r1, #44	; 0x2c
 8004c6a:	fb01 f303 	mul.w	r3, r1, r3
 8004c6e:	4413      	add	r3, r2
 8004c70:	3361      	adds	r3, #97	; 0x61
 8004c72:	2201      	movs	r2, #1
 8004c74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f004 fbac 	bl	80093de <USB_HC_Halt>
}
 8004c86:	e28c      	b.n	80051a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	d12c      	bne.n	8004cf8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	212c      	movs	r1, #44	; 0x2c
 8004ca4:	fb01 f303 	mul.w	r3, r1, r3
 8004ca8:	4413      	add	r3, r2
 8004caa:	3361      	adds	r3, #97	; 0x61
 8004cac:	2204      	movs	r2, #4
 8004cae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	212c      	movs	r1, #44	; 0x2c
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	333d      	adds	r3, #61	; 0x3d
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	212c      	movs	r1, #44	; 0x2c
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	4413      	add	r3, r2
 8004cce:	335c      	adds	r3, #92	; 0x5c
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	4611      	mov	r1, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f004 fb7d 	bl	80093de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2340      	movs	r3, #64	; 0x40
 8004cf4:	6093      	str	r3, [r2, #8]
}
 8004cf6:	e254      	b.n	80051a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d11a      	bne.n	8004d44 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	212c      	movs	r1, #44	; 0x2c
 8004d26:	fb01 f303 	mul.w	r3, r1, r3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	3361      	adds	r3, #97	; 0x61
 8004d2e:	2205      	movs	r2, #5
 8004d30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f004 fb4e 	bl	80093de <USB_HC_Halt>
}
 8004d42:	e22e      	b.n	80051a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 0310 	and.w	r3, r3, #16
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d140      	bne.n	8004ddc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	212c      	movs	r1, #44	; 0x2c
 8004d60:	fb01 f303 	mul.w	r3, r1, r3
 8004d64:	4413      	add	r3, r2
 8004d66:	335c      	adds	r3, #92	; 0x5c
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	212c      	movs	r1, #44	; 0x2c
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	4413      	add	r3, r2
 8004d78:	3361      	adds	r3, #97	; 0x61
 8004d7a:	2203      	movs	r2, #3
 8004d7c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	212c      	movs	r1, #44	; 0x2c
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	4413      	add	r3, r2
 8004d8a:	333d      	adds	r3, #61	; 0x3d
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d112      	bne.n	8004db8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	212c      	movs	r1, #44	; 0x2c
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	333c      	adds	r3, #60	; 0x3c
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d108      	bne.n	8004db8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	212c      	movs	r1, #44	; 0x2c
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	4413      	add	r3, r2
 8004db2:	333d      	adds	r3, #61	; 0x3d
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f004 fb0b 	bl	80093de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2310      	movs	r3, #16
 8004dd8:	6093      	str	r3, [r2, #8]
}
 8004dda:	e1e2      	b.n	80051a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	2b80      	cmp	r3, #128	; 0x80
 8004df0:	d164      	bne.n	8004ebc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d111      	bne.n	8004e1e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	212c      	movs	r1, #44	; 0x2c
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	4413      	add	r3, r2
 8004e06:	3361      	adds	r3, #97	; 0x61
 8004e08:	2206      	movs	r2, #6
 8004e0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	4611      	mov	r1, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f004 fae1 	bl	80093de <USB_HC_Halt>
 8004e1c:	e044      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	212c      	movs	r1, #44	; 0x2c
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	4413      	add	r3, r2
 8004e2a:	335c      	adds	r3, #92	; 0x5c
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	202c      	movs	r0, #44	; 0x2c
 8004e36:	fb00 f303 	mul.w	r3, r0, r3
 8004e3a:	440b      	add	r3, r1
 8004e3c:	335c      	adds	r3, #92	; 0x5c
 8004e3e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	212c      	movs	r1, #44	; 0x2c
 8004e46:	fb01 f303 	mul.w	r3, r1, r3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	335c      	adds	r3, #92	; 0x5c
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d920      	bls.n	8004e96 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	212c      	movs	r1, #44	; 0x2c
 8004e5a:	fb01 f303 	mul.w	r3, r1, r3
 8004e5e:	4413      	add	r3, r2
 8004e60:	335c      	adds	r3, #92	; 0x5c
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	212c      	movs	r1, #44	; 0x2c
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	4413      	add	r3, r2
 8004e72:	3360      	adds	r3, #96	; 0x60
 8004e74:	2204      	movs	r2, #4
 8004e76:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	b2d9      	uxtb	r1, r3
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	202c      	movs	r0, #44	; 0x2c
 8004e82:	fb00 f303 	mul.w	r3, r0, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	3360      	adds	r3, #96	; 0x60
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f006 fd4a 	bl	800b928 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004e94:	e008      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	212c      	movs	r1, #44	; 0x2c
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3360      	adds	r3, #96	; 0x60
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	6093      	str	r3, [r2, #8]
}
 8004eba:	e172      	b.n	80051a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed2:	d11b      	bne.n	8004f0c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	212c      	movs	r1, #44	; 0x2c
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	4413      	add	r3, r2
 8004ee0:	3361      	adds	r3, #97	; 0x61
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f004 fa74 	bl	80093de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	461a      	mov	r2, r3
 8004f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f08:	6093      	str	r3, [r2, #8]
}
 8004f0a:	e14a      	b.n	80051a2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	f040 813f 	bne.w	80051a2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	212c      	movs	r1, #44	; 0x2c
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	3361      	adds	r3, #97	; 0x61
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d17d      	bne.n	8005034 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	212c      	movs	r1, #44	; 0x2c
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	3360      	adds	r3, #96	; 0x60
 8004f46:	2201      	movs	r2, #1
 8004f48:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	212c      	movs	r1, #44	; 0x2c
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	4413      	add	r3, r2
 8004f56:	333f      	adds	r3, #63	; 0x3f
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d00a      	beq.n	8004f74 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	212c      	movs	r1, #44	; 0x2c
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	4413      	add	r3, r2
 8004f6a:	333f      	adds	r3, #63	; 0x3f
 8004f6c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	f040 8100 	bne.w	8005174 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d113      	bne.n	8004fa4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	212c      	movs	r1, #44	; 0x2c
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	4413      	add	r3, r2
 8004f88:	3355      	adds	r3, #85	; 0x55
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	f083 0301 	eor.w	r3, r3, #1
 8004f90:	b2d8      	uxtb	r0, r3
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	212c      	movs	r1, #44	; 0x2c
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3355      	adds	r3, #85	; 0x55
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	f040 80e3 	bne.w	8005174 <HCD_HC_OUT_IRQHandler+0x69c>
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	212c      	movs	r1, #44	; 0x2c
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	4413      	add	r3, r2
 8004fba:	334c      	adds	r3, #76	; 0x4c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 80d8 	beq.w	8005174 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	212c      	movs	r1, #44	; 0x2c
 8004fca:	fb01 f303 	mul.w	r3, r1, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	334c      	adds	r3, #76	; 0x4c
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	202c      	movs	r0, #44	; 0x2c
 8004fda:	fb00 f202 	mul.w	r2, r0, r2
 8004fde:	440a      	add	r2, r1
 8004fe0:	3240      	adds	r2, #64	; 0x40
 8004fe2:	8812      	ldrh	r2, [r2, #0]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	202c      	movs	r0, #44	; 0x2c
 8004fee:	fb00 f202 	mul.w	r2, r0, r2
 8004ff2:	440a      	add	r2, r1
 8004ff4:	3240      	adds	r2, #64	; 0x40
 8004ff6:	8812      	ldrh	r2, [r2, #0]
 8004ff8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80b5 	beq.w	8005174 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	212c      	movs	r1, #44	; 0x2c
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	4413      	add	r3, r2
 8005016:	3355      	adds	r3, #85	; 0x55
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	f083 0301 	eor.w	r3, r3, #1
 800501e:	b2d8      	uxtb	r0, r3
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	212c      	movs	r1, #44	; 0x2c
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	4413      	add	r3, r2
 800502c:	3355      	adds	r3, #85	; 0x55
 800502e:	4602      	mov	r2, r0
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	e09f      	b.n	8005174 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	212c      	movs	r1, #44	; 0x2c
 800503a:	fb01 f303 	mul.w	r3, r1, r3
 800503e:	4413      	add	r3, r2
 8005040:	3361      	adds	r3, #97	; 0x61
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d109      	bne.n	800505c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	212c      	movs	r1, #44	; 0x2c
 800504e:	fb01 f303 	mul.w	r3, r1, r3
 8005052:	4413      	add	r3, r2
 8005054:	3360      	adds	r3, #96	; 0x60
 8005056:	2202      	movs	r2, #2
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e08b      	b.n	8005174 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	212c      	movs	r1, #44	; 0x2c
 8005062:	fb01 f303 	mul.w	r3, r1, r3
 8005066:	4413      	add	r3, r2
 8005068:	3361      	adds	r3, #97	; 0x61
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d109      	bne.n	8005084 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	212c      	movs	r1, #44	; 0x2c
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	4413      	add	r3, r2
 800507c:	3360      	adds	r3, #96	; 0x60
 800507e:	2202      	movs	r2, #2
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	e077      	b.n	8005174 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	212c      	movs	r1, #44	; 0x2c
 800508a:	fb01 f303 	mul.w	r3, r1, r3
 800508e:	4413      	add	r3, r2
 8005090:	3361      	adds	r3, #97	; 0x61
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b05      	cmp	r3, #5
 8005096:	d109      	bne.n	80050ac <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	212c      	movs	r1, #44	; 0x2c
 800509e:	fb01 f303 	mul.w	r3, r1, r3
 80050a2:	4413      	add	r3, r2
 80050a4:	3360      	adds	r3, #96	; 0x60
 80050a6:	2205      	movs	r2, #5
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	e063      	b.n	8005174 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	212c      	movs	r1, #44	; 0x2c
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	3361      	adds	r3, #97	; 0x61
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b06      	cmp	r3, #6
 80050be:	d009      	beq.n	80050d4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	212c      	movs	r1, #44	; 0x2c
 80050c6:	fb01 f303 	mul.w	r3, r1, r3
 80050ca:	4413      	add	r3, r2
 80050cc:	3361      	adds	r3, #97	; 0x61
 80050ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d14f      	bne.n	8005174 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	212c      	movs	r1, #44	; 0x2c
 80050da:	fb01 f303 	mul.w	r3, r1, r3
 80050de:	4413      	add	r3, r2
 80050e0:	335c      	adds	r3, #92	; 0x5c
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	202c      	movs	r0, #44	; 0x2c
 80050ec:	fb00 f303 	mul.w	r3, r0, r3
 80050f0:	440b      	add	r3, r1
 80050f2:	335c      	adds	r3, #92	; 0x5c
 80050f4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	212c      	movs	r1, #44	; 0x2c
 80050fc:	fb01 f303 	mul.w	r3, r1, r3
 8005100:	4413      	add	r3, r2
 8005102:	335c      	adds	r3, #92	; 0x5c
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d912      	bls.n	8005130 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	212c      	movs	r1, #44	; 0x2c
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	4413      	add	r3, r2
 8005116:	335c      	adds	r3, #92	; 0x5c
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	212c      	movs	r1, #44	; 0x2c
 8005122:	fb01 f303 	mul.w	r3, r1, r3
 8005126:	4413      	add	r3, r2
 8005128:	3360      	adds	r3, #96	; 0x60
 800512a:	2204      	movs	r2, #4
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	e021      	b.n	8005174 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	212c      	movs	r1, #44	; 0x2c
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	4413      	add	r3, r2
 800513c:	3360      	adds	r3, #96	; 0x60
 800513e:	2202      	movs	r2, #2
 8005140:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	4413      	add	r3, r2
 800514a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005158:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005160:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	461a      	mov	r2, r3
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005180:	461a      	mov	r2, r3
 8005182:	2302      	movs	r3, #2
 8005184:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	b2d9      	uxtb	r1, r3
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	202c      	movs	r0, #44	; 0x2c
 8005190:	fb00 f303 	mul.w	r3, r0, r3
 8005194:	4413      	add	r3, r2
 8005196:	3360      	adds	r3, #96	; 0x60
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f006 fbc3 	bl	800b928 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80051a2:	bf00      	nop
 80051a4:	3720      	adds	r7, #32
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b08a      	sub	sp, #40	; 0x28
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	0c5b      	lsrs	r3, r3, #17
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051de:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d004      	beq.n	80051f0 <HCD_RXQLVL_IRQHandler+0x46>
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	f000 80a9 	beq.w	8005340 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80051ee:	e0aa      	b.n	8005346 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 80a6 	beq.w	8005344 <HCD_RXQLVL_IRQHandler+0x19a>
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	212c      	movs	r1, #44	; 0x2c
 80051fe:	fb01 f303 	mul.w	r3, r1, r3
 8005202:	4413      	add	r3, r2
 8005204:	3344      	adds	r3, #68	; 0x44
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 809b 	beq.w	8005344 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	212c      	movs	r1, #44	; 0x2c
 8005214:	fb01 f303 	mul.w	r3, r1, r3
 8005218:	4413      	add	r3, r2
 800521a:	3350      	adds	r3, #80	; 0x50
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	441a      	add	r2, r3
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	202c      	movs	r0, #44	; 0x2c
 8005228:	fb00 f303 	mul.w	r3, r0, r3
 800522c:	440b      	add	r3, r1
 800522e:	334c      	adds	r3, #76	; 0x4c
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d87a      	bhi.n	800532c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	212c      	movs	r1, #44	; 0x2c
 8005240:	fb01 f303 	mul.w	r3, r1, r3
 8005244:	4413      	add	r3, r2
 8005246:	3344      	adds	r3, #68	; 0x44
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	b292      	uxth	r2, r2
 800524e:	4619      	mov	r1, r3
 8005250:	f003 fc1c 	bl	8008a8c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	212c      	movs	r1, #44	; 0x2c
 800525a:	fb01 f303 	mul.w	r3, r1, r3
 800525e:	4413      	add	r3, r2
 8005260:	3344      	adds	r3, #68	; 0x44
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	441a      	add	r2, r3
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	202c      	movs	r0, #44	; 0x2c
 800526e:	fb00 f303 	mul.w	r3, r0, r3
 8005272:	440b      	add	r3, r1
 8005274:	3344      	adds	r3, #68	; 0x44
 8005276:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	212c      	movs	r1, #44	; 0x2c
 800527e:	fb01 f303 	mul.w	r3, r1, r3
 8005282:	4413      	add	r3, r2
 8005284:	3350      	adds	r3, #80	; 0x50
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	441a      	add	r2, r3
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	202c      	movs	r0, #44	; 0x2c
 8005292:	fb00 f303 	mul.w	r3, r0, r3
 8005296:	440b      	add	r3, r1
 8005298:	3350      	adds	r3, #80	; 0x50
 800529a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	0cdb      	lsrs	r3, r3, #19
 80052ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052b0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	212c      	movs	r1, #44	; 0x2c
 80052b8:	fb01 f303 	mul.w	r3, r1, r3
 80052bc:	4413      	add	r3, r2
 80052be:	3340      	adds	r3, #64	; 0x40
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d13c      	bne.n	8005344 <HCD_RXQLVL_IRQHandler+0x19a>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d039      	beq.n	8005344 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052e6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ee:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fc:	461a      	mov	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	212c      	movs	r1, #44	; 0x2c
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	4413      	add	r3, r2
 800530e:	3354      	adds	r3, #84	; 0x54
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	f083 0301 	eor.w	r3, r3, #1
 8005316:	b2d8      	uxtb	r0, r3
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	212c      	movs	r1, #44	; 0x2c
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	3354      	adds	r3, #84	; 0x54
 8005326:	4602      	mov	r2, r0
 8005328:	701a      	strb	r2, [r3, #0]
      break;
 800532a:	e00b      	b.n	8005344 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	212c      	movs	r1, #44	; 0x2c
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	4413      	add	r3, r2
 8005338:	3360      	adds	r3, #96	; 0x60
 800533a:	2204      	movs	r2, #4
 800533c:	701a      	strb	r2, [r3, #0]
      break;
 800533e:	e001      	b.n	8005344 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005340:	bf00      	nop
 8005342:	e000      	b.n	8005346 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005344:	bf00      	nop
  }
}
 8005346:	bf00      	nop
 8005348:	3728      	adds	r7, #40	; 0x28
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b086      	sub	sp, #24
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800537a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b02      	cmp	r3, #2
 8005384:	d10b      	bne.n	800539e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b01      	cmp	r3, #1
 800538e:	d102      	bne.n	8005396 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f006 faad 	bl	800b8f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f043 0302 	orr.w	r3, r3, #2
 800539c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d132      	bne.n	800540e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f043 0308 	orr.w	r3, r3, #8
 80053ae:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d126      	bne.n	8005408 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d113      	bne.n	80053ea <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80053c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053cc:	d106      	bne.n	80053dc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2102      	movs	r1, #2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f003 fcc7 	bl	8008d68 <USB_InitFSLSPClkSel>
 80053da:	e011      	b.n	8005400 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2101      	movs	r1, #1
 80053e2:	4618      	mov	r0, r3
 80053e4:	f003 fcc0 	bl	8008d68 <USB_InitFSLSPClkSel>
 80053e8:	e00a      	b.n	8005400 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d106      	bne.n	8005400 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f8:	461a      	mov	r2, r3
 80053fa:	f64e 2360 	movw	r3, #60000	; 0xea60
 80053fe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f006 fa9f 	bl	800b944 <HAL_HCD_PortEnabled_Callback>
 8005406:	e002      	b.n	800540e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f006 faa9 	bl	800b960 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b20      	cmp	r3, #32
 8005416:	d103      	bne.n	8005420 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f043 0320 	orr.w	r3, r3, #32
 800541e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005426:	461a      	mov	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	6013      	str	r3, [r2, #0]
}
 800542c:	bf00      	nop
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e12b      	b.n	800569e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fd fdaa 	bl	8002fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2224      	movs	r2, #36	; 0x24
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0201 	bic.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005486:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005496:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005498:	f002 f872 	bl	8007580 <HAL_RCC_GetPCLK1Freq>
 800549c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	4a81      	ldr	r2, [pc, #516]	; (80056a8 <HAL_I2C_Init+0x274>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d807      	bhi.n	80054b8 <HAL_I2C_Init+0x84>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4a80      	ldr	r2, [pc, #512]	; (80056ac <HAL_I2C_Init+0x278>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	bf94      	ite	ls
 80054b0:	2301      	movls	r3, #1
 80054b2:	2300      	movhi	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	e006      	b.n	80054c6 <HAL_I2C_Init+0x92>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a7d      	ldr	r2, [pc, #500]	; (80056b0 <HAL_I2C_Init+0x27c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	bf94      	ite	ls
 80054c0:	2301      	movls	r3, #1
 80054c2:	2300      	movhi	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e0e7      	b.n	800569e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4a78      	ldr	r2, [pc, #480]	; (80056b4 <HAL_I2C_Init+0x280>)
 80054d2:	fba2 2303 	umull	r2, r3, r2, r3
 80054d6:	0c9b      	lsrs	r3, r3, #18
 80054d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	4a6a      	ldr	r2, [pc, #424]	; (80056a8 <HAL_I2C_Init+0x274>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d802      	bhi.n	8005508 <HAL_I2C_Init+0xd4>
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	3301      	adds	r3, #1
 8005506:	e009      	b.n	800551c <HAL_I2C_Init+0xe8>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800550e:	fb02 f303 	mul.w	r3, r2, r3
 8005512:	4a69      	ldr	r2, [pc, #420]	; (80056b8 <HAL_I2C_Init+0x284>)
 8005514:	fba2 2303 	umull	r2, r3, r2, r3
 8005518:	099b      	lsrs	r3, r3, #6
 800551a:	3301      	adds	r3, #1
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	430b      	orrs	r3, r1
 8005522:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800552e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	495c      	ldr	r1, [pc, #368]	; (80056a8 <HAL_I2C_Init+0x274>)
 8005538:	428b      	cmp	r3, r1
 800553a:	d819      	bhi.n	8005570 <HAL_I2C_Init+0x13c>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	1e59      	subs	r1, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	fbb1 f3f3 	udiv	r3, r1, r3
 800554a:	1c59      	adds	r1, r3, #1
 800554c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005550:	400b      	ands	r3, r1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <HAL_I2C_Init+0x138>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1e59      	subs	r1, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	fbb1 f3f3 	udiv	r3, r1, r3
 8005564:	3301      	adds	r3, #1
 8005566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556a:	e051      	b.n	8005610 <HAL_I2C_Init+0x1dc>
 800556c:	2304      	movs	r3, #4
 800556e:	e04f      	b.n	8005610 <HAL_I2C_Init+0x1dc>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d111      	bne.n	800559c <HAL_I2C_Init+0x168>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	1e58      	subs	r0, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6859      	ldr	r1, [r3, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	440b      	add	r3, r1
 8005586:	fbb0 f3f3 	udiv	r3, r0, r3
 800558a:	3301      	adds	r3, #1
 800558c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005590:	2b00      	cmp	r3, #0
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	e012      	b.n	80055c2 <HAL_I2C_Init+0x18e>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	1e58      	subs	r0, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6859      	ldr	r1, [r3, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	0099      	lsls	r1, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80055b2:	3301      	adds	r3, #1
 80055b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bf0c      	ite	eq
 80055bc:	2301      	moveq	r3, #1
 80055be:	2300      	movne	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <HAL_I2C_Init+0x196>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e022      	b.n	8005610 <HAL_I2C_Init+0x1dc>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10e      	bne.n	80055f0 <HAL_I2C_Init+0x1bc>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1e58      	subs	r0, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6859      	ldr	r1, [r3, #4]
 80055da:	460b      	mov	r3, r1
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	440b      	add	r3, r1
 80055e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80055e4:	3301      	adds	r3, #1
 80055e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ee:	e00f      	b.n	8005610 <HAL_I2C_Init+0x1dc>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	1e58      	subs	r0, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6859      	ldr	r1, [r3, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	0099      	lsls	r1, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	fbb0 f3f3 	udiv	r3, r0, r3
 8005606:	3301      	adds	r3, #1
 8005608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800560c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	6809      	ldr	r1, [r1, #0]
 8005614:	4313      	orrs	r3, r2
 8005616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69da      	ldr	r2, [r3, #28]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800563e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6911      	ldr	r1, [r2, #16]
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	68d2      	ldr	r2, [r2, #12]
 800564a:	4311      	orrs	r1, r2
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	430b      	orrs	r3, r1
 8005652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695a      	ldr	r2, [r3, #20]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	000186a0 	.word	0x000186a0
 80056ac:	001e847f 	.word	0x001e847f
 80056b0:	003d08ff 	.word	0x003d08ff
 80056b4:	431bde83 	.word	0x431bde83
 80056b8:	10624dd3 	.word	0x10624dd3

080056bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	461a      	mov	r2, r3
 80056c8:	460b      	mov	r3, r1
 80056ca:	817b      	strh	r3, [r7, #10]
 80056cc:	4613      	mov	r3, r2
 80056ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056d0:	f7fd ff34 	bl	800353c <HAL_GetTick>
 80056d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b20      	cmp	r3, #32
 80056e0:	f040 80e0 	bne.w	80058a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	2319      	movs	r3, #25
 80056ea:	2201      	movs	r2, #1
 80056ec:	4970      	ldr	r1, [pc, #448]	; (80058b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fc58 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
 80056fc:	e0d3      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_I2C_Master_Transmit+0x50>
 8005708:	2302      	movs	r3, #2
 800570a:	e0cc      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1ea>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	d007      	beq.n	8005732 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005740:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2221      	movs	r2, #33	; 0x21
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2210      	movs	r2, #16
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	893a      	ldrh	r2, [r7, #8]
 8005762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4a50      	ldr	r2, [pc, #320]	; (80058b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005774:	8979      	ldrh	r1, [r7, #10]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	6a3a      	ldr	r2, [r7, #32]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fac2 	bl	8005d04 <I2C_MasterRequestWrite>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e08d      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578a:	2300      	movs	r3, #0
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80057a0:	e066      	b.n	8005870 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	6a39      	ldr	r1, [r7, #32]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fcd2 	bl	8006150 <I2C_WaitOnTXEFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d107      	bne.n	80057ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e06b      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	781a      	ldrb	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d11b      	bne.n	8005844 <HAL_I2C_Master_Transmit+0x188>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005810:	2b00      	cmp	r3, #0
 8005812:	d017      	beq.n	8005844 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	781a      	ldrb	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	6a39      	ldr	r1, [r7, #32]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fcc2 	bl	80061d2 <I2C_WaitOnBTFFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	2b04      	cmp	r3, #4
 800585a:	d107      	bne.n	800586c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e01a      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005874:	2b00      	cmp	r3, #0
 8005876:	d194      	bne.n	80057a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	00100002 	.word	0x00100002
 80058b4:	ffff0000 	.word	0xffff0000

080058b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08c      	sub	sp, #48	; 0x30
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	607a      	str	r2, [r7, #4]
 80058c2:	461a      	mov	r2, r3
 80058c4:	460b      	mov	r3, r1
 80058c6:	817b      	strh	r3, [r7, #10]
 80058c8:	4613      	mov	r3, r2
 80058ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058cc:	f7fd fe36 	bl	800353c <HAL_GetTick>
 80058d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b20      	cmp	r3, #32
 80058dc:	f040 820b 	bne.w	8005cf6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	2319      	movs	r3, #25
 80058e6:	2201      	movs	r2, #1
 80058e8:	497c      	ldr	r1, [pc, #496]	; (8005adc <HAL_I2C_Master_Receive+0x224>)
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fb5a 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80058f6:	2302      	movs	r3, #2
 80058f8:	e1fe      	b.n	8005cf8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_I2C_Master_Receive+0x50>
 8005904:	2302      	movs	r3, #2
 8005906:	e1f7      	b.n	8005cf8 <HAL_I2C_Master_Receive+0x440>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b01      	cmp	r3, #1
 800591c:	d007      	beq.n	800592e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0201 	orr.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800593c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2222      	movs	r2, #34	; 0x22
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2210      	movs	r2, #16
 800594a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	893a      	ldrh	r2, [r7, #8]
 800595e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4a5c      	ldr	r2, [pc, #368]	; (8005ae0 <HAL_I2C_Master_Receive+0x228>)
 800596e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005970:	8979      	ldrh	r1, [r7, #10]
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fa46 	bl	8005e08 <I2C_MasterRequestRead>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e1b8      	b.n	8005cf8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598a:	2b00      	cmp	r3, #0
 800598c:	d113      	bne.n	80059b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800598e:	2300      	movs	r3, #0
 8005990:	623b      	str	r3, [r7, #32]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	623b      	str	r3, [r7, #32]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	623b      	str	r3, [r7, #32]
 80059a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	e18c      	b.n	8005cd0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d11b      	bne.n	80059f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	61fb      	str	r3, [r7, #28]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e16c      	b.n	8005cd0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d11b      	bne.n	8005a36 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	e14c      	b.n	8005cd0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a5c:	e138      	b.n	8005cd0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	f200 80f1 	bhi.w	8005c4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d123      	bne.n	8005ab8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fbed 	bl	8006254 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e139      	b.n	8005cf8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ab6:	e10b      	b.n	8005cd0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d14e      	bne.n	8005b5e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4906      	ldr	r1, [pc, #24]	; (8005ae4 <HAL_I2C_Master_Receive+0x22c>)
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fa6a 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e10e      	b.n	8005cf8 <HAL_I2C_Master_Receive+0x440>
 8005ada:	bf00      	nop
 8005adc:	00100002 	.word	0x00100002
 8005ae0:	ffff0000 	.word	0xffff0000
 8005ae4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b5c:	e0b8      	b.n	8005cd0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	2200      	movs	r2, #0
 8005b66:	4966      	ldr	r1, [pc, #408]	; (8005d00 <HAL_I2C_Master_Receive+0x448>)
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 fa1b 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e0bf      	b.n	8005cf8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	494f      	ldr	r1, [pc, #316]	; (8005d00 <HAL_I2C_Master_Receive+0x448>)
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 f9ed 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e091      	b.n	8005cf8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c48:	e042      	b.n	8005cd0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fb00 	bl	8006254 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e04c      	b.n	8005cf8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d118      	bne.n	8005cd0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f47f aec2 	bne.w	8005a5e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e000      	b.n	8005cf8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005cf6:	2302      	movs	r3, #2
  }
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3728      	adds	r7, #40	; 0x28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	00010004 	.word	0x00010004

08005d04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	460b      	mov	r3, r1
 8005d12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d006      	beq.n	8005d2e <I2C_MasterRequestWrite+0x2a>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d003      	beq.n	8005d2e <I2C_MasterRequestWrite+0x2a>
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d2c:	d108      	bne.n	8005d40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e00b      	b.n	8005d58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	2b12      	cmp	r3, #18
 8005d46:	d107      	bne.n	8005d58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f91d 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00d      	beq.n	8005d8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7e:	d103      	bne.n	8005d88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e035      	b.n	8005df8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d94:	d108      	bne.n	8005da8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d96:	897b      	ldrh	r3, [r7, #10]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005da4:	611a      	str	r2, [r3, #16]
 8005da6:	e01b      	b.n	8005de0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005da8:	897b      	ldrh	r3, [r7, #10]
 8005daa:	11db      	asrs	r3, r3, #7
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0306 	and.w	r3, r3, #6
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f063 030f 	orn	r3, r3, #15
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	490e      	ldr	r1, [pc, #56]	; (8005e00 <I2C_MasterRequestWrite+0xfc>)
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f943 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e010      	b.n	8005df8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dd6:	897b      	ldrh	r3, [r7, #10]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4907      	ldr	r1, [pc, #28]	; (8005e04 <I2C_MasterRequestWrite+0x100>)
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f933 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	00010008 	.word	0x00010008
 8005e04:	00010002 	.word	0x00010002

08005e08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	460b      	mov	r3, r1
 8005e16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d006      	beq.n	8005e42 <I2C_MasterRequestRead+0x3a>
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d003      	beq.n	8005e42 <I2C_MasterRequestRead+0x3a>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e40:	d108      	bne.n	8005e54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	e00b      	b.n	8005e6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	2b11      	cmp	r3, #17
 8005e5a:	d107      	bne.n	8005e6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f893 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00d      	beq.n	8005ea0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e92:	d103      	bne.n	8005e9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e079      	b.n	8005f94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ea8:	d108      	bne.n	8005ebc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005eaa:	897b      	ldrh	r3, [r7, #10]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	f043 0301 	orr.w	r3, r3, #1
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	611a      	str	r2, [r3, #16]
 8005eba:	e05f      	b.n	8005f7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ebc:	897b      	ldrh	r3, [r7, #10]
 8005ebe:	11db      	asrs	r3, r3, #7
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	f003 0306 	and.w	r3, r3, #6
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f063 030f 	orn	r3, r3, #15
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4930      	ldr	r1, [pc, #192]	; (8005f9c <I2C_MasterRequestRead+0x194>)
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f8b9 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e054      	b.n	8005f94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005eea:	897b      	ldrh	r3, [r7, #10]
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	4929      	ldr	r1, [pc, #164]	; (8005fa0 <I2C_MasterRequestRead+0x198>)
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 f8a9 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e044      	b.n	8005f94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f831 	bl	8005fa4 <I2C_WaitOnFlagUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00d      	beq.n	8005f64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f56:	d103      	bne.n	8005f60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e017      	b.n	8005f94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005f64:	897b      	ldrh	r3, [r7, #10]
 8005f66:	11db      	asrs	r3, r3, #7
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	f003 0306 	and.w	r3, r3, #6
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f063 030e 	orn	r3, r3, #14
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4907      	ldr	r1, [pc, #28]	; (8005fa0 <I2C_MasterRequestRead+0x198>)
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f865 	bl	8006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	00010008 	.word	0x00010008
 8005fa0:	00010002 	.word	0x00010002

08005fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fb4:	e025      	b.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d021      	beq.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7fd fabd 	bl	800353c <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d116      	bne.n	8006002 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	f043 0220 	orr.w	r2, r3, #32
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e023      	b.n	800604a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	0c1b      	lsrs	r3, r3, #16
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10d      	bne.n	8006028 <I2C_WaitOnFlagUntilTimeout+0x84>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	43da      	mvns	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4013      	ands	r3, r2
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	bf0c      	ite	eq
 800601e:	2301      	moveq	r3, #1
 8006020:	2300      	movne	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	461a      	mov	r2, r3
 8006026:	e00c      	b.n	8006042 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	43da      	mvns	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4013      	ands	r3, r2
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	bf0c      	ite	eq
 800603a:	2301      	moveq	r3, #1
 800603c:	2300      	movne	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	429a      	cmp	r2, r3
 8006046:	d0b6      	beq.n	8005fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006060:	e051      	b.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800606c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006070:	d123      	bne.n	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006080:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800608a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f043 0204 	orr.w	r2, r3, #4
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e046      	b.n	8006148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d021      	beq.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c2:	f7fd fa3b 	bl	800353c <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d302      	bcc.n	80060d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d116      	bne.n	8006106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e020      	b.n	8006148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	0c1b      	lsrs	r3, r3, #16
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10c      	bne.n	800612a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	43da      	mvns	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4013      	ands	r3, r2
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf14      	ite	ne
 8006122:	2301      	movne	r3, #1
 8006124:	2300      	moveq	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	e00b      	b.n	8006142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	43da      	mvns	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	4013      	ands	r3, r2
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	bf14      	ite	ne
 800613c:	2301      	movne	r3, #1
 800613e:	2300      	moveq	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d18d      	bne.n	8006062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800615c:	e02d      	b.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f8ce 	bl	8006300 <I2C_IsAcknowledgeFailed>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e02d      	b.n	80061ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d021      	beq.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006176:	f7fd f9e1 	bl	800353c <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	429a      	cmp	r2, r3
 8006184:	d302      	bcc.n	800618c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d116      	bne.n	80061ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e007      	b.n	80061ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c4:	2b80      	cmp	r3, #128	; 0x80
 80061c6:	d1ca      	bne.n	800615e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061de:	e02d      	b.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f88d 	bl	8006300 <I2C_IsAcknowledgeFailed>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e02d      	b.n	800624c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d021      	beq.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f8:	f7fd f9a0 	bl	800353c <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	d302      	bcc.n	800620e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d116      	bne.n	800623c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	f043 0220 	orr.w	r2, r3, #32
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e007      	b.n	800624c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b04      	cmp	r3, #4
 8006248:	d1ca      	bne.n	80061e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006260:	e042      	b.n	80062e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b10      	cmp	r3, #16
 800626e:	d119      	bne.n	80062a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0210 	mvn.w	r2, #16
 8006278:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e029      	b.n	80062f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062a4:	f7fd f94a 	bl	800353c <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d302      	bcc.n	80062ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d116      	bne.n	80062e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	f043 0220 	orr.w	r2, r3, #32
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e007      	b.n	80062f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d1b5      	bne.n	8006262 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006316:	d11b      	bne.n	8006350 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006320:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	f043 0204 	orr.w	r2, r3, #4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e128      	b.n	80065c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a90      	ldr	r2, [pc, #576]	; (80065cc <HAL_I2S_Init+0x26c>)
 800638a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7fc fe59 	bl	8003044 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2202      	movs	r2, #2
 8006396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6812      	ldr	r2, [r2, #0]
 80063a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80063a8:	f023 030f 	bic.w	r3, r3, #15
 80063ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2202      	movs	r2, #2
 80063b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d060      	beq.n	8006480 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d102      	bne.n	80063cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80063c6:	2310      	movs	r3, #16
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	e001      	b.n	80063d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80063cc:	2320      	movs	r3, #32
 80063ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d802      	bhi.n	80063de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80063de:	2001      	movs	r0, #1
 80063e0:	f001 f9e6 	bl	80077b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80063e4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ee:	d125      	bne.n	800643c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d010      	beq.n	800641a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8006402:	4613      	mov	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	461a      	mov	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	fbb2 f3f3 	udiv	r3, r2, r3
 8006414:	3305      	adds	r3, #5
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	e01f      	b.n	800645a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	00db      	lsls	r3, r3, #3
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	fbb2 f2f3 	udiv	r2, r2, r3
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	461a      	mov	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	fbb2 f3f3 	udiv	r3, r2, r3
 8006436:	3305      	adds	r3, #5
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	e00e      	b.n	800645a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	fbb2 f2f3 	udiv	r2, r2, r3
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	461a      	mov	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	fbb2 f3f3 	udiv	r3, r2, r3
 8006456:	3305      	adds	r3, #5
 8006458:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	4a5c      	ldr	r2, [pc, #368]	; (80065d0 <HAL_I2S_Init+0x270>)
 800645e:	fba2 2303 	umull	r2, r3, r2, r3
 8006462:	08db      	lsrs	r3, r3, #3
 8006464:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	085b      	lsrs	r3, r3, #1
 8006476:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	021b      	lsls	r3, r3, #8
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	e003      	b.n	8006488 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006480:	2302      	movs	r3, #2
 8006482:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d902      	bls.n	8006494 <HAL_I2S_Init+0x134>
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2bff      	cmp	r3, #255	; 0xff
 8006492:	d907      	bls.n	80064a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006498:	f043 0210 	orr.w	r2, r3, #16
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e08f      	b.n	80065c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	ea42 0103 	orr.w	r1, r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80064c2:	f023 030f 	bic.w	r3, r3, #15
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6851      	ldr	r1, [r2, #4]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6892      	ldr	r2, [r2, #8]
 80064ce:	4311      	orrs	r1, r2
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	68d2      	ldr	r2, [r2, #12]
 80064d4:	4311      	orrs	r1, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6992      	ldr	r2, [r2, #24]
 80064da:	430a      	orrs	r2, r1
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d161      	bne.n	80065b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a38      	ldr	r2, [pc, #224]	; (80065d4 <HAL_I2S_Init+0x274>)
 80064f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a37      	ldr	r2, [pc, #220]	; (80065d8 <HAL_I2S_Init+0x278>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d101      	bne.n	8006504 <HAL_I2S_Init+0x1a4>
 8006500:	4b36      	ldr	r3, [pc, #216]	; (80065dc <HAL_I2S_Init+0x27c>)
 8006502:	e001      	b.n	8006508 <HAL_I2S_Init+0x1a8>
 8006504:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6812      	ldr	r2, [r2, #0]
 800650e:	4932      	ldr	r1, [pc, #200]	; (80065d8 <HAL_I2S_Init+0x278>)
 8006510:	428a      	cmp	r2, r1
 8006512:	d101      	bne.n	8006518 <HAL_I2S_Init+0x1b8>
 8006514:	4a31      	ldr	r2, [pc, #196]	; (80065dc <HAL_I2S_Init+0x27c>)
 8006516:	e001      	b.n	800651c <HAL_I2S_Init+0x1bc>
 8006518:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800651c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006520:	f023 030f 	bic.w	r3, r3, #15
 8006524:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a2b      	ldr	r2, [pc, #172]	; (80065d8 <HAL_I2S_Init+0x278>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d101      	bne.n	8006534 <HAL_I2S_Init+0x1d4>
 8006530:	4b2a      	ldr	r3, [pc, #168]	; (80065dc <HAL_I2S_Init+0x27c>)
 8006532:	e001      	b.n	8006538 <HAL_I2S_Init+0x1d8>
 8006534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006538:	2202      	movs	r2, #2
 800653a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a25      	ldr	r2, [pc, #148]	; (80065d8 <HAL_I2S_Init+0x278>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d101      	bne.n	800654a <HAL_I2S_Init+0x1ea>
 8006546:	4b25      	ldr	r3, [pc, #148]	; (80065dc <HAL_I2S_Init+0x27c>)
 8006548:	e001      	b.n	800654e <HAL_I2S_Init+0x1ee>
 800654a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800655a:	d003      	beq.n	8006564 <HAL_I2S_Init+0x204>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d103      	bne.n	800656c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	e001      	b.n	8006570 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800656c:	2300      	movs	r3, #0
 800656e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800657a:	4313      	orrs	r3, r2
 800657c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006584:	4313      	orrs	r3, r2
 8006586:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800658e:	4313      	orrs	r3, r2
 8006590:	b29a      	uxth	r2, r3
 8006592:	897b      	ldrh	r3, [r7, #10]
 8006594:	4313      	orrs	r3, r2
 8006596:	b29b      	uxth	r3, r3
 8006598:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800659c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a0d      	ldr	r2, [pc, #52]	; (80065d8 <HAL_I2S_Init+0x278>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d101      	bne.n	80065ac <HAL_I2S_Init+0x24c>
 80065a8:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <HAL_I2S_Init+0x27c>)
 80065aa:	e001      	b.n	80065b0 <HAL_I2S_Init+0x250>
 80065ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065b0:	897a      	ldrh	r2, [r7, #10]
 80065b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3720      	adds	r7, #32
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	080066d7 	.word	0x080066d7
 80065d0:	cccccccd 	.word	0xcccccccd
 80065d4:	080067ed 	.word	0x080067ed
 80065d8:	40003800 	.word	0x40003800
 80065dc:	40003400 	.word	0x40003400

080065e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	881a      	ldrh	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	1c9a      	adds	r2, r3, #2
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10e      	bne.n	8006670 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006660:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff ffb8 	bl	80065e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	b292      	uxth	r2, r2
 800668c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	1c9a      	adds	r2, r3, #2
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10e      	bne.n	80066ce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff ff93 	bl	80065f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d13a      	bne.n	8006768 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d109      	bne.n	8006710 <I2S_IRQHandler+0x3a>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d102      	bne.n	8006710 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7ff ffb4 	bl	8006678 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006716:	2b40      	cmp	r3, #64	; 0x40
 8006718:	d126      	bne.n	8006768 <I2S_IRQHandler+0x92>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b20      	cmp	r3, #32
 8006726:	d11f      	bne.n	8006768 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006736:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006738:	2300      	movs	r3, #0
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675a:	f043 0202 	orr.w	r2, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff ff50 	bl	8006608 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b03      	cmp	r3, #3
 8006772:	d136      	bne.n	80067e2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b02      	cmp	r3, #2
 800677c:	d109      	bne.n	8006792 <I2S_IRQHandler+0xbc>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006788:	2b80      	cmp	r3, #128	; 0x80
 800678a:	d102      	bne.n	8006792 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff ff45 	bl	800661c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b08      	cmp	r3, #8
 800679a:	d122      	bne.n	80067e2 <I2S_IRQHandler+0x10c>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	d11b      	bne.n	80067e2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067b8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d4:	f043 0204 	orr.w	r2, r3, #4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff ff13 	bl	8006608 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067e2:	bf00      	nop
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a92      	ldr	r2, [pc, #584]	; (8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d101      	bne.n	800680a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006806:	4b92      	ldr	r3, [pc, #584]	; (8006a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006808:	e001      	b.n	800680e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800680a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a8b      	ldr	r2, [pc, #556]	; (8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d101      	bne.n	8006828 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006824:	4b8a      	ldr	r3, [pc, #552]	; (8006a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006826:	e001      	b.n	800682c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006828:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006838:	d004      	beq.n	8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	f040 8099 	bne.w	8006976 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b02      	cmp	r3, #2
 800684c:	d107      	bne.n	800685e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f925 	bl	8006aa8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b01      	cmp	r3, #1
 8006866:	d107      	bne.n	8006878 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f9c8 	bl	8006c08 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d13a      	bne.n	80068f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b00      	cmp	r3, #0
 800688a:	d035      	beq.n	80068f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a6e      	ldr	r2, [pc, #440]	; (8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d101      	bne.n	800689a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006896:	4b6e      	ldr	r3, [pc, #440]	; (8006a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006898:	e001      	b.n	800689e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800689a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4969      	ldr	r1, [pc, #420]	; (8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068a6:	428b      	cmp	r3, r1
 80068a8:	d101      	bne.n	80068ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80068aa:	4b69      	ldr	r3, [pc, #420]	; (8006a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068ac:	e001      	b.n	80068b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80068ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ea:	f043 0202 	orr.w	r2, r3, #2
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff fe88 	bl	8006608 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	2b08      	cmp	r3, #8
 8006900:	f040 80c3 	bne.w	8006a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80bd 	beq.w	8006a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800691e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a49      	ldr	r2, [pc, #292]	; (8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d101      	bne.n	800692e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800692a:	4b49      	ldr	r3, [pc, #292]	; (8006a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800692c:	e001      	b.n	8006932 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800692e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4944      	ldr	r1, [pc, #272]	; (8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800693a:	428b      	cmp	r3, r1
 800693c:	d101      	bne.n	8006942 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800693e:	4b44      	ldr	r3, [pc, #272]	; (8006a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006940:	e001      	b.n	8006946 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006946:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800694a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800694c:	2300      	movs	r3, #0
 800694e:	60bb      	str	r3, [r7, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	60bb      	str	r3, [r7, #8]
 8006958:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006966:	f043 0204 	orr.w	r2, r3, #4
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff fe4a 	bl	8006608 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006974:	e089      	b.n	8006a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b02      	cmp	r3, #2
 800697e:	d107      	bne.n	8006990 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f8be 	bl	8006b0c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b01      	cmp	r3, #1
 8006998:	d107      	bne.n	80069aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f8fd 	bl	8006ba4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b0:	2b40      	cmp	r3, #64	; 0x40
 80069b2:	d12f      	bne.n	8006a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d02a      	beq.n	8006a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1e      	ldr	r2, [pc, #120]	; (8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d101      	bne.n	80069dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80069d8:	4b1d      	ldr	r3, [pc, #116]	; (8006a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069da:	e001      	b.n	80069e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80069dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4919      	ldr	r1, [pc, #100]	; (8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069e8:	428b      	cmp	r3, r1
 80069ea:	d101      	bne.n	80069f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80069ec:	4b18      	ldr	r3, [pc, #96]	; (8006a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069ee:	e001      	b.n	80069f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80069f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a06:	f043 0202 	orr.w	r2, r3, #2
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff fdfa 	bl	8006608 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d136      	bne.n	8006a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d031      	beq.n	8006a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a07      	ldr	r2, [pc, #28]	; (8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d101      	bne.n	8006a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006a32:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a34:	e001      	b.n	8006a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006a36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4902      	ldr	r1, [pc, #8]	; (8006a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a42:	428b      	cmp	r3, r1
 8006a44:	d106      	bne.n	8006a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006a46:	4b02      	ldr	r3, [pc, #8]	; (8006a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a48:	e006      	b.n	8006a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006a4a:	bf00      	nop
 8006a4c:	40003800 	.word	0x40003800
 8006a50:	40003400 	.word	0x40003400
 8006a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a5c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a6c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7a:	f043 0204 	orr.w	r2, r3, #4
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff fdc0 	bl	8006608 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a88:	e000      	b.n	8006a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a8a:	bf00      	nop
}
 8006a8c:	bf00      	nop
 8006a8e:	3720      	adds	r7, #32
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	1c99      	adds	r1, r3, #2
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6251      	str	r1, [r2, #36]	; 0x24
 8006aba:	881a      	ldrh	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d113      	bne.n	8006b02 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ae8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d106      	bne.n	8006b02 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff ffc9 	bl	8006a94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b02:	bf00      	nop
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	1c99      	adds	r1, r3, #2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6251      	str	r1, [r2, #36]	; 0x24
 8006b1e:	8819      	ldrh	r1, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <I2SEx_TxISR_I2SExt+0x90>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d101      	bne.n	8006b2e <I2SEx_TxISR_I2SExt+0x22>
 8006b2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ba0 <I2SEx_TxISR_I2SExt+0x94>)
 8006b2c:	e001      	b.n	8006b32 <I2SEx_TxISR_I2SExt+0x26>
 8006b2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b32:	460a      	mov	r2, r1
 8006b34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d121      	bne.n	8006b92 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a12      	ldr	r2, [pc, #72]	; (8006b9c <I2SEx_TxISR_I2SExt+0x90>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d101      	bne.n	8006b5c <I2SEx_TxISR_I2SExt+0x50>
 8006b58:	4b11      	ldr	r3, [pc, #68]	; (8006ba0 <I2SEx_TxISR_I2SExt+0x94>)
 8006b5a:	e001      	b.n	8006b60 <I2SEx_TxISR_I2SExt+0x54>
 8006b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	490d      	ldr	r1, [pc, #52]	; (8006b9c <I2SEx_TxISR_I2SExt+0x90>)
 8006b68:	428b      	cmp	r3, r1
 8006b6a:	d101      	bne.n	8006b70 <I2SEx_TxISR_I2SExt+0x64>
 8006b6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <I2SEx_TxISR_I2SExt+0x94>)
 8006b6e:	e001      	b.n	8006b74 <I2SEx_TxISR_I2SExt+0x68>
 8006b70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d106      	bne.n	8006b92 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff ff81 	bl	8006a94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b92:	bf00      	nop
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40003800 	.word	0x40003800
 8006ba0:	40003400 	.word	0x40003400

08006ba4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68d8      	ldr	r0, [r3, #12]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	1c99      	adds	r1, r3, #2
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006bbc:	b282      	uxth	r2, r0
 8006bbe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d113      	bne.n	8006c00 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006be6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff ff4a 	bl	8006a94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a20      	ldr	r2, [pc, #128]	; (8006c98 <I2SEx_RxISR_I2SExt+0x90>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d101      	bne.n	8006c1e <I2SEx_RxISR_I2SExt+0x16>
 8006c1a:	4b20      	ldr	r3, [pc, #128]	; (8006c9c <I2SEx_RxISR_I2SExt+0x94>)
 8006c1c:	e001      	b.n	8006c22 <I2SEx_RxISR_I2SExt+0x1a>
 8006c1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c22:	68d8      	ldr	r0, [r3, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	1c99      	adds	r1, r3, #2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006c2e:	b282      	uxth	r2, r0
 8006c30:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d121      	bne.n	8006c8e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a12      	ldr	r2, [pc, #72]	; (8006c98 <I2SEx_RxISR_I2SExt+0x90>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d101      	bne.n	8006c58 <I2SEx_RxISR_I2SExt+0x50>
 8006c54:	4b11      	ldr	r3, [pc, #68]	; (8006c9c <I2SEx_RxISR_I2SExt+0x94>)
 8006c56:	e001      	b.n	8006c5c <I2SEx_RxISR_I2SExt+0x54>
 8006c58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	490d      	ldr	r1, [pc, #52]	; (8006c98 <I2SEx_RxISR_I2SExt+0x90>)
 8006c64:	428b      	cmp	r3, r1
 8006c66:	d101      	bne.n	8006c6c <I2SEx_RxISR_I2SExt+0x64>
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <I2SEx_RxISR_I2SExt+0x94>)
 8006c6a:	e001      	b.n	8006c70 <I2SEx_RxISR_I2SExt+0x68>
 8006c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c74:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d106      	bne.n	8006c8e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff ff03 	bl	8006a94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	40003800 	.word	0x40003800
 8006c9c:	40003400 	.word	0x40003400

08006ca0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e267      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d075      	beq.n	8006daa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cbe:	4b88      	ldr	r3, [pc, #544]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 030c 	and.w	r3, r3, #12
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d00c      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cca:	4b85      	ldr	r3, [pc, #532]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d112      	bne.n	8006cfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cd6:	4b82      	ldr	r3, [pc, #520]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ce2:	d10b      	bne.n	8006cfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce4:	4b7e      	ldr	r3, [pc, #504]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d05b      	beq.n	8006da8 <HAL_RCC_OscConfig+0x108>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d157      	bne.n	8006da8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e242      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d04:	d106      	bne.n	8006d14 <HAL_RCC_OscConfig+0x74>
 8006d06:	4b76      	ldr	r3, [pc, #472]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a75      	ldr	r2, [pc, #468]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	e01d      	b.n	8006d50 <HAL_RCC_OscConfig+0xb0>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d1c:	d10c      	bne.n	8006d38 <HAL_RCC_OscConfig+0x98>
 8006d1e:	4b70      	ldr	r3, [pc, #448]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a6f      	ldr	r2, [pc, #444]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	4b6d      	ldr	r3, [pc, #436]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a6c      	ldr	r2, [pc, #432]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	e00b      	b.n	8006d50 <HAL_RCC_OscConfig+0xb0>
 8006d38:	4b69      	ldr	r3, [pc, #420]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a68      	ldr	r2, [pc, #416]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	4b66      	ldr	r3, [pc, #408]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a65      	ldr	r2, [pc, #404]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d013      	beq.n	8006d80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d58:	f7fc fbf0 	bl	800353c <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d60:	f7fc fbec 	bl	800353c <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b64      	cmp	r3, #100	; 0x64
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e207      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d72:	4b5b      	ldr	r3, [pc, #364]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0f0      	beq.n	8006d60 <HAL_RCC_OscConfig+0xc0>
 8006d7e:	e014      	b.n	8006daa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d80:	f7fc fbdc 	bl	800353c <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d88:	f7fc fbd8 	bl	800353c <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b64      	cmp	r3, #100	; 0x64
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e1f3      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d9a:	4b51      	ldr	r3, [pc, #324]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1f0      	bne.n	8006d88 <HAL_RCC_OscConfig+0xe8>
 8006da6:	e000      	b.n	8006daa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d063      	beq.n	8006e7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006db6:	4b4a      	ldr	r3, [pc, #296]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 030c 	and.w	r3, r3, #12
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00b      	beq.n	8006dda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dc2:	4b47      	ldr	r3, [pc, #284]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d11c      	bne.n	8006e08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dce:	4b44      	ldr	r3, [pc, #272]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d116      	bne.n	8006e08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dda:	4b41      	ldr	r3, [pc, #260]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <HAL_RCC_OscConfig+0x152>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d001      	beq.n	8006df2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e1c7      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006df2:	4b3b      	ldr	r3, [pc, #236]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	4937      	ldr	r1, [pc, #220]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e06:	e03a      	b.n	8006e7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d020      	beq.n	8006e52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e10:	4b34      	ldr	r3, [pc, #208]	; (8006ee4 <HAL_RCC_OscConfig+0x244>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e16:	f7fc fb91 	bl	800353c <HAL_GetTick>
 8006e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e1c:	e008      	b.n	8006e30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e1e:	f7fc fb8d 	bl	800353c <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e1a8      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e30:	4b2b      	ldr	r3, [pc, #172]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0f0      	beq.n	8006e1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e3c:	4b28      	ldr	r3, [pc, #160]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	4925      	ldr	r1, [pc, #148]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	600b      	str	r3, [r1, #0]
 8006e50:	e015      	b.n	8006e7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e52:	4b24      	ldr	r3, [pc, #144]	; (8006ee4 <HAL_RCC_OscConfig+0x244>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e58:	f7fc fb70 	bl	800353c <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e60:	f7fc fb6c 	bl	800353c <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e187      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e72:	4b1b      	ldr	r3, [pc, #108]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f0      	bne.n	8006e60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d036      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d016      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e92:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <HAL_RCC_OscConfig+0x248>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e98:	f7fc fb50 	bl	800353c <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ea0:	f7fc fb4c 	bl	800353c <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e167      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eb2:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <HAL_RCC_OscConfig+0x240>)
 8006eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0f0      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x200>
 8006ebe:	e01b      	b.n	8006ef8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ec0:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <HAL_RCC_OscConfig+0x248>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ec6:	f7fc fb39 	bl	800353c <HAL_GetTick>
 8006eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ecc:	e00e      	b.n	8006eec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ece:	f7fc fb35 	bl	800353c <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d907      	bls.n	8006eec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e150      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	42470000 	.word	0x42470000
 8006ee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006eec:	4b88      	ldr	r3, [pc, #544]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1ea      	bne.n	8006ece <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 8097 	beq.w	8007034 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f06:	2300      	movs	r3, #0
 8006f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f0a:	4b81      	ldr	r3, [pc, #516]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10f      	bne.n	8006f36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f16:	2300      	movs	r3, #0
 8006f18:	60bb      	str	r3, [r7, #8]
 8006f1a:	4b7d      	ldr	r3, [pc, #500]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	4a7c      	ldr	r2, [pc, #496]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f24:	6413      	str	r3, [r2, #64]	; 0x40
 8006f26:	4b7a      	ldr	r3, [pc, #488]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f2e:	60bb      	str	r3, [r7, #8]
 8006f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f32:	2301      	movs	r3, #1
 8006f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f36:	4b77      	ldr	r3, [pc, #476]	; (8007114 <HAL_RCC_OscConfig+0x474>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d118      	bne.n	8006f74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f42:	4b74      	ldr	r3, [pc, #464]	; (8007114 <HAL_RCC_OscConfig+0x474>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a73      	ldr	r2, [pc, #460]	; (8007114 <HAL_RCC_OscConfig+0x474>)
 8006f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f4e:	f7fc faf5 	bl	800353c <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f54:	e008      	b.n	8006f68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f56:	f7fc faf1 	bl	800353c <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e10c      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f68:	4b6a      	ldr	r3, [pc, #424]	; (8007114 <HAL_RCC_OscConfig+0x474>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0f0      	beq.n	8006f56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d106      	bne.n	8006f8a <HAL_RCC_OscConfig+0x2ea>
 8006f7c:	4b64      	ldr	r3, [pc, #400]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f80:	4a63      	ldr	r2, [pc, #396]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006f82:	f043 0301 	orr.w	r3, r3, #1
 8006f86:	6713      	str	r3, [r2, #112]	; 0x70
 8006f88:	e01c      	b.n	8006fc4 <HAL_RCC_OscConfig+0x324>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	2b05      	cmp	r3, #5
 8006f90:	d10c      	bne.n	8006fac <HAL_RCC_OscConfig+0x30c>
 8006f92:	4b5f      	ldr	r3, [pc, #380]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f96:	4a5e      	ldr	r2, [pc, #376]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006f98:	f043 0304 	orr.w	r3, r3, #4
 8006f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f9e:	4b5c      	ldr	r3, [pc, #368]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa2:	4a5b      	ldr	r2, [pc, #364]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006fa4:	f043 0301 	orr.w	r3, r3, #1
 8006fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8006faa:	e00b      	b.n	8006fc4 <HAL_RCC_OscConfig+0x324>
 8006fac:	4b58      	ldr	r3, [pc, #352]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb0:	4a57      	ldr	r2, [pc, #348]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006fb2:	f023 0301 	bic.w	r3, r3, #1
 8006fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fb8:	4b55      	ldr	r3, [pc, #340]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbc:	4a54      	ldr	r2, [pc, #336]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006fbe:	f023 0304 	bic.w	r3, r3, #4
 8006fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d015      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fcc:	f7fc fab6 	bl	800353c <HAL_GetTick>
 8006fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fd2:	e00a      	b.n	8006fea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fd4:	f7fc fab2 	bl	800353c <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e0cb      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fea:	4b49      	ldr	r3, [pc, #292]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8006fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0ee      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x334>
 8006ff6:	e014      	b.n	8007022 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff8:	f7fc faa0 	bl	800353c <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ffe:	e00a      	b.n	8007016 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007000:	f7fc fa9c 	bl	800353c <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	f241 3288 	movw	r2, #5000	; 0x1388
 800700e:	4293      	cmp	r3, r2
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e0b5      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007016:	4b3e      	ldr	r3, [pc, #248]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8007018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1ee      	bne.n	8007000 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d105      	bne.n	8007034 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007028:	4b39      	ldr	r3, [pc, #228]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	4a38      	ldr	r2, [pc, #224]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 800702e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 80a1 	beq.w	8007180 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800703e:	4b34      	ldr	r3, [pc, #208]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 030c 	and.w	r3, r3, #12
 8007046:	2b08      	cmp	r3, #8
 8007048:	d05c      	beq.n	8007104 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d141      	bne.n	80070d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007052:	4b31      	ldr	r3, [pc, #196]	; (8007118 <HAL_RCC_OscConfig+0x478>)
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007058:	f7fc fa70 	bl	800353c <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007060:	f7fc fa6c 	bl	800353c <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e087      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007072:	4b27      	ldr	r3, [pc, #156]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1f0      	bne.n	8007060 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	69da      	ldr	r2, [r3, #28]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	431a      	orrs	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	019b      	lsls	r3, r3, #6
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007094:	085b      	lsrs	r3, r3, #1
 8007096:	3b01      	subs	r3, #1
 8007098:	041b      	lsls	r3, r3, #16
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	061b      	lsls	r3, r3, #24
 80070a2:	491b      	ldr	r1, [pc, #108]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070a8:	4b1b      	ldr	r3, [pc, #108]	; (8007118 <HAL_RCC_OscConfig+0x478>)
 80070aa:	2201      	movs	r2, #1
 80070ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ae:	f7fc fa45 	bl	800353c <HAL_GetTick>
 80070b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070b4:	e008      	b.n	80070c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070b6:	f7fc fa41 	bl	800353c <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d901      	bls.n	80070c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e05c      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070c8:	4b11      	ldr	r3, [pc, #68]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0f0      	beq.n	80070b6 <HAL_RCC_OscConfig+0x416>
 80070d4:	e054      	b.n	8007180 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d6:	4b10      	ldr	r3, [pc, #64]	; (8007118 <HAL_RCC_OscConfig+0x478>)
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070dc:	f7fc fa2e 	bl	800353c <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070e4:	f7fc fa2a 	bl	800353c <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e045      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070f6:	4b06      	ldr	r3, [pc, #24]	; (8007110 <HAL_RCC_OscConfig+0x470>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0x444>
 8007102:	e03d      	b.n	8007180 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d107      	bne.n	800711c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e038      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
 8007110:	40023800 	.word	0x40023800
 8007114:	40007000 	.word	0x40007000
 8007118:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800711c:	4b1b      	ldr	r3, [pc, #108]	; (800718c <HAL_RCC_OscConfig+0x4ec>)
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d028      	beq.n	800717c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007134:	429a      	cmp	r2, r3
 8007136:	d121      	bne.n	800717c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007142:	429a      	cmp	r2, r3
 8007144:	d11a      	bne.n	800717c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800714c:	4013      	ands	r3, r2
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007152:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007154:	4293      	cmp	r3, r2
 8007156:	d111      	bne.n	800717c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	085b      	lsrs	r3, r3, #1
 8007164:	3b01      	subs	r3, #1
 8007166:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007168:	429a      	cmp	r2, r3
 800716a:	d107      	bne.n	800717c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007178:	429a      	cmp	r2, r3
 800717a:	d001      	beq.n	8007180 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e000      	b.n	8007182 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40023800 	.word	0x40023800

08007190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e0cc      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071a4:	4b68      	ldr	r3, [pc, #416]	; (8007348 <HAL_RCC_ClockConfig+0x1b8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d90c      	bls.n	80071cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b2:	4b65      	ldr	r3, [pc, #404]	; (8007348 <HAL_RCC_ClockConfig+0x1b8>)
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ba:	4b63      	ldr	r3, [pc, #396]	; (8007348 <HAL_RCC_ClockConfig+0x1b8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d001      	beq.n	80071cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0b8      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d020      	beq.n	800721a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071e4:	4b59      	ldr	r3, [pc, #356]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	4a58      	ldr	r2, [pc, #352]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 80071ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80071ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0308 	and.w	r3, r3, #8
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071fc:	4b53      	ldr	r3, [pc, #332]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	4a52      	ldr	r2, [pc, #328]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007208:	4b50      	ldr	r3, [pc, #320]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	494d      	ldr	r1, [pc, #308]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007216:	4313      	orrs	r3, r2
 8007218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d044      	beq.n	80072b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d107      	bne.n	800723e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800722e:	4b47      	ldr	r3, [pc, #284]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d119      	bne.n	800726e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e07f      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2b02      	cmp	r3, #2
 8007244:	d003      	beq.n	800724e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800724a:	2b03      	cmp	r3, #3
 800724c:	d107      	bne.n	800725e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800724e:	4b3f      	ldr	r3, [pc, #252]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e06f      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800725e:	4b3b      	ldr	r3, [pc, #236]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e067      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800726e:	4b37      	ldr	r3, [pc, #220]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f023 0203 	bic.w	r2, r3, #3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	4934      	ldr	r1, [pc, #208]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 800727c:	4313      	orrs	r3, r2
 800727e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007280:	f7fc f95c 	bl	800353c <HAL_GetTick>
 8007284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007286:	e00a      	b.n	800729e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007288:	f7fc f958 	bl	800353c <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	f241 3288 	movw	r2, #5000	; 0x1388
 8007296:	4293      	cmp	r3, r2
 8007298:	d901      	bls.n	800729e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e04f      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800729e:	4b2b      	ldr	r3, [pc, #172]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 020c 	and.w	r2, r3, #12
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d1eb      	bne.n	8007288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072b0:	4b25      	ldr	r3, [pc, #148]	; (8007348 <HAL_RCC_ClockConfig+0x1b8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0307 	and.w	r3, r3, #7
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d20c      	bcs.n	80072d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072be:	4b22      	ldr	r3, [pc, #136]	; (8007348 <HAL_RCC_ClockConfig+0x1b8>)
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072c6:	4b20      	ldr	r3, [pc, #128]	; (8007348 <HAL_RCC_ClockConfig+0x1b8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d001      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e032      	b.n	800733e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d008      	beq.n	80072f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072e4:	4b19      	ldr	r3, [pc, #100]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	4916      	ldr	r1, [pc, #88]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0308 	and.w	r3, r3, #8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d009      	beq.n	8007316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007302:	4b12      	ldr	r3, [pc, #72]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	490e      	ldr	r1, [pc, #56]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 8007312:	4313      	orrs	r3, r2
 8007314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007316:	f000 f821 	bl	800735c <HAL_RCC_GetSysClockFreq>
 800731a:	4602      	mov	r2, r0
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <HAL_RCC_ClockConfig+0x1bc>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	091b      	lsrs	r3, r3, #4
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	490a      	ldr	r1, [pc, #40]	; (8007350 <HAL_RCC_ClockConfig+0x1c0>)
 8007328:	5ccb      	ldrb	r3, [r1, r3]
 800732a:	fa22 f303 	lsr.w	r3, r2, r3
 800732e:	4a09      	ldr	r2, [pc, #36]	; (8007354 <HAL_RCC_ClockConfig+0x1c4>)
 8007330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <HAL_RCC_ClockConfig+0x1c8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4618      	mov	r0, r3
 8007338:	f7fc f8bc 	bl	80034b4 <HAL_InitTick>

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	40023c00 	.word	0x40023c00
 800734c:	40023800 	.word	0x40023800
 8007350:	0800cef8 	.word	0x0800cef8
 8007354:	20000000 	.word	0x20000000
 8007358:	20000004 	.word	0x20000004

0800735c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800735c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007360:	b094      	sub	sp, #80	; 0x50
 8007362:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	647b      	str	r3, [r7, #68]	; 0x44
 8007368:	2300      	movs	r3, #0
 800736a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800736c:	2300      	movs	r3, #0
 800736e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007374:	4b79      	ldr	r3, [pc, #484]	; (800755c <HAL_RCC_GetSysClockFreq+0x200>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f003 030c 	and.w	r3, r3, #12
 800737c:	2b08      	cmp	r3, #8
 800737e:	d00d      	beq.n	800739c <HAL_RCC_GetSysClockFreq+0x40>
 8007380:	2b08      	cmp	r3, #8
 8007382:	f200 80e1 	bhi.w	8007548 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <HAL_RCC_GetSysClockFreq+0x34>
 800738a:	2b04      	cmp	r3, #4
 800738c:	d003      	beq.n	8007396 <HAL_RCC_GetSysClockFreq+0x3a>
 800738e:	e0db      	b.n	8007548 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007390:	4b73      	ldr	r3, [pc, #460]	; (8007560 <HAL_RCC_GetSysClockFreq+0x204>)
 8007392:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007394:	e0db      	b.n	800754e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007396:	4b73      	ldr	r3, [pc, #460]	; (8007564 <HAL_RCC_GetSysClockFreq+0x208>)
 8007398:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800739a:	e0d8      	b.n	800754e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800739c:	4b6f      	ldr	r3, [pc, #444]	; (800755c <HAL_RCC_GetSysClockFreq+0x200>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073a6:	4b6d      	ldr	r3, [pc, #436]	; (800755c <HAL_RCC_GetSysClockFreq+0x200>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d063      	beq.n	800747a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073b2:	4b6a      	ldr	r3, [pc, #424]	; (800755c <HAL_RCC_GetSysClockFreq+0x200>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	099b      	lsrs	r3, r3, #6
 80073b8:	2200      	movs	r2, #0
 80073ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80073bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c4:	633b      	str	r3, [r7, #48]	; 0x30
 80073c6:	2300      	movs	r3, #0
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34
 80073ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80073ce:	4622      	mov	r2, r4
 80073d0:	462b      	mov	r3, r5
 80073d2:	f04f 0000 	mov.w	r0, #0
 80073d6:	f04f 0100 	mov.w	r1, #0
 80073da:	0159      	lsls	r1, r3, #5
 80073dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073e0:	0150      	lsls	r0, r2, #5
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4621      	mov	r1, r4
 80073e8:	1a51      	subs	r1, r2, r1
 80073ea:	6139      	str	r1, [r7, #16]
 80073ec:	4629      	mov	r1, r5
 80073ee:	eb63 0301 	sbc.w	r3, r3, r1
 80073f2:	617b      	str	r3, [r7, #20]
 80073f4:	f04f 0200 	mov.w	r2, #0
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007400:	4659      	mov	r1, fp
 8007402:	018b      	lsls	r3, r1, #6
 8007404:	4651      	mov	r1, sl
 8007406:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800740a:	4651      	mov	r1, sl
 800740c:	018a      	lsls	r2, r1, #6
 800740e:	4651      	mov	r1, sl
 8007410:	ebb2 0801 	subs.w	r8, r2, r1
 8007414:	4659      	mov	r1, fp
 8007416:	eb63 0901 	sbc.w	r9, r3, r1
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800742a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800742e:	4690      	mov	r8, r2
 8007430:	4699      	mov	r9, r3
 8007432:	4623      	mov	r3, r4
 8007434:	eb18 0303 	adds.w	r3, r8, r3
 8007438:	60bb      	str	r3, [r7, #8]
 800743a:	462b      	mov	r3, r5
 800743c:	eb49 0303 	adc.w	r3, r9, r3
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800744e:	4629      	mov	r1, r5
 8007450:	024b      	lsls	r3, r1, #9
 8007452:	4621      	mov	r1, r4
 8007454:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007458:	4621      	mov	r1, r4
 800745a:	024a      	lsls	r2, r1, #9
 800745c:	4610      	mov	r0, r2
 800745e:	4619      	mov	r1, r3
 8007460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007462:	2200      	movs	r2, #0
 8007464:	62bb      	str	r3, [r7, #40]	; 0x28
 8007466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007468:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800746c:	f7f9 fb70 	bl	8000b50 <__aeabi_uldivmod>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4613      	mov	r3, r2
 8007476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007478:	e058      	b.n	800752c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800747a:	4b38      	ldr	r3, [pc, #224]	; (800755c <HAL_RCC_GetSysClockFreq+0x200>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	099b      	lsrs	r3, r3, #6
 8007480:	2200      	movs	r2, #0
 8007482:	4618      	mov	r0, r3
 8007484:	4611      	mov	r1, r2
 8007486:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800748a:	623b      	str	r3, [r7, #32]
 800748c:	2300      	movs	r3, #0
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
 8007490:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007494:	4642      	mov	r2, r8
 8007496:	464b      	mov	r3, r9
 8007498:	f04f 0000 	mov.w	r0, #0
 800749c:	f04f 0100 	mov.w	r1, #0
 80074a0:	0159      	lsls	r1, r3, #5
 80074a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074a6:	0150      	lsls	r0, r2, #5
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4641      	mov	r1, r8
 80074ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80074b2:	4649      	mov	r1, r9
 80074b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80074b8:	f04f 0200 	mov.w	r2, #0
 80074bc:	f04f 0300 	mov.w	r3, #0
 80074c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80074c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80074c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80074cc:	ebb2 040a 	subs.w	r4, r2, sl
 80074d0:	eb63 050b 	sbc.w	r5, r3, fp
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	00eb      	lsls	r3, r5, #3
 80074de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074e2:	00e2      	lsls	r2, r4, #3
 80074e4:	4614      	mov	r4, r2
 80074e6:	461d      	mov	r5, r3
 80074e8:	4643      	mov	r3, r8
 80074ea:	18e3      	adds	r3, r4, r3
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	464b      	mov	r3, r9
 80074f0:	eb45 0303 	adc.w	r3, r5, r3
 80074f4:	607b      	str	r3, [r7, #4]
 80074f6:	f04f 0200 	mov.w	r2, #0
 80074fa:	f04f 0300 	mov.w	r3, #0
 80074fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007502:	4629      	mov	r1, r5
 8007504:	028b      	lsls	r3, r1, #10
 8007506:	4621      	mov	r1, r4
 8007508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800750c:	4621      	mov	r1, r4
 800750e:	028a      	lsls	r2, r1, #10
 8007510:	4610      	mov	r0, r2
 8007512:	4619      	mov	r1, r3
 8007514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007516:	2200      	movs	r2, #0
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	61fa      	str	r2, [r7, #28]
 800751c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007520:	f7f9 fb16 	bl	8000b50 <__aeabi_uldivmod>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4613      	mov	r3, r2
 800752a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800752c:	4b0b      	ldr	r3, [pc, #44]	; (800755c <HAL_RCC_GetSysClockFreq+0x200>)
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	0c1b      	lsrs	r3, r3, #16
 8007532:	f003 0303 	and.w	r3, r3, #3
 8007536:	3301      	adds	r3, #1
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800753c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800753e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007540:	fbb2 f3f3 	udiv	r3, r2, r3
 8007544:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007546:	e002      	b.n	800754e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007548:	4b05      	ldr	r3, [pc, #20]	; (8007560 <HAL_RCC_GetSysClockFreq+0x204>)
 800754a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800754c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800754e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007550:	4618      	mov	r0, r3
 8007552:	3750      	adds	r7, #80	; 0x50
 8007554:	46bd      	mov	sp, r7
 8007556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800755a:	bf00      	nop
 800755c:	40023800 	.word	0x40023800
 8007560:	00f42400 	.word	0x00f42400
 8007564:	007a1200 	.word	0x007a1200

08007568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800756c:	4b03      	ldr	r3, [pc, #12]	; (800757c <HAL_RCC_GetHCLKFreq+0x14>)
 800756e:	681b      	ldr	r3, [r3, #0]
}
 8007570:	4618      	mov	r0, r3
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	20000000 	.word	0x20000000

08007580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007584:	f7ff fff0 	bl	8007568 <HAL_RCC_GetHCLKFreq>
 8007588:	4602      	mov	r2, r0
 800758a:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	0a9b      	lsrs	r3, r3, #10
 8007590:	f003 0307 	and.w	r3, r3, #7
 8007594:	4903      	ldr	r1, [pc, #12]	; (80075a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007596:	5ccb      	ldrb	r3, [r1, r3]
 8007598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800759c:	4618      	mov	r0, r3
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	40023800 	.word	0x40023800
 80075a4:	0800cf08 	.word	0x0800cf08

080075a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075ac:	f7ff ffdc 	bl	8007568 <HAL_RCC_GetHCLKFreq>
 80075b0:	4602      	mov	r2, r0
 80075b2:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	0b5b      	lsrs	r3, r3, #13
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	4903      	ldr	r1, [pc, #12]	; (80075cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80075be:	5ccb      	ldrb	r3, [r1, r3]
 80075c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	40023800 	.word	0x40023800
 80075cc:	0800cf08 	.word	0x0800cf08

080075d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d105      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d038      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80075f8:	4b68      	ldr	r3, [pc, #416]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075fe:	f7fb ff9d 	bl	800353c <HAL_GetTick>
 8007602:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007604:	e008      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007606:	f7fb ff99 	bl	800353c <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	2b02      	cmp	r3, #2
 8007612:	d901      	bls.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e0bd      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007618:	4b61      	ldr	r3, [pc, #388]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1f0      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	019b      	lsls	r3, r3, #6
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	071b      	lsls	r3, r3, #28
 8007636:	495a      	ldr	r1, [pc, #360]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007638:	4313      	orrs	r3, r2
 800763a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800763e:	4b57      	ldr	r3, [pc, #348]	; (800779c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007640:	2201      	movs	r2, #1
 8007642:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007644:	f7fb ff7a 	bl	800353c <HAL_GetTick>
 8007648:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800764a:	e008      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800764c:	f7fb ff76 	bl	800353c <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	2b02      	cmp	r3, #2
 8007658:	d901      	bls.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e09a      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800765e:	4b50      	ldr	r3, [pc, #320]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0f0      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8083 	beq.w	800777e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	4b48      	ldr	r3, [pc, #288]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800767e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007680:	4a47      	ldr	r2, [pc, #284]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007686:	6413      	str	r3, [r2, #64]	; 0x40
 8007688:	4b45      	ldr	r3, [pc, #276]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007694:	4b43      	ldr	r3, [pc, #268]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a42      	ldr	r2, [pc, #264]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800769a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800769e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076a0:	f7fb ff4c 	bl	800353c <HAL_GetTick>
 80076a4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80076a6:	e008      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80076a8:	f7fb ff48 	bl	800353c <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d901      	bls.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e06c      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80076ba:	4b3a      	ldr	r3, [pc, #232]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0f0      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076c6:	4b36      	ldr	r3, [pc, #216]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ce:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d02f      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d028      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076e4:	4b2e      	ldr	r3, [pc, #184]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ec:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076ee:	4b2e      	ldr	r3, [pc, #184]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80076f0:	2201      	movs	r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076f4:	4b2c      	ldr	r3, [pc, #176]	; (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80076fa:	4a29      	ldr	r2, [pc, #164]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007700:	4b27      	ldr	r3, [pc, #156]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b01      	cmp	r3, #1
 800770a:	d114      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800770c:	f7fb ff16 	bl	800353c <HAL_GetTick>
 8007710:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007712:	e00a      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007714:	f7fb ff12 	bl	800353c <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007722:	4293      	cmp	r3, r2
 8007724:	d901      	bls.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e034      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800772a:	4b1d      	ldr	r3, [pc, #116]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800772c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0ee      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800773e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007742:	d10d      	bne.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007744:	4b16      	ldr	r3, [pc, #88]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007758:	4911      	ldr	r1, [pc, #68]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800775a:	4313      	orrs	r3, r2
 800775c:	608b      	str	r3, [r1, #8]
 800775e:	e005      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007760:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	4a0e      	ldr	r2, [pc, #56]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007766:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800776a:	6093      	str	r3, [r2, #8]
 800776c:	4b0c      	ldr	r3, [pc, #48]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800776e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007778:	4909      	ldr	r1, [pc, #36]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800777a:	4313      	orrs	r3, r2
 800777c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	7d1a      	ldrb	r2, [r3, #20]
 800778e:	4b07      	ldr	r3, [pc, #28]	; (80077ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007790:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	42470068 	.word	0x42470068
 80077a0:	40023800 	.word	0x40023800
 80077a4:	40007000 	.word	0x40007000
 80077a8:	42470e40 	.word	0x42470e40
 80077ac:	424711e0 	.word	0x424711e0

080077b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b087      	sub	sp, #28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d140      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80077ce:	4b24      	ldr	r3, [pc, #144]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d005      	beq.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d131      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80077e4:	4b1f      	ldr	r3, [pc, #124]	; (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80077e6:	617b      	str	r3, [r7, #20]
          break;
 80077e8:	e031      	b.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80077ea:	4b1d      	ldr	r3, [pc, #116]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077f6:	d109      	bne.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80077f8:	4b19      	ldr	r3, [pc, #100]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80077fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007802:	4a19      	ldr	r2, [pc, #100]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007804:	fbb2 f3f3 	udiv	r3, r2, r3
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	e008      	b.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800780c:	4b14      	ldr	r3, [pc, #80]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800780e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007816:	4a15      	ldr	r2, [pc, #84]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007818:	fbb2 f3f3 	udiv	r3, r2, r3
 800781c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800781e:	4b10      	ldr	r3, [pc, #64]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007824:	099b      	lsrs	r3, r3, #6
 8007826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	fb02 f303 	mul.w	r3, r2, r3
 8007830:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007838:	0f1b      	lsrs	r3, r3, #28
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	fbb2 f3f3 	udiv	r3, r2, r3
 8007844:	617b      	str	r3, [r7, #20]
          break;
 8007846:	e002      	b.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]
          break;
 800784c:	bf00      	nop
        }
      }
      break;
 800784e:	bf00      	nop
    }
  }
  return frequency;
 8007850:	697b      	ldr	r3, [r7, #20]
}
 8007852:	4618      	mov	r0, r3
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40023800 	.word	0x40023800
 8007864:	00bb8000 	.word	0x00bb8000
 8007868:	007a1200 	.word	0x007a1200
 800786c:	00f42400 	.word	0x00f42400

08007870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e07b      	b.n	800797a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	2b00      	cmp	r3, #0
 8007888:	d108      	bne.n	800789c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007892:	d009      	beq.n	80078a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	61da      	str	r2, [r3, #28]
 800789a:	e005      	b.n	80078a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d106      	bne.n	80078c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fb fc8c 	bl	80031e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2202      	movs	r2, #2
 80078cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80078f0:	431a      	orrs	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792c:	ea42 0103 	orr.w	r1, r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007934:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	0c1b      	lsrs	r3, r3, #16
 8007946:	f003 0104 	and.w	r1, r3, #4
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	f003 0210 	and.w	r2, r3, #16
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69da      	ldr	r2, [r3, #28]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e03f      	b.n	8007a14 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	d106      	bne.n	80079ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7fb fc61 	bl	8003270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2224      	movs	r2, #36	; 0x24
 80079b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68da      	ldr	r2, [r3, #12]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fc7a 	bl	80082c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691a      	ldr	r2, [r3, #16]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	695a      	ldr	r2, [r3, #20]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b0ba      	sub	sp, #232	; 0xe8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10f      	bne.n	8007a82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d009      	beq.n	8007a82 <HAL_UART_IRQHandler+0x66>
 8007a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fb65 	bl	800814a <UART_Receive_IT>
      return;
 8007a80:	e256      	b.n	8007f30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 80de 	beq.w	8007c48 <HAL_UART_IRQHandler+0x22c>
 8007a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d106      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80d1 	beq.w	8007c48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00b      	beq.n	8007aca <HAL_UART_IRQHandler+0xae>
 8007ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	f043 0201 	orr.w	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <HAL_UART_IRQHandler+0xd2>
 8007ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	f043 0202 	orr.w	r2, r3, #2
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00b      	beq.n	8007b12 <HAL_UART_IRQHandler+0xf6>
 8007afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0a:	f043 0204 	orr.w	r2, r3, #4
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d011      	beq.n	8007b42 <HAL_UART_IRQHandler+0x126>
 8007b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d105      	bne.n	8007b36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	f043 0208 	orr.w	r2, r3, #8
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 81ed 	beq.w	8007f26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d008      	beq.n	8007b6a <HAL_UART_IRQHandler+0x14e>
 8007b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 faf0 	bl	800814a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b74:	2b40      	cmp	r3, #64	; 0x40
 8007b76:	bf0c      	ite	eq
 8007b78:	2301      	moveq	r3, #1
 8007b7a:	2300      	movne	r3, #0
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	f003 0308 	and.w	r3, r3, #8
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d103      	bne.n	8007b96 <HAL_UART_IRQHandler+0x17a>
 8007b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d04f      	beq.n	8007c36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f9f8 	bl	8007f8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba6:	2b40      	cmp	r3, #64	; 0x40
 8007ba8:	d141      	bne.n	8007c2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3314      	adds	r3, #20
 8007bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3314      	adds	r3, #20
 8007bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1d9      	bne.n	8007baa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d013      	beq.n	8007c26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	4a7d      	ldr	r2, [pc, #500]	; (8007df8 <HAL_UART_IRQHandler+0x3dc>)
 8007c04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fb fe47 	bl	800389e <HAL_DMA_Abort_IT>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d016      	beq.n	8007c44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c24:	e00e      	b.n	8007c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f99a 	bl	8007f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2c:	e00a      	b.n	8007c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f996 	bl	8007f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c34:	e006      	b.n	8007c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f992 	bl	8007f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c42:	e170      	b.n	8007f26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c44:	bf00      	nop
    return;
 8007c46:	e16e      	b.n	8007f26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	f040 814a 	bne.w	8007ee6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c56:	f003 0310 	and.w	r3, r3, #16
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 8143 	beq.w	8007ee6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c64:	f003 0310 	and.w	r3, r3, #16
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 813c 	beq.w	8007ee6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60bb      	str	r3, [r7, #8]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60bb      	str	r3, [r7, #8]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	60bb      	str	r3, [r7, #8]
 8007c82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8e:	2b40      	cmp	r3, #64	; 0x40
 8007c90:	f040 80b4 	bne.w	8007dfc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 8140 	beq.w	8007f2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	f080 8139 	bcs.w	8007f2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cca:	f000 8088 	beq.w	8007dde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	330c      	adds	r3, #12
 8007cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cdc:	e853 3f00 	ldrex	r3, [r3]
 8007ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	330c      	adds	r3, #12
 8007cf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cfa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1d9      	bne.n	8007cce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3314      	adds	r3, #20
 8007d20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d2c:	f023 0301 	bic.w	r3, r3, #1
 8007d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3314      	adds	r3, #20
 8007d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e1      	bne.n	8007d1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3314      	adds	r3, #20
 8007d5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3314      	adds	r3, #20
 8007d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e3      	bne.n	8007d56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	330c      	adds	r3, #12
 8007da2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dae:	f023 0310 	bic.w	r3, r3, #16
 8007db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	330c      	adds	r3, #12
 8007dbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007dc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8007dc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e3      	bne.n	8007d9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fb fcf0 	bl	80037be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f8c0 	bl	8007f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007df4:	e099      	b.n	8007f2a <HAL_UART_IRQHandler+0x50e>
 8007df6:	bf00      	nop
 8007df8:	08008053 	.word	0x08008053
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 808b 	beq.w	8007f2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 8086 	beq.w	8007f2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	330c      	adds	r3, #12
 8007e28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	330c      	adds	r3, #12
 8007e42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e46:	647a      	str	r2, [r7, #68]	; 0x44
 8007e48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e3      	bne.n	8007e22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3314      	adds	r3, #20
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	623b      	str	r3, [r7, #32]
   return(result);
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	f023 0301 	bic.w	r3, r3, #1
 8007e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3314      	adds	r3, #20
 8007e7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e7e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e3      	bne.n	8007e5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	330c      	adds	r3, #12
 8007ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0310 	bic.w	r3, r3, #16
 8007eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	330c      	adds	r3, #12
 8007ec0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ec4:	61fa      	str	r2, [r7, #28]
 8007ec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	69b9      	ldr	r1, [r7, #24]
 8007eca:	69fa      	ldr	r2, [r7, #28]
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e3      	bne.n	8007ea0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f848 	bl	8007f74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ee4:	e023      	b.n	8007f2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d009      	beq.n	8007f06 <HAL_UART_IRQHandler+0x4ea>
 8007ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f8bb 	bl	800807a <UART_Transmit_IT>
    return;
 8007f04:	e014      	b.n	8007f30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00e      	beq.n	8007f30 <HAL_UART_IRQHandler+0x514>
 8007f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d008      	beq.n	8007f30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f8fb 	bl	800811a <UART_EndTransmit_IT>
    return;
 8007f24:	e004      	b.n	8007f30 <HAL_UART_IRQHandler+0x514>
    return;
 8007f26:	bf00      	nop
 8007f28:	e002      	b.n	8007f30 <HAL_UART_IRQHandler+0x514>
      return;
 8007f2a:	bf00      	nop
 8007f2c:	e000      	b.n	8007f30 <HAL_UART_IRQHandler+0x514>
      return;
 8007f2e:	bf00      	nop
  }
}
 8007f30:	37e8      	adds	r7, #232	; 0xe8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop

08007f38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b095      	sub	sp, #84	; 0x54
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	330c      	adds	r3, #12
 8007f9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	330c      	adds	r3, #12
 8007fb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fb4:	643a      	str	r2, [r7, #64]	; 0x40
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e5      	bne.n	8007f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3314      	adds	r3, #20
 8007fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	f023 0301 	bic.w	r3, r3, #1
 8007fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3314      	adds	r3, #20
 8007fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e5      	bne.n	8007fc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008000:	2b01      	cmp	r3, #1
 8008002:	d119      	bne.n	8008038 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	330c      	adds	r3, #12
 800800a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	60bb      	str	r3, [r7, #8]
   return(result);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f023 0310 	bic.w	r3, r3, #16
 800801a:	647b      	str	r3, [r7, #68]	; 0x44
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	330c      	adds	r3, #12
 8008022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008024:	61ba      	str	r2, [r7, #24]
 8008026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	6979      	ldr	r1, [r7, #20]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	613b      	str	r3, [r7, #16]
   return(result);
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e5      	bne.n	8008004 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2220      	movs	r2, #32
 800803c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008046:	bf00      	nop
 8008048:	3754      	adds	r7, #84	; 0x54
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff ff77 	bl	8007f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800807a:	b480      	push	{r7}
 800807c:	b085      	sub	sp, #20
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b21      	cmp	r3, #33	; 0x21
 800808c:	d13e      	bne.n	800810c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008096:	d114      	bne.n	80080c2 <UART_Transmit_IT+0x48>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d110      	bne.n	80080c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	1c9a      	adds	r2, r3, #2
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	621a      	str	r2, [r3, #32]
 80080c0:	e008      	b.n	80080d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	1c59      	adds	r1, r3, #1
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6211      	str	r1, [r2, #32]
 80080cc:	781a      	ldrb	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29b      	uxth	r3, r3
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4619      	mov	r1, r3
 80080e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10f      	bne.n	8008108 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008106:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	e000      	b.n	800810e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800810c:	2302      	movs	r3, #2
  }
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008130:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2220      	movs	r2, #32
 8008136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff fefc 	bl	8007f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b08c      	sub	sp, #48	; 0x30
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b22      	cmp	r3, #34	; 0x22
 800815c:	f040 80ab 	bne.w	80082b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008168:	d117      	bne.n	800819a <UART_Receive_IT+0x50>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d113      	bne.n	800819a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008172:	2300      	movs	r3, #0
 8008174:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	b29b      	uxth	r3, r3
 8008184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008188:	b29a      	uxth	r2, r3
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008192:	1c9a      	adds	r2, r3, #2
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	629a      	str	r2, [r3, #40]	; 0x28
 8008198:	e026      	b.n	80081e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80081a0:	2300      	movs	r3, #0
 80081a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ac:	d007      	beq.n	80081be <UART_Receive_IT+0x74>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10a      	bne.n	80081cc <UART_Receive_IT+0x82>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d106      	bne.n	80081cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c8:	701a      	strb	r2, [r3, #0]
 80081ca:	e008      	b.n	80081de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	3b01      	subs	r3, #1
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	4619      	mov	r1, r3
 80081f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d15a      	bne.n	80082b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0220 	bic.w	r2, r2, #32
 800820a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800821a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	695a      	ldr	r2, [r3, #20]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0201 	bic.w	r2, r2, #1
 800822a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008238:	2b01      	cmp	r3, #1
 800823a:	d135      	bne.n	80082a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	330c      	adds	r3, #12
 8008248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	613b      	str	r3, [r7, #16]
   return(result);
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f023 0310 	bic.w	r3, r3, #16
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	330c      	adds	r3, #12
 8008260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008262:	623a      	str	r2, [r7, #32]
 8008264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	69f9      	ldr	r1, [r7, #28]
 8008268:	6a3a      	ldr	r2, [r7, #32]
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e5      	bne.n	8008242 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	2b10      	cmp	r3, #16
 8008282:	d10a      	bne.n	800829a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff fe67 	bl	8007f74 <HAL_UARTEx_RxEventCallback>
 80082a6:	e002      	b.n	80082ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7ff fe4f 	bl	8007f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	e002      	b.n	80082b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	e000      	b.n	80082b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082b6:	2302      	movs	r3, #2
  }
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3730      	adds	r7, #48	; 0x30
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082c4:	b0c0      	sub	sp, #256	; 0x100
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082dc:	68d9      	ldr	r1, [r3, #12]
 80082de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	ea40 0301 	orr.w	r3, r0, r1
 80082e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	431a      	orrs	r2, r3
 8008300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	4313      	orrs	r3, r2
 8008308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800830c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008318:	f021 010c 	bic.w	r1, r1, #12
 800831c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008326:	430b      	orrs	r3, r1
 8008328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800832a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833a:	6999      	ldr	r1, [r3, #24]
 800833c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	ea40 0301 	orr.w	r3, r0, r1
 8008346:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	4b8f      	ldr	r3, [pc, #572]	; (800858c <UART_SetConfig+0x2cc>)
 8008350:	429a      	cmp	r2, r3
 8008352:	d005      	beq.n	8008360 <UART_SetConfig+0xa0>
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	4b8d      	ldr	r3, [pc, #564]	; (8008590 <UART_SetConfig+0x2d0>)
 800835c:	429a      	cmp	r2, r3
 800835e:	d104      	bne.n	800836a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008360:	f7ff f922 	bl	80075a8 <HAL_RCC_GetPCLK2Freq>
 8008364:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008368:	e003      	b.n	8008372 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800836a:	f7ff f909 	bl	8007580 <HAL_RCC_GetPCLK1Freq>
 800836e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800837c:	f040 810c 	bne.w	8008598 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008384:	2200      	movs	r2, #0
 8008386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800838a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800838e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008392:	4622      	mov	r2, r4
 8008394:	462b      	mov	r3, r5
 8008396:	1891      	adds	r1, r2, r2
 8008398:	65b9      	str	r1, [r7, #88]	; 0x58
 800839a:	415b      	adcs	r3, r3
 800839c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800839e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80083a2:	4621      	mov	r1, r4
 80083a4:	eb12 0801 	adds.w	r8, r2, r1
 80083a8:	4629      	mov	r1, r5
 80083aa:	eb43 0901 	adc.w	r9, r3, r1
 80083ae:	f04f 0200 	mov.w	r2, #0
 80083b2:	f04f 0300 	mov.w	r3, #0
 80083b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083c2:	4690      	mov	r8, r2
 80083c4:	4699      	mov	r9, r3
 80083c6:	4623      	mov	r3, r4
 80083c8:	eb18 0303 	adds.w	r3, r8, r3
 80083cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80083d0:	462b      	mov	r3, r5
 80083d2:	eb49 0303 	adc.w	r3, r9, r3
 80083d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80083ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80083ee:	460b      	mov	r3, r1
 80083f0:	18db      	adds	r3, r3, r3
 80083f2:	653b      	str	r3, [r7, #80]	; 0x50
 80083f4:	4613      	mov	r3, r2
 80083f6:	eb42 0303 	adc.w	r3, r2, r3
 80083fa:	657b      	str	r3, [r7, #84]	; 0x54
 80083fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008400:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008404:	f7f8 fba4 	bl	8000b50 <__aeabi_uldivmod>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4b61      	ldr	r3, [pc, #388]	; (8008594 <UART_SetConfig+0x2d4>)
 800840e:	fba3 2302 	umull	r2, r3, r3, r2
 8008412:	095b      	lsrs	r3, r3, #5
 8008414:	011c      	lsls	r4, r3, #4
 8008416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800841a:	2200      	movs	r2, #0
 800841c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008420:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008424:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008428:	4642      	mov	r2, r8
 800842a:	464b      	mov	r3, r9
 800842c:	1891      	adds	r1, r2, r2
 800842e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008430:	415b      	adcs	r3, r3
 8008432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008434:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008438:	4641      	mov	r1, r8
 800843a:	eb12 0a01 	adds.w	sl, r2, r1
 800843e:	4649      	mov	r1, r9
 8008440:	eb43 0b01 	adc.w	fp, r3, r1
 8008444:	f04f 0200 	mov.w	r2, #0
 8008448:	f04f 0300 	mov.w	r3, #0
 800844c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008450:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008458:	4692      	mov	sl, r2
 800845a:	469b      	mov	fp, r3
 800845c:	4643      	mov	r3, r8
 800845e:	eb1a 0303 	adds.w	r3, sl, r3
 8008462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008466:	464b      	mov	r3, r9
 8008468:	eb4b 0303 	adc.w	r3, fp, r3
 800846c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800847c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008484:	460b      	mov	r3, r1
 8008486:	18db      	adds	r3, r3, r3
 8008488:	643b      	str	r3, [r7, #64]	; 0x40
 800848a:	4613      	mov	r3, r2
 800848c:	eb42 0303 	adc.w	r3, r2, r3
 8008490:	647b      	str	r3, [r7, #68]	; 0x44
 8008492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800849a:	f7f8 fb59 	bl	8000b50 <__aeabi_uldivmod>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4611      	mov	r1, r2
 80084a4:	4b3b      	ldr	r3, [pc, #236]	; (8008594 <UART_SetConfig+0x2d4>)
 80084a6:	fba3 2301 	umull	r2, r3, r3, r1
 80084aa:	095b      	lsrs	r3, r3, #5
 80084ac:	2264      	movs	r2, #100	; 0x64
 80084ae:	fb02 f303 	mul.w	r3, r2, r3
 80084b2:	1acb      	subs	r3, r1, r3
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80084ba:	4b36      	ldr	r3, [pc, #216]	; (8008594 <UART_SetConfig+0x2d4>)
 80084bc:	fba3 2302 	umull	r2, r3, r3, r2
 80084c0:	095b      	lsrs	r3, r3, #5
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80084c8:	441c      	add	r4, r3
 80084ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80084d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80084dc:	4642      	mov	r2, r8
 80084de:	464b      	mov	r3, r9
 80084e0:	1891      	adds	r1, r2, r2
 80084e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80084e4:	415b      	adcs	r3, r3
 80084e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084ec:	4641      	mov	r1, r8
 80084ee:	1851      	adds	r1, r2, r1
 80084f0:	6339      	str	r1, [r7, #48]	; 0x30
 80084f2:	4649      	mov	r1, r9
 80084f4:	414b      	adcs	r3, r1
 80084f6:	637b      	str	r3, [r7, #52]	; 0x34
 80084f8:	f04f 0200 	mov.w	r2, #0
 80084fc:	f04f 0300 	mov.w	r3, #0
 8008500:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008504:	4659      	mov	r1, fp
 8008506:	00cb      	lsls	r3, r1, #3
 8008508:	4651      	mov	r1, sl
 800850a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800850e:	4651      	mov	r1, sl
 8008510:	00ca      	lsls	r2, r1, #3
 8008512:	4610      	mov	r0, r2
 8008514:	4619      	mov	r1, r3
 8008516:	4603      	mov	r3, r0
 8008518:	4642      	mov	r2, r8
 800851a:	189b      	adds	r3, r3, r2
 800851c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008520:	464b      	mov	r3, r9
 8008522:	460a      	mov	r2, r1
 8008524:	eb42 0303 	adc.w	r3, r2, r3
 8008528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800852c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008538:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800853c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008540:	460b      	mov	r3, r1
 8008542:	18db      	adds	r3, r3, r3
 8008544:	62bb      	str	r3, [r7, #40]	; 0x28
 8008546:	4613      	mov	r3, r2
 8008548:	eb42 0303 	adc.w	r3, r2, r3
 800854c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800854e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008552:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008556:	f7f8 fafb 	bl	8000b50 <__aeabi_uldivmod>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <UART_SetConfig+0x2d4>)
 8008560:	fba3 1302 	umull	r1, r3, r3, r2
 8008564:	095b      	lsrs	r3, r3, #5
 8008566:	2164      	movs	r1, #100	; 0x64
 8008568:	fb01 f303 	mul.w	r3, r1, r3
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	3332      	adds	r3, #50	; 0x32
 8008572:	4a08      	ldr	r2, [pc, #32]	; (8008594 <UART_SetConfig+0x2d4>)
 8008574:	fba2 2303 	umull	r2, r3, r2, r3
 8008578:	095b      	lsrs	r3, r3, #5
 800857a:	f003 0207 	and.w	r2, r3, #7
 800857e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4422      	add	r2, r4
 8008586:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008588:	e106      	b.n	8008798 <UART_SetConfig+0x4d8>
 800858a:	bf00      	nop
 800858c:	40011000 	.word	0x40011000
 8008590:	40011400 	.word	0x40011400
 8008594:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800859c:	2200      	movs	r2, #0
 800859e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80085a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80085aa:	4642      	mov	r2, r8
 80085ac:	464b      	mov	r3, r9
 80085ae:	1891      	adds	r1, r2, r2
 80085b0:	6239      	str	r1, [r7, #32]
 80085b2:	415b      	adcs	r3, r3
 80085b4:	627b      	str	r3, [r7, #36]	; 0x24
 80085b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085ba:	4641      	mov	r1, r8
 80085bc:	1854      	adds	r4, r2, r1
 80085be:	4649      	mov	r1, r9
 80085c0:	eb43 0501 	adc.w	r5, r3, r1
 80085c4:	f04f 0200 	mov.w	r2, #0
 80085c8:	f04f 0300 	mov.w	r3, #0
 80085cc:	00eb      	lsls	r3, r5, #3
 80085ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085d2:	00e2      	lsls	r2, r4, #3
 80085d4:	4614      	mov	r4, r2
 80085d6:	461d      	mov	r5, r3
 80085d8:	4643      	mov	r3, r8
 80085da:	18e3      	adds	r3, r4, r3
 80085dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085e0:	464b      	mov	r3, r9
 80085e2:	eb45 0303 	adc.w	r3, r5, r3
 80085e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085fa:	f04f 0200 	mov.w	r2, #0
 80085fe:	f04f 0300 	mov.w	r3, #0
 8008602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008606:	4629      	mov	r1, r5
 8008608:	008b      	lsls	r3, r1, #2
 800860a:	4621      	mov	r1, r4
 800860c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008610:	4621      	mov	r1, r4
 8008612:	008a      	lsls	r2, r1, #2
 8008614:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008618:	f7f8 fa9a 	bl	8000b50 <__aeabi_uldivmod>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4b60      	ldr	r3, [pc, #384]	; (80087a4 <UART_SetConfig+0x4e4>)
 8008622:	fba3 2302 	umull	r2, r3, r3, r2
 8008626:	095b      	lsrs	r3, r3, #5
 8008628:	011c      	lsls	r4, r3, #4
 800862a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800862e:	2200      	movs	r2, #0
 8008630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008638:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800863c:	4642      	mov	r2, r8
 800863e:	464b      	mov	r3, r9
 8008640:	1891      	adds	r1, r2, r2
 8008642:	61b9      	str	r1, [r7, #24]
 8008644:	415b      	adcs	r3, r3
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800864c:	4641      	mov	r1, r8
 800864e:	1851      	adds	r1, r2, r1
 8008650:	6139      	str	r1, [r7, #16]
 8008652:	4649      	mov	r1, r9
 8008654:	414b      	adcs	r3, r1
 8008656:	617b      	str	r3, [r7, #20]
 8008658:	f04f 0200 	mov.w	r2, #0
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008664:	4659      	mov	r1, fp
 8008666:	00cb      	lsls	r3, r1, #3
 8008668:	4651      	mov	r1, sl
 800866a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800866e:	4651      	mov	r1, sl
 8008670:	00ca      	lsls	r2, r1, #3
 8008672:	4610      	mov	r0, r2
 8008674:	4619      	mov	r1, r3
 8008676:	4603      	mov	r3, r0
 8008678:	4642      	mov	r2, r8
 800867a:	189b      	adds	r3, r3, r2
 800867c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008680:	464b      	mov	r3, r9
 8008682:	460a      	mov	r2, r1
 8008684:	eb42 0303 	adc.w	r3, r2, r3
 8008688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800868c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	67bb      	str	r3, [r7, #120]	; 0x78
 8008696:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008698:	f04f 0200 	mov.w	r2, #0
 800869c:	f04f 0300 	mov.w	r3, #0
 80086a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80086a4:	4649      	mov	r1, r9
 80086a6:	008b      	lsls	r3, r1, #2
 80086a8:	4641      	mov	r1, r8
 80086aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086ae:	4641      	mov	r1, r8
 80086b0:	008a      	lsls	r2, r1, #2
 80086b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80086b6:	f7f8 fa4b 	bl	8000b50 <__aeabi_uldivmod>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4611      	mov	r1, r2
 80086c0:	4b38      	ldr	r3, [pc, #224]	; (80087a4 <UART_SetConfig+0x4e4>)
 80086c2:	fba3 2301 	umull	r2, r3, r3, r1
 80086c6:	095b      	lsrs	r3, r3, #5
 80086c8:	2264      	movs	r2, #100	; 0x64
 80086ca:	fb02 f303 	mul.w	r3, r2, r3
 80086ce:	1acb      	subs	r3, r1, r3
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	3332      	adds	r3, #50	; 0x32
 80086d4:	4a33      	ldr	r2, [pc, #204]	; (80087a4 <UART_SetConfig+0x4e4>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	095b      	lsrs	r3, r3, #5
 80086dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086e0:	441c      	add	r4, r3
 80086e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086e6:	2200      	movs	r2, #0
 80086e8:	673b      	str	r3, [r7, #112]	; 0x70
 80086ea:	677a      	str	r2, [r7, #116]	; 0x74
 80086ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80086f0:	4642      	mov	r2, r8
 80086f2:	464b      	mov	r3, r9
 80086f4:	1891      	adds	r1, r2, r2
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	415b      	adcs	r3, r3
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008700:	4641      	mov	r1, r8
 8008702:	1851      	adds	r1, r2, r1
 8008704:	6039      	str	r1, [r7, #0]
 8008706:	4649      	mov	r1, r9
 8008708:	414b      	adcs	r3, r1
 800870a:	607b      	str	r3, [r7, #4]
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008718:	4659      	mov	r1, fp
 800871a:	00cb      	lsls	r3, r1, #3
 800871c:	4651      	mov	r1, sl
 800871e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008722:	4651      	mov	r1, sl
 8008724:	00ca      	lsls	r2, r1, #3
 8008726:	4610      	mov	r0, r2
 8008728:	4619      	mov	r1, r3
 800872a:	4603      	mov	r3, r0
 800872c:	4642      	mov	r2, r8
 800872e:	189b      	adds	r3, r3, r2
 8008730:	66bb      	str	r3, [r7, #104]	; 0x68
 8008732:	464b      	mov	r3, r9
 8008734:	460a      	mov	r2, r1
 8008736:	eb42 0303 	adc.w	r3, r2, r3
 800873a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800873c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	663b      	str	r3, [r7, #96]	; 0x60
 8008746:	667a      	str	r2, [r7, #100]	; 0x64
 8008748:	f04f 0200 	mov.w	r2, #0
 800874c:	f04f 0300 	mov.w	r3, #0
 8008750:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008754:	4649      	mov	r1, r9
 8008756:	008b      	lsls	r3, r1, #2
 8008758:	4641      	mov	r1, r8
 800875a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800875e:	4641      	mov	r1, r8
 8008760:	008a      	lsls	r2, r1, #2
 8008762:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008766:	f7f8 f9f3 	bl	8000b50 <__aeabi_uldivmod>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <UART_SetConfig+0x4e4>)
 8008770:	fba3 1302 	umull	r1, r3, r3, r2
 8008774:	095b      	lsrs	r3, r3, #5
 8008776:	2164      	movs	r1, #100	; 0x64
 8008778:	fb01 f303 	mul.w	r3, r1, r3
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	3332      	adds	r3, #50	; 0x32
 8008782:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <UART_SetConfig+0x4e4>)
 8008784:	fba2 2303 	umull	r2, r3, r2, r3
 8008788:	095b      	lsrs	r3, r3, #5
 800878a:	f003 020f 	and.w	r2, r3, #15
 800878e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4422      	add	r2, r4
 8008796:	609a      	str	r2, [r3, #8]
}
 8008798:	bf00      	nop
 800879a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800879e:	46bd      	mov	sp, r7
 80087a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087a4:	51eb851f 	.word	0x51eb851f

080087a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087a8:	b084      	sub	sp, #16
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	f107 001c 	add.w	r0, r7, #28
 80087b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d122      	bne.n	8008806 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80087d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80087e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d105      	bne.n	80087fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f9c0 	bl	8008b80 <USB_CoreReset>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
 8008804:	e01a      	b.n	800883c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f9b4 	bl	8008b80 <USB_CoreReset>
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800881c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800881e:	2b00      	cmp	r3, #0
 8008820:	d106      	bne.n	8008830 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	639a      	str	r2, [r3, #56]	; 0x38
 800882e:	e005      	b.n	800883c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008834:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	2b01      	cmp	r3, #1
 8008840:	d10b      	bne.n	800885a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f043 0206 	orr.w	r2, r3, #6
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f043 0220 	orr.w	r2, r3, #32
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008866:	b004      	add	sp, #16
 8008868:	4770      	bx	lr

0800886a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f043 0201 	orr.w	r2, r3, #1
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f023 0201 	bic.w	r2, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	460b      	mov	r3, r1
 80088b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088ca:	78fb      	ldrb	r3, [r7, #3]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d115      	bne.n	80088fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088dc:	2001      	movs	r0, #1
 80088de:	f7fa fe39 	bl	8003554 <HAL_Delay>
      ms++;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3301      	adds	r3, #1
 80088e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f93a 	bl	8008b62 <USB_GetMode>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d01e      	beq.n	8008932 <USB_SetCurrentMode+0x84>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b31      	cmp	r3, #49	; 0x31
 80088f8:	d9f0      	bls.n	80088dc <USB_SetCurrentMode+0x2e>
 80088fa:	e01a      	b.n	8008932 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d115      	bne.n	800892e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800890e:	2001      	movs	r0, #1
 8008910:	f7fa fe20 	bl	8003554 <HAL_Delay>
      ms++;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3301      	adds	r3, #1
 8008918:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f921 	bl	8008b62 <USB_GetMode>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d005      	beq.n	8008932 <USB_SetCurrentMode+0x84>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b31      	cmp	r3, #49	; 0x31
 800892a:	d9f0      	bls.n	800890e <USB_SetCurrentMode+0x60>
 800892c:	e001      	b.n	8008932 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e005      	b.n	800893e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b32      	cmp	r3, #50	; 0x32
 8008936:	d101      	bne.n	800893c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e000      	b.n	800893e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008952:	2300      	movs	r3, #0
 8008954:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3301      	adds	r3, #1
 800895a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4a13      	ldr	r2, [pc, #76]	; (80089ac <USB_FlushTxFifo+0x64>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d901      	bls.n	8008968 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e01b      	b.n	80089a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	daf2      	bge.n	8008956 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	019b      	lsls	r3, r3, #6
 8008978:	f043 0220 	orr.w	r2, r3, #32
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4a08      	ldr	r2, [pc, #32]	; (80089ac <USB_FlushTxFifo+0x64>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d901      	bls.n	8008992 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e006      	b.n	80089a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f003 0320 	and.w	r3, r3, #32
 800899a:	2b20      	cmp	r3, #32
 800899c:	d0f0      	beq.n	8008980 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	00030d40 	.word	0x00030d40

080089b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3301      	adds	r3, #1
 80089c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4a11      	ldr	r2, [pc, #68]	; (8008a0c <USB_FlushRxFifo+0x5c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d901      	bls.n	80089ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e018      	b.n	8008a00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	daf2      	bge.n	80089bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2210      	movs	r2, #16
 80089de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	3301      	adds	r3, #1
 80089e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4a08      	ldr	r2, [pc, #32]	; (8008a0c <USB_FlushRxFifo+0x5c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d901      	bls.n	80089f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e006      	b.n	8008a00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	f003 0310 	and.w	r3, r3, #16
 80089fa:	2b10      	cmp	r3, #16
 80089fc:	d0f0      	beq.n	80089e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	00030d40 	.word	0x00030d40

08008a10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b089      	sub	sp, #36	; 0x24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	460b      	mov	r3, r1
 8008a20:	71fb      	strb	r3, [r7, #7]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d123      	bne.n	8008a7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a36:	88bb      	ldrh	r3, [r7, #4]
 8008a38:	3303      	adds	r3, #3
 8008a3a:	089b      	lsrs	r3, r3, #2
 8008a3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a3e:	2300      	movs	r3, #0
 8008a40:	61bb      	str	r3, [r7, #24]
 8008a42:	e018      	b.n	8008a76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	031a      	lsls	r2, r3, #12
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a50:	461a      	mov	r2, r3
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	3301      	adds	r3, #1
 8008a62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	3301      	adds	r3, #1
 8008a68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	3301      	adds	r3, #1
 8008a74:	61bb      	str	r3, [r7, #24]
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d3e2      	bcc.n	8008a44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3724      	adds	r7, #36	; 0x24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b08b      	sub	sp, #44	; 0x2c
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008aa2:	88fb      	ldrh	r3, [r7, #6]
 8008aa4:	089b      	lsrs	r3, r3, #2
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008aaa:	88fb      	ldrh	r3, [r7, #6]
 8008aac:	f003 0303 	and.w	r3, r3, #3
 8008ab0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	623b      	str	r3, [r7, #32]
 8008ab6:	e014      	b.n	8008ae2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	3301      	adds	r3, #1
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	3301      	adds	r3, #1
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	623b      	str	r3, [r7, #32]
 8008ae2:	6a3a      	ldr	r2, [r7, #32]
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d3e6      	bcc.n	8008ab8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008aea:	8bfb      	ldrh	r3, [r7, #30]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01e      	beq.n	8008b2e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008afa:	461a      	mov	r2, r3
 8008afc:	f107 0310 	add.w	r3, r7, #16
 8008b00:	6812      	ldr	r2, [r2, #0]
 8008b02:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	701a      	strb	r2, [r3, #0]
      i++;
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	3301      	adds	r3, #1
 8008b20:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008b22:	8bfb      	ldrh	r3, [r7, #30]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b28:	8bfb      	ldrh	r3, [r7, #30]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1ea      	bne.n	8008b04 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	372c      	adds	r7, #44	; 0x2c
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	4013      	ands	r3, r2
 8008b52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b54:	68fb      	ldr	r3, [r7, #12]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
	...

08008b80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4a13      	ldr	r2, [pc, #76]	; (8008be4 <USB_CoreReset+0x64>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d901      	bls.n	8008b9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e01b      	b.n	8008bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	daf2      	bge.n	8008b8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	f043 0201 	orr.w	r2, r3, #1
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4a09      	ldr	r2, [pc, #36]	; (8008be4 <USB_CoreReset+0x64>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d901      	bls.n	8008bc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e006      	b.n	8008bd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d0f0      	beq.n	8008bb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	00030d40 	.word	0x00030d40

08008be8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008be8:	b084      	sub	sp, #16
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b086      	sub	sp, #24
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c08:	461a      	mov	r2, r3
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d018      	beq.n	8008c70 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d10a      	bne.n	8008c5a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c52:	f043 0304 	orr.w	r3, r3, #4
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	e014      	b.n	8008c84 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c68:	f023 0304 	bic.w	r3, r3, #4
 8008c6c:	6013      	str	r3, [r2, #0]
 8008c6e:	e009      	b.n	8008c84 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c7e:	f023 0304 	bic.w	r3, r3, #4
 8008c82:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c84:	2110      	movs	r1, #16
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff fe5e 	bl	8008948 <USB_FlushTxFifo>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff fe8a 	bl	80089b0 <USB_FlushRxFifo>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	613b      	str	r3, [r7, #16]
 8008caa:	e015      	b.n	8008cd8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb8:	461a      	mov	r2, r3
 8008cba:	f04f 33ff 	mov.w	r3, #4294967295
 8008cbe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ccc:	461a      	mov	r2, r3
 8008cce:	2300      	movs	r3, #0
 8008cd0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	613b      	str	r3, [r7, #16]
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d3e5      	bcc.n	8008cac <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00b      	beq.n	8008d12 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d00:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a13      	ldr	r2, [pc, #76]	; (8008d54 <USB_HostInit+0x16c>)
 8008d06:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a13      	ldr	r2, [pc, #76]	; (8008d58 <USB_HostInit+0x170>)
 8008d0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008d10:	e009      	b.n	8008d26 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2280      	movs	r2, #128	; 0x80
 8008d16:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a10      	ldr	r2, [pc, #64]	; (8008d5c <USB_HostInit+0x174>)
 8008d1c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a0f      	ldr	r2, [pc, #60]	; (8008d60 <USB_HostInit+0x178>)
 8008d22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d105      	bne.n	8008d38 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	f043 0210 	orr.w	r2, r3, #16
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	699a      	ldr	r2, [r3, #24]
 8008d3c:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <USB_HostInit+0x17c>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d50:	b004      	add	sp, #16
 8008d52:	4770      	bx	lr
 8008d54:	01000200 	.word	0x01000200
 8008d58:	00e00300 	.word	0x00e00300
 8008d5c:	00600080 	.word	0x00600080
 8008d60:	004000e0 	.word	0x004000e0
 8008d64:	a3200008 	.word	0xa3200008

08008d68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	460b      	mov	r3, r1
 8008d72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d86:	f023 0303 	bic.w	r3, r3, #3
 8008d8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	f003 0303 	and.w	r3, r3, #3
 8008d9a:	68f9      	ldr	r1, [r7, #12]
 8008d9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008da0:	4313      	orrs	r3, r2
 8008da2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d107      	bne.n	8008dba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008db0:	461a      	mov	r2, r3
 8008db2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008db6:	6053      	str	r3, [r2, #4]
 8008db8:	e009      	b.n	8008dce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008dba:	78fb      	ldrb	r3, [r7, #3]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d106      	bne.n	8008dce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f241 7370 	movw	r3, #6000	; 0x1770
 8008dcc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008dfc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e0a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008e0c:	2064      	movs	r0, #100	; 0x64
 8008e0e:	f7fa fba1 	bl	8003554 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008e20:	200a      	movs	r0, #10
 8008e22:	f7fa fb97 	bl	8003554 <HAL_Delay>

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008e54:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d109      	bne.n	8008e74 <USB_DriveVbus+0x44>
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d106      	bne.n	8008e74 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e72:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e7e:	d109      	bne.n	8008e94 <USB_DriveVbus+0x64>
 8008e80:	78fb      	ldrb	r3, [r7, #3]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d106      	bne.n	8008e94 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e92:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b085      	sub	sp, #20
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	0c5b      	lsrs	r3, r3, #17
 8008ec0:	f003 0303 	and.w	r3, r3, #3
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	b29b      	uxth	r3, r3
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
	...

08008ef4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b088      	sub	sp, #32
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	4608      	mov	r0, r1
 8008efe:	4611      	mov	r1, r2
 8008f00:	461a      	mov	r2, r3
 8008f02:	4603      	mov	r3, r0
 8008f04:	70fb      	strb	r3, [r7, #3]
 8008f06:	460b      	mov	r3, r1
 8008f08:	70bb      	strb	r3, [r7, #2]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008f16:	78fb      	ldrb	r3, [r7, #3]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f22:	461a      	mov	r2, r3
 8008f24:	f04f 33ff 	mov.w	r3, #4294967295
 8008f28:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008f2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d87e      	bhi.n	8009030 <USB_HC_Init+0x13c>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <USB_HC_Init+0x44>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f49 	.word	0x08008f49
 8008f3c:	08008ff3 	.word	0x08008ff3
 8008f40:	08008f49 	.word	0x08008f49
 8008f44:	08008fb5 	.word	0x08008fb5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f54:	461a      	mov	r2, r3
 8008f56:	f240 439d 	movw	r3, #1181	; 0x49d
 8008f5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008f5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	da10      	bge.n	8008f86 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f64:	78fb      	ldrb	r3, [r7, #3]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	0151      	lsls	r1, r2, #5
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	440a      	add	r2, r1
 8008f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f82:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008f84:	e057      	b.n	8009036 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d051      	beq.n	8009036 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008f92:	78fb      	ldrb	r3, [r7, #3]
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	0151      	lsls	r1, r2, #5
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	440a      	add	r2, r1
 8008fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008fb0:	60d3      	str	r3, [r2, #12]
      break;
 8008fb2:	e040      	b.n	8009036 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	015a      	lsls	r2, r3, #5
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	f240 639d 	movw	r3, #1693	; 0x69d
 8008fc6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008fc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	da34      	bge.n	800903a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	78fa      	ldrb	r2, [r7, #3]
 8008fe0:	0151      	lsls	r1, r2, #5
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	440a      	add	r2, r1
 8008fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fee:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008ff0:	e023      	b.n	800903a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ff2:	78fb      	ldrb	r3, [r7, #3]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ffe:	461a      	mov	r2, r3
 8009000:	f240 2325 	movw	r3, #549	; 0x225
 8009004:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009006:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800900a:	2b00      	cmp	r3, #0
 800900c:	da17      	bge.n	800903e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800900e:	78fb      	ldrb	r3, [r7, #3]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	4413      	add	r3, r2
 8009016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	78fa      	ldrb	r2, [r7, #3]
 800901e:	0151      	lsls	r1, r2, #5
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	440a      	add	r2, r1
 8009024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009028:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800902c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800902e:	e006      	b.n	800903e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	77fb      	strb	r3, [r7, #31]
      break;
 8009034:	e004      	b.n	8009040 <USB_HC_Init+0x14c>
      break;
 8009036:	bf00      	nop
 8009038:	e002      	b.n	8009040 <USB_HC_Init+0x14c>
      break;
 800903a:	bf00      	nop
 800903c:	e000      	b.n	8009040 <USB_HC_Init+0x14c>
      break;
 800903e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	4413      	add	r3, r2
 8009048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	0151      	lsls	r1, r2, #5
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	440a      	add	r2, r1
 8009056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800905a:	f043 0302 	orr.w	r3, r3, #2
 800905e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009066:	699a      	ldr	r2, [r3, #24]
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	f003 030f 	and.w	r3, r3, #15
 800906e:	2101      	movs	r1, #1
 8009070:	fa01 f303 	lsl.w	r3, r1, r3
 8009074:	6939      	ldr	r1, [r7, #16]
 8009076:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800907a:	4313      	orrs	r3, r2
 800907c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800908a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800908e:	2b00      	cmp	r3, #0
 8009090:	da03      	bge.n	800909a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009096:	61bb      	str	r3, [r7, #24]
 8009098:	e001      	b.n	800909e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff feff 	bl	8008ea2 <USB_GetHostSpeed>
 80090a4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80090a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d106      	bne.n	80090bc <USB_HC_Init+0x1c8>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d003      	beq.n	80090bc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80090b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090b8:	617b      	str	r3, [r7, #20]
 80090ba:	e001      	b.n	80090c0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090c0:	787b      	ldrb	r3, [r7, #1]
 80090c2:	059b      	lsls	r3, r3, #22
 80090c4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80090c8:	78bb      	ldrb	r3, [r7, #2]
 80090ca:	02db      	lsls	r3, r3, #11
 80090cc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090d0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80090d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090d6:	049b      	lsls	r3, r3, #18
 80090d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80090dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80090de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80090e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80090e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	0159      	lsls	r1, r3, #5
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	440b      	add	r3, r1
 80090f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090fc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80090fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009102:	2b03      	cmp	r3, #3
 8009104:	d003      	beq.n	800910e <USB_HC_Init+0x21a>
 8009106:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800910a:	2b01      	cmp	r3, #1
 800910c:	d10f      	bne.n	800912e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	4413      	add	r3, r2
 8009116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	78fa      	ldrb	r2, [r7, #3]
 800911e:	0151      	lsls	r1, r2, #5
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	440a      	add	r2, r1
 8009124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800912c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800912e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3720      	adds	r7, #32
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08c      	sub	sp, #48	; 0x30
 800913c:	af02      	add	r7, sp, #8
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	4613      	mov	r3, r2
 8009144:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	785b      	ldrb	r3, [r3, #1]
 800914e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009154:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800915e:	2b00      	cmp	r3, #0
 8009160:	d02d      	beq.n	80091be <USB_HC_StartXfer+0x86>
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	791b      	ldrb	r3, [r3, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d129      	bne.n	80091be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800916a:	79fb      	ldrb	r3, [r7, #7]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d117      	bne.n	80091a0 <USB_HC_StartXfer+0x68>
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	79db      	ldrb	r3, [r3, #7]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d003      	beq.n	8009180 <USB_HC_StartXfer+0x48>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	79db      	ldrb	r3, [r3, #7]
 800917c:	2b02      	cmp	r3, #2
 800917e:	d10f      	bne.n	80091a0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	4413      	add	r3, r2
 8009188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	69fa      	ldr	r2, [r7, #28]
 8009190:	0151      	lsls	r1, r2, #5
 8009192:	6a3a      	ldr	r2, [r7, #32]
 8009194:	440a      	add	r2, r1
 8009196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800919a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800919e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80091a0:	79fb      	ldrb	r3, [r7, #7]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10b      	bne.n	80091be <USB_HC_StartXfer+0x86>
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	795b      	ldrb	r3, [r3, #5]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d107      	bne.n	80091be <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	785b      	ldrb	r3, [r3, #1]
 80091b2:	4619      	mov	r1, r3
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 fa0f 	bl	80095d8 <USB_DoPing>
      return HAL_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	e0f8      	b.n	80093b0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d018      	beq.n	80091f8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	8912      	ldrh	r2, [r2, #8]
 80091ce:	4413      	add	r3, r2
 80091d0:	3b01      	subs	r3, #1
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	8912      	ldrh	r2, [r2, #8]
 80091d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80091da:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80091dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80091de:	8b7b      	ldrh	r3, [r7, #26]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d90b      	bls.n	80091fc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80091e4:	8b7b      	ldrh	r3, [r7, #26]
 80091e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80091e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	8912      	ldrh	r2, [r2, #8]
 80091ee:	fb03 f202 	mul.w	r2, r3, r2
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	611a      	str	r2, [r3, #16]
 80091f6:	e001      	b.n	80091fc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80091f8:	2301      	movs	r3, #1
 80091fa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	78db      	ldrb	r3, [r3, #3]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d007      	beq.n	8009214 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009204:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	8912      	ldrh	r2, [r2, #8]
 800920a:	fb03 f202 	mul.w	r2, r3, r2
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	611a      	str	r2, [r3, #16]
 8009212:	e003      	b.n	800921c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	695a      	ldr	r2, [r3, #20]
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009224:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009226:	04d9      	lsls	r1, r3, #19
 8009228:	4b63      	ldr	r3, [pc, #396]	; (80093b8 <USB_HC_StartXfer+0x280>)
 800922a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800922c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	7a9b      	ldrb	r3, [r3, #10]
 8009232:	075b      	lsls	r3, r3, #29
 8009234:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009238:	69f9      	ldr	r1, [r7, #28]
 800923a:	0148      	lsls	r0, r1, #5
 800923c:	6a39      	ldr	r1, [r7, #32]
 800923e:	4401      	add	r1, r0
 8009240:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009244:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009246:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009248:	79fb      	ldrb	r3, [r7, #7]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d009      	beq.n	8009262 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	68d9      	ldr	r1, [r3, #12]
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	015a      	lsls	r2, r3, #5
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	4413      	add	r3, r2
 800925a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800925e:	460a      	mov	r2, r1
 8009260:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	bf0c      	ite	eq
 8009272:	2301      	moveq	r3, #1
 8009274:	2300      	movne	r3, #0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	4413      	add	r3, r2
 8009282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	69fa      	ldr	r2, [r7, #28]
 800928a:	0151      	lsls	r1, r2, #5
 800928c:	6a3a      	ldr	r2, [r7, #32]
 800928e:	440a      	add	r2, r1
 8009290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009294:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009298:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	7e7b      	ldrb	r3, [r7, #25]
 80092aa:	075b      	lsls	r3, r3, #29
 80092ac:	69f9      	ldr	r1, [r7, #28]
 80092ae:	0148      	lsls	r0, r1, #5
 80092b0:	6a39      	ldr	r1, [r7, #32]
 80092b2:	4401      	add	r1, r0
 80092b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80092b8:	4313      	orrs	r3, r2
 80092ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092d2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	78db      	ldrb	r3, [r3, #3]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d004      	beq.n	80092e6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092e2:	613b      	str	r3, [r7, #16]
 80092e4:	e003      	b.n	80092ee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092ec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092f4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009302:	461a      	mov	r2, r3
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009308:	79fb      	ldrb	r3, [r7, #7]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	e04e      	b.n	80093b0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	78db      	ldrb	r3, [r3, #3]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d149      	bne.n	80093ae <USB_HC_StartXfer+0x276>
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d045      	beq.n	80093ae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	79db      	ldrb	r3, [r3, #7]
 8009326:	2b03      	cmp	r3, #3
 8009328:	d830      	bhi.n	800938c <USB_HC_StartXfer+0x254>
 800932a:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <USB_HC_StartXfer+0x1f8>)
 800932c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009330:	08009341 	.word	0x08009341
 8009334:	08009365 	.word	0x08009365
 8009338:	08009341 	.word	0x08009341
 800933c:	08009365 	.word	0x08009365
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	695b      	ldr	r3, [r3, #20]
 8009344:	3303      	adds	r3, #3
 8009346:	089b      	lsrs	r3, r3, #2
 8009348:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800934a:	8afa      	ldrh	r2, [r7, #22]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	b29b      	uxth	r3, r3
 8009352:	429a      	cmp	r2, r3
 8009354:	d91c      	bls.n	8009390 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	f043 0220 	orr.w	r2, r3, #32
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	619a      	str	r2, [r3, #24]
        }
        break;
 8009362:	e015      	b.n	8009390 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	3303      	adds	r3, #3
 800936a:	089b      	lsrs	r3, r3, #2
 800936c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800936e:	8afa      	ldrh	r2, [r7, #22]
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	b29b      	uxth	r3, r3
 800937a:	429a      	cmp	r2, r3
 800937c:	d90a      	bls.n	8009394 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	619a      	str	r2, [r3, #24]
        }
        break;
 800938a:	e003      	b.n	8009394 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800938c:	bf00      	nop
 800938e:	e002      	b.n	8009396 <USB_HC_StartXfer+0x25e>
        break;
 8009390:	bf00      	nop
 8009392:	e000      	b.n	8009396 <USB_HC_StartXfer+0x25e>
        break;
 8009394:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	68d9      	ldr	r1, [r3, #12]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	785a      	ldrb	r2, [r3, #1]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	2000      	movs	r0, #0
 80093a6:	9000      	str	r0, [sp, #0]
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f7ff fb31 	bl	8008a10 <USB_WritePacket>
  }

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3728      	adds	r7, #40	; 0x28
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	1ff80000 	.word	0x1ff80000

080093bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	b29b      	uxth	r3, r3
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80093de:	b480      	push	{r7}
 80093e0:	b089      	sub	sp, #36	; 0x24
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	460b      	mov	r3, r1
 80093e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80093ee:	78fb      	ldrb	r3, [r7, #3]
 80093f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80093f2:	2300      	movs	r3, #0
 80093f4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	0c9b      	lsrs	r3, r3, #18
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	4413      	add	r3, r2
 8009414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	0fdb      	lsrs	r3, r3, #31
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f003 0320 	and.w	r3, r3, #32
 800942a:	2b20      	cmp	r3, #32
 800942c:	d104      	bne.n	8009438 <USB_HC_Halt+0x5a>
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	e0c8      	b.n	80095ca <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <USB_HC_Halt+0x66>
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d163      	bne.n	800950c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	4413      	add	r3, r2
 800944c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69ba      	ldr	r2, [r7, #24]
 8009454:	0151      	lsls	r1, r2, #5
 8009456:	69fa      	ldr	r2, [r7, #28]
 8009458:	440a      	add	r2, r1
 800945a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800945e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009462:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	f003 0320 	and.w	r3, r3, #32
 800946c:	2b00      	cmp	r3, #0
 800946e:	f040 80ab 	bne.w	80095c8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009476:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d133      	bne.n	80094e6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	4413      	add	r3, r2
 8009486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	0151      	lsls	r1, r2, #5
 8009490:	69fa      	ldr	r2, [r7, #28]
 8009492:	440a      	add	r2, r1
 8009494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800949c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	0151      	lsls	r1, r2, #5
 80094b0:	69fa      	ldr	r2, [r7, #28]
 80094b2:	440a      	add	r2, r1
 80094b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094bc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3301      	adds	r3, #1
 80094c2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094ca:	d81d      	bhi.n	8009508 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	015a      	lsls	r2, r3, #5
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	4413      	add	r3, r2
 80094d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094e2:	d0ec      	beq.n	80094be <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80094e4:	e070      	b.n	80095c8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	015a      	lsls	r2, r3, #5
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	0151      	lsls	r1, r2, #5
 80094f8:	69fa      	ldr	r2, [r7, #28]
 80094fa:	440a      	add	r2, r1
 80094fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009504:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009506:	e05f      	b.n	80095c8 <USB_HC_Halt+0x1ea>
            break;
 8009508:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800950a:	e05d      	b.n	80095c8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	4413      	add	r3, r2
 8009514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69ba      	ldr	r2, [r7, #24]
 800951c:	0151      	lsls	r1, r2, #5
 800951e:	69fa      	ldr	r2, [r7, #28]
 8009520:	440a      	add	r2, r1
 8009522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009526:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800952a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d133      	bne.n	80095a4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	4413      	add	r3, r2
 8009544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	0151      	lsls	r1, r2, #5
 800954e:	69fa      	ldr	r2, [r7, #28]
 8009550:	440a      	add	r2, r1
 8009552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800955a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	4413      	add	r3, r2
 8009564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	69ba      	ldr	r2, [r7, #24]
 800956c:	0151      	lsls	r1, r2, #5
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	440a      	add	r2, r1
 8009572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009576:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800957a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3301      	adds	r3, #1
 8009580:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009588:	d81d      	bhi.n	80095c6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	4413      	add	r3, r2
 8009592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800959c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095a0:	d0ec      	beq.n	800957c <USB_HC_Halt+0x19e>
 80095a2:	e011      	b.n	80095c8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	0151      	lsls	r1, r2, #5
 80095b6:	69fa      	ldr	r2, [r7, #28]
 80095b8:	440a      	add	r2, r1
 80095ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	e000      	b.n	80095c8 <USB_HC_Halt+0x1ea>
          break;
 80095c6:	bf00      	nop
    }
  }

  return HAL_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3724      	adds	r7, #36	; 0x24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
	...

080095d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80095e8:	78fb      	ldrb	r3, [r7, #3]
 80095ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80095ec:	2301      	movs	r3, #1
 80095ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	04da      	lsls	r2, r3, #19
 80095f4:	4b15      	ldr	r3, [pc, #84]	; (800964c <USB_DoPing+0x74>)
 80095f6:	4013      	ands	r3, r2
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	0151      	lsls	r1, r2, #5
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	440a      	add	r2, r1
 8009600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009608:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	4413      	add	r3, r2
 8009612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009620:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009628:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	4413      	add	r3, r2
 8009632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009636:	461a      	mov	r2, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	371c      	adds	r7, #28
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	1ff80000 	.word	0x1ff80000

08009650 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b088      	sub	sp, #32
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009660:	2300      	movs	r3, #0
 8009662:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff f911 	bl	800888c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800966a:	2110      	movs	r1, #16
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff f96b 	bl	8008948 <USB_FlushTxFifo>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7ff f997 	bl	80089b0 <USB_FlushRxFifo>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800968c:	2300      	movs	r3, #0
 800968e:	61bb      	str	r3, [r7, #24]
 8009690:	e01f      	b.n	80096d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	4413      	add	r3, r2
 800969a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096c6:	461a      	mov	r2, r3
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	3301      	adds	r3, #1
 80096d0:	61bb      	str	r3, [r7, #24]
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	2b0f      	cmp	r3, #15
 80096d6:	d9dc      	bls.n	8009692 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80096d8:	2300      	movs	r3, #0
 80096da:	61bb      	str	r3, [r7, #24]
 80096dc:	e034      	b.n	8009748 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009704:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	4413      	add	r3, r2
 800970e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009712:	461a      	mov	r2, r3
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3301      	adds	r3, #1
 800971c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009724:	d80c      	bhi.n	8009740 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	4413      	add	r3, r2
 800972e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800973c:	d0ec      	beq.n	8009718 <USB_StopHost+0xc8>
 800973e:	e000      	b.n	8009742 <USB_StopHost+0xf2>
        break;
 8009740:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	3301      	adds	r3, #1
 8009746:	61bb      	str	r3, [r7, #24]
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	2b0f      	cmp	r3, #15
 800974c:	d9c7      	bls.n	80096de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009754:	461a      	mov	r2, r3
 8009756:	f04f 33ff 	mov.w	r3, #4294967295
 800975a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f04f 32ff 	mov.w	r2, #4294967295
 8009762:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff f880 	bl	800886a <USB_EnableGlobalInt>

  return ret;
 800976a:	7ffb      	ldrb	r3, [r7, #31]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3720      	adds	r7, #32
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009774:	b590      	push	{r4, r7, lr}
 8009776:	b089      	sub	sp, #36	; 0x24
 8009778:	af04      	add	r7, sp, #16
 800977a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800977c:	2301      	movs	r3, #1
 800977e:	2202      	movs	r2, #2
 8009780:	2102      	movs	r1, #2
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fc66 	bl	800a054 <USBH_FindInterface>
 8009788:	4603      	mov	r3, r0
 800978a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	2bff      	cmp	r3, #255	; 0xff
 8009790:	d002      	beq.n	8009798 <USBH_CDC_InterfaceInit+0x24>
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d901      	bls.n	800979c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009798:	2302      	movs	r3, #2
 800979a:	e13d      	b.n	8009a18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800979c:	7bfb      	ldrb	r3, [r7, #15]
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fc3b 	bl	800a01c <USBH_SelectInterface>
 80097a6:	4603      	mov	r3, r0
 80097a8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80097aa:	7bbb      	ldrb	r3, [r7, #14]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80097b0:	2302      	movs	r3, #2
 80097b2:	e131      	b.n	8009a18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80097ba:	2050      	movs	r0, #80	; 0x50
 80097bc:	f003 fa0c 	bl	800cbd8 <malloc>
 80097c0:	4603      	mov	r3, r0
 80097c2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80097d4:	2302      	movs	r3, #2
 80097d6:	e11f      	b.n	8009a18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80097d8:	2250      	movs	r2, #80	; 0x50
 80097da:	2100      	movs	r1, #0
 80097dc:	68b8      	ldr	r0, [r7, #8]
 80097de:	f003 fab7 	bl	800cd50 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	211a      	movs	r1, #26
 80097e8:	fb01 f303 	mul.w	r3, r1, r3
 80097ec:	4413      	add	r3, r2
 80097ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	b25b      	sxtb	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	da15      	bge.n	8009826 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	211a      	movs	r1, #26
 8009800:	fb01 f303 	mul.w	r3, r1, r3
 8009804:	4413      	add	r3, r2
 8009806:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800980a:	781a      	ldrb	r2, [r3, #0]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	211a      	movs	r1, #26
 8009816:	fb01 f303 	mul.w	r3, r1, r3
 800981a:	4413      	add	r3, r2
 800981c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009820:	881a      	ldrh	r2, [r3, #0]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f001 ff2e 	bl	800b68e <USBH_AllocPipe>
 8009832:	4603      	mov	r3, r0
 8009834:	461a      	mov	r2, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	7819      	ldrb	r1, [r3, #0]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	7858      	ldrb	r0, [r3, #1]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	8952      	ldrh	r2, [r2, #10]
 8009852:	9202      	str	r2, [sp, #8]
 8009854:	2203      	movs	r2, #3
 8009856:	9201      	str	r2, [sp, #4]
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	4623      	mov	r3, r4
 800985c:	4602      	mov	r2, r0
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f001 fee6 	bl	800b630 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	2200      	movs	r2, #0
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f002 f9f5 	bl	800bc5c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009872:	2300      	movs	r3, #0
 8009874:	2200      	movs	r2, #0
 8009876:	210a      	movs	r1, #10
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fbeb 	bl	800a054 <USBH_FindInterface>
 800987e:	4603      	mov	r3, r0
 8009880:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	2bff      	cmp	r3, #255	; 0xff
 8009886:	d002      	beq.n	800988e <USBH_CDC_InterfaceInit+0x11a>
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d901      	bls.n	8009892 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800988e:	2302      	movs	r3, #2
 8009890:	e0c2      	b.n	8009a18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	211a      	movs	r1, #26
 8009898:	fb01 f303 	mul.w	r3, r1, r3
 800989c:	4413      	add	r3, r2
 800989e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	b25b      	sxtb	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	da16      	bge.n	80098d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	211a      	movs	r1, #26
 80098b0:	fb01 f303 	mul.w	r3, r1, r3
 80098b4:	4413      	add	r3, r2
 80098b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80098ba:	781a      	ldrb	r2, [r3, #0]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	211a      	movs	r1, #26
 80098c6:	fb01 f303 	mul.w	r3, r1, r3
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80098d0:	881a      	ldrh	r2, [r3, #0]
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	835a      	strh	r2, [r3, #26]
 80098d6:	e015      	b.n	8009904 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	211a      	movs	r1, #26
 80098de:	fb01 f303 	mul.w	r3, r1, r3
 80098e2:	4413      	add	r3, r2
 80098e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80098e8:	781a      	ldrb	r2, [r3, #0]
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	211a      	movs	r1, #26
 80098f4:	fb01 f303 	mul.w	r3, r1, r3
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80098fe:	881a      	ldrh	r2, [r3, #0]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009904:	7bfb      	ldrb	r3, [r7, #15]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	211a      	movs	r1, #26
 800990a:	fb01 f303 	mul.w	r3, r1, r3
 800990e:	4413      	add	r3, r2
 8009910:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	b25b      	sxtb	r3, r3
 8009918:	2b00      	cmp	r3, #0
 800991a:	da16      	bge.n	800994a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	211a      	movs	r1, #26
 8009922:	fb01 f303 	mul.w	r3, r1, r3
 8009926:	4413      	add	r3, r2
 8009928:	f203 3356 	addw	r3, r3, #854	; 0x356
 800992c:	781a      	ldrb	r2, [r3, #0]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	211a      	movs	r1, #26
 8009938:	fb01 f303 	mul.w	r3, r1, r3
 800993c:	4413      	add	r3, r2
 800993e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009942:	881a      	ldrh	r2, [r3, #0]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	835a      	strh	r2, [r3, #26]
 8009948:	e015      	b.n	8009976 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	211a      	movs	r1, #26
 8009950:	fb01 f303 	mul.w	r3, r1, r3
 8009954:	4413      	add	r3, r2
 8009956:	f203 3356 	addw	r3, r3, #854	; 0x356
 800995a:	781a      	ldrb	r2, [r3, #0]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	211a      	movs	r1, #26
 8009966:	fb01 f303 	mul.w	r3, r1, r3
 800996a:	4413      	add	r3, r2
 800996c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009970:	881a      	ldrh	r2, [r3, #0]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	7b9b      	ldrb	r3, [r3, #14]
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f001 fe86 	bl	800b68e <USBH_AllocPipe>
 8009982:	4603      	mov	r3, r0
 8009984:	461a      	mov	r2, r3
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	7bdb      	ldrb	r3, [r3, #15]
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 fe7c 	bl	800b68e <USBH_AllocPipe>
 8009996:	4603      	mov	r3, r0
 8009998:	461a      	mov	r2, r3
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	7b59      	ldrb	r1, [r3, #13]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	7b98      	ldrb	r0, [r3, #14]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	8b12      	ldrh	r2, [r2, #24]
 80099b6:	9202      	str	r2, [sp, #8]
 80099b8:	2202      	movs	r2, #2
 80099ba:	9201      	str	r2, [sp, #4]
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	4623      	mov	r3, r4
 80099c0:	4602      	mov	r2, r0
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f001 fe34 	bl	800b630 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	7b19      	ldrb	r1, [r3, #12]
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	7bd8      	ldrb	r0, [r3, #15]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	8b52      	ldrh	r2, [r2, #26]
 80099e0:	9202      	str	r2, [sp, #8]
 80099e2:	2202      	movs	r2, #2
 80099e4:	9201      	str	r2, [sp, #4]
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	4623      	mov	r3, r4
 80099ea:	4602      	mov	r2, r0
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f001 fe1f 	bl	800b630 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	7b5b      	ldrb	r3, [r3, #13]
 80099fe:	2200      	movs	r2, #0
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f002 f92a 	bl	800bc5c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	7b1b      	ldrb	r3, [r3, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f002 f923 	bl	800bc5c <USBH_LL_SetToggle>

  return USBH_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd90      	pop	{r4, r7, pc}

08009a20 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a2e:	69db      	ldr	r3, [r3, #28]
 8009a30:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00e      	beq.n	8009a58 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f001 fe14 	bl	800b66e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 fe3f 	bl	800b6d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	7b1b      	ldrb	r3, [r3, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00e      	beq.n	8009a7e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	7b1b      	ldrb	r3, [r3, #12]
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 fe01 	bl	800b66e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	7b1b      	ldrb	r3, [r3, #12]
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 fe2c 	bl	800b6d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	7b5b      	ldrb	r3, [r3, #13]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00e      	beq.n	8009aa4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	7b5b      	ldrb	r3, [r3, #13]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 fdee 	bl	800b66e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	7b5b      	ldrb	r3, [r3, #13]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 fe19 	bl	800b6d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009aaa:	69db      	ldr	r3, [r3, #28]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ab6:	69db      	ldr	r3, [r3, #28]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f003 f895 	bl	800cbe8 <free>
    phost->pActiveClass->pData = 0U;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3340      	adds	r3, #64	; 0x40
 8009ae8:	4619      	mov	r1, r3
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f8b1 	bl	8009c52 <GetLineCoding>
 8009af0:	4603      	mov	r3, r0
 8009af2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009af4:	7afb      	ldrb	r3, [r7, #11]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d105      	bne.n	8009b06 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b00:	2102      	movs	r1, #2
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009b06:	7afb      	ldrb	r3, [r7, #11]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b26:	69db      	ldr	r3, [r3, #28]
 8009b28:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009b30:	2b04      	cmp	r3, #4
 8009b32:	d877      	bhi.n	8009c24 <USBH_CDC_Process+0x114>
 8009b34:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <USBH_CDC_Process+0x2c>)
 8009b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3a:	bf00      	nop
 8009b3c:	08009b51 	.word	0x08009b51
 8009b40:	08009b57 	.word	0x08009b57
 8009b44:	08009b87 	.word	0x08009b87
 8009b48:	08009bfb 	.word	0x08009bfb
 8009b4c:	08009c09 	.word	0x08009c09
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73fb      	strb	r3, [r7, #15]
      break;
 8009b54:	e06d      	b.n	8009c32 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f897 	bl	8009c90 <SetLineCoding>
 8009b62:	4603      	mov	r3, r0
 8009b64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d104      	bne.n	8009b76 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009b74:	e058      	b.n	8009c28 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d055      	beq.n	8009c28 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2204      	movs	r2, #4
 8009b80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009b84:	e050      	b.n	8009c28 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	3340      	adds	r3, #64	; 0x40
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f860 	bl	8009c52 <GetLineCoding>
 8009b92:	4603      	mov	r3, r0
 8009b94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009b96:	7bbb      	ldrb	r3, [r7, #14]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d126      	bne.n	8009bea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bae:	791b      	ldrb	r3, [r3, #4]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d13b      	bne.n	8009c2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bbe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d133      	bne.n	8009c2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bce:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d12b      	bne.n	8009c2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bdc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d124      	bne.n	8009c2c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f958 	bl	8009e98 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009be8:	e020      	b.n	8009c2c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d01d      	beq.n	8009c2c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2204      	movs	r2, #4
 8009bf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009bf8:	e018      	b.n	8009c2c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f867 	bl	8009cce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f8da 	bl	8009dba <CDC_ProcessReception>
      break;
 8009c06:	e014      	b.n	8009c32 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009c08:	2100      	movs	r1, #0
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 ffef 	bl	800abee <USBH_ClrFeature>
 8009c10:	4603      	mov	r3, r0
 8009c12:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009c14:	7bbb      	ldrb	r3, [r7, #14]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10a      	bne.n	8009c30 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009c22:	e005      	b.n	8009c30 <USBH_CDC_Process+0x120>

    default:
      break;
 8009c24:	bf00      	nop
 8009c26:	e004      	b.n	8009c32 <USBH_CDC_Process+0x122>
      break;
 8009c28:	bf00      	nop
 8009c2a:	e002      	b.n	8009c32 <USBH_CDC_Process+0x122>
      break;
 8009c2c:	bf00      	nop
 8009c2e:	e000      	b.n	8009c32 <USBH_CDC_Process+0x122>
      break;
 8009c30:	bf00      	nop

  }

  return status;
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b082      	sub	sp, #8
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	22a1      	movs	r2, #161	; 0xa1
 8009c60:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2221      	movs	r2, #33	; 0x21
 8009c66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2207      	movs	r2, #7
 8009c78:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2207      	movs	r2, #7
 8009c7e:	4619      	mov	r1, r3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f001 fa83 	bl	800b18c <USBH_CtlReq>
 8009c86:	4603      	mov	r3, r0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2221      	movs	r2, #33	; 0x21
 8009c9e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2207      	movs	r2, #7
 8009cb6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2207      	movs	r2, #7
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 fa64 	bl	800b18c <USBH_CtlReq>
 8009cc4:	4603      	mov	r3, r0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b086      	sub	sp, #24
 8009cd2:	af02      	add	r7, sp, #8
 8009cd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d002      	beq.n	8009cf4 <CDC_ProcessTransmission+0x26>
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d023      	beq.n	8009d3a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009cf2:	e05e      	b.n	8009db2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	8b12      	ldrh	r2, [r2, #24]
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d90b      	bls.n	8009d18 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	69d9      	ldr	r1, [r3, #28]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	8b1a      	ldrh	r2, [r3, #24]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	7b5b      	ldrb	r3, [r3, #13]
 8009d0c:	2001      	movs	r0, #1
 8009d0e:	9000      	str	r0, [sp, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f001 fc4a 	bl	800b5aa <USBH_BulkSendData>
 8009d16:	e00b      	b.n	8009d30 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	7b5b      	ldrb	r3, [r3, #13]
 8009d26:	2001      	movs	r0, #1
 8009d28:	9000      	str	r0, [sp, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f001 fc3d 	bl	800b5aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2202      	movs	r2, #2
 8009d34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009d38:	e03b      	b.n	8009db2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	7b5b      	ldrb	r3, [r3, #13]
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f001 ff61 	bl	800bc08 <USBH_LL_GetURBState>
 8009d46:	4603      	mov	r3, r0
 8009d48:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009d4a:	7afb      	ldrb	r3, [r7, #11]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d128      	bne.n	8009da2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	8b12      	ldrh	r2, [r2, #24]
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d90e      	bls.n	8009d7a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	8b12      	ldrh	r2, [r2, #24]
 8009d64:	1a9a      	subs	r2, r3, r2
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	8b12      	ldrh	r2, [r2, #24]
 8009d72:	441a      	add	r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	61da      	str	r2, [r3, #28]
 8009d78:	e002      	b.n	8009d80 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d004      	beq.n	8009d92 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009d90:	e00e      	b.n	8009db0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f868 	bl	8009e70 <USBH_CDC_TransmitCallback>
      break;
 8009da0:	e006      	b.n	8009db0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009da2:	7afb      	ldrb	r3, [r7, #11]
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d103      	bne.n	8009db0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009db0:	bf00      	nop
  }
}
 8009db2:	bf00      	nop
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b086      	sub	sp, #24
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dc8:	69db      	ldr	r3, [r3, #28]
 8009dca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d002      	beq.n	8009de0 <CDC_ProcessReception+0x26>
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	d00e      	beq.n	8009dfc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009dde:	e043      	b.n	8009e68 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	6a19      	ldr	r1, [r3, #32]
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	8b5a      	ldrh	r2, [r3, #26]
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	7b1b      	ldrb	r3, [r3, #12]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 fc01 	bl	800b5f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2204      	movs	r2, #4
 8009df6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009dfa:	e035      	b.n	8009e68 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	7b1b      	ldrb	r3, [r3, #12]
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f001 ff00 	bl	800bc08 <USBH_LL_GetURBState>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009e0c:	7cfb      	ldrb	r3, [r7, #19]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d129      	bne.n	8009e66 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	7b1b      	ldrb	r3, [r3, #12]
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f001 fe63 	bl	800bae4 <USBH_LL_GetLastXferSize>
 8009e1e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d016      	beq.n	8009e58 <CDC_ProcessReception+0x9e>
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	8b5b      	ldrh	r3, [r3, #26]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d910      	bls.n	8009e58 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1ad2      	subs	r2, r2, r3
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	6a1a      	ldr	r2, [r3, #32]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	441a      	add	r2, r3
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2203      	movs	r2, #3
 8009e52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009e56:	e006      	b.n	8009e66 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f80f 	bl	8009e84 <USBH_CDC_ReceiveCallback>
      break;
 8009e66:	bf00      	nop
  }
}
 8009e68:	bf00      	nop
 8009e6a:	3718      	adds	r7, #24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	e029      	b.n	8009f18 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	79fa      	ldrb	r2, [r7, #7]
 8009ec8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 f81f 	bl	8009f20 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d003      	beq.n	8009f10 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f001 fd33 	bl	800b97c <USBH_LL_Init>

  return USBH_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60fb      	str	r3, [r7, #12]
 8009f30:	e009      	b.n	8009f46 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	33e0      	adds	r3, #224	; 0xe0
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3301      	adds	r3, #1
 8009f44:	60fb      	str	r3, [r7, #12]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2b0f      	cmp	r3, #15
 8009f4a:	d9f2      	bls.n	8009f32 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	e009      	b.n	8009f66 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	3301      	adds	r3, #1
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f6c:	d3f1      	bcc.n	8009f52 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2240      	movs	r2, #64	; 0x40
 8009f92:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b085      	sub	sp, #20
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d016      	beq.n	800a00a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10e      	bne.n	800a004 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fec:	1c59      	adds	r1, r3, #1
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	33de      	adds	r3, #222	; 0xde
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	73fb      	strb	r3, [r7, #15]
 800a002:	e004      	b.n	800a00e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a004:	2302      	movs	r3, #2
 800a006:	73fb      	strb	r3, [r7, #15]
 800a008:	e001      	b.n	800a00e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a00a:	2302      	movs	r3, #2
 800a00c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a032:	78fa      	ldrb	r2, [r7, #3]
 800a034:	429a      	cmp	r2, r3
 800a036:	d204      	bcs.n	800a042 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	78fa      	ldrb	r2, [r7, #3]
 800a03c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a040:	e001      	b.n	800a046 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a042:	2302      	movs	r3, #2
 800a044:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a046:	7bfb      	ldrb	r3, [r7, #15]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	4608      	mov	r0, r1
 800a05e:	4611      	mov	r1, r2
 800a060:	461a      	mov	r2, r3
 800a062:	4603      	mov	r3, r0
 800a064:	70fb      	strb	r3, [r7, #3]
 800a066:	460b      	mov	r3, r1
 800a068:	70bb      	strb	r3, [r7, #2]
 800a06a:	4613      	mov	r3, r2
 800a06c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a06e:	2300      	movs	r3, #0
 800a070:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a072:	2300      	movs	r3, #0
 800a074:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a07c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a07e:	e025      	b.n	800a0cc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a080:	7dfb      	ldrb	r3, [r7, #23]
 800a082:	221a      	movs	r2, #26
 800a084:	fb02 f303 	mul.w	r3, r2, r3
 800a088:	3308      	adds	r3, #8
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	4413      	add	r3, r2
 800a08e:	3302      	adds	r3, #2
 800a090:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	795b      	ldrb	r3, [r3, #5]
 800a096:	78fa      	ldrb	r2, [r7, #3]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d002      	beq.n	800a0a2 <USBH_FindInterface+0x4e>
 800a09c:	78fb      	ldrb	r3, [r7, #3]
 800a09e:	2bff      	cmp	r3, #255	; 0xff
 800a0a0:	d111      	bne.n	800a0c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a0a6:	78ba      	ldrb	r2, [r7, #2]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d002      	beq.n	800a0b2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a0ac:	78bb      	ldrb	r3, [r7, #2]
 800a0ae:	2bff      	cmp	r3, #255	; 0xff
 800a0b0:	d109      	bne.n	800a0c6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a0b6:	787a      	ldrb	r2, [r7, #1]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d002      	beq.n	800a0c2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a0bc:	787b      	ldrb	r3, [r7, #1]
 800a0be:	2bff      	cmp	r3, #255	; 0xff
 800a0c0:	d101      	bne.n	800a0c6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	e006      	b.n	800a0d4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a0c6:	7dfb      	ldrb	r3, [r7, #23]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d9d6      	bls.n	800a080 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a0d2:	23ff      	movs	r3, #255	; 0xff
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	371c      	adds	r7, #28
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f001 fc83 	bl	800b9f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f001 fd9c 	bl	800bc2e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b088      	sub	sp, #32
 800a104:	af04      	add	r7, sp, #16
 800a106:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a108:	2302      	movs	r3, #2
 800a10a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a10c:	2300      	movs	r3, #0
 800a10e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d102      	bne.n	800a122 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2203      	movs	r2, #3
 800a120:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b0b      	cmp	r3, #11
 800a12a:	f200 81be 	bhi.w	800a4aa <USBH_Process+0x3aa>
 800a12e:	a201      	add	r2, pc, #4	; (adr r2, 800a134 <USBH_Process+0x34>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a165 	.word	0x0800a165
 800a138:	0800a197 	.word	0x0800a197
 800a13c:	0800a1ff 	.word	0x0800a1ff
 800a140:	0800a445 	.word	0x0800a445
 800a144:	0800a4ab 	.word	0x0800a4ab
 800a148:	0800a2a3 	.word	0x0800a2a3
 800a14c:	0800a3eb 	.word	0x0800a3eb
 800a150:	0800a2d9 	.word	0x0800a2d9
 800a154:	0800a2f9 	.word	0x0800a2f9
 800a158:	0800a319 	.word	0x0800a319
 800a15c:	0800a35d 	.word	0x0800a35d
 800a160:	0800a42d 	.word	0x0800a42d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 819e 	beq.w	800a4ae <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2201      	movs	r2, #1
 800a176:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a178:	20c8      	movs	r0, #200	; 0xc8
 800a17a:	f001 fd9f 	bl	800bcbc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f001 fc95 	bl	800baae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a194:	e18b      	b.n	800a4ae <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d107      	bne.n	800a1b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a1ae:	e18d      	b.n	800a4cc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a1b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1ba:	d914      	bls.n	800a1e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	b2da      	uxtb	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d903      	bls.n	800a1de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	220d      	movs	r2, #13
 800a1da:	701a      	strb	r2, [r3, #0]
      break;
 800a1dc:	e176      	b.n	800a4cc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	701a      	strb	r2, [r3, #0]
      break;
 800a1e4:	e172      	b.n	800a4cc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a1ec:	f103 020a 	add.w	r2, r3, #10
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a1f6:	200a      	movs	r0, #10
 800a1f8:	f001 fd60 	bl	800bcbc <USBH_Delay>
      break;
 800a1fc:	e166      	b.n	800a4cc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a204:	2b00      	cmp	r3, #0
 800a206:	d005      	beq.n	800a214 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a20e:	2104      	movs	r1, #4
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a214:	2064      	movs	r0, #100	; 0x64
 800a216:	f001 fd51 	bl	800bcbc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f001 fc20 	bl	800ba60 <USBH_LL_GetSpeed>
 800a220:	4603      	mov	r3, r0
 800a222:	461a      	mov	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2205      	movs	r2, #5
 800a22e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a230:	2100      	movs	r1, #0
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f001 fa2b 	bl	800b68e <USBH_AllocPipe>
 800a238:	4603      	mov	r3, r0
 800a23a:	461a      	mov	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a240:	2180      	movs	r1, #128	; 0x80
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f001 fa23 	bl	800b68e <USBH_AllocPipe>
 800a248:	4603      	mov	r3, r0
 800a24a:	461a      	mov	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	7919      	ldrb	r1, [r3, #4]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a264:	b292      	uxth	r2, r2
 800a266:	9202      	str	r2, [sp, #8]
 800a268:	2200      	movs	r2, #0
 800a26a:	9201      	str	r2, [sp, #4]
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	4603      	mov	r3, r0
 800a270:	2280      	movs	r2, #128	; 0x80
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 f9dc 	bl	800b630 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	7959      	ldrb	r1, [r3, #5]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a28c:	b292      	uxth	r2, r2
 800a28e:	9202      	str	r2, [sp, #8]
 800a290:	2200      	movs	r2, #0
 800a292:	9201      	str	r2, [sp, #4]
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	4603      	mov	r3, r0
 800a298:	2200      	movs	r2, #0
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f001 f9c8 	bl	800b630 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a2a0:	e114      	b.n	800a4cc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f918 	bl	800a4d8 <USBH_HandleEnum>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f040 80fe 	bne.w	800a4b2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d103      	bne.n	800a2d0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2208      	movs	r2, #8
 800a2cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a2ce:	e0f0      	b.n	800a4b2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2207      	movs	r2, #7
 800a2d4:	701a      	strb	r2, [r3, #0]
      break;
 800a2d6:	e0ec      	b.n	800a4b2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f000 80e9 	beq.w	800a4b6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2208      	movs	r2, #8
 800a2f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a2f6:	e0de      	b.n	800a4b6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	4619      	mov	r1, r3
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fc2c 	bl	800ab60 <USBH_SetCfg>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f040 80d5 	bne.w	800a4ba <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2209      	movs	r2, #9
 800a314:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a316:	e0d0      	b.n	800a4ba <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a31e:	f003 0320 	and.w	r3, r3, #32
 800a322:	2b00      	cmp	r3, #0
 800a324:	d016      	beq.n	800a354 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a326:	2101      	movs	r1, #1
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fc3c 	bl	800aba6 <USBH_SetFeature>
 800a32e:	4603      	mov	r3, r0
 800a330:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a332:	7bbb      	ldrb	r3, [r7, #14]
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b00      	cmp	r3, #0
 800a338:	d103      	bne.n	800a342 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	220a      	movs	r2, #10
 800a33e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a340:	e0bd      	b.n	800a4be <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b03      	cmp	r3, #3
 800a348:	f040 80b9 	bne.w	800a4be <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	220a      	movs	r2, #10
 800a350:	701a      	strb	r2, [r3, #0]
      break;
 800a352:	e0b4      	b.n	800a4be <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	220a      	movs	r2, #10
 800a358:	701a      	strb	r2, [r3, #0]
      break;
 800a35a:	e0b0      	b.n	800a4be <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 80ad 	beq.w	800a4c2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]
 800a374:	e016      	b.n	800a3a4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a376:	7bfa      	ldrb	r2, [r7, #15]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	32de      	adds	r2, #222	; 0xde
 800a37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a380:	791a      	ldrb	r2, [r3, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a388:	429a      	cmp	r2, r3
 800a38a:	d108      	bne.n	800a39e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a38c:	7bfa      	ldrb	r2, [r7, #15]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	32de      	adds	r2, #222	; 0xde
 800a392:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a39c:	e005      	b.n	800a3aa <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	73fb      	strb	r3, [r7, #15]
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0e5      	beq.n	800a376 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d016      	beq.n	800a3e2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d109      	bne.n	800a3da <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2206      	movs	r2, #6
 800a3ca:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a3d2:	2103      	movs	r1, #3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a3d8:	e073      	b.n	800a4c2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	220d      	movs	r2, #13
 800a3de:	701a      	strb	r2, [r3, #0]
      break;
 800a3e0:	e06f      	b.n	800a4c2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	220d      	movs	r2, #13
 800a3e6:	701a      	strb	r2, [r3, #0]
      break;
 800a3e8:	e06b      	b.n	800a4c2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d017      	beq.n	800a424 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	4798      	blx	r3
 800a400:	4603      	mov	r3, r0
 800a402:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a404:	7bbb      	ldrb	r3, [r7, #14]
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d103      	bne.n	800a414 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	220b      	movs	r2, #11
 800a410:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a412:	e058      	b.n	800a4c6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a414:	7bbb      	ldrb	r3, [r7, #14]
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d154      	bne.n	800a4c6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	220d      	movs	r2, #13
 800a420:	701a      	strb	r2, [r3, #0]
      break;
 800a422:	e050      	b.n	800a4c6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	220d      	movs	r2, #13
 800a428:	701a      	strb	r2, [r3, #0]
      break;
 800a42a:	e04c      	b.n	800a4c6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a432:	2b00      	cmp	r3, #0
 800a434:	d049      	beq.n	800a4ca <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	4798      	blx	r3
      }
      break;
 800a442:	e042      	b.n	800a4ca <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f7ff fd67 	bl	8009f20 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d009      	beq.n	800a470 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a476:	2b00      	cmp	r3, #0
 800a478:	d005      	beq.n	800a486 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a480:	2105      	movs	r1, #5
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d107      	bne.n	800a4a2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7ff fe20 	bl	800a0e0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a4a0:	e014      	b.n	800a4cc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f001 faa6 	bl	800b9f4 <USBH_LL_Start>
      break;
 800a4a8:	e010      	b.n	800a4cc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a4aa:	bf00      	nop
 800a4ac:	e00e      	b.n	800a4cc <USBH_Process+0x3cc>
      break;
 800a4ae:	bf00      	nop
 800a4b0:	e00c      	b.n	800a4cc <USBH_Process+0x3cc>
      break;
 800a4b2:	bf00      	nop
 800a4b4:	e00a      	b.n	800a4cc <USBH_Process+0x3cc>
    break;
 800a4b6:	bf00      	nop
 800a4b8:	e008      	b.n	800a4cc <USBH_Process+0x3cc>
      break;
 800a4ba:	bf00      	nop
 800a4bc:	e006      	b.n	800a4cc <USBH_Process+0x3cc>
      break;
 800a4be:	bf00      	nop
 800a4c0:	e004      	b.n	800a4cc <USBH_Process+0x3cc>
      break;
 800a4c2:	bf00      	nop
 800a4c4:	e002      	b.n	800a4cc <USBH_Process+0x3cc>
      break;
 800a4c6:	bf00      	nop
 800a4c8:	e000      	b.n	800a4cc <USBH_Process+0x3cc>
      break;
 800a4ca:	bf00      	nop
  }
  return USBH_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop

0800a4d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b088      	sub	sp, #32
 800a4dc:	af04      	add	r7, sp, #16
 800a4de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	785b      	ldrb	r3, [r3, #1]
 800a4ec:	2b07      	cmp	r3, #7
 800a4ee:	f200 81c1 	bhi.w	800a874 <USBH_HandleEnum+0x39c>
 800a4f2:	a201      	add	r2, pc, #4	; (adr r2, 800a4f8 <USBH_HandleEnum+0x20>)
 800a4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f8:	0800a519 	.word	0x0800a519
 800a4fc:	0800a5d7 	.word	0x0800a5d7
 800a500:	0800a641 	.word	0x0800a641
 800a504:	0800a6cf 	.word	0x0800a6cf
 800a508:	0800a739 	.word	0x0800a739
 800a50c:	0800a7a9 	.word	0x0800a7a9
 800a510:	0800a7ef 	.word	0x0800a7ef
 800a514:	0800a835 	.word	0x0800a835
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a518:	2108      	movs	r1, #8
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fa50 	bl	800a9c0 <USBH_Get_DevDesc>
 800a520:	4603      	mov	r3, r0
 800a522:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a524:	7bbb      	ldrb	r3, [r7, #14]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d130      	bne.n	800a58c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	7919      	ldrb	r1, [r3, #4]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a54e:	b292      	uxth	r2, r2
 800a550:	9202      	str	r2, [sp, #8]
 800a552:	2200      	movs	r2, #0
 800a554:	9201      	str	r2, [sp, #4]
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	4603      	mov	r3, r0
 800a55a:	2280      	movs	r2, #128	; 0x80
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 f867 	bl	800b630 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	7959      	ldrb	r1, [r3, #5]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a576:	b292      	uxth	r2, r2
 800a578:	9202      	str	r2, [sp, #8]
 800a57a:	2200      	movs	r2, #0
 800a57c:	9201      	str	r2, [sp, #4]
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	4603      	mov	r3, r0
 800a582:	2200      	movs	r2, #0
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 f853 	bl	800b630 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a58a:	e175      	b.n	800a878 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a58c:	7bbb      	ldrb	r3, [r7, #14]
 800a58e:	2b03      	cmp	r3, #3
 800a590:	f040 8172 	bne.w	800a878 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a59a:	3301      	adds	r3, #1
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d903      	bls.n	800a5b6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	220d      	movs	r2, #13
 800a5b2:	701a      	strb	r2, [r3, #0]
      break;
 800a5b4:	e160      	b.n	800a878 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	795b      	ldrb	r3, [r3, #5]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f001 f887 	bl	800b6d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	791b      	ldrb	r3, [r3, #4]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 f881 	bl	800b6d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	701a      	strb	r2, [r3, #0]
      break;
 800a5d4:	e150      	b.n	800a878 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a5d6:	2112      	movs	r1, #18
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f9f1 	bl	800a9c0 <USBH_Get_DevDesc>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d103      	bne.n	800a5f0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a5ee:	e145      	b.n	800a87c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5f0:	7bbb      	ldrb	r3, [r7, #14]
 800a5f2:	2b03      	cmp	r3, #3
 800a5f4:	f040 8142 	bne.w	800a87c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a5fe:	3301      	adds	r3, #1
 800a600:	b2da      	uxtb	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d903      	bls.n	800a61a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	220d      	movs	r2, #13
 800a616:	701a      	strb	r2, [r3, #0]
      break;
 800a618:	e130      	b.n	800a87c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	795b      	ldrb	r3, [r3, #5]
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f001 f855 	bl	800b6d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	791b      	ldrb	r3, [r3, #4]
 800a62a:	4619      	mov	r1, r3
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f001 f84f 	bl	800b6d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	701a      	strb	r2, [r3, #0]
      break;
 800a63e:	e11d      	b.n	800a87c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a640:	2101      	movs	r1, #1
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fa68 	bl	800ab18 <USBH_SetAddress>
 800a648:	4603      	mov	r3, r0
 800a64a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d132      	bne.n	800a6b8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a652:	2002      	movs	r0, #2
 800a654:	f001 fb32 	bl	800bcbc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2203      	movs	r2, #3
 800a664:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	7919      	ldrb	r1, [r3, #4]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a67a:	b292      	uxth	r2, r2
 800a67c:	9202      	str	r2, [sp, #8]
 800a67e:	2200      	movs	r2, #0
 800a680:	9201      	str	r2, [sp, #4]
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	4603      	mov	r3, r0
 800a686:	2280      	movs	r2, #128	; 0x80
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 ffd1 	bl	800b630 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	7959      	ldrb	r1, [r3, #5]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a6a2:	b292      	uxth	r2, r2
 800a6a4:	9202      	str	r2, [sp, #8]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	9201      	str	r2, [sp, #4]
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 ffbd 	bl	800b630 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a6b6:	e0e3      	b.n	800a880 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6b8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	f040 80e0 	bne.w	800a880 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	220d      	movs	r2, #13
 800a6c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	705a      	strb	r2, [r3, #1]
      break;
 800a6cc:	e0d8      	b.n	800a880 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a6ce:	2109      	movs	r1, #9
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f99d 	bl	800aa10 <USBH_Get_CfgDesc>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6da:	7bbb      	ldrb	r3, [r7, #14]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d103      	bne.n	800a6e8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2204      	movs	r2, #4
 800a6e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a6e6:	e0cd      	b.n	800a884 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6e8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	f040 80ca 	bne.w	800a884 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a706:	2b03      	cmp	r3, #3
 800a708:	d903      	bls.n	800a712 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	220d      	movs	r2, #13
 800a70e:	701a      	strb	r2, [r3, #0]
      break;
 800a710:	e0b8      	b.n	800a884 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	795b      	ldrb	r3, [r3, #5]
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 ffd9 	bl	800b6d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	791b      	ldrb	r3, [r3, #4]
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 ffd3 	bl	800b6d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	701a      	strb	r2, [r3, #0]
      break;
 800a736:	e0a5      	b.n	800a884 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f965 	bl	800aa10 <USBH_Get_CfgDesc>
 800a746:	4603      	mov	r3, r0
 800a748:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d103      	bne.n	800a758 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2205      	movs	r2, #5
 800a754:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a756:	e097      	b.n	800a888 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a758:	7bbb      	ldrb	r3, [r7, #14]
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	f040 8094 	bne.w	800a888 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a766:	3301      	adds	r3, #1
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a776:	2b03      	cmp	r3, #3
 800a778:	d903      	bls.n	800a782 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	220d      	movs	r2, #13
 800a77e:	701a      	strb	r2, [r3, #0]
      break;
 800a780:	e082      	b.n	800a888 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	795b      	ldrb	r3, [r3, #5]
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 ffa1 	bl	800b6d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	791b      	ldrb	r3, [r3, #4]
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 ff9b 	bl	800b6d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	701a      	strb	r2, [r3, #0]
      break;
 800a7a6:	e06f      	b.n	800a888 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d019      	beq.n	800a7e6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a7be:	23ff      	movs	r3, #255	; 0xff
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f949 	bl	800aa58 <USBH_Get_StringDesc>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d103      	bne.n	800a7d8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2206      	movs	r2, #6
 800a7d4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a7d6:	e059      	b.n	800a88c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	d156      	bne.n	800a88c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2206      	movs	r2, #6
 800a7e2:	705a      	strb	r2, [r3, #1]
      break;
 800a7e4:	e052      	b.n	800a88c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2206      	movs	r2, #6
 800a7ea:	705a      	strb	r2, [r3, #1]
      break;
 800a7ec:	e04e      	b.n	800a88c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d019      	beq.n	800a82c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a804:	23ff      	movs	r3, #255	; 0xff
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f926 	bl	800aa58 <USBH_Get_StringDesc>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a810:	7bbb      	ldrb	r3, [r7, #14]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d103      	bne.n	800a81e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2207      	movs	r2, #7
 800a81a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a81c:	e038      	b.n	800a890 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a81e:	7bbb      	ldrb	r3, [r7, #14]
 800a820:	2b03      	cmp	r3, #3
 800a822:	d135      	bne.n	800a890 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2207      	movs	r2, #7
 800a828:	705a      	strb	r2, [r3, #1]
      break;
 800a82a:	e031      	b.n	800a890 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2207      	movs	r2, #7
 800a830:	705a      	strb	r2, [r3, #1]
      break;
 800a832:	e02d      	b.n	800a890 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d017      	beq.n	800a86e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a84a:	23ff      	movs	r3, #255	; 0xff
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f903 	bl	800aa58 <USBH_Get_StringDesc>
 800a852:	4603      	mov	r3, r0
 800a854:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d102      	bne.n	800a862 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a85c:	2300      	movs	r3, #0
 800a85e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a860:	e018      	b.n	800a894 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a862:	7bbb      	ldrb	r3, [r7, #14]
 800a864:	2b03      	cmp	r3, #3
 800a866:	d115      	bne.n	800a894 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	73fb      	strb	r3, [r7, #15]
      break;
 800a86c:	e012      	b.n	800a894 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	73fb      	strb	r3, [r7, #15]
      break;
 800a872:	e00f      	b.n	800a894 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a874:	bf00      	nop
 800a876:	e00e      	b.n	800a896 <USBH_HandleEnum+0x3be>
      break;
 800a878:	bf00      	nop
 800a87a:	e00c      	b.n	800a896 <USBH_HandleEnum+0x3be>
      break;
 800a87c:	bf00      	nop
 800a87e:	e00a      	b.n	800a896 <USBH_HandleEnum+0x3be>
      break;
 800a880:	bf00      	nop
 800a882:	e008      	b.n	800a896 <USBH_HandleEnum+0x3be>
      break;
 800a884:	bf00      	nop
 800a886:	e006      	b.n	800a896 <USBH_HandleEnum+0x3be>
      break;
 800a888:	bf00      	nop
 800a88a:	e004      	b.n	800a896 <USBH_HandleEnum+0x3be>
      break;
 800a88c:	bf00      	nop
 800a88e:	e002      	b.n	800a896 <USBH_HandleEnum+0x3be>
      break;
 800a890:	bf00      	nop
 800a892:	e000      	b.n	800a896 <USBH_HandleEnum+0x3be>
      break;
 800a894:	bf00      	nop
  }
  return Status;
 800a896:	7bfb      	ldrb	r3, [r7, #15]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a8b2:	bf00      	nop
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8cc:	1c5a      	adds	r2, r3, #1
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f804 	bl	800a8e2 <USBH_HandleSof>
}
 800a8da:	bf00      	nop
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b082      	sub	sp, #8
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b0b      	cmp	r3, #11
 800a8f2:	d10a      	bne.n	800a90a <USBH_HandleSof+0x28>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d005      	beq.n	800a90a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	4798      	blx	r3
  }
}
 800a90a:	bf00      	nop
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a922:	bf00      	nop
}
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a92e:	b480      	push	{r7}
 800a930:	b083      	sub	sp, #12
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a93e:	bf00      	nop
}
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b083      	sub	sp, #12
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f001 f846 	bl	800ba2a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	791b      	ldrb	r3, [r3, #4]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fe93 	bl	800b6d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	795b      	ldrb	r3, [r3, #5]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fe8d 	bl	800b6d0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af02      	add	r7, sp, #8
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a9d2:	78fb      	ldrb	r3, [r7, #3]
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	4613      	mov	r3, r2
 800a9da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9de:	2100      	movs	r1, #0
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f864 	bl	800aaae <USBH_GetDescriptor>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10a      	bne.n	800aa06 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a9fc:	78fa      	ldrb	r2, [r7, #3]
 800a9fe:	b292      	uxth	r2, r2
 800aa00:	4619      	mov	r1, r3
 800aa02:	f000 f919 	bl	800ac38 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af02      	add	r7, sp, #8
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	331c      	adds	r3, #28
 800aa20:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aa22:	887b      	ldrh	r3, [r7, #2]
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f83d 	bl	800aaae <USBH_GetDescriptor>
 800aa34:	4603      	mov	r3, r0
 800aa36:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d107      	bne.n	800aa4e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800aa3e:	887b      	ldrh	r3, [r7, #2]
 800aa40:	461a      	mov	r2, r3
 800aa42:	68b9      	ldr	r1, [r7, #8]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f989 	bl	800ad5c <USBH_ParseCfgDesc>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	607a      	str	r2, [r7, #4]
 800aa62:	461a      	mov	r2, r3
 800aa64:	460b      	mov	r3, r1
 800aa66:	72fb      	strb	r3, [r7, #11]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800aa6c:	7afb      	ldrb	r3, [r7, #11]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aa74:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800aa7c:	893b      	ldrh	r3, [r7, #8]
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	460b      	mov	r3, r1
 800aa82:	2100      	movs	r1, #0
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f000 f812 	bl	800aaae <USBH_GetDescriptor>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d107      	bne.n	800aaa4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa9a:	893a      	ldrh	r2, [r7, #8]
 800aa9c:	6879      	ldr	r1, [r7, #4]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 fb26 	bl	800b0f0 <USBH_ParseStringDesc>
  }

  return status;
 800aaa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b084      	sub	sp, #16
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	60f8      	str	r0, [r7, #12]
 800aab6:	607b      	str	r3, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	72fb      	strb	r3, [r7, #11]
 800aabc:	4613      	mov	r3, r2
 800aabe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	789b      	ldrb	r3, [r3, #2]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d11c      	bne.n	800ab02 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800aac8:	7afb      	ldrb	r3, [r7, #11]
 800aaca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2206      	movs	r2, #6
 800aad8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	893a      	ldrh	r2, [r7, #8]
 800aade:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aae0:	893b      	ldrh	r3, [r7, #8]
 800aae2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaea:	d104      	bne.n	800aaf6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f240 4209 	movw	r2, #1033	; 0x409
 800aaf2:	829a      	strh	r2, [r3, #20]
 800aaf4:	e002      	b.n	800aafc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	8b3a      	ldrh	r2, [r7, #24]
 800ab00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ab02:	8b3b      	ldrh	r3, [r7, #24]
 800ab04:	461a      	mov	r2, r3
 800ab06:	6879      	ldr	r1, [r7, #4]
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f000 fb3f 	bl	800b18c <USBH_CtlReq>
 800ab0e:	4603      	mov	r3, r0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	789b      	ldrb	r3, [r3, #2]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d10f      	bne.n	800ab4c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2205      	movs	r2, #5
 800ab36:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2100      	movs	r1, #0
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fb1b 	bl	800b18c <USBH_CtlReq>
 800ab56:	4603      	mov	r3, r0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	789b      	ldrb	r3, [r3, #2]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d10e      	bne.n	800ab92 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2209      	movs	r2, #9
 800ab7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	887a      	ldrh	r2, [r7, #2]
 800ab84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ab92:	2200      	movs	r2, #0
 800ab94:	2100      	movs	r1, #0
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 faf8 	bl	800b18c <USBH_CtlReq>
 800ab9c:	4603      	mov	r3, r0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b082      	sub	sp, #8
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	460b      	mov	r3, r1
 800abb0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	789b      	ldrb	r3, [r3, #2]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d10f      	bne.n	800abda <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2203      	movs	r2, #3
 800abc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800abc6:	78fb      	ldrb	r3, [r7, #3]
 800abc8:	b29a      	uxth	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800abda:	2200      	movs	r2, #0
 800abdc:	2100      	movs	r1, #0
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fad4 	bl	800b18c <USBH_CtlReq>
 800abe4:	4603      	mov	r3, r0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b082      	sub	sp, #8
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	460b      	mov	r3, r1
 800abf8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	789b      	ldrb	r3, [r3, #2]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d10f      	bne.n	800ac22 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2202      	movs	r2, #2
 800ac06:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ac14:	78fb      	ldrb	r3, [r7, #3]
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ac22:	2200      	movs	r2, #0
 800ac24:	2100      	movs	r1, #0
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fab0 	bl	800b18c <USBH_CtlReq>
 800ac2c:	4603      	mov	r3, r0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
	...

0800ac38 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	4613      	mov	r3, r2
 800ac44:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	781a      	ldrb	r2, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	785a      	ldrb	r2, [r3, #1]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	3302      	adds	r3, #2
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	3303      	adds	r3, #3
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	021b      	lsls	r3, r3, #8
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	791a      	ldrb	r2, [r3, #4]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	795a      	ldrb	r2, [r3, #5]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	799a      	ldrb	r2, [r3, #6]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	79da      	ldrb	r2, [r3, #7]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	79db      	ldrb	r3, [r3, #7]
 800ac96:	2b20      	cmp	r3, #32
 800ac98:	dc0f      	bgt.n	800acba <USBH_ParseDevDesc+0x82>
 800ac9a:	2b08      	cmp	r3, #8
 800ac9c:	db14      	blt.n	800acc8 <USBH_ParseDevDesc+0x90>
 800ac9e:	3b08      	subs	r3, #8
 800aca0:	4a2d      	ldr	r2, [pc, #180]	; (800ad58 <USBH_ParseDevDesc+0x120>)
 800aca2:	fa22 f303 	lsr.w	r3, r2, r3
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	2b00      	cmp	r3, #0
 800acac:	bf14      	ite	ne
 800acae:	2301      	movne	r3, #1
 800acb0:	2300      	moveq	r3, #0
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d102      	bne.n	800acbe <USBH_ParseDevDesc+0x86>
 800acb8:	e006      	b.n	800acc8 <USBH_ParseDevDesc+0x90>
 800acba:	2b40      	cmp	r3, #64	; 0x40
 800acbc:	d104      	bne.n	800acc8 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	79da      	ldrb	r2, [r3, #7]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	71da      	strb	r2, [r3, #7]
      break;
 800acc6:	e003      	b.n	800acd0 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2240      	movs	r2, #64	; 0x40
 800accc:	71da      	strb	r2, [r3, #7]
      break;
 800acce:	bf00      	nop
  }

  if (length > 8U)
 800acd0:	88fb      	ldrh	r3, [r7, #6]
 800acd2:	2b08      	cmp	r3, #8
 800acd4:	d939      	bls.n	800ad4a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	3308      	adds	r3, #8
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	b29a      	uxth	r2, r3
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	3309      	adds	r3, #9
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	021b      	lsls	r3, r3, #8
 800ace8:	b29b      	uxth	r3, r3
 800acea:	4313      	orrs	r3, r2
 800acec:	b29a      	uxth	r2, r3
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	330a      	adds	r3, #10
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	330b      	adds	r3, #11
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	021b      	lsls	r3, r3, #8
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	4313      	orrs	r3, r2
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	330c      	adds	r3, #12
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	330d      	adds	r3, #13
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	021b      	lsls	r3, r3, #8
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	4313      	orrs	r3, r2
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	7b9a      	ldrb	r2, [r3, #14]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	7bda      	ldrb	r2, [r3, #15]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	7c1a      	ldrb	r2, [r3, #16]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	7c5a      	ldrb	r2, [r3, #17]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	745a      	strb	r2, [r3, #17]
  }
}
 800ad4a:	bf00      	nop
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	01000101 	.word	0x01000101

0800ad5c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b08c      	sub	sp, #48	; 0x30
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	4613      	mov	r3, r2
 800ad68:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ad70:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ad82:	2300      	movs	r3, #0
 800ad84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	781a      	ldrb	r2, [r3, #0]
 800ad90:	6a3b      	ldr	r3, [r7, #32]
 800ad92:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	785a      	ldrb	r2, [r3, #1]
 800ad98:	6a3b      	ldr	r3, [r7, #32]
 800ad9a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	3302      	adds	r3, #2
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	3303      	adds	r3, #3
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	b29b      	uxth	r3, r3
 800adac:	021b      	lsls	r3, r3, #8
 800adae:	b29b      	uxth	r3, r3
 800adb0:	4313      	orrs	r3, r2
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb8:	bf28      	it	cs
 800adba:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	6a3b      	ldr	r3, [r7, #32]
 800adc2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	791a      	ldrb	r2, [r3, #4]
 800adc8:	6a3b      	ldr	r3, [r7, #32]
 800adca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	795a      	ldrb	r2, [r3, #5]
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	799a      	ldrb	r2, [r3, #6]
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	79da      	ldrb	r2, [r3, #7]
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	7a1a      	ldrb	r2, [r3, #8]
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	2b09      	cmp	r3, #9
 800adf2:	d002      	beq.n	800adfa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	2209      	movs	r2, #9
 800adf8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800adfa:	88fb      	ldrh	r3, [r7, #6]
 800adfc:	2b09      	cmp	r3, #9
 800adfe:	f240 809d 	bls.w	800af3c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800ae02:	2309      	movs	r3, #9
 800ae04:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ae0a:	e081      	b.n	800af10 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae0c:	f107 0316 	add.w	r3, r7, #22
 800ae10:	4619      	mov	r1, r3
 800ae12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae14:	f000 f99f 	bl	800b156 <USBH_GetNextDesc>
 800ae18:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	785b      	ldrb	r3, [r3, #1]
 800ae1e:	2b04      	cmp	r3, #4
 800ae20:	d176      	bne.n	800af10 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ae22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	2b09      	cmp	r3, #9
 800ae28:	d002      	beq.n	800ae30 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ae2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2c:	2209      	movs	r2, #9
 800ae2e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ae30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae34:	221a      	movs	r2, #26
 800ae36:	fb02 f303 	mul.w	r3, r2, r3
 800ae3a:	3308      	adds	r3, #8
 800ae3c:	6a3a      	ldr	r2, [r7, #32]
 800ae3e:	4413      	add	r3, r2
 800ae40:	3302      	adds	r3, #2
 800ae42:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ae44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae46:	69f8      	ldr	r0, [r7, #28]
 800ae48:	f000 f87e 	bl	800af48 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ae56:	e043      	b.n	800aee0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae58:	f107 0316 	add.w	r3, r7, #22
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae60:	f000 f979 	bl	800b156 <USBH_GetNextDesc>
 800ae64:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ae66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae68:	785b      	ldrb	r3, [r3, #1]
 800ae6a:	2b05      	cmp	r3, #5
 800ae6c:	d138      	bne.n	800aee0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	795b      	ldrb	r3, [r3, #5]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d10f      	bne.n	800ae96 <USBH_ParseCfgDesc+0x13a>
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	799b      	ldrb	r3, [r3, #6]
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d10b      	bne.n	800ae96 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	79db      	ldrb	r3, [r3, #7]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10f      	bne.n	800aea6 <USBH_ParseCfgDesc+0x14a>
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	2b09      	cmp	r3, #9
 800ae8c:	d00b      	beq.n	800aea6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	2209      	movs	r2, #9
 800ae92:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae94:	e007      	b.n	800aea6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	2b07      	cmp	r3, #7
 800ae9c:	d004      	beq.n	800aea8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ae9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea0:	2207      	movs	r2, #7
 800aea2:	701a      	strb	r2, [r3, #0]
 800aea4:	e000      	b.n	800aea8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aea6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800aea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aeb0:	3201      	adds	r2, #1
 800aeb2:	00d2      	lsls	r2, r2, #3
 800aeb4:	211a      	movs	r1, #26
 800aeb6:	fb01 f303 	mul.w	r3, r1, r3
 800aeba:	4413      	add	r3, r2
 800aebc:	3308      	adds	r3, #8
 800aebe:	6a3a      	ldr	r2, [r7, #32]
 800aec0:	4413      	add	r3, r2
 800aec2:	3304      	adds	r3, #4
 800aec4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800aec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aec8:	69b9      	ldr	r1, [r7, #24]
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 f86b 	bl	800afa6 <USBH_ParseEPDesc>
 800aed0:	4603      	mov	r3, r0
 800aed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800aed6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aeda:	3301      	adds	r3, #1
 800aedc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	791b      	ldrb	r3, [r3, #4]
 800aee4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d204      	bcs.n	800aef6 <USBH_ParseCfgDesc+0x19a>
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	885a      	ldrh	r2, [r3, #2]
 800aef0:	8afb      	ldrh	r3, [r7, #22]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d8b0      	bhi.n	800ae58 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	791b      	ldrb	r3, [r3, #4]
 800aefa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aefe:	429a      	cmp	r2, r3
 800af00:	d201      	bcs.n	800af06 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800af02:	2303      	movs	r3, #3
 800af04:	e01c      	b.n	800af40 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800af06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af0a:	3301      	adds	r3, #1
 800af0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800af10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af14:	2b01      	cmp	r3, #1
 800af16:	d805      	bhi.n	800af24 <USBH_ParseCfgDesc+0x1c8>
 800af18:	6a3b      	ldr	r3, [r7, #32]
 800af1a:	885a      	ldrh	r2, [r3, #2]
 800af1c:	8afb      	ldrh	r3, [r7, #22]
 800af1e:	429a      	cmp	r2, r3
 800af20:	f63f af74 	bhi.w	800ae0c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800af24:	6a3b      	ldr	r3, [r7, #32]
 800af26:	791b      	ldrb	r3, [r3, #4]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	bf28      	it	cs
 800af2c:	2302      	movcs	r3, #2
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800af34:	429a      	cmp	r2, r3
 800af36:	d201      	bcs.n	800af3c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800af38:	2303      	movs	r3, #3
 800af3a:	e001      	b.n	800af40 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800af3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800af40:	4618      	mov	r0, r3
 800af42:	3730      	adds	r7, #48	; 0x30
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	781a      	ldrb	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	785a      	ldrb	r2, [r3, #1]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	789a      	ldrb	r2, [r3, #2]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	78da      	ldrb	r2, [r3, #3]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	791a      	ldrb	r2, [r3, #4]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	795a      	ldrb	r2, [r3, #5]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	799a      	ldrb	r2, [r3, #6]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	79da      	ldrb	r2, [r3, #7]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	7a1a      	ldrb	r2, [r3, #8]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	721a      	strb	r2, [r3, #8]
}
 800af9a:	bf00      	nop
 800af9c:	370c      	adds	r7, #12
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr

0800afa6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800afa6:	b480      	push	{r7}
 800afa8:	b087      	sub	sp, #28
 800afaa:	af00      	add	r7, sp, #0
 800afac:	60f8      	str	r0, [r7, #12]
 800afae:	60b9      	str	r1, [r7, #8]
 800afb0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	781a      	ldrb	r2, [r3, #0]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	785a      	ldrb	r2, [r3, #1]
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	789a      	ldrb	r2, [r3, #2]
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	78da      	ldrb	r2, [r3, #3]
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	3304      	adds	r3, #4
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	b29a      	uxth	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3305      	adds	r3, #5
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	021b      	lsls	r3, r3, #8
 800afe8:	b29b      	uxth	r3, r3
 800afea:	4313      	orrs	r3, r2
 800afec:	b29a      	uxth	r2, r3
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	799a      	ldrb	r2, [r3, #6]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	889b      	ldrh	r3, [r3, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d102      	bne.n	800b008 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b002:	2303      	movs	r3, #3
 800b004:	75fb      	strb	r3, [r7, #23]
 800b006:	e033      	b.n	800b070 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	889b      	ldrh	r3, [r3, #4]
 800b00c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b010:	f023 0307 	bic.w	r3, r3, #7
 800b014:	b29a      	uxth	r2, r3
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	889b      	ldrh	r3, [r3, #4]
 800b01e:	b21a      	sxth	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3304      	adds	r3, #4
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	b299      	uxth	r1, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	3305      	adds	r3, #5
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	b29b      	uxth	r3, r3
 800b030:	021b      	lsls	r3, r3, #8
 800b032:	b29b      	uxth	r3, r3
 800b034:	430b      	orrs	r3, r1
 800b036:	b29b      	uxth	r3, r3
 800b038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d110      	bne.n	800b062 <USBH_ParseEPDesc+0xbc>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	3304      	adds	r3, #4
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	b299      	uxth	r1, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	3305      	adds	r3, #5
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	b29b      	uxth	r3, r3
 800b050:	021b      	lsls	r3, r3, #8
 800b052:	b29b      	uxth	r3, r3
 800b054:	430b      	orrs	r3, r1
 800b056:	b29b      	uxth	r3, r3
 800b058:	b21b      	sxth	r3, r3
 800b05a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b05e:	b21b      	sxth	r3, r3
 800b060:	e001      	b.n	800b066 <USBH_ParseEPDesc+0xc0>
 800b062:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b066:	4313      	orrs	r3, r2
 800b068:	b21b      	sxth	r3, r3
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b076:	2b00      	cmp	r3, #0
 800b078:	d116      	bne.n	800b0a8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	78db      	ldrb	r3, [r3, #3]
 800b07e:	f003 0303 	and.w	r3, r3, #3
 800b082:	2b01      	cmp	r3, #1
 800b084:	d005      	beq.n	800b092 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	78db      	ldrb	r3, [r3, #3]
 800b08a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d127      	bne.n	800b0e2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	799b      	ldrb	r3, [r3, #6]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d003      	beq.n	800b0a2 <USBH_ParseEPDesc+0xfc>
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	799b      	ldrb	r3, [r3, #6]
 800b09e:	2b10      	cmp	r3, #16
 800b0a0:	d91f      	bls.n	800b0e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	75fb      	strb	r3, [r7, #23]
 800b0a6:	e01c      	b.n	800b0e2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	78db      	ldrb	r3, [r3, #3]
 800b0ac:	f003 0303 	and.w	r3, r3, #3
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d10a      	bne.n	800b0ca <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	799b      	ldrb	r3, [r3, #6]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d003      	beq.n	800b0c4 <USBH_ParseEPDesc+0x11e>
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	799b      	ldrb	r3, [r3, #6]
 800b0c0:	2b10      	cmp	r3, #16
 800b0c2:	d90e      	bls.n	800b0e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	75fb      	strb	r3, [r7, #23]
 800b0c8:	e00b      	b.n	800b0e2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	78db      	ldrb	r3, [r3, #3]
 800b0ce:	f003 0303 	and.w	r3, r3, #3
 800b0d2:	2b03      	cmp	r3, #3
 800b0d4:	d105      	bne.n	800b0e2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	799b      	ldrb	r3, [r3, #6]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	371c      	adds	r7, #28
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3301      	adds	r3, #1
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	2b03      	cmp	r3, #3
 800b106:	d120      	bne.n	800b14a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	1e9a      	subs	r2, r3, #2
 800b10e:	88fb      	ldrh	r3, [r7, #6]
 800b110:	4293      	cmp	r3, r2
 800b112:	bf28      	it	cs
 800b114:	4613      	movcs	r3, r2
 800b116:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	3302      	adds	r3, #2
 800b11c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b11e:	2300      	movs	r3, #0
 800b120:	82fb      	strh	r3, [r7, #22]
 800b122:	e00b      	b.n	800b13c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b124:	8afb      	ldrh	r3, [r7, #22]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	4413      	add	r3, r2
 800b12a:	781a      	ldrb	r2, [r3, #0]
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	3301      	adds	r3, #1
 800b134:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b136:	8afb      	ldrh	r3, [r7, #22]
 800b138:	3302      	adds	r3, #2
 800b13a:	82fb      	strh	r3, [r7, #22]
 800b13c:	8afa      	ldrh	r2, [r7, #22]
 800b13e:	8abb      	ldrh	r3, [r7, #20]
 800b140:	429a      	cmp	r2, r3
 800b142:	d3ef      	bcc.n	800b124 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2200      	movs	r2, #0
 800b148:	701a      	strb	r2, [r3, #0]
  }
}
 800b14a:	bf00      	nop
 800b14c:	371c      	adds	r7, #28
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b156:	b480      	push	{r7}
 800b158:	b085      	sub	sp, #20
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	881a      	ldrh	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	b29b      	uxth	r3, r3
 800b16a:	4413      	add	r3, r2
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4413      	add	r3, r2
 800b17c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b17e:	68fb      	ldr	r3, [r7, #12]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	4613      	mov	r3, r2
 800b198:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b19a:	2301      	movs	r3, #1
 800b19c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	789b      	ldrb	r3, [r3, #2]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d002      	beq.n	800b1ac <USBH_CtlReq+0x20>
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d00f      	beq.n	800b1ca <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b1aa:	e027      	b.n	800b1fc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	88fa      	ldrh	r2, [r7, #6]
 800b1b6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2202      	movs	r2, #2
 800b1c2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b1c8:	e018      	b.n	800b1fc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f000 f81c 	bl	800b208 <USBH_HandleControl>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b1d4:	7dfb      	ldrb	r3, [r7, #23]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d002      	beq.n	800b1e0 <USBH_CtlReq+0x54>
 800b1da:	7dfb      	ldrb	r3, [r7, #23]
 800b1dc:	2b03      	cmp	r3, #3
 800b1de:	d106      	bne.n	800b1ee <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	761a      	strb	r2, [r3, #24]
      break;
 800b1ec:	e005      	b.n	800b1fa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b1ee:	7dfb      	ldrb	r3, [r7, #23]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d102      	bne.n	800b1fa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	709a      	strb	r2, [r3, #2]
      break;
 800b1fa:	bf00      	nop
  }
  return status;
 800b1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3718      	adds	r7, #24
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
	...

0800b208 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af02      	add	r7, sp, #8
 800b20e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b210:	2301      	movs	r3, #1
 800b212:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b214:	2300      	movs	r3, #0
 800b216:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	7e1b      	ldrb	r3, [r3, #24]
 800b21c:	3b01      	subs	r3, #1
 800b21e:	2b0a      	cmp	r3, #10
 800b220:	f200 8156 	bhi.w	800b4d0 <USBH_HandleControl+0x2c8>
 800b224:	a201      	add	r2, pc, #4	; (adr r2, 800b22c <USBH_HandleControl+0x24>)
 800b226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22a:	bf00      	nop
 800b22c:	0800b259 	.word	0x0800b259
 800b230:	0800b273 	.word	0x0800b273
 800b234:	0800b2dd 	.word	0x0800b2dd
 800b238:	0800b303 	.word	0x0800b303
 800b23c:	0800b33b 	.word	0x0800b33b
 800b240:	0800b365 	.word	0x0800b365
 800b244:	0800b3b7 	.word	0x0800b3b7
 800b248:	0800b3d9 	.word	0x0800b3d9
 800b24c:	0800b415 	.word	0x0800b415
 800b250:	0800b43b 	.word	0x0800b43b
 800b254:	0800b479 	.word	0x0800b479
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f103 0110 	add.w	r1, r3, #16
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	795b      	ldrb	r3, [r3, #5]
 800b262:	461a      	mov	r2, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f943 	bl	800b4f0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2202      	movs	r2, #2
 800b26e:	761a      	strb	r2, [r3, #24]
      break;
 800b270:	e139      	b.n	800b4e6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	795b      	ldrb	r3, [r3, #5]
 800b276:	4619      	mov	r1, r3
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fcc5 	bl	800bc08 <USBH_LL_GetURBState>
 800b27e:	4603      	mov	r3, r0
 800b280:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b282:	7bbb      	ldrb	r3, [r7, #14]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d11e      	bne.n	800b2c6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	7c1b      	ldrb	r3, [r3, #16]
 800b28c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b290:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	8adb      	ldrh	r3, [r3, #22]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00a      	beq.n	800b2b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b29a:	7b7b      	ldrb	r3, [r7, #13]
 800b29c:	2b80      	cmp	r3, #128	; 0x80
 800b29e:	d103      	bne.n	800b2a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2203      	movs	r2, #3
 800b2a4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b2a6:	e115      	b.n	800b4d4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2205      	movs	r2, #5
 800b2ac:	761a      	strb	r2, [r3, #24]
      break;
 800b2ae:	e111      	b.n	800b4d4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b2b0:	7b7b      	ldrb	r3, [r7, #13]
 800b2b2:	2b80      	cmp	r3, #128	; 0x80
 800b2b4:	d103      	bne.n	800b2be <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2209      	movs	r2, #9
 800b2ba:	761a      	strb	r2, [r3, #24]
      break;
 800b2bc:	e10a      	b.n	800b4d4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2207      	movs	r2, #7
 800b2c2:	761a      	strb	r2, [r3, #24]
      break;
 800b2c4:	e106      	b.n	800b4d4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b2c6:	7bbb      	ldrb	r3, [r7, #14]
 800b2c8:	2b04      	cmp	r3, #4
 800b2ca:	d003      	beq.n	800b2d4 <USBH_HandleControl+0xcc>
 800b2cc:	7bbb      	ldrb	r3, [r7, #14]
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	f040 8100 	bne.w	800b4d4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	220b      	movs	r2, #11
 800b2d8:	761a      	strb	r2, [r3, #24]
      break;
 800b2da:	e0fb      	b.n	800b4d4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6899      	ldr	r1, [r3, #8]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	899a      	ldrh	r2, [r3, #12]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	791b      	ldrb	r3, [r3, #4]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f93a 	bl	800b56e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2204      	movs	r2, #4
 800b2fe:	761a      	strb	r2, [r3, #24]
      break;
 800b300:	e0f1      	b.n	800b4e6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	791b      	ldrb	r3, [r3, #4]
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fc7d 	bl	800bc08 <USBH_LL_GetURBState>
 800b30e:	4603      	mov	r3, r0
 800b310:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b312:	7bbb      	ldrb	r3, [r7, #14]
 800b314:	2b01      	cmp	r3, #1
 800b316:	d102      	bne.n	800b31e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2209      	movs	r2, #9
 800b31c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b31e:	7bbb      	ldrb	r3, [r7, #14]
 800b320:	2b05      	cmp	r3, #5
 800b322:	d102      	bne.n	800b32a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b324:	2303      	movs	r3, #3
 800b326:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b328:	e0d6      	b.n	800b4d8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b32a:	7bbb      	ldrb	r3, [r7, #14]
 800b32c:	2b04      	cmp	r3, #4
 800b32e:	f040 80d3 	bne.w	800b4d8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	220b      	movs	r2, #11
 800b336:	761a      	strb	r2, [r3, #24]
      break;
 800b338:	e0ce      	b.n	800b4d8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6899      	ldr	r1, [r3, #8]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	899a      	ldrh	r2, [r3, #12]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	795b      	ldrb	r3, [r3, #5]
 800b346:	2001      	movs	r0, #1
 800b348:	9000      	str	r0, [sp, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f8ea 	bl	800b524 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b356:	b29a      	uxth	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2206      	movs	r2, #6
 800b360:	761a      	strb	r2, [r3, #24]
      break;
 800b362:	e0c0      	b.n	800b4e6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	795b      	ldrb	r3, [r3, #5]
 800b368:	4619      	mov	r1, r3
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fc4c 	bl	800bc08 <USBH_LL_GetURBState>
 800b370:	4603      	mov	r3, r0
 800b372:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b374:	7bbb      	ldrb	r3, [r7, #14]
 800b376:	2b01      	cmp	r3, #1
 800b378:	d103      	bne.n	800b382 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2207      	movs	r2, #7
 800b37e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b380:	e0ac      	b.n	800b4dc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b382:	7bbb      	ldrb	r3, [r7, #14]
 800b384:	2b05      	cmp	r3, #5
 800b386:	d105      	bne.n	800b394 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	220c      	movs	r2, #12
 800b38c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b38e:	2303      	movs	r3, #3
 800b390:	73fb      	strb	r3, [r7, #15]
      break;
 800b392:	e0a3      	b.n	800b4dc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b394:	7bbb      	ldrb	r3, [r7, #14]
 800b396:	2b02      	cmp	r3, #2
 800b398:	d103      	bne.n	800b3a2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2205      	movs	r2, #5
 800b39e:	761a      	strb	r2, [r3, #24]
      break;
 800b3a0:	e09c      	b.n	800b4dc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b3a2:	7bbb      	ldrb	r3, [r7, #14]
 800b3a4:	2b04      	cmp	r3, #4
 800b3a6:	f040 8099 	bne.w	800b4dc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	220b      	movs	r2, #11
 800b3ae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3b4:	e092      	b.n	800b4dc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	791b      	ldrb	r3, [r3, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	2100      	movs	r1, #0
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f8d5 	bl	800b56e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2208      	movs	r2, #8
 800b3d4:	761a      	strb	r2, [r3, #24]

      break;
 800b3d6:	e086      	b.n	800b4e6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	791b      	ldrb	r3, [r3, #4]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fc12 	bl	800bc08 <USBH_LL_GetURBState>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b3e8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d105      	bne.n	800b3fa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	220d      	movs	r2, #13
 800b3f2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b3f8:	e072      	b.n	800b4e0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b3fa:	7bbb      	ldrb	r3, [r7, #14]
 800b3fc:	2b04      	cmp	r3, #4
 800b3fe:	d103      	bne.n	800b408 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	220b      	movs	r2, #11
 800b404:	761a      	strb	r2, [r3, #24]
      break;
 800b406:	e06b      	b.n	800b4e0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b408:	7bbb      	ldrb	r3, [r7, #14]
 800b40a:	2b05      	cmp	r3, #5
 800b40c:	d168      	bne.n	800b4e0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b40e:	2303      	movs	r3, #3
 800b410:	73fb      	strb	r3, [r7, #15]
      break;
 800b412:	e065      	b.n	800b4e0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	795b      	ldrb	r3, [r3, #5]
 800b418:	2201      	movs	r2, #1
 800b41a:	9200      	str	r2, [sp, #0]
 800b41c:	2200      	movs	r2, #0
 800b41e:	2100      	movs	r1, #0
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f87f 	bl	800b524 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	220a      	movs	r2, #10
 800b436:	761a      	strb	r2, [r3, #24]
      break;
 800b438:	e055      	b.n	800b4e6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	795b      	ldrb	r3, [r3, #5]
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 fbe1 	bl	800bc08 <USBH_LL_GetURBState>
 800b446:	4603      	mov	r3, r0
 800b448:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b44a:	7bbb      	ldrb	r3, [r7, #14]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d105      	bne.n	800b45c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b450:	2300      	movs	r3, #0
 800b452:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	220d      	movs	r2, #13
 800b458:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b45a:	e043      	b.n	800b4e4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d103      	bne.n	800b46a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2209      	movs	r2, #9
 800b466:	761a      	strb	r2, [r3, #24]
      break;
 800b468:	e03c      	b.n	800b4e4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b46a:	7bbb      	ldrb	r3, [r7, #14]
 800b46c:	2b04      	cmp	r3, #4
 800b46e:	d139      	bne.n	800b4e4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	220b      	movs	r2, #11
 800b474:	761a      	strb	r2, [r3, #24]
      break;
 800b476:	e035      	b.n	800b4e4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	7e5b      	ldrb	r3, [r3, #25]
 800b47c:	3301      	adds	r3, #1
 800b47e:	b2da      	uxtb	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	765a      	strb	r2, [r3, #25]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	7e5b      	ldrb	r3, [r3, #25]
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d806      	bhi.n	800b49a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b498:	e025      	b.n	800b4e6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4a0:	2106      	movs	r1, #6
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	795b      	ldrb	r3, [r3, #5]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 f90c 	bl	800b6d0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	791b      	ldrb	r3, [r3, #4]
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f906 	bl	800b6d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ce:	e00a      	b.n	800b4e6 <USBH_HandleControl+0x2de>

    default:
      break;
 800b4d0:	bf00      	nop
 800b4d2:	e008      	b.n	800b4e6 <USBH_HandleControl+0x2de>
      break;
 800b4d4:	bf00      	nop
 800b4d6:	e006      	b.n	800b4e6 <USBH_HandleControl+0x2de>
      break;
 800b4d8:	bf00      	nop
 800b4da:	e004      	b.n	800b4e6 <USBH_HandleControl+0x2de>
      break;
 800b4dc:	bf00      	nop
 800b4de:	e002      	b.n	800b4e6 <USBH_HandleControl+0x2de>
      break;
 800b4e0:	bf00      	nop
 800b4e2:	e000      	b.n	800b4e6 <USBH_HandleControl+0x2de>
      break;
 800b4e4:	bf00      	nop
  }

  return status;
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b088      	sub	sp, #32
 800b4f4:	af04      	add	r7, sp, #16
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b4fe:	79f9      	ldrb	r1, [r7, #7]
 800b500:	2300      	movs	r3, #0
 800b502:	9303      	str	r3, [sp, #12]
 800b504:	2308      	movs	r3, #8
 800b506:	9302      	str	r3, [sp, #8]
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	9301      	str	r3, [sp, #4]
 800b50c:	2300      	movs	r3, #0
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	2300      	movs	r3, #0
 800b512:	2200      	movs	r2, #0
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f000 fb46 	bl	800bba6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b088      	sub	sp, #32
 800b528:	af04      	add	r7, sp, #16
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	4611      	mov	r1, r2
 800b530:	461a      	mov	r2, r3
 800b532:	460b      	mov	r3, r1
 800b534:	80fb      	strh	r3, [r7, #6]
 800b536:	4613      	mov	r3, r2
 800b538:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b540:	2b00      	cmp	r3, #0
 800b542:	d001      	beq.n	800b548 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b544:	2300      	movs	r3, #0
 800b546:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b548:	7979      	ldrb	r1, [r7, #5]
 800b54a:	7e3b      	ldrb	r3, [r7, #24]
 800b54c:	9303      	str	r3, [sp, #12]
 800b54e:	88fb      	ldrh	r3, [r7, #6]
 800b550:	9302      	str	r3, [sp, #8]
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	2301      	movs	r3, #1
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	2300      	movs	r3, #0
 800b55c:	2200      	movs	r2, #0
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f000 fb21 	bl	800bba6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b088      	sub	sp, #32
 800b572:	af04      	add	r7, sp, #16
 800b574:	60f8      	str	r0, [r7, #12]
 800b576:	60b9      	str	r1, [r7, #8]
 800b578:	4611      	mov	r1, r2
 800b57a:	461a      	mov	r2, r3
 800b57c:	460b      	mov	r3, r1
 800b57e:	80fb      	strh	r3, [r7, #6]
 800b580:	4613      	mov	r3, r2
 800b582:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b584:	7979      	ldrb	r1, [r7, #5]
 800b586:	2300      	movs	r3, #0
 800b588:	9303      	str	r3, [sp, #12]
 800b58a:	88fb      	ldrh	r3, [r7, #6]
 800b58c:	9302      	str	r3, [sp, #8]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	9301      	str	r3, [sp, #4]
 800b592:	2301      	movs	r3, #1
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	2300      	movs	r3, #0
 800b598:	2201      	movs	r2, #1
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f000 fb03 	bl	800bba6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b5a0:	2300      	movs	r3, #0

}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b088      	sub	sp, #32
 800b5ae:	af04      	add	r7, sp, #16
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	80fb      	strh	r3, [r7, #6]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d001      	beq.n	800b5ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b5ce:	7979      	ldrb	r1, [r7, #5]
 800b5d0:	7e3b      	ldrb	r3, [r7, #24]
 800b5d2:	9303      	str	r3, [sp, #12]
 800b5d4:	88fb      	ldrh	r3, [r7, #6]
 800b5d6:	9302      	str	r3, [sp, #8]
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	9301      	str	r3, [sp, #4]
 800b5dc:	2301      	movs	r3, #1
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 fade 	bl	800bba6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b5ea:	2300      	movs	r3, #0
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b088      	sub	sp, #32
 800b5f8:	af04      	add	r7, sp, #16
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	4611      	mov	r1, r2
 800b600:	461a      	mov	r2, r3
 800b602:	460b      	mov	r3, r1
 800b604:	80fb      	strh	r3, [r7, #6]
 800b606:	4613      	mov	r3, r2
 800b608:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b60a:	7979      	ldrb	r1, [r7, #5]
 800b60c:	2300      	movs	r3, #0
 800b60e:	9303      	str	r3, [sp, #12]
 800b610:	88fb      	ldrh	r3, [r7, #6]
 800b612:	9302      	str	r3, [sp, #8]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	2301      	movs	r3, #1
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	2302      	movs	r3, #2
 800b61e:	2201      	movs	r2, #1
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f000 fac0 	bl	800bba6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af04      	add	r7, sp, #16
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	4608      	mov	r0, r1
 800b63a:	4611      	mov	r1, r2
 800b63c:	461a      	mov	r2, r3
 800b63e:	4603      	mov	r3, r0
 800b640:	70fb      	strb	r3, [r7, #3]
 800b642:	460b      	mov	r3, r1
 800b644:	70bb      	strb	r3, [r7, #2]
 800b646:	4613      	mov	r3, r2
 800b648:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b64a:	7878      	ldrb	r0, [r7, #1]
 800b64c:	78ba      	ldrb	r2, [r7, #2]
 800b64e:	78f9      	ldrb	r1, [r7, #3]
 800b650:	8b3b      	ldrh	r3, [r7, #24]
 800b652:	9302      	str	r3, [sp, #8]
 800b654:	7d3b      	ldrb	r3, [r7, #20]
 800b656:	9301      	str	r3, [sp, #4]
 800b658:	7c3b      	ldrb	r3, [r7, #16]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	4603      	mov	r3, r0
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fa53 	bl	800bb0a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b082      	sub	sp, #8
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	460b      	mov	r3, r1
 800b678:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b67a:	78fb      	ldrb	r3, [r7, #3]
 800b67c:	4619      	mov	r1, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fa72 	bl	800bb68 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b084      	sub	sp, #16
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	460b      	mov	r3, r1
 800b698:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f836 	bl	800b70c <USBH_GetFreePipe>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b6a4:	89fb      	ldrh	r3, [r7, #14]
 800b6a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d00a      	beq.n	800b6c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b6ae:	78fa      	ldrb	r2, [r7, #3]
 800b6b0:	89fb      	ldrh	r3, [r7, #14]
 800b6b2:	f003 030f 	and.w	r3, r3, #15
 800b6b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	33e0      	adds	r3, #224	; 0xe0
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	440b      	add	r3, r1
 800b6c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b6c4:	89fb      	ldrh	r3, [r7, #14]
 800b6c6:	b2db      	uxtb	r3, r3
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b6dc:	78fb      	ldrb	r3, [r7, #3]
 800b6de:	2b0f      	cmp	r3, #15
 800b6e0:	d80d      	bhi.n	800b6fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b6e2:	78fb      	ldrb	r3, [r7, #3]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	33e0      	adds	r3, #224	; 0xe0
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4413      	add	r3, r2
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	78fb      	ldrb	r3, [r7, #3]
 800b6f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b6f4:	6879      	ldr	r1, [r7, #4]
 800b6f6:	33e0      	adds	r3, #224	; 0xe0
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	440b      	add	r3, r1
 800b6fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b714:	2300      	movs	r3, #0
 800b716:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b718:	2300      	movs	r3, #0
 800b71a:	73fb      	strb	r3, [r7, #15]
 800b71c:	e00f      	b.n	800b73e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b71e:	7bfb      	ldrb	r3, [r7, #15]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	33e0      	adds	r3, #224	; 0xe0
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4413      	add	r3, r2
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d102      	bne.n	800b738 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b732:	7bfb      	ldrb	r3, [r7, #15]
 800b734:	b29b      	uxth	r3, r3
 800b736:	e007      	b.n	800b748 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b738:	7bfb      	ldrb	r3, [r7, #15]
 800b73a:	3301      	adds	r3, #1
 800b73c:	73fb      	strb	r3, [r7, #15]
 800b73e:	7bfb      	ldrb	r3, [r7, #15]
 800b740:	2b0f      	cmp	r3, #15
 800b742:	d9ec      	bls.n	800b71e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b744:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b758:	2201      	movs	r2, #1
 800b75a:	490e      	ldr	r1, [pc, #56]	; (800b794 <MX_USB_HOST_Init+0x40>)
 800b75c:	480e      	ldr	r0, [pc, #56]	; (800b798 <MX_USB_HOST_Init+0x44>)
 800b75e:	f7fe fba5 	bl	8009eac <USBH_Init>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b768:	f7f7 fbf6 	bl	8002f58 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b76c:	490b      	ldr	r1, [pc, #44]	; (800b79c <MX_USB_HOST_Init+0x48>)
 800b76e:	480a      	ldr	r0, [pc, #40]	; (800b798 <MX_USB_HOST_Init+0x44>)
 800b770:	f7fe fc2a 	bl	8009fc8 <USBH_RegisterClass>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d001      	beq.n	800b77e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b77a:	f7f7 fbed 	bl	8002f58 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b77e:	4806      	ldr	r0, [pc, #24]	; (800b798 <MX_USB_HOST_Init+0x44>)
 800b780:	f7fe fcae 	bl	800a0e0 <USBH_Start>
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d001      	beq.n	800b78e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b78a:	f7f7 fbe5 	bl	8002f58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b78e:	bf00      	nop
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	0800b7b5 	.word	0x0800b7b5
 800b798:	20000438 	.word	0x20000438
 800b79c:	2000000c 	.word	0x2000000c

0800b7a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b7a4:	4802      	ldr	r0, [pc, #8]	; (800b7b0 <MX_USB_HOST_Process+0x10>)
 800b7a6:	f7fe fcab 	bl	800a100 <USBH_Process>
}
 800b7aa:	bf00      	nop
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	20000438 	.word	0x20000438

0800b7b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b7c0:	78fb      	ldrb	r3, [r7, #3]
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	2b04      	cmp	r3, #4
 800b7c6:	d819      	bhi.n	800b7fc <USBH_UserProcess+0x48>
 800b7c8:	a201      	add	r2, pc, #4	; (adr r2, 800b7d0 <USBH_UserProcess+0x1c>)
 800b7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ce:	bf00      	nop
 800b7d0:	0800b7fd 	.word	0x0800b7fd
 800b7d4:	0800b7ed 	.word	0x0800b7ed
 800b7d8:	0800b7fd 	.word	0x0800b7fd
 800b7dc:	0800b7f5 	.word	0x0800b7f5
 800b7e0:	0800b7e5 	.word	0x0800b7e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b7e4:	4b09      	ldr	r3, [pc, #36]	; (800b80c <USBH_UserProcess+0x58>)
 800b7e6:	2203      	movs	r2, #3
 800b7e8:	701a      	strb	r2, [r3, #0]
  break;
 800b7ea:	e008      	b.n	800b7fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b7ec:	4b07      	ldr	r3, [pc, #28]	; (800b80c <USBH_UserProcess+0x58>)
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	701a      	strb	r2, [r3, #0]
  break;
 800b7f2:	e004      	b.n	800b7fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b7f4:	4b05      	ldr	r3, [pc, #20]	; (800b80c <USBH_UserProcess+0x58>)
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	701a      	strb	r2, [r3, #0]
  break;
 800b7fa:	e000      	b.n	800b7fe <USBH_UserProcess+0x4a>

  default:
  break;
 800b7fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b7fe:	bf00      	nop
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	20000810 	.word	0x20000810

0800b810 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b08a      	sub	sp, #40	; 0x28
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b818:	f107 0314 	add.w	r3, r7, #20
 800b81c:	2200      	movs	r2, #0
 800b81e:	601a      	str	r2, [r3, #0]
 800b820:	605a      	str	r2, [r3, #4]
 800b822:	609a      	str	r2, [r3, #8]
 800b824:	60da      	str	r2, [r3, #12]
 800b826:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b830:	d147      	bne.n	800b8c2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b832:	2300      	movs	r3, #0
 800b834:	613b      	str	r3, [r7, #16]
 800b836:	4b25      	ldr	r3, [pc, #148]	; (800b8cc <HAL_HCD_MspInit+0xbc>)
 800b838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83a:	4a24      	ldr	r2, [pc, #144]	; (800b8cc <HAL_HCD_MspInit+0xbc>)
 800b83c:	f043 0301 	orr.w	r3, r3, #1
 800b840:	6313      	str	r3, [r2, #48]	; 0x30
 800b842:	4b22      	ldr	r3, [pc, #136]	; (800b8cc <HAL_HCD_MspInit+0xbc>)
 800b844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b846:	f003 0301 	and.w	r3, r3, #1
 800b84a:	613b      	str	r3, [r7, #16]
 800b84c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b84e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b854:	2300      	movs	r3, #0
 800b856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b858:	2300      	movs	r3, #0
 800b85a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b85c:	f107 0314 	add.w	r3, r7, #20
 800b860:	4619      	mov	r1, r3
 800b862:	481b      	ldr	r0, [pc, #108]	; (800b8d0 <HAL_HCD_MspInit+0xc0>)
 800b864:	f7f8 f83e 	bl	80038e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b868:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b86c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b86e:	2302      	movs	r3, #2
 800b870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b872:	2300      	movs	r3, #0
 800b874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b876:	2303      	movs	r3, #3
 800b878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b87a:	230a      	movs	r3, #10
 800b87c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b87e:	f107 0314 	add.w	r3, r7, #20
 800b882:	4619      	mov	r1, r3
 800b884:	4812      	ldr	r0, [pc, #72]	; (800b8d0 <HAL_HCD_MspInit+0xc0>)
 800b886:	f7f8 f82d 	bl	80038e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b88a:	4b10      	ldr	r3, [pc, #64]	; (800b8cc <HAL_HCD_MspInit+0xbc>)
 800b88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b88e:	4a0f      	ldr	r2, [pc, #60]	; (800b8cc <HAL_HCD_MspInit+0xbc>)
 800b890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b894:	6353      	str	r3, [r2, #52]	; 0x34
 800b896:	2300      	movs	r3, #0
 800b898:	60fb      	str	r3, [r7, #12]
 800b89a:	4b0c      	ldr	r3, [pc, #48]	; (800b8cc <HAL_HCD_MspInit+0xbc>)
 800b89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b89e:	4a0b      	ldr	r2, [pc, #44]	; (800b8cc <HAL_HCD_MspInit+0xbc>)
 800b8a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8a4:	6453      	str	r3, [r2, #68]	; 0x44
 800b8a6:	4b09      	ldr	r3, [pc, #36]	; (800b8cc <HAL_HCD_MspInit+0xbc>)
 800b8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8ae:	60fb      	str	r3, [r7, #12]
 800b8b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	2043      	movs	r0, #67	; 0x43
 800b8b8:	f7f7 ff4b 	bl	8003752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8bc:	2043      	movs	r0, #67	; 0x43
 800b8be:	f7f7 ff64 	bl	800378a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b8c2:	bf00      	nop
 800b8c4:	3728      	adds	r7, #40	; 0x28
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	40023800 	.word	0x40023800
 800b8d0:	40020000 	.word	0x40020000

0800b8d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fe ffeb 	bl	800a8be <USBH_LL_IncTimer>
}
 800b8e8:	bf00      	nop
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7ff f823 	bl	800a94a <USBH_LL_Connect>
}
 800b904:	bf00      	nop
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7ff f82c 	bl	800a978 <USBH_LL_Disconnect>
}
 800b920:	bf00      	nop
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	70fb      	strb	r3, [r7, #3]
 800b934:	4613      	mov	r3, r2
 800b936:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b938:	bf00      	nop
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b952:	4618      	mov	r0, r3
 800b954:	f7fe ffdd 	bl	800a912 <USBH_LL_PortEnabled>
}
 800b958:	bf00      	nop
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe ffdd 	bl	800a92e <USBH_LL_PortDisabled>
}
 800b974:	bf00      	nop
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d12a      	bne.n	800b9e4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b98e:	4a18      	ldr	r2, [pc, #96]	; (800b9f0 <USBH_LL_Init+0x74>)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a15      	ldr	r2, [pc, #84]	; (800b9f0 <USBH_LL_Init+0x74>)
 800b99a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b99e:	4b14      	ldr	r3, [pc, #80]	; (800b9f0 <USBH_LL_Init+0x74>)
 800b9a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b9a4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b9a6:	4b12      	ldr	r3, [pc, #72]	; (800b9f0 <USBH_LL_Init+0x74>)
 800b9a8:	2208      	movs	r2, #8
 800b9aa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b9ac:	4b10      	ldr	r3, [pc, #64]	; (800b9f0 <USBH_LL_Init+0x74>)
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b9b2:	4b0f      	ldr	r3, [pc, #60]	; (800b9f0 <USBH_LL_Init+0x74>)
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b9b8:	4b0d      	ldr	r3, [pc, #52]	; (800b9f0 <USBH_LL_Init+0x74>)
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b9be:	4b0c      	ldr	r3, [pc, #48]	; (800b9f0 <USBH_LL_Init+0x74>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b9c4:	480a      	ldr	r0, [pc, #40]	; (800b9f0 <USBH_LL_Init+0x74>)
 800b9c6:	f7f8 f92a 	bl	8003c1e <HAL_HCD_Init>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d001      	beq.n	800b9d4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b9d0:	f7f7 fac2 	bl	8002f58 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b9d4:	4806      	ldr	r0, [pc, #24]	; (800b9f0 <USBH_LL_Init+0x74>)
 800b9d6:	f7f8 fd0e 	bl	80043f6 <HAL_HCD_GetCurrentFrame>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f7fe ff5e 	bl	800a8a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	20000814 	.word	0x20000814

0800b9f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba00:	2300      	movs	r3, #0
 800ba02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f8 fc7d 	bl	800430a <HAL_HCD_Start>
 800ba10:	4603      	mov	r3, r0
 800ba12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f000 f95c 	bl	800bcd4 <USBH_Get_USB_Status>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7f8 fc85 	bl	8004350 <HAL_HCD_Stop>
 800ba46:	4603      	mov	r3, r0
 800ba48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba4a:	7bfb      	ldrb	r3, [r7, #15]
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f000 f941 	bl	800bcd4 <USBH_Get_USB_Status>
 800ba52:	4603      	mov	r3, r0
 800ba54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7f8 fccd 	bl	8004412 <HAL_HCD_GetCurrentSpeed>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	d00c      	beq.n	800ba98 <USBH_LL_GetSpeed+0x38>
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	d80d      	bhi.n	800ba9e <USBH_LL_GetSpeed+0x3e>
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <USBH_LL_GetSpeed+0x2c>
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d003      	beq.n	800ba92 <USBH_LL_GetSpeed+0x32>
 800ba8a:	e008      	b.n	800ba9e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba90:	e008      	b.n	800baa4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ba92:	2301      	movs	r3, #1
 800ba94:	73fb      	strb	r3, [r7, #15]
    break;
 800ba96:	e005      	b.n	800baa4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ba98:	2302      	movs	r3, #2
 800ba9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba9c:	e002      	b.n	800baa4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	73fb      	strb	r3, [r7, #15]
    break;
 800baa2:	bf00      	nop
  }
  return  speed;
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b084      	sub	sp, #16
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bab6:	2300      	movs	r3, #0
 800bab8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800baba:	2300      	movs	r3, #0
 800babc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7f8 fc60 	bl	800438a <HAL_HCD_ResetPort>
 800baca:	4603      	mov	r3, r0
 800bacc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f000 f8ff 	bl	800bcd4 <USBH_Get_USB_Status>
 800bad6:	4603      	mov	r3, r0
 800bad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bada:	7bbb      	ldrb	r3, [r7, #14]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800baf6:	78fa      	ldrb	r2, [r7, #3]
 800baf8:	4611      	mov	r1, r2
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7f8 fc67 	bl	80043ce <HAL_HCD_HC_GetXferCount>
 800bb00:	4603      	mov	r3, r0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bb0a:	b590      	push	{r4, r7, lr}
 800bb0c:	b089      	sub	sp, #36	; 0x24
 800bb0e:	af04      	add	r7, sp, #16
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	4608      	mov	r0, r1
 800bb14:	4611      	mov	r1, r2
 800bb16:	461a      	mov	r2, r3
 800bb18:	4603      	mov	r3, r0
 800bb1a:	70fb      	strb	r3, [r7, #3]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	70bb      	strb	r3, [r7, #2]
 800bb20:	4613      	mov	r3, r2
 800bb22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bb32:	787c      	ldrb	r4, [r7, #1]
 800bb34:	78ba      	ldrb	r2, [r7, #2]
 800bb36:	78f9      	ldrb	r1, [r7, #3]
 800bb38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bb3a:	9302      	str	r3, [sp, #8]
 800bb3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb40:	9301      	str	r3, [sp, #4]
 800bb42:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	4623      	mov	r3, r4
 800bb4a:	f7f8 f8ca 	bl	8003ce2 <HAL_HCD_HC_Init>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
 800bb54:	4618      	mov	r0, r3
 800bb56:	f000 f8bd 	bl	800bcd4 <USBH_Get_USB_Status>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3714      	adds	r7, #20
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd90      	pop	{r4, r7, pc}

0800bb68 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb74:	2300      	movs	r3, #0
 800bb76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb82:	78fa      	ldrb	r2, [r7, #3]
 800bb84:	4611      	mov	r1, r2
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7f8 f93a 	bl	8003e00 <HAL_HCD_HC_Halt>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f000 f89e 	bl	800bcd4 <USBH_Get_USB_Status>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bba6:	b590      	push	{r4, r7, lr}
 800bba8:	b089      	sub	sp, #36	; 0x24
 800bbaa:	af04      	add	r7, sp, #16
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	4608      	mov	r0, r1
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	70fb      	strb	r3, [r7, #3]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	70bb      	strb	r3, [r7, #2]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bbce:	787c      	ldrb	r4, [r7, #1]
 800bbd0:	78ba      	ldrb	r2, [r7, #2]
 800bbd2:	78f9      	ldrb	r1, [r7, #3]
 800bbd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bbd8:	9303      	str	r3, [sp, #12]
 800bbda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bbdc:	9302      	str	r3, [sp, #8]
 800bbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	4623      	mov	r3, r4
 800bbea:	f7f8 f92d 	bl	8003e48 <HAL_HCD_HC_SubmitRequest>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f000 f86d 	bl	800bcd4 <USBH_Get_USB_Status>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd90      	pop	{r4, r7, pc}

0800bc08 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	460b      	mov	r3, r1
 800bc12:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc1a:	78fa      	ldrb	r2, [r7, #3]
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7f8 fbc1 	bl	80043a6 <HAL_HCD_HC_GetURBState>
 800bc24:	4603      	mov	r3, r0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3708      	adds	r7, #8
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b082      	sub	sp, #8
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	460b      	mov	r3, r1
 800bc38:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d103      	bne.n	800bc4c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bc44:	78fb      	ldrb	r3, [r7, #3]
 800bc46:	4618      	mov	r0, r3
 800bc48:	f000 f870 	bl	800bd2c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bc4c:	20c8      	movs	r0, #200	; 0xc8
 800bc4e:	f7f7 fc81 	bl	8003554 <HAL_Delay>
  return USBH_OK;
 800bc52:	2300      	movs	r3, #0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	460b      	mov	r3, r1
 800bc66:	70fb      	strb	r3, [r7, #3]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc72:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bc74:	78fb      	ldrb	r3, [r7, #3]
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	212c      	movs	r1, #44	; 0x2c
 800bc7a:	fb01 f303 	mul.w	r3, r1, r3
 800bc7e:	4413      	add	r3, r2
 800bc80:	333b      	adds	r3, #59	; 0x3b
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d009      	beq.n	800bc9c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bc88:	78fb      	ldrb	r3, [r7, #3]
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	212c      	movs	r1, #44	; 0x2c
 800bc8e:	fb01 f303 	mul.w	r3, r1, r3
 800bc92:	4413      	add	r3, r2
 800bc94:	3354      	adds	r3, #84	; 0x54
 800bc96:	78ba      	ldrb	r2, [r7, #2]
 800bc98:	701a      	strb	r2, [r3, #0]
 800bc9a:	e008      	b.n	800bcae <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bc9c:	78fb      	ldrb	r3, [r7, #3]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	212c      	movs	r1, #44	; 0x2c
 800bca2:	fb01 f303 	mul.w	r3, r1, r3
 800bca6:	4413      	add	r3, r2
 800bca8:	3355      	adds	r3, #85	; 0x55
 800bcaa:	78ba      	ldrb	r2, [r7, #2]
 800bcac:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3714      	adds	r7, #20
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7f7 fc45 	bl	8003554 <HAL_Delay>
}
 800bcca:	bf00      	nop
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
	...

0800bcd4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	4603      	mov	r3, r0
 800bcdc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcde:	2300      	movs	r3, #0
 800bce0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bce2:	79fb      	ldrb	r3, [r7, #7]
 800bce4:	2b03      	cmp	r3, #3
 800bce6:	d817      	bhi.n	800bd18 <USBH_Get_USB_Status+0x44>
 800bce8:	a201      	add	r2, pc, #4	; (adr r2, 800bcf0 <USBH_Get_USB_Status+0x1c>)
 800bcea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcee:	bf00      	nop
 800bcf0:	0800bd01 	.word	0x0800bd01
 800bcf4:	0800bd07 	.word	0x0800bd07
 800bcf8:	0800bd0d 	.word	0x0800bd0d
 800bcfc:	0800bd13 	.word	0x0800bd13
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bd00:	2300      	movs	r3, #0
 800bd02:	73fb      	strb	r3, [r7, #15]
    break;
 800bd04:	e00b      	b.n	800bd1e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bd06:	2302      	movs	r3, #2
 800bd08:	73fb      	strb	r3, [r7, #15]
    break;
 800bd0a:	e008      	b.n	800bd1e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd10:	e005      	b.n	800bd1e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bd12:	2302      	movs	r3, #2
 800bd14:	73fb      	strb	r3, [r7, #15]
    break;
 800bd16:	e002      	b.n	800bd1e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bd18:	2302      	movs	r3, #2
 800bd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd1c:	bf00      	nop
  }
  return usb_status;
 800bd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3714      	adds	r7, #20
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	4603      	mov	r3, r0
 800bd34:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bd36:	79fb      	ldrb	r3, [r7, #7]
 800bd38:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d102      	bne.n	800bd46 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bd40:	2300      	movs	r3, #0
 800bd42:	73fb      	strb	r3, [r7, #15]
 800bd44:	e001      	b.n	800bd4a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bd46:	2301      	movs	r3, #1
 800bd48:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	2101      	movs	r1, #1
 800bd50:	4803      	ldr	r0, [pc, #12]	; (800bd60 <MX_DriverVbusFS+0x34>)
 800bd52:	f7f7 ff4b 	bl	8003bec <HAL_GPIO_WritePin>
}
 800bd56:	bf00      	nop
 800bd58:	3710      	adds	r7, #16
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	40020800 	.word	0x40020800

0800bd64 <pow>:
 800bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd66:	ed2d 8b02 	vpush	{d8}
 800bd6a:	eeb0 8a40 	vmov.f32	s16, s0
 800bd6e:	eef0 8a60 	vmov.f32	s17, s1
 800bd72:	ec55 4b11 	vmov	r4, r5, d1
 800bd76:	f000 f873 	bl	800be60 <__ieee754_pow>
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	462b      	mov	r3, r5
 800bd7e:	4620      	mov	r0, r4
 800bd80:	4629      	mov	r1, r5
 800bd82:	ec57 6b10 	vmov	r6, r7, d0
 800bd86:	f7f4 fe7d 	bl	8000a84 <__aeabi_dcmpun>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	d13b      	bne.n	800be06 <pow+0xa2>
 800bd8e:	ec51 0b18 	vmov	r0, r1, d8
 800bd92:	2200      	movs	r2, #0
 800bd94:	2300      	movs	r3, #0
 800bd96:	f7f4 fe43 	bl	8000a20 <__aeabi_dcmpeq>
 800bd9a:	b1b8      	cbz	r0, 800bdcc <pow+0x68>
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2300      	movs	r3, #0
 800bda0:	4620      	mov	r0, r4
 800bda2:	4629      	mov	r1, r5
 800bda4:	f7f4 fe3c 	bl	8000a20 <__aeabi_dcmpeq>
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d146      	bne.n	800be3a <pow+0xd6>
 800bdac:	ec45 4b10 	vmov	d0, r4, r5
 800bdb0:	f000 f848 	bl	800be44 <finite>
 800bdb4:	b338      	cbz	r0, 800be06 <pow+0xa2>
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	2300      	movs	r3, #0
 800bdba:	4620      	mov	r0, r4
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	f7f4 fe39 	bl	8000a34 <__aeabi_dcmplt>
 800bdc2:	b300      	cbz	r0, 800be06 <pow+0xa2>
 800bdc4:	f000 ffdc 	bl	800cd80 <__errno>
 800bdc8:	2322      	movs	r3, #34	; 0x22
 800bdca:	e01b      	b.n	800be04 <pow+0xa0>
 800bdcc:	ec47 6b10 	vmov	d0, r6, r7
 800bdd0:	f000 f838 	bl	800be44 <finite>
 800bdd4:	b9e0      	cbnz	r0, 800be10 <pow+0xac>
 800bdd6:	eeb0 0a48 	vmov.f32	s0, s16
 800bdda:	eef0 0a68 	vmov.f32	s1, s17
 800bdde:	f000 f831 	bl	800be44 <finite>
 800bde2:	b1a8      	cbz	r0, 800be10 <pow+0xac>
 800bde4:	ec45 4b10 	vmov	d0, r4, r5
 800bde8:	f000 f82c 	bl	800be44 <finite>
 800bdec:	b180      	cbz	r0, 800be10 <pow+0xac>
 800bdee:	4632      	mov	r2, r6
 800bdf0:	463b      	mov	r3, r7
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	4639      	mov	r1, r7
 800bdf6:	f7f4 fe45 	bl	8000a84 <__aeabi_dcmpun>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d0e2      	beq.n	800bdc4 <pow+0x60>
 800bdfe:	f000 ffbf 	bl	800cd80 <__errno>
 800be02:	2321      	movs	r3, #33	; 0x21
 800be04:	6003      	str	r3, [r0, #0]
 800be06:	ecbd 8b02 	vpop	{d8}
 800be0a:	ec47 6b10 	vmov	d0, r6, r7
 800be0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be10:	2200      	movs	r2, #0
 800be12:	2300      	movs	r3, #0
 800be14:	4630      	mov	r0, r6
 800be16:	4639      	mov	r1, r7
 800be18:	f7f4 fe02 	bl	8000a20 <__aeabi_dcmpeq>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d0f2      	beq.n	800be06 <pow+0xa2>
 800be20:	eeb0 0a48 	vmov.f32	s0, s16
 800be24:	eef0 0a68 	vmov.f32	s1, s17
 800be28:	f000 f80c 	bl	800be44 <finite>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d0ea      	beq.n	800be06 <pow+0xa2>
 800be30:	ec45 4b10 	vmov	d0, r4, r5
 800be34:	f000 f806 	bl	800be44 <finite>
 800be38:	e7c3      	b.n	800bdc2 <pow+0x5e>
 800be3a:	4f01      	ldr	r7, [pc, #4]	; (800be40 <pow+0xdc>)
 800be3c:	2600      	movs	r6, #0
 800be3e:	e7e2      	b.n	800be06 <pow+0xa2>
 800be40:	3ff00000 	.word	0x3ff00000

0800be44 <finite>:
 800be44:	b082      	sub	sp, #8
 800be46:	ed8d 0b00 	vstr	d0, [sp]
 800be4a:	9801      	ldr	r0, [sp, #4]
 800be4c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800be50:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800be54:	0fc0      	lsrs	r0, r0, #31
 800be56:	b002      	add	sp, #8
 800be58:	4770      	bx	lr
 800be5a:	0000      	movs	r0, r0
 800be5c:	0000      	movs	r0, r0
	...

0800be60 <__ieee754_pow>:
 800be60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be64:	ed2d 8b06 	vpush	{d8-d10}
 800be68:	b089      	sub	sp, #36	; 0x24
 800be6a:	ed8d 1b00 	vstr	d1, [sp]
 800be6e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800be72:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800be76:	ea58 0102 	orrs.w	r1, r8, r2
 800be7a:	ec57 6b10 	vmov	r6, r7, d0
 800be7e:	d115      	bne.n	800beac <__ieee754_pow+0x4c>
 800be80:	19b3      	adds	r3, r6, r6
 800be82:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800be86:	4152      	adcs	r2, r2
 800be88:	4299      	cmp	r1, r3
 800be8a:	4b89      	ldr	r3, [pc, #548]	; (800c0b0 <__ieee754_pow+0x250>)
 800be8c:	4193      	sbcs	r3, r2
 800be8e:	f080 84d1 	bcs.w	800c834 <__ieee754_pow+0x9d4>
 800be92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be96:	4630      	mov	r0, r6
 800be98:	4639      	mov	r1, r7
 800be9a:	f7f4 f9a3 	bl	80001e4 <__adddf3>
 800be9e:	ec41 0b10 	vmov	d0, r0, r1
 800bea2:	b009      	add	sp, #36	; 0x24
 800bea4:	ecbd 8b06 	vpop	{d8-d10}
 800bea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beac:	4b81      	ldr	r3, [pc, #516]	; (800c0b4 <__ieee754_pow+0x254>)
 800beae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800beb2:	429c      	cmp	r4, r3
 800beb4:	ee10 aa10 	vmov	sl, s0
 800beb8:	463d      	mov	r5, r7
 800beba:	dc06      	bgt.n	800beca <__ieee754_pow+0x6a>
 800bebc:	d101      	bne.n	800bec2 <__ieee754_pow+0x62>
 800bebe:	2e00      	cmp	r6, #0
 800bec0:	d1e7      	bne.n	800be92 <__ieee754_pow+0x32>
 800bec2:	4598      	cmp	r8, r3
 800bec4:	dc01      	bgt.n	800beca <__ieee754_pow+0x6a>
 800bec6:	d10f      	bne.n	800bee8 <__ieee754_pow+0x88>
 800bec8:	b172      	cbz	r2, 800bee8 <__ieee754_pow+0x88>
 800beca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bece:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bed2:	ea55 050a 	orrs.w	r5, r5, sl
 800bed6:	d1dc      	bne.n	800be92 <__ieee754_pow+0x32>
 800bed8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bedc:	18db      	adds	r3, r3, r3
 800bede:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bee2:	4152      	adcs	r2, r2
 800bee4:	429d      	cmp	r5, r3
 800bee6:	e7d0      	b.n	800be8a <__ieee754_pow+0x2a>
 800bee8:	2d00      	cmp	r5, #0
 800beea:	da3b      	bge.n	800bf64 <__ieee754_pow+0x104>
 800beec:	4b72      	ldr	r3, [pc, #456]	; (800c0b8 <__ieee754_pow+0x258>)
 800beee:	4598      	cmp	r8, r3
 800bef0:	dc51      	bgt.n	800bf96 <__ieee754_pow+0x136>
 800bef2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bef6:	4598      	cmp	r8, r3
 800bef8:	f340 84ab 	ble.w	800c852 <__ieee754_pow+0x9f2>
 800befc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bf00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bf04:	2b14      	cmp	r3, #20
 800bf06:	dd0f      	ble.n	800bf28 <__ieee754_pow+0xc8>
 800bf08:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bf0c:	fa22 f103 	lsr.w	r1, r2, r3
 800bf10:	fa01 f303 	lsl.w	r3, r1, r3
 800bf14:	4293      	cmp	r3, r2
 800bf16:	f040 849c 	bne.w	800c852 <__ieee754_pow+0x9f2>
 800bf1a:	f001 0101 	and.w	r1, r1, #1
 800bf1e:	f1c1 0302 	rsb	r3, r1, #2
 800bf22:	9304      	str	r3, [sp, #16]
 800bf24:	b182      	cbz	r2, 800bf48 <__ieee754_pow+0xe8>
 800bf26:	e05f      	b.n	800bfe8 <__ieee754_pow+0x188>
 800bf28:	2a00      	cmp	r2, #0
 800bf2a:	d15b      	bne.n	800bfe4 <__ieee754_pow+0x184>
 800bf2c:	f1c3 0314 	rsb	r3, r3, #20
 800bf30:	fa48 f103 	asr.w	r1, r8, r3
 800bf34:	fa01 f303 	lsl.w	r3, r1, r3
 800bf38:	4543      	cmp	r3, r8
 800bf3a:	f040 8487 	bne.w	800c84c <__ieee754_pow+0x9ec>
 800bf3e:	f001 0101 	and.w	r1, r1, #1
 800bf42:	f1c1 0302 	rsb	r3, r1, #2
 800bf46:	9304      	str	r3, [sp, #16]
 800bf48:	4b5c      	ldr	r3, [pc, #368]	; (800c0bc <__ieee754_pow+0x25c>)
 800bf4a:	4598      	cmp	r8, r3
 800bf4c:	d132      	bne.n	800bfb4 <__ieee754_pow+0x154>
 800bf4e:	f1b9 0f00 	cmp.w	r9, #0
 800bf52:	f280 8477 	bge.w	800c844 <__ieee754_pow+0x9e4>
 800bf56:	4959      	ldr	r1, [pc, #356]	; (800c0bc <__ieee754_pow+0x25c>)
 800bf58:	4632      	mov	r2, r6
 800bf5a:	463b      	mov	r3, r7
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	f7f4 fc21 	bl	80007a4 <__aeabi_ddiv>
 800bf62:	e79c      	b.n	800be9e <__ieee754_pow+0x3e>
 800bf64:	2300      	movs	r3, #0
 800bf66:	9304      	str	r3, [sp, #16]
 800bf68:	2a00      	cmp	r2, #0
 800bf6a:	d13d      	bne.n	800bfe8 <__ieee754_pow+0x188>
 800bf6c:	4b51      	ldr	r3, [pc, #324]	; (800c0b4 <__ieee754_pow+0x254>)
 800bf6e:	4598      	cmp	r8, r3
 800bf70:	d1ea      	bne.n	800bf48 <__ieee754_pow+0xe8>
 800bf72:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bf76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bf7a:	ea53 030a 	orrs.w	r3, r3, sl
 800bf7e:	f000 8459 	beq.w	800c834 <__ieee754_pow+0x9d4>
 800bf82:	4b4f      	ldr	r3, [pc, #316]	; (800c0c0 <__ieee754_pow+0x260>)
 800bf84:	429c      	cmp	r4, r3
 800bf86:	dd08      	ble.n	800bf9a <__ieee754_pow+0x13a>
 800bf88:	f1b9 0f00 	cmp.w	r9, #0
 800bf8c:	f2c0 8456 	blt.w	800c83c <__ieee754_pow+0x9dc>
 800bf90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf94:	e783      	b.n	800be9e <__ieee754_pow+0x3e>
 800bf96:	2302      	movs	r3, #2
 800bf98:	e7e5      	b.n	800bf66 <__ieee754_pow+0x106>
 800bf9a:	f1b9 0f00 	cmp.w	r9, #0
 800bf9e:	f04f 0000 	mov.w	r0, #0
 800bfa2:	f04f 0100 	mov.w	r1, #0
 800bfa6:	f6bf af7a 	bge.w	800be9e <__ieee754_pow+0x3e>
 800bfaa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bfae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bfb2:	e774      	b.n	800be9e <__ieee754_pow+0x3e>
 800bfb4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bfb8:	d106      	bne.n	800bfc8 <__ieee754_pow+0x168>
 800bfba:	4632      	mov	r2, r6
 800bfbc:	463b      	mov	r3, r7
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	f7f4 fac5 	bl	8000550 <__aeabi_dmul>
 800bfc6:	e76a      	b.n	800be9e <__ieee754_pow+0x3e>
 800bfc8:	4b3e      	ldr	r3, [pc, #248]	; (800c0c4 <__ieee754_pow+0x264>)
 800bfca:	4599      	cmp	r9, r3
 800bfcc:	d10c      	bne.n	800bfe8 <__ieee754_pow+0x188>
 800bfce:	2d00      	cmp	r5, #0
 800bfd0:	db0a      	blt.n	800bfe8 <__ieee754_pow+0x188>
 800bfd2:	ec47 6b10 	vmov	d0, r6, r7
 800bfd6:	b009      	add	sp, #36	; 0x24
 800bfd8:	ecbd 8b06 	vpop	{d8-d10}
 800bfdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe0:	f000 bd20 	b.w	800ca24 <__ieee754_sqrt>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	9304      	str	r3, [sp, #16]
 800bfe8:	ec47 6b10 	vmov	d0, r6, r7
 800bfec:	f000 fc62 	bl	800c8b4 <fabs>
 800bff0:	ec51 0b10 	vmov	r0, r1, d0
 800bff4:	f1ba 0f00 	cmp.w	sl, #0
 800bff8:	d129      	bne.n	800c04e <__ieee754_pow+0x1ee>
 800bffa:	b124      	cbz	r4, 800c006 <__ieee754_pow+0x1a6>
 800bffc:	4b2f      	ldr	r3, [pc, #188]	; (800c0bc <__ieee754_pow+0x25c>)
 800bffe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c002:	429a      	cmp	r2, r3
 800c004:	d123      	bne.n	800c04e <__ieee754_pow+0x1ee>
 800c006:	f1b9 0f00 	cmp.w	r9, #0
 800c00a:	da05      	bge.n	800c018 <__ieee754_pow+0x1b8>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	2000      	movs	r0, #0
 800c012:	492a      	ldr	r1, [pc, #168]	; (800c0bc <__ieee754_pow+0x25c>)
 800c014:	f7f4 fbc6 	bl	80007a4 <__aeabi_ddiv>
 800c018:	2d00      	cmp	r5, #0
 800c01a:	f6bf af40 	bge.w	800be9e <__ieee754_pow+0x3e>
 800c01e:	9b04      	ldr	r3, [sp, #16]
 800c020:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c024:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c028:	431c      	orrs	r4, r3
 800c02a:	d108      	bne.n	800c03e <__ieee754_pow+0x1de>
 800c02c:	4602      	mov	r2, r0
 800c02e:	460b      	mov	r3, r1
 800c030:	4610      	mov	r0, r2
 800c032:	4619      	mov	r1, r3
 800c034:	f7f4 f8d4 	bl	80001e0 <__aeabi_dsub>
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	e78f      	b.n	800bf5e <__ieee754_pow+0xfe>
 800c03e:	9b04      	ldr	r3, [sp, #16]
 800c040:	2b01      	cmp	r3, #1
 800c042:	f47f af2c 	bne.w	800be9e <__ieee754_pow+0x3e>
 800c046:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c04a:	4619      	mov	r1, r3
 800c04c:	e727      	b.n	800be9e <__ieee754_pow+0x3e>
 800c04e:	0feb      	lsrs	r3, r5, #31
 800c050:	3b01      	subs	r3, #1
 800c052:	9306      	str	r3, [sp, #24]
 800c054:	9a06      	ldr	r2, [sp, #24]
 800c056:	9b04      	ldr	r3, [sp, #16]
 800c058:	4313      	orrs	r3, r2
 800c05a:	d102      	bne.n	800c062 <__ieee754_pow+0x202>
 800c05c:	4632      	mov	r2, r6
 800c05e:	463b      	mov	r3, r7
 800c060:	e7e6      	b.n	800c030 <__ieee754_pow+0x1d0>
 800c062:	4b19      	ldr	r3, [pc, #100]	; (800c0c8 <__ieee754_pow+0x268>)
 800c064:	4598      	cmp	r8, r3
 800c066:	f340 80fb 	ble.w	800c260 <__ieee754_pow+0x400>
 800c06a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c06e:	4598      	cmp	r8, r3
 800c070:	4b13      	ldr	r3, [pc, #76]	; (800c0c0 <__ieee754_pow+0x260>)
 800c072:	dd0c      	ble.n	800c08e <__ieee754_pow+0x22e>
 800c074:	429c      	cmp	r4, r3
 800c076:	dc0f      	bgt.n	800c098 <__ieee754_pow+0x238>
 800c078:	f1b9 0f00 	cmp.w	r9, #0
 800c07c:	da0f      	bge.n	800c09e <__ieee754_pow+0x23e>
 800c07e:	2000      	movs	r0, #0
 800c080:	b009      	add	sp, #36	; 0x24
 800c082:	ecbd 8b06 	vpop	{d8-d10}
 800c086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08a:	f000 bcc2 	b.w	800ca12 <__math_oflow>
 800c08e:	429c      	cmp	r4, r3
 800c090:	dbf2      	blt.n	800c078 <__ieee754_pow+0x218>
 800c092:	4b0a      	ldr	r3, [pc, #40]	; (800c0bc <__ieee754_pow+0x25c>)
 800c094:	429c      	cmp	r4, r3
 800c096:	dd19      	ble.n	800c0cc <__ieee754_pow+0x26c>
 800c098:	f1b9 0f00 	cmp.w	r9, #0
 800c09c:	dcef      	bgt.n	800c07e <__ieee754_pow+0x21e>
 800c09e:	2000      	movs	r0, #0
 800c0a0:	b009      	add	sp, #36	; 0x24
 800c0a2:	ecbd 8b06 	vpop	{d8-d10}
 800c0a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0aa:	f000 bca9 	b.w	800ca00 <__math_uflow>
 800c0ae:	bf00      	nop
 800c0b0:	fff00000 	.word	0xfff00000
 800c0b4:	7ff00000 	.word	0x7ff00000
 800c0b8:	433fffff 	.word	0x433fffff
 800c0bc:	3ff00000 	.word	0x3ff00000
 800c0c0:	3fefffff 	.word	0x3fefffff
 800c0c4:	3fe00000 	.word	0x3fe00000
 800c0c8:	41e00000 	.word	0x41e00000
 800c0cc:	4b60      	ldr	r3, [pc, #384]	; (800c250 <__ieee754_pow+0x3f0>)
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f7f4 f886 	bl	80001e0 <__aeabi_dsub>
 800c0d4:	a354      	add	r3, pc, #336	; (adr r3, 800c228 <__ieee754_pow+0x3c8>)
 800c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0da:	4604      	mov	r4, r0
 800c0dc:	460d      	mov	r5, r1
 800c0de:	f7f4 fa37 	bl	8000550 <__aeabi_dmul>
 800c0e2:	a353      	add	r3, pc, #332	; (adr r3, 800c230 <__ieee754_pow+0x3d0>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	460f      	mov	r7, r1
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	f7f4 fa2e 	bl	8000550 <__aeabi_dmul>
 800c0f4:	4b57      	ldr	r3, [pc, #348]	; (800c254 <__ieee754_pow+0x3f4>)
 800c0f6:	4682      	mov	sl, r0
 800c0f8:	468b      	mov	fp, r1
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4629      	mov	r1, r5
 800c100:	f7f4 fa26 	bl	8000550 <__aeabi_dmul>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	a14b      	add	r1, pc, #300	; (adr r1, 800c238 <__ieee754_pow+0x3d8>)
 800c10a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c10e:	f7f4 f867 	bl	80001e0 <__aeabi_dsub>
 800c112:	4622      	mov	r2, r4
 800c114:	462b      	mov	r3, r5
 800c116:	f7f4 fa1b 	bl	8000550 <__aeabi_dmul>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	2000      	movs	r0, #0
 800c120:	494d      	ldr	r1, [pc, #308]	; (800c258 <__ieee754_pow+0x3f8>)
 800c122:	f7f4 f85d 	bl	80001e0 <__aeabi_dsub>
 800c126:	4622      	mov	r2, r4
 800c128:	4680      	mov	r8, r0
 800c12a:	4689      	mov	r9, r1
 800c12c:	462b      	mov	r3, r5
 800c12e:	4620      	mov	r0, r4
 800c130:	4629      	mov	r1, r5
 800c132:	f7f4 fa0d 	bl	8000550 <__aeabi_dmul>
 800c136:	4602      	mov	r2, r0
 800c138:	460b      	mov	r3, r1
 800c13a:	4640      	mov	r0, r8
 800c13c:	4649      	mov	r1, r9
 800c13e:	f7f4 fa07 	bl	8000550 <__aeabi_dmul>
 800c142:	a33f      	add	r3, pc, #252	; (adr r3, 800c240 <__ieee754_pow+0x3e0>)
 800c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c148:	f7f4 fa02 	bl	8000550 <__aeabi_dmul>
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	4650      	mov	r0, sl
 800c152:	4659      	mov	r1, fp
 800c154:	f7f4 f844 	bl	80001e0 <__aeabi_dsub>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4680      	mov	r8, r0
 800c15e:	4689      	mov	r9, r1
 800c160:	4630      	mov	r0, r6
 800c162:	4639      	mov	r1, r7
 800c164:	f7f4 f83e 	bl	80001e4 <__adddf3>
 800c168:	2000      	movs	r0, #0
 800c16a:	4632      	mov	r2, r6
 800c16c:	463b      	mov	r3, r7
 800c16e:	4604      	mov	r4, r0
 800c170:	460d      	mov	r5, r1
 800c172:	f7f4 f835 	bl	80001e0 <__aeabi_dsub>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	4640      	mov	r0, r8
 800c17c:	4649      	mov	r1, r9
 800c17e:	f7f4 f82f 	bl	80001e0 <__aeabi_dsub>
 800c182:	9b04      	ldr	r3, [sp, #16]
 800c184:	9a06      	ldr	r2, [sp, #24]
 800c186:	3b01      	subs	r3, #1
 800c188:	4313      	orrs	r3, r2
 800c18a:	4682      	mov	sl, r0
 800c18c:	468b      	mov	fp, r1
 800c18e:	f040 81e7 	bne.w	800c560 <__ieee754_pow+0x700>
 800c192:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c248 <__ieee754_pow+0x3e8>
 800c196:	eeb0 8a47 	vmov.f32	s16, s14
 800c19a:	eef0 8a67 	vmov.f32	s17, s15
 800c19e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c1a2:	2600      	movs	r6, #0
 800c1a4:	4632      	mov	r2, r6
 800c1a6:	463b      	mov	r3, r7
 800c1a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1ac:	f7f4 f818 	bl	80001e0 <__aeabi_dsub>
 800c1b0:	4622      	mov	r2, r4
 800c1b2:	462b      	mov	r3, r5
 800c1b4:	f7f4 f9cc 	bl	8000550 <__aeabi_dmul>
 800c1b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1bc:	4680      	mov	r8, r0
 800c1be:	4689      	mov	r9, r1
 800c1c0:	4650      	mov	r0, sl
 800c1c2:	4659      	mov	r1, fp
 800c1c4:	f7f4 f9c4 	bl	8000550 <__aeabi_dmul>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	4649      	mov	r1, r9
 800c1d0:	f7f4 f808 	bl	80001e4 <__adddf3>
 800c1d4:	4632      	mov	r2, r6
 800c1d6:	463b      	mov	r3, r7
 800c1d8:	4680      	mov	r8, r0
 800c1da:	4689      	mov	r9, r1
 800c1dc:	4620      	mov	r0, r4
 800c1de:	4629      	mov	r1, r5
 800c1e0:	f7f4 f9b6 	bl	8000550 <__aeabi_dmul>
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	460d      	mov	r5, r1
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	4649      	mov	r1, r9
 800c1ee:	4640      	mov	r0, r8
 800c1f0:	f7f3 fff8 	bl	80001e4 <__adddf3>
 800c1f4:	4b19      	ldr	r3, [pc, #100]	; (800c25c <__ieee754_pow+0x3fc>)
 800c1f6:	4299      	cmp	r1, r3
 800c1f8:	ec45 4b19 	vmov	d9, r4, r5
 800c1fc:	4606      	mov	r6, r0
 800c1fe:	460f      	mov	r7, r1
 800c200:	468b      	mov	fp, r1
 800c202:	f340 82f0 	ble.w	800c7e6 <__ieee754_pow+0x986>
 800c206:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c20a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c20e:	4303      	orrs	r3, r0
 800c210:	f000 81e4 	beq.w	800c5dc <__ieee754_pow+0x77c>
 800c214:	ec51 0b18 	vmov	r0, r1, d8
 800c218:	2200      	movs	r2, #0
 800c21a:	2300      	movs	r3, #0
 800c21c:	f7f4 fc0a 	bl	8000a34 <__aeabi_dcmplt>
 800c220:	3800      	subs	r0, #0
 800c222:	bf18      	it	ne
 800c224:	2001      	movne	r0, #1
 800c226:	e72b      	b.n	800c080 <__ieee754_pow+0x220>
 800c228:	60000000 	.word	0x60000000
 800c22c:	3ff71547 	.word	0x3ff71547
 800c230:	f85ddf44 	.word	0xf85ddf44
 800c234:	3e54ae0b 	.word	0x3e54ae0b
 800c238:	55555555 	.word	0x55555555
 800c23c:	3fd55555 	.word	0x3fd55555
 800c240:	652b82fe 	.word	0x652b82fe
 800c244:	3ff71547 	.word	0x3ff71547
 800c248:	00000000 	.word	0x00000000
 800c24c:	bff00000 	.word	0xbff00000
 800c250:	3ff00000 	.word	0x3ff00000
 800c254:	3fd00000 	.word	0x3fd00000
 800c258:	3fe00000 	.word	0x3fe00000
 800c25c:	408fffff 	.word	0x408fffff
 800c260:	4bd5      	ldr	r3, [pc, #852]	; (800c5b8 <__ieee754_pow+0x758>)
 800c262:	402b      	ands	r3, r5
 800c264:	2200      	movs	r2, #0
 800c266:	b92b      	cbnz	r3, 800c274 <__ieee754_pow+0x414>
 800c268:	4bd4      	ldr	r3, [pc, #848]	; (800c5bc <__ieee754_pow+0x75c>)
 800c26a:	f7f4 f971 	bl	8000550 <__aeabi_dmul>
 800c26e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c272:	460c      	mov	r4, r1
 800c274:	1523      	asrs	r3, r4, #20
 800c276:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c27a:	4413      	add	r3, r2
 800c27c:	9305      	str	r3, [sp, #20]
 800c27e:	4bd0      	ldr	r3, [pc, #832]	; (800c5c0 <__ieee754_pow+0x760>)
 800c280:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c284:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c288:	429c      	cmp	r4, r3
 800c28a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c28e:	dd08      	ble.n	800c2a2 <__ieee754_pow+0x442>
 800c290:	4bcc      	ldr	r3, [pc, #816]	; (800c5c4 <__ieee754_pow+0x764>)
 800c292:	429c      	cmp	r4, r3
 800c294:	f340 8162 	ble.w	800c55c <__ieee754_pow+0x6fc>
 800c298:	9b05      	ldr	r3, [sp, #20]
 800c29a:	3301      	adds	r3, #1
 800c29c:	9305      	str	r3, [sp, #20]
 800c29e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c2a2:	2400      	movs	r4, #0
 800c2a4:	00e3      	lsls	r3, r4, #3
 800c2a6:	9307      	str	r3, [sp, #28]
 800c2a8:	4bc7      	ldr	r3, [pc, #796]	; (800c5c8 <__ieee754_pow+0x768>)
 800c2aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c2ae:	ed93 7b00 	vldr	d7, [r3]
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	ec53 2b17 	vmov	r2, r3, d7
 800c2b8:	eeb0 9a47 	vmov.f32	s18, s14
 800c2bc:	eef0 9a67 	vmov.f32	s19, s15
 800c2c0:	4682      	mov	sl, r0
 800c2c2:	f7f3 ff8d 	bl	80001e0 <__aeabi_dsub>
 800c2c6:	4652      	mov	r2, sl
 800c2c8:	4606      	mov	r6, r0
 800c2ca:	460f      	mov	r7, r1
 800c2cc:	462b      	mov	r3, r5
 800c2ce:	ec51 0b19 	vmov	r0, r1, d9
 800c2d2:	f7f3 ff87 	bl	80001e4 <__adddf3>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	460b      	mov	r3, r1
 800c2da:	2000      	movs	r0, #0
 800c2dc:	49bb      	ldr	r1, [pc, #748]	; (800c5cc <__ieee754_pow+0x76c>)
 800c2de:	f7f4 fa61 	bl	80007a4 <__aeabi_ddiv>
 800c2e2:	ec41 0b1a 	vmov	d10, r0, r1
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	f7f4 f92f 	bl	8000550 <__aeabi_dmul>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2f8:	9302      	str	r3, [sp, #8]
 800c2fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c2fe:	46ab      	mov	fp, r5
 800c300:	106d      	asrs	r5, r5, #1
 800c302:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c306:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c30a:	ec41 0b18 	vmov	d8, r0, r1
 800c30e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c312:	2200      	movs	r2, #0
 800c314:	4640      	mov	r0, r8
 800c316:	4649      	mov	r1, r9
 800c318:	4614      	mov	r4, r2
 800c31a:	461d      	mov	r5, r3
 800c31c:	f7f4 f918 	bl	8000550 <__aeabi_dmul>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	4630      	mov	r0, r6
 800c326:	4639      	mov	r1, r7
 800c328:	f7f3 ff5a 	bl	80001e0 <__aeabi_dsub>
 800c32c:	ec53 2b19 	vmov	r2, r3, d9
 800c330:	4606      	mov	r6, r0
 800c332:	460f      	mov	r7, r1
 800c334:	4620      	mov	r0, r4
 800c336:	4629      	mov	r1, r5
 800c338:	f7f3 ff52 	bl	80001e0 <__aeabi_dsub>
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	4650      	mov	r0, sl
 800c342:	4659      	mov	r1, fp
 800c344:	f7f3 ff4c 	bl	80001e0 <__aeabi_dsub>
 800c348:	4642      	mov	r2, r8
 800c34a:	464b      	mov	r3, r9
 800c34c:	f7f4 f900 	bl	8000550 <__aeabi_dmul>
 800c350:	4602      	mov	r2, r0
 800c352:	460b      	mov	r3, r1
 800c354:	4630      	mov	r0, r6
 800c356:	4639      	mov	r1, r7
 800c358:	f7f3 ff42 	bl	80001e0 <__aeabi_dsub>
 800c35c:	ec53 2b1a 	vmov	r2, r3, d10
 800c360:	f7f4 f8f6 	bl	8000550 <__aeabi_dmul>
 800c364:	ec53 2b18 	vmov	r2, r3, d8
 800c368:	ec41 0b19 	vmov	d9, r0, r1
 800c36c:	ec51 0b18 	vmov	r0, r1, d8
 800c370:	f7f4 f8ee 	bl	8000550 <__aeabi_dmul>
 800c374:	a37c      	add	r3, pc, #496	; (adr r3, 800c568 <__ieee754_pow+0x708>)
 800c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37a:	4604      	mov	r4, r0
 800c37c:	460d      	mov	r5, r1
 800c37e:	f7f4 f8e7 	bl	8000550 <__aeabi_dmul>
 800c382:	a37b      	add	r3, pc, #492	; (adr r3, 800c570 <__ieee754_pow+0x710>)
 800c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c388:	f7f3 ff2c 	bl	80001e4 <__adddf3>
 800c38c:	4622      	mov	r2, r4
 800c38e:	462b      	mov	r3, r5
 800c390:	f7f4 f8de 	bl	8000550 <__aeabi_dmul>
 800c394:	a378      	add	r3, pc, #480	; (adr r3, 800c578 <__ieee754_pow+0x718>)
 800c396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39a:	f7f3 ff23 	bl	80001e4 <__adddf3>
 800c39e:	4622      	mov	r2, r4
 800c3a0:	462b      	mov	r3, r5
 800c3a2:	f7f4 f8d5 	bl	8000550 <__aeabi_dmul>
 800c3a6:	a376      	add	r3, pc, #472	; (adr r3, 800c580 <__ieee754_pow+0x720>)
 800c3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ac:	f7f3 ff1a 	bl	80001e4 <__adddf3>
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	462b      	mov	r3, r5
 800c3b4:	f7f4 f8cc 	bl	8000550 <__aeabi_dmul>
 800c3b8:	a373      	add	r3, pc, #460	; (adr r3, 800c588 <__ieee754_pow+0x728>)
 800c3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3be:	f7f3 ff11 	bl	80001e4 <__adddf3>
 800c3c2:	4622      	mov	r2, r4
 800c3c4:	462b      	mov	r3, r5
 800c3c6:	f7f4 f8c3 	bl	8000550 <__aeabi_dmul>
 800c3ca:	a371      	add	r3, pc, #452	; (adr r3, 800c590 <__ieee754_pow+0x730>)
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	f7f3 ff08 	bl	80001e4 <__adddf3>
 800c3d4:	4622      	mov	r2, r4
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	460f      	mov	r7, r1
 800c3da:	462b      	mov	r3, r5
 800c3dc:	4620      	mov	r0, r4
 800c3de:	4629      	mov	r1, r5
 800c3e0:	f7f4 f8b6 	bl	8000550 <__aeabi_dmul>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	4639      	mov	r1, r7
 800c3ec:	f7f4 f8b0 	bl	8000550 <__aeabi_dmul>
 800c3f0:	4642      	mov	r2, r8
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	460d      	mov	r5, r1
 800c3f6:	464b      	mov	r3, r9
 800c3f8:	ec51 0b18 	vmov	r0, r1, d8
 800c3fc:	f7f3 fef2 	bl	80001e4 <__adddf3>
 800c400:	ec53 2b19 	vmov	r2, r3, d9
 800c404:	f7f4 f8a4 	bl	8000550 <__aeabi_dmul>
 800c408:	4622      	mov	r2, r4
 800c40a:	462b      	mov	r3, r5
 800c40c:	f7f3 feea 	bl	80001e4 <__adddf3>
 800c410:	4642      	mov	r2, r8
 800c412:	4682      	mov	sl, r0
 800c414:	468b      	mov	fp, r1
 800c416:	464b      	mov	r3, r9
 800c418:	4640      	mov	r0, r8
 800c41a:	4649      	mov	r1, r9
 800c41c:	f7f4 f898 	bl	8000550 <__aeabi_dmul>
 800c420:	4b6b      	ldr	r3, [pc, #428]	; (800c5d0 <__ieee754_pow+0x770>)
 800c422:	2200      	movs	r2, #0
 800c424:	4606      	mov	r6, r0
 800c426:	460f      	mov	r7, r1
 800c428:	f7f3 fedc 	bl	80001e4 <__adddf3>
 800c42c:	4652      	mov	r2, sl
 800c42e:	465b      	mov	r3, fp
 800c430:	f7f3 fed8 	bl	80001e4 <__adddf3>
 800c434:	2000      	movs	r0, #0
 800c436:	4604      	mov	r4, r0
 800c438:	460d      	mov	r5, r1
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4640      	mov	r0, r8
 800c440:	4649      	mov	r1, r9
 800c442:	f7f4 f885 	bl	8000550 <__aeabi_dmul>
 800c446:	4b62      	ldr	r3, [pc, #392]	; (800c5d0 <__ieee754_pow+0x770>)
 800c448:	4680      	mov	r8, r0
 800c44a:	4689      	mov	r9, r1
 800c44c:	2200      	movs	r2, #0
 800c44e:	4620      	mov	r0, r4
 800c450:	4629      	mov	r1, r5
 800c452:	f7f3 fec5 	bl	80001e0 <__aeabi_dsub>
 800c456:	4632      	mov	r2, r6
 800c458:	463b      	mov	r3, r7
 800c45a:	f7f3 fec1 	bl	80001e0 <__aeabi_dsub>
 800c45e:	4602      	mov	r2, r0
 800c460:	460b      	mov	r3, r1
 800c462:	4650      	mov	r0, sl
 800c464:	4659      	mov	r1, fp
 800c466:	f7f3 febb 	bl	80001e0 <__aeabi_dsub>
 800c46a:	ec53 2b18 	vmov	r2, r3, d8
 800c46e:	f7f4 f86f 	bl	8000550 <__aeabi_dmul>
 800c472:	4622      	mov	r2, r4
 800c474:	4606      	mov	r6, r0
 800c476:	460f      	mov	r7, r1
 800c478:	462b      	mov	r3, r5
 800c47a:	ec51 0b19 	vmov	r0, r1, d9
 800c47e:	f7f4 f867 	bl	8000550 <__aeabi_dmul>
 800c482:	4602      	mov	r2, r0
 800c484:	460b      	mov	r3, r1
 800c486:	4630      	mov	r0, r6
 800c488:	4639      	mov	r1, r7
 800c48a:	f7f3 feab 	bl	80001e4 <__adddf3>
 800c48e:	4606      	mov	r6, r0
 800c490:	460f      	mov	r7, r1
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	4640      	mov	r0, r8
 800c498:	4649      	mov	r1, r9
 800c49a:	f7f3 fea3 	bl	80001e4 <__adddf3>
 800c49e:	a33e      	add	r3, pc, #248	; (adr r3, 800c598 <__ieee754_pow+0x738>)
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	460d      	mov	r5, r1
 800c4aa:	f7f4 f851 	bl	8000550 <__aeabi_dmul>
 800c4ae:	4642      	mov	r2, r8
 800c4b0:	ec41 0b18 	vmov	d8, r0, r1
 800c4b4:	464b      	mov	r3, r9
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	f7f3 fe91 	bl	80001e0 <__aeabi_dsub>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	4639      	mov	r1, r7
 800c4c6:	f7f3 fe8b 	bl	80001e0 <__aeabi_dsub>
 800c4ca:	a335      	add	r3, pc, #212	; (adr r3, 800c5a0 <__ieee754_pow+0x740>)
 800c4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d0:	f7f4 f83e 	bl	8000550 <__aeabi_dmul>
 800c4d4:	a334      	add	r3, pc, #208	; (adr r3, 800c5a8 <__ieee754_pow+0x748>)
 800c4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4da:	4606      	mov	r6, r0
 800c4dc:	460f      	mov	r7, r1
 800c4de:	4620      	mov	r0, r4
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	f7f4 f835 	bl	8000550 <__aeabi_dmul>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	4639      	mov	r1, r7
 800c4ee:	f7f3 fe79 	bl	80001e4 <__adddf3>
 800c4f2:	9a07      	ldr	r2, [sp, #28]
 800c4f4:	4b37      	ldr	r3, [pc, #220]	; (800c5d4 <__ieee754_pow+0x774>)
 800c4f6:	4413      	add	r3, r2
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	f7f3 fe72 	bl	80001e4 <__adddf3>
 800c500:	4682      	mov	sl, r0
 800c502:	9805      	ldr	r0, [sp, #20]
 800c504:	468b      	mov	fp, r1
 800c506:	f7f3 ffb9 	bl	800047c <__aeabi_i2d>
 800c50a:	9a07      	ldr	r2, [sp, #28]
 800c50c:	4b32      	ldr	r3, [pc, #200]	; (800c5d8 <__ieee754_pow+0x778>)
 800c50e:	4413      	add	r3, r2
 800c510:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c514:	4606      	mov	r6, r0
 800c516:	460f      	mov	r7, r1
 800c518:	4652      	mov	r2, sl
 800c51a:	465b      	mov	r3, fp
 800c51c:	ec51 0b18 	vmov	r0, r1, d8
 800c520:	f7f3 fe60 	bl	80001e4 <__adddf3>
 800c524:	4642      	mov	r2, r8
 800c526:	464b      	mov	r3, r9
 800c528:	f7f3 fe5c 	bl	80001e4 <__adddf3>
 800c52c:	4632      	mov	r2, r6
 800c52e:	463b      	mov	r3, r7
 800c530:	f7f3 fe58 	bl	80001e4 <__adddf3>
 800c534:	2000      	movs	r0, #0
 800c536:	4632      	mov	r2, r6
 800c538:	463b      	mov	r3, r7
 800c53a:	4604      	mov	r4, r0
 800c53c:	460d      	mov	r5, r1
 800c53e:	f7f3 fe4f 	bl	80001e0 <__aeabi_dsub>
 800c542:	4642      	mov	r2, r8
 800c544:	464b      	mov	r3, r9
 800c546:	f7f3 fe4b 	bl	80001e0 <__aeabi_dsub>
 800c54a:	ec53 2b18 	vmov	r2, r3, d8
 800c54e:	f7f3 fe47 	bl	80001e0 <__aeabi_dsub>
 800c552:	4602      	mov	r2, r0
 800c554:	460b      	mov	r3, r1
 800c556:	4650      	mov	r0, sl
 800c558:	4659      	mov	r1, fp
 800c55a:	e610      	b.n	800c17e <__ieee754_pow+0x31e>
 800c55c:	2401      	movs	r4, #1
 800c55e:	e6a1      	b.n	800c2a4 <__ieee754_pow+0x444>
 800c560:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c5b0 <__ieee754_pow+0x750>
 800c564:	e617      	b.n	800c196 <__ieee754_pow+0x336>
 800c566:	bf00      	nop
 800c568:	4a454eef 	.word	0x4a454eef
 800c56c:	3fca7e28 	.word	0x3fca7e28
 800c570:	93c9db65 	.word	0x93c9db65
 800c574:	3fcd864a 	.word	0x3fcd864a
 800c578:	a91d4101 	.word	0xa91d4101
 800c57c:	3fd17460 	.word	0x3fd17460
 800c580:	518f264d 	.word	0x518f264d
 800c584:	3fd55555 	.word	0x3fd55555
 800c588:	db6fabff 	.word	0xdb6fabff
 800c58c:	3fdb6db6 	.word	0x3fdb6db6
 800c590:	33333303 	.word	0x33333303
 800c594:	3fe33333 	.word	0x3fe33333
 800c598:	e0000000 	.word	0xe0000000
 800c59c:	3feec709 	.word	0x3feec709
 800c5a0:	dc3a03fd 	.word	0xdc3a03fd
 800c5a4:	3feec709 	.word	0x3feec709
 800c5a8:	145b01f5 	.word	0x145b01f5
 800c5ac:	be3e2fe0 	.word	0xbe3e2fe0
 800c5b0:	00000000 	.word	0x00000000
 800c5b4:	3ff00000 	.word	0x3ff00000
 800c5b8:	7ff00000 	.word	0x7ff00000
 800c5bc:	43400000 	.word	0x43400000
 800c5c0:	0003988e 	.word	0x0003988e
 800c5c4:	000bb679 	.word	0x000bb679
 800c5c8:	0800cf10 	.word	0x0800cf10
 800c5cc:	3ff00000 	.word	0x3ff00000
 800c5d0:	40080000 	.word	0x40080000
 800c5d4:	0800cf30 	.word	0x0800cf30
 800c5d8:	0800cf20 	.word	0x0800cf20
 800c5dc:	a3b3      	add	r3, pc, #716	; (adr r3, 800c8ac <__ieee754_pow+0xa4c>)
 800c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e2:	4640      	mov	r0, r8
 800c5e4:	4649      	mov	r1, r9
 800c5e6:	f7f3 fdfd 	bl	80001e4 <__adddf3>
 800c5ea:	4622      	mov	r2, r4
 800c5ec:	ec41 0b1a 	vmov	d10, r0, r1
 800c5f0:	462b      	mov	r3, r5
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	4639      	mov	r1, r7
 800c5f6:	f7f3 fdf3 	bl	80001e0 <__aeabi_dsub>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	ec51 0b1a 	vmov	r0, r1, d10
 800c602:	f7f4 fa35 	bl	8000a70 <__aeabi_dcmpgt>
 800c606:	2800      	cmp	r0, #0
 800c608:	f47f ae04 	bne.w	800c214 <__ieee754_pow+0x3b4>
 800c60c:	4aa2      	ldr	r2, [pc, #648]	; (800c898 <__ieee754_pow+0xa38>)
 800c60e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c612:	4293      	cmp	r3, r2
 800c614:	f340 8107 	ble.w	800c826 <__ieee754_pow+0x9c6>
 800c618:	151b      	asrs	r3, r3, #20
 800c61a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c61e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c622:	fa4a fa03 	asr.w	sl, sl, r3
 800c626:	44da      	add	sl, fp
 800c628:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c62c:	489b      	ldr	r0, [pc, #620]	; (800c89c <__ieee754_pow+0xa3c>)
 800c62e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c632:	4108      	asrs	r0, r1
 800c634:	ea00 030a 	and.w	r3, r0, sl
 800c638:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c63c:	f1c1 0114 	rsb	r1, r1, #20
 800c640:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c644:	fa4a fa01 	asr.w	sl, sl, r1
 800c648:	f1bb 0f00 	cmp.w	fp, #0
 800c64c:	f04f 0200 	mov.w	r2, #0
 800c650:	4620      	mov	r0, r4
 800c652:	4629      	mov	r1, r5
 800c654:	bfb8      	it	lt
 800c656:	f1ca 0a00 	rsblt	sl, sl, #0
 800c65a:	f7f3 fdc1 	bl	80001e0 <__aeabi_dsub>
 800c65e:	ec41 0b19 	vmov	d9, r0, r1
 800c662:	4642      	mov	r2, r8
 800c664:	464b      	mov	r3, r9
 800c666:	ec51 0b19 	vmov	r0, r1, d9
 800c66a:	f7f3 fdbb 	bl	80001e4 <__adddf3>
 800c66e:	a37a      	add	r3, pc, #488	; (adr r3, 800c858 <__ieee754_pow+0x9f8>)
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	2000      	movs	r0, #0
 800c676:	4604      	mov	r4, r0
 800c678:	460d      	mov	r5, r1
 800c67a:	f7f3 ff69 	bl	8000550 <__aeabi_dmul>
 800c67e:	ec53 2b19 	vmov	r2, r3, d9
 800c682:	4606      	mov	r6, r0
 800c684:	460f      	mov	r7, r1
 800c686:	4620      	mov	r0, r4
 800c688:	4629      	mov	r1, r5
 800c68a:	f7f3 fda9 	bl	80001e0 <__aeabi_dsub>
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4640      	mov	r0, r8
 800c694:	4649      	mov	r1, r9
 800c696:	f7f3 fda3 	bl	80001e0 <__aeabi_dsub>
 800c69a:	a371      	add	r3, pc, #452	; (adr r3, 800c860 <__ieee754_pow+0xa00>)
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	f7f3 ff56 	bl	8000550 <__aeabi_dmul>
 800c6a4:	a370      	add	r3, pc, #448	; (adr r3, 800c868 <__ieee754_pow+0xa08>)
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	4680      	mov	r8, r0
 800c6ac:	4689      	mov	r9, r1
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	4629      	mov	r1, r5
 800c6b2:	f7f3 ff4d 	bl	8000550 <__aeabi_dmul>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4640      	mov	r0, r8
 800c6bc:	4649      	mov	r1, r9
 800c6be:	f7f3 fd91 	bl	80001e4 <__adddf3>
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	460d      	mov	r5, r1
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	4639      	mov	r1, r7
 800c6ce:	f7f3 fd89 	bl	80001e4 <__adddf3>
 800c6d2:	4632      	mov	r2, r6
 800c6d4:	463b      	mov	r3, r7
 800c6d6:	4680      	mov	r8, r0
 800c6d8:	4689      	mov	r9, r1
 800c6da:	f7f3 fd81 	bl	80001e0 <__aeabi_dsub>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	f7f3 fd7b 	bl	80001e0 <__aeabi_dsub>
 800c6ea:	4642      	mov	r2, r8
 800c6ec:	4606      	mov	r6, r0
 800c6ee:	460f      	mov	r7, r1
 800c6f0:	464b      	mov	r3, r9
 800c6f2:	4640      	mov	r0, r8
 800c6f4:	4649      	mov	r1, r9
 800c6f6:	f7f3 ff2b 	bl	8000550 <__aeabi_dmul>
 800c6fa:	a35d      	add	r3, pc, #372	; (adr r3, 800c870 <__ieee754_pow+0xa10>)
 800c6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c700:	4604      	mov	r4, r0
 800c702:	460d      	mov	r5, r1
 800c704:	f7f3 ff24 	bl	8000550 <__aeabi_dmul>
 800c708:	a35b      	add	r3, pc, #364	; (adr r3, 800c878 <__ieee754_pow+0xa18>)
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	f7f3 fd67 	bl	80001e0 <__aeabi_dsub>
 800c712:	4622      	mov	r2, r4
 800c714:	462b      	mov	r3, r5
 800c716:	f7f3 ff1b 	bl	8000550 <__aeabi_dmul>
 800c71a:	a359      	add	r3, pc, #356	; (adr r3, 800c880 <__ieee754_pow+0xa20>)
 800c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c720:	f7f3 fd60 	bl	80001e4 <__adddf3>
 800c724:	4622      	mov	r2, r4
 800c726:	462b      	mov	r3, r5
 800c728:	f7f3 ff12 	bl	8000550 <__aeabi_dmul>
 800c72c:	a356      	add	r3, pc, #344	; (adr r3, 800c888 <__ieee754_pow+0xa28>)
 800c72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c732:	f7f3 fd55 	bl	80001e0 <__aeabi_dsub>
 800c736:	4622      	mov	r2, r4
 800c738:	462b      	mov	r3, r5
 800c73a:	f7f3 ff09 	bl	8000550 <__aeabi_dmul>
 800c73e:	a354      	add	r3, pc, #336	; (adr r3, 800c890 <__ieee754_pow+0xa30>)
 800c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c744:	f7f3 fd4e 	bl	80001e4 <__adddf3>
 800c748:	4622      	mov	r2, r4
 800c74a:	462b      	mov	r3, r5
 800c74c:	f7f3 ff00 	bl	8000550 <__aeabi_dmul>
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4640      	mov	r0, r8
 800c756:	4649      	mov	r1, r9
 800c758:	f7f3 fd42 	bl	80001e0 <__aeabi_dsub>
 800c75c:	4604      	mov	r4, r0
 800c75e:	460d      	mov	r5, r1
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	4640      	mov	r0, r8
 800c766:	4649      	mov	r1, r9
 800c768:	f7f3 fef2 	bl	8000550 <__aeabi_dmul>
 800c76c:	2200      	movs	r2, #0
 800c76e:	ec41 0b19 	vmov	d9, r0, r1
 800c772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c776:	4620      	mov	r0, r4
 800c778:	4629      	mov	r1, r5
 800c77a:	f7f3 fd31 	bl	80001e0 <__aeabi_dsub>
 800c77e:	4602      	mov	r2, r0
 800c780:	460b      	mov	r3, r1
 800c782:	ec51 0b19 	vmov	r0, r1, d9
 800c786:	f7f4 f80d 	bl	80007a4 <__aeabi_ddiv>
 800c78a:	4632      	mov	r2, r6
 800c78c:	4604      	mov	r4, r0
 800c78e:	460d      	mov	r5, r1
 800c790:	463b      	mov	r3, r7
 800c792:	4640      	mov	r0, r8
 800c794:	4649      	mov	r1, r9
 800c796:	f7f3 fedb 	bl	8000550 <__aeabi_dmul>
 800c79a:	4632      	mov	r2, r6
 800c79c:	463b      	mov	r3, r7
 800c79e:	f7f3 fd21 	bl	80001e4 <__adddf3>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	f7f3 fd19 	bl	80001e0 <__aeabi_dsub>
 800c7ae:	4642      	mov	r2, r8
 800c7b0:	464b      	mov	r3, r9
 800c7b2:	f7f3 fd15 	bl	80001e0 <__aeabi_dsub>
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	4939      	ldr	r1, [pc, #228]	; (800c8a0 <__ieee754_pow+0xa40>)
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f7f3 fd0f 	bl	80001e0 <__aeabi_dsub>
 800c7c2:	ec41 0b10 	vmov	d0, r0, r1
 800c7c6:	ee10 3a90 	vmov	r3, s1
 800c7ca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c7ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7d2:	da2b      	bge.n	800c82c <__ieee754_pow+0x9cc>
 800c7d4:	4650      	mov	r0, sl
 800c7d6:	f000 f877 	bl	800c8c8 <scalbn>
 800c7da:	ec51 0b10 	vmov	r0, r1, d0
 800c7de:	ec53 2b18 	vmov	r2, r3, d8
 800c7e2:	f7ff bbee 	b.w	800bfc2 <__ieee754_pow+0x162>
 800c7e6:	4b2f      	ldr	r3, [pc, #188]	; (800c8a4 <__ieee754_pow+0xa44>)
 800c7e8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c7ec:	429e      	cmp	r6, r3
 800c7ee:	f77f af0d 	ble.w	800c60c <__ieee754_pow+0x7ac>
 800c7f2:	4b2d      	ldr	r3, [pc, #180]	; (800c8a8 <__ieee754_pow+0xa48>)
 800c7f4:	440b      	add	r3, r1
 800c7f6:	4303      	orrs	r3, r0
 800c7f8:	d009      	beq.n	800c80e <__ieee754_pow+0x9ae>
 800c7fa:	ec51 0b18 	vmov	r0, r1, d8
 800c7fe:	2200      	movs	r2, #0
 800c800:	2300      	movs	r3, #0
 800c802:	f7f4 f917 	bl	8000a34 <__aeabi_dcmplt>
 800c806:	3800      	subs	r0, #0
 800c808:	bf18      	it	ne
 800c80a:	2001      	movne	r0, #1
 800c80c:	e448      	b.n	800c0a0 <__ieee754_pow+0x240>
 800c80e:	4622      	mov	r2, r4
 800c810:	462b      	mov	r3, r5
 800c812:	f7f3 fce5 	bl	80001e0 <__aeabi_dsub>
 800c816:	4642      	mov	r2, r8
 800c818:	464b      	mov	r3, r9
 800c81a:	f7f4 f91f 	bl	8000a5c <__aeabi_dcmpge>
 800c81e:	2800      	cmp	r0, #0
 800c820:	f43f aef4 	beq.w	800c60c <__ieee754_pow+0x7ac>
 800c824:	e7e9      	b.n	800c7fa <__ieee754_pow+0x99a>
 800c826:	f04f 0a00 	mov.w	sl, #0
 800c82a:	e71a      	b.n	800c662 <__ieee754_pow+0x802>
 800c82c:	ec51 0b10 	vmov	r0, r1, d0
 800c830:	4619      	mov	r1, r3
 800c832:	e7d4      	b.n	800c7de <__ieee754_pow+0x97e>
 800c834:	491a      	ldr	r1, [pc, #104]	; (800c8a0 <__ieee754_pow+0xa40>)
 800c836:	2000      	movs	r0, #0
 800c838:	f7ff bb31 	b.w	800be9e <__ieee754_pow+0x3e>
 800c83c:	2000      	movs	r0, #0
 800c83e:	2100      	movs	r1, #0
 800c840:	f7ff bb2d 	b.w	800be9e <__ieee754_pow+0x3e>
 800c844:	4630      	mov	r0, r6
 800c846:	4639      	mov	r1, r7
 800c848:	f7ff bb29 	b.w	800be9e <__ieee754_pow+0x3e>
 800c84c:	9204      	str	r2, [sp, #16]
 800c84e:	f7ff bb7b 	b.w	800bf48 <__ieee754_pow+0xe8>
 800c852:	2300      	movs	r3, #0
 800c854:	f7ff bb65 	b.w	800bf22 <__ieee754_pow+0xc2>
 800c858:	00000000 	.word	0x00000000
 800c85c:	3fe62e43 	.word	0x3fe62e43
 800c860:	fefa39ef 	.word	0xfefa39ef
 800c864:	3fe62e42 	.word	0x3fe62e42
 800c868:	0ca86c39 	.word	0x0ca86c39
 800c86c:	be205c61 	.word	0xbe205c61
 800c870:	72bea4d0 	.word	0x72bea4d0
 800c874:	3e663769 	.word	0x3e663769
 800c878:	c5d26bf1 	.word	0xc5d26bf1
 800c87c:	3ebbbd41 	.word	0x3ebbbd41
 800c880:	af25de2c 	.word	0xaf25de2c
 800c884:	3f11566a 	.word	0x3f11566a
 800c888:	16bebd93 	.word	0x16bebd93
 800c88c:	3f66c16c 	.word	0x3f66c16c
 800c890:	5555553e 	.word	0x5555553e
 800c894:	3fc55555 	.word	0x3fc55555
 800c898:	3fe00000 	.word	0x3fe00000
 800c89c:	fff00000 	.word	0xfff00000
 800c8a0:	3ff00000 	.word	0x3ff00000
 800c8a4:	4090cbff 	.word	0x4090cbff
 800c8a8:	3f6f3400 	.word	0x3f6f3400
 800c8ac:	652b82fe 	.word	0x652b82fe
 800c8b0:	3c971547 	.word	0x3c971547

0800c8b4 <fabs>:
 800c8b4:	ec51 0b10 	vmov	r0, r1, d0
 800c8b8:	ee10 2a10 	vmov	r2, s0
 800c8bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8c0:	ec43 2b10 	vmov	d0, r2, r3
 800c8c4:	4770      	bx	lr
	...

0800c8c8 <scalbn>:
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	ec55 4b10 	vmov	r4, r5, d0
 800c8ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	462b      	mov	r3, r5
 800c8d6:	b999      	cbnz	r1, 800c900 <scalbn+0x38>
 800c8d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8dc:	4323      	orrs	r3, r4
 800c8de:	d03f      	beq.n	800c960 <scalbn+0x98>
 800c8e0:	4b35      	ldr	r3, [pc, #212]	; (800c9b8 <scalbn+0xf0>)
 800c8e2:	4629      	mov	r1, r5
 800c8e4:	ee10 0a10 	vmov	r0, s0
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f7f3 fe31 	bl	8000550 <__aeabi_dmul>
 800c8ee:	4b33      	ldr	r3, [pc, #204]	; (800c9bc <scalbn+0xf4>)
 800c8f0:	429e      	cmp	r6, r3
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	460d      	mov	r5, r1
 800c8f6:	da10      	bge.n	800c91a <scalbn+0x52>
 800c8f8:	a327      	add	r3, pc, #156	; (adr r3, 800c998 <scalbn+0xd0>)
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	e01f      	b.n	800c940 <scalbn+0x78>
 800c900:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c904:	4291      	cmp	r1, r2
 800c906:	d10c      	bne.n	800c922 <scalbn+0x5a>
 800c908:	ee10 2a10 	vmov	r2, s0
 800c90c:	4620      	mov	r0, r4
 800c90e:	4629      	mov	r1, r5
 800c910:	f7f3 fc68 	bl	80001e4 <__adddf3>
 800c914:	4604      	mov	r4, r0
 800c916:	460d      	mov	r5, r1
 800c918:	e022      	b.n	800c960 <scalbn+0x98>
 800c91a:	460b      	mov	r3, r1
 800c91c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c920:	3936      	subs	r1, #54	; 0x36
 800c922:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c926:	4296      	cmp	r6, r2
 800c928:	dd0d      	ble.n	800c946 <scalbn+0x7e>
 800c92a:	2d00      	cmp	r5, #0
 800c92c:	a11c      	add	r1, pc, #112	; (adr r1, 800c9a0 <scalbn+0xd8>)
 800c92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c932:	da02      	bge.n	800c93a <scalbn+0x72>
 800c934:	a11c      	add	r1, pc, #112	; (adr r1, 800c9a8 <scalbn+0xe0>)
 800c936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c93a:	a319      	add	r3, pc, #100	; (adr r3, 800c9a0 <scalbn+0xd8>)
 800c93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c940:	f7f3 fe06 	bl	8000550 <__aeabi_dmul>
 800c944:	e7e6      	b.n	800c914 <scalbn+0x4c>
 800c946:	1872      	adds	r2, r6, r1
 800c948:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c94c:	428a      	cmp	r2, r1
 800c94e:	dcec      	bgt.n	800c92a <scalbn+0x62>
 800c950:	2a00      	cmp	r2, #0
 800c952:	dd08      	ble.n	800c966 <scalbn+0x9e>
 800c954:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c958:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c95c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c960:	ec45 4b10 	vmov	d0, r4, r5
 800c964:	bd70      	pop	{r4, r5, r6, pc}
 800c966:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c96a:	da08      	bge.n	800c97e <scalbn+0xb6>
 800c96c:	2d00      	cmp	r5, #0
 800c96e:	a10a      	add	r1, pc, #40	; (adr r1, 800c998 <scalbn+0xd0>)
 800c970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c974:	dac0      	bge.n	800c8f8 <scalbn+0x30>
 800c976:	a10e      	add	r1, pc, #56	; (adr r1, 800c9b0 <scalbn+0xe8>)
 800c978:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c97c:	e7bc      	b.n	800c8f8 <scalbn+0x30>
 800c97e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c982:	3236      	adds	r2, #54	; 0x36
 800c984:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c988:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c98c:	4620      	mov	r0, r4
 800c98e:	4b0c      	ldr	r3, [pc, #48]	; (800c9c0 <scalbn+0xf8>)
 800c990:	2200      	movs	r2, #0
 800c992:	e7d5      	b.n	800c940 <scalbn+0x78>
 800c994:	f3af 8000 	nop.w
 800c998:	c2f8f359 	.word	0xc2f8f359
 800c99c:	01a56e1f 	.word	0x01a56e1f
 800c9a0:	8800759c 	.word	0x8800759c
 800c9a4:	7e37e43c 	.word	0x7e37e43c
 800c9a8:	8800759c 	.word	0x8800759c
 800c9ac:	fe37e43c 	.word	0xfe37e43c
 800c9b0:	c2f8f359 	.word	0xc2f8f359
 800c9b4:	81a56e1f 	.word	0x81a56e1f
 800c9b8:	43500000 	.word	0x43500000
 800c9bc:	ffff3cb0 	.word	0xffff3cb0
 800c9c0:	3c900000 	.word	0x3c900000

0800c9c4 <with_errno>:
 800c9c4:	b570      	push	{r4, r5, r6, lr}
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	460d      	mov	r5, r1
 800c9ca:	4616      	mov	r6, r2
 800c9cc:	f000 f9d8 	bl	800cd80 <__errno>
 800c9d0:	4629      	mov	r1, r5
 800c9d2:	6006      	str	r6, [r0, #0]
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	bd70      	pop	{r4, r5, r6, pc}

0800c9d8 <xflow>:
 800c9d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9da:	4614      	mov	r4, r2
 800c9dc:	461d      	mov	r5, r3
 800c9de:	b108      	cbz	r0, 800c9e4 <xflow+0xc>
 800c9e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c9e4:	e9cd 2300 	strd	r2, r3, [sp]
 800c9e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	4629      	mov	r1, r5
 800c9f0:	f7f3 fdae 	bl	8000550 <__aeabi_dmul>
 800c9f4:	2222      	movs	r2, #34	; 0x22
 800c9f6:	b003      	add	sp, #12
 800c9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9fc:	f7ff bfe2 	b.w	800c9c4 <with_errno>

0800ca00 <__math_uflow>:
 800ca00:	b508      	push	{r3, lr}
 800ca02:	2200      	movs	r2, #0
 800ca04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca08:	f7ff ffe6 	bl	800c9d8 <xflow>
 800ca0c:	ec41 0b10 	vmov	d0, r0, r1
 800ca10:	bd08      	pop	{r3, pc}

0800ca12 <__math_oflow>:
 800ca12:	b508      	push	{r3, lr}
 800ca14:	2200      	movs	r2, #0
 800ca16:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ca1a:	f7ff ffdd 	bl	800c9d8 <xflow>
 800ca1e:	ec41 0b10 	vmov	d0, r0, r1
 800ca22:	bd08      	pop	{r3, pc}

0800ca24 <__ieee754_sqrt>:
 800ca24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca28:	ec55 4b10 	vmov	r4, r5, d0
 800ca2c:	4e67      	ldr	r6, [pc, #412]	; (800cbcc <__ieee754_sqrt+0x1a8>)
 800ca2e:	43ae      	bics	r6, r5
 800ca30:	ee10 0a10 	vmov	r0, s0
 800ca34:	ee10 2a10 	vmov	r2, s0
 800ca38:	4629      	mov	r1, r5
 800ca3a:	462b      	mov	r3, r5
 800ca3c:	d10d      	bne.n	800ca5a <__ieee754_sqrt+0x36>
 800ca3e:	f7f3 fd87 	bl	8000550 <__aeabi_dmul>
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	4620      	mov	r0, r4
 800ca48:	4629      	mov	r1, r5
 800ca4a:	f7f3 fbcb 	bl	80001e4 <__adddf3>
 800ca4e:	4604      	mov	r4, r0
 800ca50:	460d      	mov	r5, r1
 800ca52:	ec45 4b10 	vmov	d0, r4, r5
 800ca56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5a:	2d00      	cmp	r5, #0
 800ca5c:	dc0b      	bgt.n	800ca76 <__ieee754_sqrt+0x52>
 800ca5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ca62:	4326      	orrs	r6, r4
 800ca64:	d0f5      	beq.n	800ca52 <__ieee754_sqrt+0x2e>
 800ca66:	b135      	cbz	r5, 800ca76 <__ieee754_sqrt+0x52>
 800ca68:	f7f3 fbba 	bl	80001e0 <__aeabi_dsub>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	f7f3 fe98 	bl	80007a4 <__aeabi_ddiv>
 800ca74:	e7eb      	b.n	800ca4e <__ieee754_sqrt+0x2a>
 800ca76:	1509      	asrs	r1, r1, #20
 800ca78:	f000 808d 	beq.w	800cb96 <__ieee754_sqrt+0x172>
 800ca7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca80:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ca84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca88:	07c9      	lsls	r1, r1, #31
 800ca8a:	bf5c      	itt	pl
 800ca8c:	005b      	lslpl	r3, r3, #1
 800ca8e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ca92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca96:	bf58      	it	pl
 800ca98:	0052      	lslpl	r2, r2, #1
 800ca9a:	2500      	movs	r5, #0
 800ca9c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800caa0:	1076      	asrs	r6, r6, #1
 800caa2:	0052      	lsls	r2, r2, #1
 800caa4:	f04f 0e16 	mov.w	lr, #22
 800caa8:	46ac      	mov	ip, r5
 800caaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800caae:	eb0c 0001 	add.w	r0, ip, r1
 800cab2:	4298      	cmp	r0, r3
 800cab4:	bfde      	ittt	le
 800cab6:	1a1b      	suble	r3, r3, r0
 800cab8:	eb00 0c01 	addle.w	ip, r0, r1
 800cabc:	186d      	addle	r5, r5, r1
 800cabe:	005b      	lsls	r3, r3, #1
 800cac0:	f1be 0e01 	subs.w	lr, lr, #1
 800cac4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cac8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cacc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cad0:	d1ed      	bne.n	800caae <__ieee754_sqrt+0x8a>
 800cad2:	4674      	mov	r4, lr
 800cad4:	2720      	movs	r7, #32
 800cad6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cada:	4563      	cmp	r3, ip
 800cadc:	eb01 000e 	add.w	r0, r1, lr
 800cae0:	dc02      	bgt.n	800cae8 <__ieee754_sqrt+0xc4>
 800cae2:	d113      	bne.n	800cb0c <__ieee754_sqrt+0xe8>
 800cae4:	4290      	cmp	r0, r2
 800cae6:	d811      	bhi.n	800cb0c <__ieee754_sqrt+0xe8>
 800cae8:	2800      	cmp	r0, #0
 800caea:	eb00 0e01 	add.w	lr, r0, r1
 800caee:	da57      	bge.n	800cba0 <__ieee754_sqrt+0x17c>
 800caf0:	f1be 0f00 	cmp.w	lr, #0
 800caf4:	db54      	blt.n	800cba0 <__ieee754_sqrt+0x17c>
 800caf6:	f10c 0801 	add.w	r8, ip, #1
 800cafa:	eba3 030c 	sub.w	r3, r3, ip
 800cafe:	4290      	cmp	r0, r2
 800cb00:	bf88      	it	hi
 800cb02:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cb06:	1a12      	subs	r2, r2, r0
 800cb08:	440c      	add	r4, r1
 800cb0a:	46c4      	mov	ip, r8
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	3f01      	subs	r7, #1
 800cb10:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cb14:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cb18:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cb1c:	d1dd      	bne.n	800cada <__ieee754_sqrt+0xb6>
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	d01b      	beq.n	800cb5a <__ieee754_sqrt+0x136>
 800cb22:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800cbd0 <__ieee754_sqrt+0x1ac>
 800cb26:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800cbd4 <__ieee754_sqrt+0x1b0>
 800cb2a:	e9da 0100 	ldrd	r0, r1, [sl]
 800cb2e:	e9db 2300 	ldrd	r2, r3, [fp]
 800cb32:	f7f3 fb55 	bl	80001e0 <__aeabi_dsub>
 800cb36:	e9da 8900 	ldrd	r8, r9, [sl]
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4640      	mov	r0, r8
 800cb40:	4649      	mov	r1, r9
 800cb42:	f7f3 ff81 	bl	8000a48 <__aeabi_dcmple>
 800cb46:	b140      	cbz	r0, 800cb5a <__ieee754_sqrt+0x136>
 800cb48:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cb4c:	e9da 0100 	ldrd	r0, r1, [sl]
 800cb50:	e9db 2300 	ldrd	r2, r3, [fp]
 800cb54:	d126      	bne.n	800cba4 <__ieee754_sqrt+0x180>
 800cb56:	3501      	adds	r5, #1
 800cb58:	463c      	mov	r4, r7
 800cb5a:	106a      	asrs	r2, r5, #1
 800cb5c:	0863      	lsrs	r3, r4, #1
 800cb5e:	07e9      	lsls	r1, r5, #31
 800cb60:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800cb64:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800cb68:	bf48      	it	mi
 800cb6a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800cb6e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800cb72:	461c      	mov	r4, r3
 800cb74:	e76d      	b.n	800ca52 <__ieee754_sqrt+0x2e>
 800cb76:	0ad3      	lsrs	r3, r2, #11
 800cb78:	3815      	subs	r0, #21
 800cb7a:	0552      	lsls	r2, r2, #21
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d0fa      	beq.n	800cb76 <__ieee754_sqrt+0x152>
 800cb80:	02dc      	lsls	r4, r3, #11
 800cb82:	d50a      	bpl.n	800cb9a <__ieee754_sqrt+0x176>
 800cb84:	f1c1 0420 	rsb	r4, r1, #32
 800cb88:	fa22 f404 	lsr.w	r4, r2, r4
 800cb8c:	1e4d      	subs	r5, r1, #1
 800cb8e:	408a      	lsls	r2, r1
 800cb90:	4323      	orrs	r3, r4
 800cb92:	1b41      	subs	r1, r0, r5
 800cb94:	e772      	b.n	800ca7c <__ieee754_sqrt+0x58>
 800cb96:	4608      	mov	r0, r1
 800cb98:	e7f0      	b.n	800cb7c <__ieee754_sqrt+0x158>
 800cb9a:	005b      	lsls	r3, r3, #1
 800cb9c:	3101      	adds	r1, #1
 800cb9e:	e7ef      	b.n	800cb80 <__ieee754_sqrt+0x15c>
 800cba0:	46e0      	mov	r8, ip
 800cba2:	e7aa      	b.n	800cafa <__ieee754_sqrt+0xd6>
 800cba4:	f7f3 fb1e 	bl	80001e4 <__adddf3>
 800cba8:	e9da 8900 	ldrd	r8, r9, [sl]
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	4640      	mov	r0, r8
 800cbb2:	4649      	mov	r1, r9
 800cbb4:	f7f3 ff3e 	bl	8000a34 <__aeabi_dcmplt>
 800cbb8:	b120      	cbz	r0, 800cbc4 <__ieee754_sqrt+0x1a0>
 800cbba:	1ca0      	adds	r0, r4, #2
 800cbbc:	bf08      	it	eq
 800cbbe:	3501      	addeq	r5, #1
 800cbc0:	3402      	adds	r4, #2
 800cbc2:	e7ca      	b.n	800cb5a <__ieee754_sqrt+0x136>
 800cbc4:	3401      	adds	r4, #1
 800cbc6:	f024 0401 	bic.w	r4, r4, #1
 800cbca:	e7c6      	b.n	800cb5a <__ieee754_sqrt+0x136>
 800cbcc:	7ff00000 	.word	0x7ff00000
 800cbd0:	20000030 	.word	0x20000030
 800cbd4:	20000038 	.word	0x20000038

0800cbd8 <malloc>:
 800cbd8:	4b02      	ldr	r3, [pc, #8]	; (800cbe4 <malloc+0xc>)
 800cbda:	4601      	mov	r1, r0
 800cbdc:	6818      	ldr	r0, [r3, #0]
 800cbde:	f000 b82b 	b.w	800cc38 <_malloc_r>
 800cbe2:	bf00      	nop
 800cbe4:	2000008c 	.word	0x2000008c

0800cbe8 <free>:
 800cbe8:	4b02      	ldr	r3, [pc, #8]	; (800cbf4 <free+0xc>)
 800cbea:	4601      	mov	r1, r0
 800cbec:	6818      	ldr	r0, [r3, #0]
 800cbee:	f000 b901 	b.w	800cdf4 <_free_r>
 800cbf2:	bf00      	nop
 800cbf4:	2000008c 	.word	0x2000008c

0800cbf8 <sbrk_aligned>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	4e0e      	ldr	r6, [pc, #56]	; (800cc34 <sbrk_aligned+0x3c>)
 800cbfc:	460c      	mov	r4, r1
 800cbfe:	6831      	ldr	r1, [r6, #0]
 800cc00:	4605      	mov	r5, r0
 800cc02:	b911      	cbnz	r1, 800cc0a <sbrk_aligned+0x12>
 800cc04:	f000 f8ac 	bl	800cd60 <_sbrk_r>
 800cc08:	6030      	str	r0, [r6, #0]
 800cc0a:	4621      	mov	r1, r4
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	f000 f8a7 	bl	800cd60 <_sbrk_r>
 800cc12:	1c43      	adds	r3, r0, #1
 800cc14:	d00a      	beq.n	800cc2c <sbrk_aligned+0x34>
 800cc16:	1cc4      	adds	r4, r0, #3
 800cc18:	f024 0403 	bic.w	r4, r4, #3
 800cc1c:	42a0      	cmp	r0, r4
 800cc1e:	d007      	beq.n	800cc30 <sbrk_aligned+0x38>
 800cc20:	1a21      	subs	r1, r4, r0
 800cc22:	4628      	mov	r0, r5
 800cc24:	f000 f89c 	bl	800cd60 <_sbrk_r>
 800cc28:	3001      	adds	r0, #1
 800cc2a:	d101      	bne.n	800cc30 <sbrk_aligned+0x38>
 800cc2c:	f04f 34ff 	mov.w	r4, #4294967295
 800cc30:	4620      	mov	r0, r4
 800cc32:	bd70      	pop	{r4, r5, r6, pc}
 800cc34:	20000b1c 	.word	0x20000b1c

0800cc38 <_malloc_r>:
 800cc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc3c:	1ccd      	adds	r5, r1, #3
 800cc3e:	f025 0503 	bic.w	r5, r5, #3
 800cc42:	3508      	adds	r5, #8
 800cc44:	2d0c      	cmp	r5, #12
 800cc46:	bf38      	it	cc
 800cc48:	250c      	movcc	r5, #12
 800cc4a:	2d00      	cmp	r5, #0
 800cc4c:	4607      	mov	r7, r0
 800cc4e:	db01      	blt.n	800cc54 <_malloc_r+0x1c>
 800cc50:	42a9      	cmp	r1, r5
 800cc52:	d905      	bls.n	800cc60 <_malloc_r+0x28>
 800cc54:	230c      	movs	r3, #12
 800cc56:	603b      	str	r3, [r7, #0]
 800cc58:	2600      	movs	r6, #0
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cd34 <_malloc_r+0xfc>
 800cc64:	f000 f868 	bl	800cd38 <__malloc_lock>
 800cc68:	f8d8 3000 	ldr.w	r3, [r8]
 800cc6c:	461c      	mov	r4, r3
 800cc6e:	bb5c      	cbnz	r4, 800ccc8 <_malloc_r+0x90>
 800cc70:	4629      	mov	r1, r5
 800cc72:	4638      	mov	r0, r7
 800cc74:	f7ff ffc0 	bl	800cbf8 <sbrk_aligned>
 800cc78:	1c43      	adds	r3, r0, #1
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	d155      	bne.n	800cd2a <_malloc_r+0xf2>
 800cc7e:	f8d8 4000 	ldr.w	r4, [r8]
 800cc82:	4626      	mov	r6, r4
 800cc84:	2e00      	cmp	r6, #0
 800cc86:	d145      	bne.n	800cd14 <_malloc_r+0xdc>
 800cc88:	2c00      	cmp	r4, #0
 800cc8a:	d048      	beq.n	800cd1e <_malloc_r+0xe6>
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	4631      	mov	r1, r6
 800cc90:	4638      	mov	r0, r7
 800cc92:	eb04 0903 	add.w	r9, r4, r3
 800cc96:	f000 f863 	bl	800cd60 <_sbrk_r>
 800cc9a:	4581      	cmp	r9, r0
 800cc9c:	d13f      	bne.n	800cd1e <_malloc_r+0xe6>
 800cc9e:	6821      	ldr	r1, [r4, #0]
 800cca0:	1a6d      	subs	r5, r5, r1
 800cca2:	4629      	mov	r1, r5
 800cca4:	4638      	mov	r0, r7
 800cca6:	f7ff ffa7 	bl	800cbf8 <sbrk_aligned>
 800ccaa:	3001      	adds	r0, #1
 800ccac:	d037      	beq.n	800cd1e <_malloc_r+0xe6>
 800ccae:	6823      	ldr	r3, [r4, #0]
 800ccb0:	442b      	add	r3, r5
 800ccb2:	6023      	str	r3, [r4, #0]
 800ccb4:	f8d8 3000 	ldr.w	r3, [r8]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d038      	beq.n	800cd2e <_malloc_r+0xf6>
 800ccbc:	685a      	ldr	r2, [r3, #4]
 800ccbe:	42a2      	cmp	r2, r4
 800ccc0:	d12b      	bne.n	800cd1a <_malloc_r+0xe2>
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	605a      	str	r2, [r3, #4]
 800ccc6:	e00f      	b.n	800cce8 <_malloc_r+0xb0>
 800ccc8:	6822      	ldr	r2, [r4, #0]
 800ccca:	1b52      	subs	r2, r2, r5
 800cccc:	d41f      	bmi.n	800cd0e <_malloc_r+0xd6>
 800ccce:	2a0b      	cmp	r2, #11
 800ccd0:	d917      	bls.n	800cd02 <_malloc_r+0xca>
 800ccd2:	1961      	adds	r1, r4, r5
 800ccd4:	42a3      	cmp	r3, r4
 800ccd6:	6025      	str	r5, [r4, #0]
 800ccd8:	bf18      	it	ne
 800ccda:	6059      	strne	r1, [r3, #4]
 800ccdc:	6863      	ldr	r3, [r4, #4]
 800ccde:	bf08      	it	eq
 800cce0:	f8c8 1000 	streq.w	r1, [r8]
 800cce4:	5162      	str	r2, [r4, r5]
 800cce6:	604b      	str	r3, [r1, #4]
 800cce8:	4638      	mov	r0, r7
 800ccea:	f104 060b 	add.w	r6, r4, #11
 800ccee:	f000 f829 	bl	800cd44 <__malloc_unlock>
 800ccf2:	f026 0607 	bic.w	r6, r6, #7
 800ccf6:	1d23      	adds	r3, r4, #4
 800ccf8:	1af2      	subs	r2, r6, r3
 800ccfa:	d0ae      	beq.n	800cc5a <_malloc_r+0x22>
 800ccfc:	1b9b      	subs	r3, r3, r6
 800ccfe:	50a3      	str	r3, [r4, r2]
 800cd00:	e7ab      	b.n	800cc5a <_malloc_r+0x22>
 800cd02:	42a3      	cmp	r3, r4
 800cd04:	6862      	ldr	r2, [r4, #4]
 800cd06:	d1dd      	bne.n	800ccc4 <_malloc_r+0x8c>
 800cd08:	f8c8 2000 	str.w	r2, [r8]
 800cd0c:	e7ec      	b.n	800cce8 <_malloc_r+0xb0>
 800cd0e:	4623      	mov	r3, r4
 800cd10:	6864      	ldr	r4, [r4, #4]
 800cd12:	e7ac      	b.n	800cc6e <_malloc_r+0x36>
 800cd14:	4634      	mov	r4, r6
 800cd16:	6876      	ldr	r6, [r6, #4]
 800cd18:	e7b4      	b.n	800cc84 <_malloc_r+0x4c>
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	e7cc      	b.n	800ccb8 <_malloc_r+0x80>
 800cd1e:	230c      	movs	r3, #12
 800cd20:	603b      	str	r3, [r7, #0]
 800cd22:	4638      	mov	r0, r7
 800cd24:	f000 f80e 	bl	800cd44 <__malloc_unlock>
 800cd28:	e797      	b.n	800cc5a <_malloc_r+0x22>
 800cd2a:	6025      	str	r5, [r4, #0]
 800cd2c:	e7dc      	b.n	800cce8 <_malloc_r+0xb0>
 800cd2e:	605b      	str	r3, [r3, #4]
 800cd30:	deff      	udf	#255	; 0xff
 800cd32:	bf00      	nop
 800cd34:	20000b18 	.word	0x20000b18

0800cd38 <__malloc_lock>:
 800cd38:	4801      	ldr	r0, [pc, #4]	; (800cd40 <__malloc_lock+0x8>)
 800cd3a:	f000 b84b 	b.w	800cdd4 <__retarget_lock_acquire_recursive>
 800cd3e:	bf00      	nop
 800cd40:	20000c5c 	.word	0x20000c5c

0800cd44 <__malloc_unlock>:
 800cd44:	4801      	ldr	r0, [pc, #4]	; (800cd4c <__malloc_unlock+0x8>)
 800cd46:	f000 b846 	b.w	800cdd6 <__retarget_lock_release_recursive>
 800cd4a:	bf00      	nop
 800cd4c:	20000c5c 	.word	0x20000c5c

0800cd50 <memset>:
 800cd50:	4402      	add	r2, r0
 800cd52:	4603      	mov	r3, r0
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d100      	bne.n	800cd5a <memset+0xa>
 800cd58:	4770      	bx	lr
 800cd5a:	f803 1b01 	strb.w	r1, [r3], #1
 800cd5e:	e7f9      	b.n	800cd54 <memset+0x4>

0800cd60 <_sbrk_r>:
 800cd60:	b538      	push	{r3, r4, r5, lr}
 800cd62:	4d06      	ldr	r5, [pc, #24]	; (800cd7c <_sbrk_r+0x1c>)
 800cd64:	2300      	movs	r3, #0
 800cd66:	4604      	mov	r4, r0
 800cd68:	4608      	mov	r0, r1
 800cd6a:	602b      	str	r3, [r5, #0]
 800cd6c:	f7f6 fb0e 	bl	800338c <_sbrk>
 800cd70:	1c43      	adds	r3, r0, #1
 800cd72:	d102      	bne.n	800cd7a <_sbrk_r+0x1a>
 800cd74:	682b      	ldr	r3, [r5, #0]
 800cd76:	b103      	cbz	r3, 800cd7a <_sbrk_r+0x1a>
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	bd38      	pop	{r3, r4, r5, pc}
 800cd7c:	20000c58 	.word	0x20000c58

0800cd80 <__errno>:
 800cd80:	4b01      	ldr	r3, [pc, #4]	; (800cd88 <__errno+0x8>)
 800cd82:	6818      	ldr	r0, [r3, #0]
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	2000008c 	.word	0x2000008c

0800cd8c <__libc_init_array>:
 800cd8c:	b570      	push	{r4, r5, r6, lr}
 800cd8e:	4d0d      	ldr	r5, [pc, #52]	; (800cdc4 <__libc_init_array+0x38>)
 800cd90:	4c0d      	ldr	r4, [pc, #52]	; (800cdc8 <__libc_init_array+0x3c>)
 800cd92:	1b64      	subs	r4, r4, r5
 800cd94:	10a4      	asrs	r4, r4, #2
 800cd96:	2600      	movs	r6, #0
 800cd98:	42a6      	cmp	r6, r4
 800cd9a:	d109      	bne.n	800cdb0 <__libc_init_array+0x24>
 800cd9c:	4d0b      	ldr	r5, [pc, #44]	; (800cdcc <__libc_init_array+0x40>)
 800cd9e:	4c0c      	ldr	r4, [pc, #48]	; (800cdd0 <__libc_init_array+0x44>)
 800cda0:	f000 f874 	bl	800ce8c <_init>
 800cda4:	1b64      	subs	r4, r4, r5
 800cda6:	10a4      	asrs	r4, r4, #2
 800cda8:	2600      	movs	r6, #0
 800cdaa:	42a6      	cmp	r6, r4
 800cdac:	d105      	bne.n	800cdba <__libc_init_array+0x2e>
 800cdae:	bd70      	pop	{r4, r5, r6, pc}
 800cdb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdb4:	4798      	blx	r3
 800cdb6:	3601      	adds	r6, #1
 800cdb8:	e7ee      	b.n	800cd98 <__libc_init_array+0xc>
 800cdba:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdbe:	4798      	blx	r3
 800cdc0:	3601      	adds	r6, #1
 800cdc2:	e7f2      	b.n	800cdaa <__libc_init_array+0x1e>
 800cdc4:	0800cf48 	.word	0x0800cf48
 800cdc8:	0800cf48 	.word	0x0800cf48
 800cdcc:	0800cf48 	.word	0x0800cf48
 800cdd0:	0800cf4c 	.word	0x0800cf4c

0800cdd4 <__retarget_lock_acquire_recursive>:
 800cdd4:	4770      	bx	lr

0800cdd6 <__retarget_lock_release_recursive>:
 800cdd6:	4770      	bx	lr

0800cdd8 <memcpy>:
 800cdd8:	440a      	add	r2, r1
 800cdda:	4291      	cmp	r1, r2
 800cddc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cde0:	d100      	bne.n	800cde4 <memcpy+0xc>
 800cde2:	4770      	bx	lr
 800cde4:	b510      	push	{r4, lr}
 800cde6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdee:	4291      	cmp	r1, r2
 800cdf0:	d1f9      	bne.n	800cde6 <memcpy+0xe>
 800cdf2:	bd10      	pop	{r4, pc}

0800cdf4 <_free_r>:
 800cdf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdf6:	2900      	cmp	r1, #0
 800cdf8:	d044      	beq.n	800ce84 <_free_r+0x90>
 800cdfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdfe:	9001      	str	r0, [sp, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f1a1 0404 	sub.w	r4, r1, #4
 800ce06:	bfb8      	it	lt
 800ce08:	18e4      	addlt	r4, r4, r3
 800ce0a:	f7ff ff95 	bl	800cd38 <__malloc_lock>
 800ce0e:	4a1e      	ldr	r2, [pc, #120]	; (800ce88 <_free_r+0x94>)
 800ce10:	9801      	ldr	r0, [sp, #4]
 800ce12:	6813      	ldr	r3, [r2, #0]
 800ce14:	b933      	cbnz	r3, 800ce24 <_free_r+0x30>
 800ce16:	6063      	str	r3, [r4, #4]
 800ce18:	6014      	str	r4, [r2, #0]
 800ce1a:	b003      	add	sp, #12
 800ce1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce20:	f7ff bf90 	b.w	800cd44 <__malloc_unlock>
 800ce24:	42a3      	cmp	r3, r4
 800ce26:	d908      	bls.n	800ce3a <_free_r+0x46>
 800ce28:	6825      	ldr	r5, [r4, #0]
 800ce2a:	1961      	adds	r1, r4, r5
 800ce2c:	428b      	cmp	r3, r1
 800ce2e:	bf01      	itttt	eq
 800ce30:	6819      	ldreq	r1, [r3, #0]
 800ce32:	685b      	ldreq	r3, [r3, #4]
 800ce34:	1949      	addeq	r1, r1, r5
 800ce36:	6021      	streq	r1, [r4, #0]
 800ce38:	e7ed      	b.n	800ce16 <_free_r+0x22>
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	b10b      	cbz	r3, 800ce44 <_free_r+0x50>
 800ce40:	42a3      	cmp	r3, r4
 800ce42:	d9fa      	bls.n	800ce3a <_free_r+0x46>
 800ce44:	6811      	ldr	r1, [r2, #0]
 800ce46:	1855      	adds	r5, r2, r1
 800ce48:	42a5      	cmp	r5, r4
 800ce4a:	d10b      	bne.n	800ce64 <_free_r+0x70>
 800ce4c:	6824      	ldr	r4, [r4, #0]
 800ce4e:	4421      	add	r1, r4
 800ce50:	1854      	adds	r4, r2, r1
 800ce52:	42a3      	cmp	r3, r4
 800ce54:	6011      	str	r1, [r2, #0]
 800ce56:	d1e0      	bne.n	800ce1a <_free_r+0x26>
 800ce58:	681c      	ldr	r4, [r3, #0]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	6053      	str	r3, [r2, #4]
 800ce5e:	440c      	add	r4, r1
 800ce60:	6014      	str	r4, [r2, #0]
 800ce62:	e7da      	b.n	800ce1a <_free_r+0x26>
 800ce64:	d902      	bls.n	800ce6c <_free_r+0x78>
 800ce66:	230c      	movs	r3, #12
 800ce68:	6003      	str	r3, [r0, #0]
 800ce6a:	e7d6      	b.n	800ce1a <_free_r+0x26>
 800ce6c:	6825      	ldr	r5, [r4, #0]
 800ce6e:	1961      	adds	r1, r4, r5
 800ce70:	428b      	cmp	r3, r1
 800ce72:	bf04      	itt	eq
 800ce74:	6819      	ldreq	r1, [r3, #0]
 800ce76:	685b      	ldreq	r3, [r3, #4]
 800ce78:	6063      	str	r3, [r4, #4]
 800ce7a:	bf04      	itt	eq
 800ce7c:	1949      	addeq	r1, r1, r5
 800ce7e:	6021      	streq	r1, [r4, #0]
 800ce80:	6054      	str	r4, [r2, #4]
 800ce82:	e7ca      	b.n	800ce1a <_free_r+0x26>
 800ce84:	b003      	add	sp, #12
 800ce86:	bd30      	pop	{r4, r5, pc}
 800ce88:	20000b18 	.word	0x20000b18

0800ce8c <_init>:
 800ce8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8e:	bf00      	nop
 800ce90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce92:	bc08      	pop	{r3}
 800ce94:	469e      	mov	lr, r3
 800ce96:	4770      	bx	lr

0800ce98 <_fini>:
 800ce98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9a:	bf00      	nop
 800ce9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce9e:	bc08      	pop	{r3}
 800cea0:	469e      	mov	lr, r3
 800cea2:	4770      	bx	lr
