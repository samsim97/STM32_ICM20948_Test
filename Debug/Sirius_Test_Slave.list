
Sirius_Test_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b230  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800b3c8  0800b3c8  0001b3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b490  0800b490  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b490  0800b490  0001b490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b498  0800b498  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b498  0800b498  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b4a0  0800b4a0  0001b4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b4a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  20000094  0800b53c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  0800b53c  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f56c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c7e  00000000  00000000  0003f630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  000442b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  00045ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd3d  00000000  00000000  00047150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e27a  00000000  00000000  00063e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095871  00000000  00000000  00082107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117978  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b5c  00000000  00000000  001179c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000094 	.word	0x20000094
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b3b0 	.word	0x0800b3b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000098 	.word	0x20000098
 80001d4:	0800b3b0 	.word	0x0800b3b0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 * Adafruit_BusIO_Register::Adafruit_BusIO_Register(
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	4611      	mov	r1, r2
 8000d24:	461a      	mov	r2, r3
 8000d26:	460b      	mov	r3, r1
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	80bb      	strh	r3, [r7, #4]
    Adafruit_I2CDevice *i2cdevice, Adafruit_BusIO_SPIRegType type,
	uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  //_spidevice = spidevice;
  _i2cdevice = i2cdevice;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	601a      	str	r2, [r3, #0]
  //_spiregtype = type;
  _addrwidth = address_width;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d40:	71da      	strb	r2, [r3, #7]
  _address = reg_addr;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	88ba      	ldrh	r2, [r7, #4]
 8000d46:	809a      	strh	r2, [r3, #4]
  _byteorder = byteorder;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	7f3a      	ldrb	r2, [r7, #28]
 8000d4c:	721a      	strb	r2, [r3, #8]
  _width = width;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	7e3a      	ldrb	r2, [r7, #24]
 8000d52:	719a      	strb	r2, [r3, #6]
}
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b088      	sub	sp, #32
 8000d66:	af02      	add	r7, sp, #8
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	71fb      	strb	r3, [r7, #7]

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	889b      	ldrh	r3, [r3, #4]
                           (uint8_t)(_address >> 8)};
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	753b      	strb	r3, [r7, #20]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	889b      	ldrh	r3, [r3, #4]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	757b      	strb	r3, [r7, #21]

  if (_i2cdevice) {
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d00e      	beq.n	8000daa <_ZN23Adafruit_BusIO_Register5writeEPhh+0x48>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6818      	ldr	r0, [r3, #0]
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	79db      	ldrb	r3, [r3, #7]
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	f000 f997 	bl	80010d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e000      	b.n	8000dac <_ZN23Adafruit_BusIO_Register5writeEPhh+0x4a>
      addrbuffer[0] &= ~0x80;
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }*/
  return false;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if (numbytes == 0) {
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <_ZN23Adafruit_BusIO_Register5writeEmh+0x1a>
    numbytes = _width;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	799b      	ldrb	r3, [r3, #6]
 8000dcc:	71fb      	strb	r3, [r7, #7]
  }
  if (numbytes > 4) {
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d901      	bls.n	8000dd8 <_ZN23Adafruit_BusIO_Register5writeEmh+0x24>
    return false;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e02f      	b.n	8000e38 <_ZN23Adafruit_BusIO_Register5writeEmh+0x84>
  }

  // store a copy
  _cached = value;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	611a      	str	r2, [r3, #16]

  for (int i = 0; i < numbytes; i++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	da1d      	bge.n	8000e26 <_ZN23Adafruit_BusIO_Register5writeEmh+0x72>
    if (_byteorder == LSBFIRST) {
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	7a1b      	ldrb	r3, [r3, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d108      	bne.n	8000e04 <_ZN23Adafruit_BusIO_Register5writeEmh+0x50>
      _buffer[i] = value & 0xFF;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	b2d9      	uxtb	r1, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3309      	adds	r3, #9
 8000dfe:	460a      	mov	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e009      	b.n	8000e18 <_ZN23Adafruit_BusIO_Register5writeEmh+0x64>
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
 8000e04:	79fa      	ldrb	r2, [r7, #7]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	b2d1      	uxtb	r1, r2
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	460a      	mov	r2, r1
 8000e16:	725a      	strb	r2, [r3, #9]
    }
    value >>= 8;
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	0a1b      	lsrs	r3, r3, #8
 8000e1c:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < numbytes; i++) {
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e7dd      	b.n	8000de2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
  }
  return write(_buffer, numbytes);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3309      	adds	r3, #9
 8000e2a:	79fa      	ldrb	r2, [r7, #7]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f7ff ff97 	bl	8000d62 <_ZN23Adafruit_BusIO_Register5writeEPhh>
 8000e34:	4603      	mov	r3, r0
 8000e36:	bf00      	nop
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_ZN23Adafruit_BusIO_Register4readEv>:
/*!
 *    @brief  Read data from the register location. This does not do any error
 * checking!
 *    @return Returns 0xFFFFFFFF on failure, value otherwise
 */
uint32_t Adafruit_BusIO_Register::read(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if (!read(_buffer, _width)) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f103 0109 	add.w	r1, r3, #9
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	799b      	ldrb	r3, [r3, #6]
 8000e52:	461a      	mov	r2, r3
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f83a 	bl	8000ece <_ZN23Adafruit_BusIO_Register4readEPhh>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f083 0301 	eor.w	r3, r3, #1
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <_ZN23Adafruit_BusIO_Register4readEv+0x2c>
    return -1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e02c      	b.n	8000ec6 <_ZN23Adafruit_BusIO_Register4readEv+0x86>
  }

  uint32_t value = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < _width; i++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	799b      	ldrb	r3, [r3, #6]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	da21      	bge.n	8000ec4 <_ZN23Adafruit_BusIO_Register4readEv+0x84>
    value <<= 8;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	60fb      	str	r3, [r7, #12]
    if (_byteorder == LSBFIRST) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7a1b      	ldrb	r3, [r3, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10d      	bne.n	8000eaa <_ZN23Adafruit_BusIO_Register4readEv+0x6a>
      value |= _buffer[_width - i - 1];
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	799b      	ldrb	r3, [r3, #6]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	7a5b      	ldrb	r3, [r3, #9]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e008      	b.n	8000ebc <_ZN23Adafruit_BusIO_Register4readEv+0x7c>
    } else {
      value |= _buffer[i];
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4413      	add	r3, r2
 8000eb0:	3309      	adds	r3, #9
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < _width; i++) {
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	e7d7      	b.n	8000e74 <_ZN23Adafruit_BusIO_Register4readEv+0x34>
    }
  }

  return value;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 8000ece:	b590      	push	{r4, r7, lr}
 8000ed0:	b089      	sub	sp, #36	; 0x24
 8000ed2:	af02      	add	r7, sp, #8
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71fb      	strb	r3, [r7, #7]
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	889b      	ldrh	r3, [r3, #4]
                           (uint8_t)(_address >> 8)};
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	753b      	strb	r3, [r7, #20]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	889b      	ldrh	r3, [r3, #4]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	757b      	strb	r3, [r7, #21]

  if (_i2cdevice) {
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d010      	beq.n	8000f1a <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	79db      	ldrb	r3, [r3, #7]
 8000f00:	461c      	mov	r4, r3
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f107 0114 	add.w	r1, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	9201      	str	r2, [sp, #4]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4622      	mov	r2, r4
 8000f12:	f000 f94e 	bl	80011b2 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 8000f16:	4603      	mov	r3, r0
 8000f18:	e000      	b.n	8000f1c <_ZN23Adafruit_BusIO_Register4readEPhh+0x4e>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }*/
  return false;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}

08000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	460b      	mov	r3, r1
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	4613      	mov	r3, r2
 8000f38:	71bb      	strb	r3, [r7, #6]
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	601a      	str	r2, [r3, #0]
  _bits = bits;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	79fa      	ldrb	r2, [r7, #7]
 8000f44:	711a      	strb	r2, [r3, #4]
  _shift = shift;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	79ba      	ldrb	r2, [r7, #6]
 8000f4a:	715a      	strb	r2, [r3, #5]
}
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  uint32_t val = _register->read();
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff6a 	bl	8000e40 <_ZN23Adafruit_BusIO_Register4readEv>
 8000f6c:	60f8      	str	r0, [r7, #12]
  val >>= _shift;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	795b      	ldrb	r3, [r3, #5]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	40d3      	lsrs	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  return val & ((1 << (_bits)) - 1);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	791b      	ldrb	r3, [r3, #4]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2301      	movs	r3, #1
 8000f82:	4093      	lsls	r3, r2
 8000f84:	3b01      	subs	r3, #1
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4013      	ands	r3, r2
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t val = _register->read();
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff4c 	bl	8000e40 <_ZN23Adafruit_BusIO_Register4readEv>
 8000fa8:	60f8      	str	r0, [r7, #12]

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	791b      	ldrb	r3, [r3, #4]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
  data &= mask;
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	603b      	str	r3, [r7, #0]

  mask <<= _shift;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	795b      	ldrb	r3, [r3, #5]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  val &= ~mask;          // remove the current data at that spot
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  val |= data << _shift; // and add in the new data
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	795b      	ldrb	r3, [r3, #5]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]

  return _register->write(val, _register->width());
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681c      	ldr	r4, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f80b 	bl	800100a <_ZN23Adafruit_BusIO_Register5widthEv>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68f9      	ldr	r1, [r7, #12]
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f7ff feda 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bd90      	pop	{r4, r7, pc}

0800100a <_ZN23Adafruit_BusIO_Register5widthEv>:

/*!
 *    @brief  The width of the register data, helpful for doing calculations
 *    @returns The data width used when initializing the register
 */
uint8_t Adafruit_BusIO_Register::width(void) { return _width; }
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	799b      	ldrb	r3, [r3, #6]
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_ZN18Adafruit_I2CDevice13maxBufferSizeEv>:
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <_ZN18Adafruit_I2CDeviceC1Eh>:
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
#endif
}*/
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr) {
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	70fb      	strb	r3, [r7, #3]
  _addr = addr;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	701a      	strb	r2, [r3, #0]
  //_wire = theWire;
  _begun = false;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	705a      	strb	r2, [r3, #1]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2220      	movs	r2, #32
 8001056:	605a      	str	r2, [r3, #4]
#endif
}
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_ZN18Adafruit_I2CDevice5beginEb>:
    return detected();
  }
  return true;
}*/

bool Adafruit_I2CDevice::begin(bool addr_detect) {
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	70fb      	strb	r3, [r7, #3]
  //_wire->begin();
  _begun = true;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	705a      	strb	r2, [r3, #1]

  if (addr_detect) {
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <_ZN18Adafruit_I2CDevice5beginEb+0x22>
    return detected();
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f807 	bl	8001092 <_ZN18Adafruit_I2CDevice8detectedEv>
 8001084:	4603      	mov	r3, r0
 8001086:	e000      	b.n	800108a <_ZN18Adafruit_I2CDevice5beginEb+0x24>
  }
  return true;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	f083 0301 	eor.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00b      	beq.n	80010c0 <_ZN18Adafruit_I2CDevice8detectedEv+0x2e>
 80010a8:	2101      	movs	r1, #1
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffdb 	bl	8001066 <_ZN18Adafruit_I2CDevice5beginEb>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f083 0301 	eor.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <_ZN18Adafruit_I2CDevice8detectedEv+0x2e>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <_ZN18Adafruit_I2CDevice8detectedEv+0x30>
 80010c0:	2300      	movs	r3, #0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <_ZN18Adafruit_I2CDevice8detectedEv+0x38>
    return false;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <_ZN18Adafruit_I2CDevice8detectedEv+0x3a>
    return true;
  }*/
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	70fb      	strb	r3, [r7, #3]
  if ((len + prefix_len) > maxBufferSize()) {
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	18d4      	adds	r4, r2, r3
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f7ff ff9a 	bl	8001022 <_ZN18Adafruit_I2CDevice13maxBufferSizeEv>
 80010ee:	4603      	mov	r3, r0
 80010f0:	429c      	cmp	r4, r3
 80010f2:	bf8c      	ite	hi
 80010f4:	2301      	movhi	r3, #1
 80010f6:	2300      	movls	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x2e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 80010fe:	2300      	movs	r3, #0
 8001100:	e7ff      	b.n	8001102 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x2e>
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }*/
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bd90      	pop	{r4, r7, pc}

0800110a <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 800110a:	b590      	push	{r4, r7, lr}
 800110c:	b089      	sub	sp, #36	; 0x24
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	70fb      	strb	r3, [r7, #3]
  size_t pos = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  while (pos < len) {
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	d233      	bcs.n	800118c <_ZN18Adafruit_I2CDevice4readEPhjb+0x82>
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	1ad4      	subs	r4, r2, r3
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f7ff ff79 	bl	8001022 <_ZN18Adafruit_I2CDevice13maxBufferSizeEv>
 8001130:	4603      	mov	r3, r0
 8001132:	429c      	cmp	r4, r3
 8001134:	d904      	bls.n	8001140 <_ZN18Adafruit_I2CDevice4readEPhjb+0x36>
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff ff73 	bl	8001022 <_ZN18Adafruit_I2CDevice13maxBufferSizeEv>
 800113c:	4603      	mov	r3, r0
 800113e:	e002      	b.n	8001146 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	61bb      	str	r3, [r7, #24]
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	429a      	cmp	r2, r3
 8001152:	d304      	bcc.n	800115e <_ZN18Adafruit_I2CDevice4readEPhjb+0x54>
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <_ZN18Adafruit_I2CDevice4readEPhjb+0x54>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <_ZN18Adafruit_I2CDevice4readEPhjb+0x56>
 800115e:	2300      	movs	r3, #0
 8001160:	75fb      	strb	r3, [r7, #23]
    if (!_read(buffer + pos, read_len, read_stop))
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	18d1      	adds	r1, r2, r3
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 f812 	bl	8001196 <_ZN18Adafruit_I2CDevice5_readEPhjb>
 8001172:	4603      	mov	r3, r0
 8001174:	f083 0301 	eor.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <_ZN18Adafruit_I2CDevice4readEPhjb+0x78>
      return false;
 800117e:	2300      	movs	r3, #0
 8001180:	e005      	b.n	800118e <_ZN18Adafruit_I2CDevice4readEPhjb+0x84>
    pos += read_len;
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	4413      	add	r3, r2
 8001188:	61fb      	str	r3, [r7, #28]
  while (pos < len) {
 800118a:	e7c7      	b.n	800111c <_ZN18Adafruit_I2CDevice4readEPhjb+0x12>
  }
  return true;
 800118c:	2301      	movs	r3, #1
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}

08001196 <_ZN18Adafruit_I2CDevice5_readEPhjb>:

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 8001196:	b480      	push	{r7}
 8001198:	b085      	sub	sp, #20
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	70fb      	strb	r3, [r7, #3]
    // Not enough data available to fulfill our obligation!
#ifdef DEBUG_SERIAL
    //DEBUG_SERIAL.print(F("\tI2CDevice did not receive enough data: "));
    //DEBUG_SERIAL.println(recv);
#endif
    return false;
 80011a4:	2300      	movs	r3, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af02      	add	r7, sp, #8
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	603b      	str	r3, [r7, #0]
  if (!write(write_buffer, write_len, stop)) {
 80011c0:	7f3b      	ldrb	r3, [r7, #28]
 80011c2:	2200      	movs	r2, #0
 80011c4:	9201      	str	r2, [sp, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	9200      	str	r2, [sp, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f7ff ff80 	bl	80010d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f083 0301 	eor.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x32>
    return false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e007      	b.n	80011f4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x42>
  }

  return read(read_buffer, read_len);
 80011e4:	2301      	movs	r3, #1
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	6839      	ldr	r1, [r7, #0]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff ff8d 	bl	800110a <_ZN18Adafruit_I2CDevice4readEPhjb>
 80011f0:	4603      	mov	r3, r0
 80011f2:	bf00      	nop
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_ZN17Adafruit_ICM20948C1Ev>:

/*!
 *    @brief  Instantiates a new ICM20948 class!
 */

Adafruit_ICM20948::Adafruit_ICM20948(void) {}
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fb02 	bl	8001810 <_ZN15Adafruit_ICM20XC1Ev>
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <_ZN17Adafruit_ICM20948C1Ev+0x20>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	0800b3d4 	.word	0x0800b3d4

08001220 <_ZN17Adafruit_ICM209489begin_I2CEhl>:
  }

  return init_success;
}*/

bool Adafruit_ICM20948::begin_I2C(uint8_t i2c_address, int32_t sensor_id) {
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	460b      	mov	r3, r1
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	72fb      	strb	r3, [r7, #11]

  if (i2c_dev) {
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <_ZN17Adafruit_ICM209489begin_I2CEhl+0x26>
    delete i2c_dev; // remove old interface
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <_ZN17Adafruit_ICM209489begin_I2CEhl+0x26>
 800123e:	2108      	movs	r1, #8
 8001240:	4618      	mov	r0, r3
 8001242:	f009 fef7 	bl	800b034 <_ZdlPvj>
  }

  //i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
  i2c_dev = new Adafruit_I2CDevice(i2c_address);
 8001246:	2008      	movs	r0, #8
 8001248:	f009 fef6 	bl	800b038 <_Znwj>
 800124c:	4603      	mov	r3, r0
 800124e:	461c      	mov	r4, r3
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	4619      	mov	r1, r3
 8001254:	4620      	mov	r0, r4
 8001256:	f7ff fef0 	bl	800103a <_ZN18Adafruit_I2CDeviceC1Eh>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	62dc      	str	r4, [r3, #44]	; 0x2c

  if (!i2c_dev->begin()) {
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	2101      	movs	r1, #1
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fefe 	bl	8001066 <_ZN18Adafruit_I2CDevice5beginEb>
 800126a:	4603      	mov	r3, r0
 800126c:	f083 0301 	eor.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <_ZN17Adafruit_ICM209489begin_I2CEhl+0x5a>
    //Serial.println("I2C begin Failed");
    return false;
 8001276:	2300      	movs	r3, #0
 8001278:	e012      	b.n	80012a0 <_ZN17Adafruit_ICM209489begin_I2CEhl+0x80>
  }
  bool init_success = _init(sensor_id);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fb75 	bl	800196e <_ZN15Adafruit_ICM20X5_initEl>
 8001284:	4603      	mov	r3, r0
 8001286:	75fb      	strb	r3, [r7, #23]
  if (!setupMag()) {
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f000 f843 	bl	8001314 <_ZN17Adafruit_ICM209488setupMagEv>
 800128e:	4603      	mov	r3, r0
 8001290:	f083 0301 	eor.w	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <_ZN17Adafruit_ICM209489begin_I2CEhl+0x7e>
    //Serial.println("failed to setup mag");
    return false;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <_ZN17Adafruit_ICM209489begin_I2CEhl+0x80>
  }

  return init_success;
 800129e:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}

080012a8 <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv>:

// A million thanks to the SparkFun folks for their library that I pillaged to
// write this method! See their Arduino library here:
// https://github.com/sparkfun/SparkFun_ICM-20948_ArduinoLibrary
bool Adafruit_ICM20948::auxI2CBusSetupFailed(void) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  // check aux I2C bus connection by reading the magnetometer chip ID
  bool aux_i2c_setup_failed = true;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < I2C_MASTER_RESETS_BEFORE_FAIL; i++) {
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	dc16      	bgt.n	80012ec <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv+0x44>
    if (getMagId() != ICM20948_MAG_ID) {
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f819 	bl	80012f6 <_ZN17Adafruit_ICM209488getMagIdEv>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b09      	cmp	r3, #9
 80012c8:	bf14      	ite	ne
 80012ca:	2301      	movne	r3, #1
 80012cc:	2300      	moveq	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv+0x36>
      resetI2CMaster();
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 f8b1 	bl	800243e <_ZN15Adafruit_ICM20X14resetI2CMasterEv>
 80012dc:	e002      	b.n	80012e4 <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv+0x3c>
    } else {
      aux_i2c_setup_failed = false;
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]
      break;
 80012e2:	e003      	b.n	80012ec <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv+0x44>
  for (int i = 0; i < I2C_MASTER_RESETS_BEFORE_FAIL; i++) {
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	3301      	adds	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	e7e5      	b.n	80012b8 <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv+0x10>
    }
  }
  return aux_i2c_setup_failed;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_ZN17Adafruit_ICM209488getMagIdEv>:

uint8_t Adafruit_ICM20948::getMagId(void) {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  // verify the magnetometer id
  return readExternalRegister(0x8C, 0x01);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	218c      	movs	r1, #140	; 0x8c
 8001304:	4618      	mov	r0, r3
 8001306:	f000 ff79 	bl	80021fc <_ZN15Adafruit_ICM20X20readExternalRegisterEhh>
 800130a:	4603      	mov	r3, r0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_ZN17Adafruit_ICM209488setupMagEv>:

bool Adafruit_ICM20948::setupMag(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af02      	add	r7, sp, #8
 800131a:	6078      	str	r0, [r7, #4]
  uint8_t buffer[2];

  setI2CBypass(false);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fef2 	bl	800210a <_ZN15Adafruit_ICM20X12setI2CBypassEb>

  configureI2CMaster();
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 ff45 	bl	80021b8 <_ZN15Adafruit_ICM20X18configureI2CMasterEv>

  enableI2CMaster(true);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2101      	movs	r1, #1
 8001332:	4618      	mov	r0, r3
 8001334:	f000 ff14 	bl	8002160 <_ZN15Adafruit_ICM20X15enableI2CMasterEb>

  if (auxI2CBusSetupFailed()) {
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ffb5 	bl	80012a8 <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <_ZN17Adafruit_ICM209488setupMagEv+0x34>
    return false;
 8001344:	2300      	movs	r3, #0
 8001346:	e059      	b.n	80013fc <_ZN17Adafruit_ICM209488setupMagEv+0xe8>
  }

  // set mag data rate
  if (!setMagDataRate(AK09916_MAG_DATARATE_100_HZ)) {
 8001348:	2108      	movs	r1, #8
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f989 	bl	8001662 <_ZN17Adafruit_ICM2094814setMagDataRateE19ak09916_data_rate_t>
 8001350:	4603      	mov	r3, r0
 8001352:	f083 0301 	eor.w	r3, r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <_ZN17Adafruit_ICM209488setupMagEv+0x4c>
    //Serial.println("Error setting magnetometer data rate on external bus");
    return false;
 800135c:	2300      	movs	r3, #0
 800135e:	e04d      	b.n	80013fc <_ZN17Adafruit_ICM209488setupMagEv+0xe8>
  }

  // TODO: extract method
  // Set up Slave0 to proxy Mag readings
  _setBank(3);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2103      	movs	r1, #3
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fd4e 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
  // set up slave0 to proxy reads to mag
  buffer[0] = ICM20X_B3_I2C_SLV0_ADDR;
 800136a:	2303      	movs	r3, #3
 800136c:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0x8C;
 800136e:	238c      	movs	r3, #140	; 0x8c
 8001370:	737b      	strb	r3, [r7, #13]
  if (!i2c_dev->write(buffer, 2)) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001376:	f107 010c 	add.w	r1, r7, #12
 800137a:	2300      	movs	r3, #0
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	2300      	movs	r3, #0
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	2202      	movs	r2, #2
 8001386:	f7ff fea5 	bl	80010d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 800138a:	4603      	mov	r3, r0
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <_ZN17Adafruit_ICM209488setupMagEv+0x86>
    return false;
 8001396:	2300      	movs	r3, #0
 8001398:	e030      	b.n	80013fc <_ZN17Adafruit_ICM209488setupMagEv+0xe8>
  }

  buffer[0] = ICM20X_B3_I2C_SLV0_REG;
 800139a:	2304      	movs	r3, #4
 800139c:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0x10;
 800139e:	2310      	movs	r3, #16
 80013a0:	737b      	strb	r3, [r7, #13]
  if (!i2c_dev->write(buffer, 2)) {
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80013a6:	f107 010c 	add.w	r1, r7, #12
 80013aa:	2300      	movs	r3, #0
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	2202      	movs	r2, #2
 80013b6:	f7ff fe8d 	bl	80010d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f083 0301 	eor.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <_ZN17Adafruit_ICM209488setupMagEv+0xb6>
    return false;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e018      	b.n	80013fc <_ZN17Adafruit_ICM209488setupMagEv+0xe8>
  }

  buffer[0] = ICM20X_B3_I2C_SLV0_CTRL;
 80013ca:	2305      	movs	r3, #5
 80013cc:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0x89; // enable, read 9 bytes
 80013ce:	2389      	movs	r3, #137	; 0x89
 80013d0:	737b      	strb	r3, [r7, #13]
  if (!i2c_dev->write(buffer, 2)) {
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80013d6:	f107 010c 	add.w	r1, r7, #12
 80013da:	2300      	movs	r3, #0
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	2300      	movs	r3, #0
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2301      	movs	r3, #1
 80013e4:	2202      	movs	r2, #2
 80013e6:	f7ff fe75 	bl	80010d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f083 0301 	eor.w	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <_ZN17Adafruit_ICM209488setupMagEv+0xe6>
    return false;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <_ZN17Adafruit_ICM209488setupMagEv+0xe8>
  }

  return true;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZN17Adafruit_ICM2094815readMagRegisterEh>:
 * @param slv_addr
 * @param mag_reg_addr
 * @param num_finished_checks
 * @return uint8_t
 */
uint8_t Adafruit_ICM20948::readMagRegister(uint8_t mag_reg_addr) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
  return readExternalRegister(0x8C, mag_reg_addr);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	78fa      	ldrb	r2, [r7, #3]
 8001414:	218c      	movs	r1, #140	; 0x8c
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fef0 	bl	80021fc <_ZN15Adafruit_ICM20X20readExternalRegisterEhh>
 800141c:	4603      	mov	r3, r0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_ZN17Adafruit_ICM2094816writeMagRegisterEhh>:

bool Adafruit_ICM20948::writeMagRegister(uint8_t mag_reg_addr, uint8_t value) {
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	70fb      	strb	r3, [r7, #3]
 8001432:	4613      	mov	r3, r2
 8001434:	70bb      	strb	r3, [r7, #2]
  return writeExternalRegister(0x0C, mag_reg_addr, value);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	78bb      	ldrb	r3, [r7, #2]
 800143a:	78fa      	ldrb	r2, [r7, #3]
 800143c:	210c      	movs	r1, #12
 800143e:	f000 fef2 	bl	8002226 <_ZN15Adafruit_ICM20X21writeExternalRegisterEhhh>
 8001442:	4603      	mov	r3, r0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	0000      	movs	r0, r0
	...

08001450 <_ZN17Adafruit_ICM2094811scaleValuesEv>:

void Adafruit_ICM20948::scaleValues(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  icm20948_gyro_range_t gyro_range = (icm20948_gyro_range_t)current_gyro_range;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800145e:	73fb      	strb	r3, [r7, #15]
  icm20948_accel_range_t accel_range =
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001466:	73bb      	strb	r3, [r7, #14]
      (icm20948_accel_range_t)current_accel_range;

  float accel_scale = 1.0;
 8001468:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800146c:	617b      	str	r3, [r7, #20]
  float gyro_scale = 1.0;
 800146e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001472:	613b      	str	r3, [r7, #16]

  if (gyro_range == ICM20948_GYRO_RANGE_250_DPS)
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <_ZN17Adafruit_ICM2094811scaleValuesEv+0x2e>
    gyro_scale = 131.0;
 800147a:	4b61      	ldr	r3, [pc, #388]	; (8001600 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1b0>)
 800147c:	613b      	str	r3, [r7, #16]
  if (gyro_range == ICM20948_GYRO_RANGE_500_DPS)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x38>
    gyro_scale = 65.5;
 8001484:	4b5f      	ldr	r3, [pc, #380]	; (8001604 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1b4>)
 8001486:	613b      	str	r3, [r7, #16]
  if (gyro_range == ICM20948_GYRO_RANGE_1000_DPS)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d101      	bne.n	8001492 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x42>
    gyro_scale = 32.8;
 800148e:	4b5e      	ldr	r3, [pc, #376]	; (8001608 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1b8>)
 8001490:	613b      	str	r3, [r7, #16]
  if (gyro_range == ICM20948_GYRO_RANGE_2000_DPS)
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d101      	bne.n	800149c <_ZN17Adafruit_ICM2094811scaleValuesEv+0x4c>
    gyro_scale = 16.4;
 8001498:	4b5c      	ldr	r3, [pc, #368]	; (800160c <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1bc>)
 800149a:	613b      	str	r3, [r7, #16]

  if (accel_range == ICM20948_ACCEL_RANGE_2_G)
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d102      	bne.n	80014a8 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x58>
    accel_scale = 16384.0;
 80014a2:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 80014a6:	617b      	str	r3, [r7, #20]
  if (accel_range == ICM20948_ACCEL_RANGE_4_G)
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d102      	bne.n	80014b4 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x64>
    accel_scale = 8192.0;
 80014ae:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80014b2:	617b      	str	r3, [r7, #20]
  if (accel_range == ICM20948_ACCEL_RANGE_8_G)
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d102      	bne.n	80014c0 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x70>
    accel_scale = 4096.0;
 80014ba:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80014be:	617b      	str	r3, [r7, #20]
  if (accel_range == ICM20948_ACCEL_RANGE_16_G)
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d102      	bne.n	80014cc <_ZN17Adafruit_ICM2094811scaleValuesEv+0x7c>
    accel_scale = 2048.0;
 80014c6:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80014ca:	617b      	str	r3, [r7, #20]

  gyroX = rawGyroX / gyro_scale;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014da:	ed97 7a04 	vldr	s14, [r7, #16]
 80014de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	edc3 7a05 	vstr	s15, [r3, #20]
  gyroY = rawGyroY / gyro_scale;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80014fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edc3 7a06 	vstr	s15, [r3, #24]
  gyroZ = rawGyroZ / gyro_scale;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001512:	ed97 7a04 	vldr	s14, [r7, #16]
 8001516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edc3 7a07 	vstr	s15, [r3, #28]

  accX = rawAccX / accel_scale;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800152e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	edc3 7a02 	vstr	s15, [r3, #8]
  accY = rawAccY / accel_scale;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800154a:	ed97 7a05 	vldr	s14, [r7, #20]
 800154e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	edc3 7a03 	vstr	s15, [r3, #12]
  accZ = rawAccZ / accel_scale;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001566:	ed97 7a05 	vldr	s14, [r7, #20]
 800156a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	edc3 7a04 	vstr	s15, [r3, #16]

  magX = rawMagX * ICM20948_UT_PER_LSB;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff7e 	bl	800047c <__aeabi_i2d>
 8001580:	a31d      	add	r3, pc, #116	; (adr r3, 80015f8 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1a8>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7fe ffe3 	bl	8000550 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff f9ef 	bl	8000974 <__aeabi_d2f>
 8001596:	4602      	mov	r2, r0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	621a      	str	r2, [r3, #32]
  magY = rawMagY * ICM20948_UT_PER_LSB;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff6a 	bl	800047c <__aeabi_i2d>
 80015a8:	a313      	add	r3, pc, #76	; (adr r3, 80015f8 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1a8>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7fe ffcf 	bl	8000550 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff f9db 	bl	8000974 <__aeabi_d2f>
 80015be:	4602      	mov	r2, r0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
  magZ = rawMagZ * ICM20948_UT_PER_LSB;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ff56 	bl	800047c <__aeabi_i2d>
 80015d0:	a309      	add	r3, pc, #36	; (adr r3, 80015f8 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1a8>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7fe ffbb 	bl	8000550 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff f9c7 	bl	8000974 <__aeabi_d2f>
 80015e6:	4602      	mov	r2, r0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015ec:	bf00      	nop
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	f3af 8000 	nop.w
 80015f8:	33333333 	.word	0x33333333
 80015fc:	3fc33333 	.word	0x3fc33333
 8001600:	43030000 	.word	0x43030000
 8001604:	42830000 	.word	0x42830000
 8001608:	42033333 	.word	0x42033333
 800160c:	41833333 	.word	0x41833333

08001610 <_ZN17Adafruit_ICM2094813getAccelRangeEv>:
/**************************************************************************/
/*!
    @brief Get the accelerometer's measurement range.
    @returns The accelerometer's measurement range (`icm20948_accel_range_t`).
*/
icm20948_accel_range_t Adafruit_ICM20948::getAccelRange(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  return (icm20948_accel_range_t)readAccelRange();
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fc15 	bl	8001e4a <_ZN15Adafruit_ICM20X14readAccelRangeEv>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_ZN17Adafruit_ICM2094812getGyroRangeEv>:
/**************************************************************************/
/*!
    @brief Get the gyro's measurement range.
    @returns The gyro's measurement range (`icm20948_gyro_range_t`).
*/
icm20948_gyro_range_t Adafruit_ICM20948::getGyroRange(void) {
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  return (icm20948_gyro_range_t)readGyroRange();
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fc6b 	bl	8001f10 <_ZN15Adafruit_ICM20X13readGyroRangeEv>
 800163a:	4603      	mov	r3, r0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZN17Adafruit_ICM2094814getMagDataRateEv>:
/**
 * @brief Get the current magnetometer measurement rate
 *
 * @return ak09916_data_rate_t the current rate
 */
ak09916_data_rate_t Adafruit_ICM20948::getMagDataRate(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  uint8_t raw_mag_rate = readMagRegister(AK09916_CNTL2);
 800164c:	2131      	movs	r1, #49	; 0x31
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fed8 	bl	8001404 <_ZN17Adafruit_ICM2094815readMagRegisterEh>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]
  return (ak09916_data_rate_t)(raw_mag_rate);
 8001658:	7bfb      	ldrb	r3, [r7, #15]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_ZN17Adafruit_ICM2094814setMagDataRateE19ak09916_data_rate_t>:
 *
 * @param rate The rate to set.
 *
 * @return true: success false: failure
 */
bool Adafruit_ICM20948::setMagDataRate(ak09916_data_rate_t rate) {
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	70fb      	strb	r3, [r7, #3]
   * See page 9 of https://www.y-ic.es/datasheet/78/SMDSW.020-2OZ.pdf
   */

  // don't need to read/mask because there's nothing else in the register and
  // it's right justified
  bool success = writeMagRegister(AK09916_CNTL2, AK09916_MAG_DATARATE_SHUTDOWN);
 800166e:	2200      	movs	r2, #0
 8001670:	2131      	movs	r1, #49	; 0x31
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fed7 	bl	8001426 <_ZN17Adafruit_ICM2094816writeMagRegisterEhh>
 8001678:	4603      	mov	r3, r0
 800167a:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(1);
 800167c:	2001      	movs	r0, #1
 800167e:	f001 ff25 	bl	80034cc <HAL_Delay>
  return writeMagRegister(AK09916_CNTL2, rate) && success;
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	461a      	mov	r2, r3
 8001686:	2131      	movs	r1, #49	; 0x31
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fecc 	bl	8001426 <_ZN17Adafruit_ICM2094816writeMagRegisterEhh>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <_ZN17Adafruit_ICM2094814setMagDataRateE19ak09916_data_rate_t+0x3c>
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <_ZN17Adafruit_ICM2094814setMagDataRateE19ak09916_data_rate_t+0x3c>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <_ZN17Adafruit_ICM2094814setMagDataRateE19ak09916_data_rate_t+0x3e>
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_ZN15Adafruit_SensorC1Ev>:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
public:
  // Constructor(s)
  Adafruit_Sensor() {}
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <_ZN15Adafruit_SensorC1Ev+0x1c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	0800b464 	.word	0x0800b464

080016c8 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <_ZN15Adafruit_SensorD1Ev+0x1c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	0800b464 	.word	0x0800b464

080016e8 <_ZN15Adafruit_SensorD0Ev>:
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ffe9 	bl	80016c8 <_ZN15Adafruit_SensorD1Ev>
 80016f6:	2104      	movs	r1, #4
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f009 fc9b 	bl	800b034 <_ZdlPvj>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
    (void)enabled; /* suppress unused warning */
  };
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN29Adafruit_ICM20X_AccelerometerC1EP15Adafruit_ICM20X>:
class Adafruit_ICM20X_Accelerometer : public Adafruit_Sensor {
public:
  /** @brief Create an Adafruit_Sensor compatible object for the accelerometer
     sensor
      @param parent A pointer to the ICM20X class */
  Adafruit_ICM20X_Accelerometer(Adafruit_ICM20X *parent) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ffbb 	bl	80016a8 <_ZN15Adafruit_SensorC1Ev>
 8001732:	4a09      	ldr	r2, [pc, #36]	; (8001758 <_ZN29Adafruit_ICM20X_AccelerometerC1EP15Adafruit_ICM20X+0x38>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f240 220a 	movw	r2, #522	; 0x20a
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
    _theICM20X = parent;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	609a      	str	r2, [r3, #8]
  }
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	0800b448 	.word	0x0800b448

0800175c <_ZN20Adafruit_ICM20X_GyroC1EP15Adafruit_ICM20X>:
/** Adafruit Unified Sensor interface for gyro component of ICM20X */
class Adafruit_ICM20X_Gyro : public Adafruit_Sensor {
public:
  /** @brief Create an Adafruit_Sensor compatible object for the gyro sensor
      @param parent A pointer to the ICM20X class */
  Adafruit_ICM20X_Gyro(Adafruit_ICM20X *parent) { _theICM20X = parent; }
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff9d 	bl	80016a8 <_ZN15Adafruit_SensorC1Ev>
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <_ZN20Adafruit_ICM20X_GyroC1EP15Adafruit_ICM20X+0x38>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f240 220b 	movw	r2, #523	; 0x20b
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	0800b42c 	.word	0x0800b42c

08001798 <_ZN28Adafruit_ICM20X_MagnetometerC1EP15Adafruit_ICM20X>:
class Adafruit_ICM20X_Magnetometer : public Adafruit_Sensor {
public:
  /** @brief Create an Adafruit_Sensor compatible object for the magnetometer
     sensor
      @param parent A pointer to the ICM20X class */
  Adafruit_ICM20X_Magnetometer(Adafruit_ICM20X *parent) { _theICM20X = parent; }
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff7f 	bl	80016a8 <_ZN15Adafruit_SensorC1Ev>
 80017aa:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <_ZN28Adafruit_ICM20X_MagnetometerC1EP15Adafruit_ICM20X+0x38>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	0800b410 	.word	0x0800b410

080017d4 <_ZN20Adafruit_ICM20X_TempC1EP15Adafruit_ICM20X>:
/** Adafruit Unified Sensor interface for temperature component of ICM20X */
class Adafruit_ICM20X_Temp : public Adafruit_Sensor {
public:
  /** @brief Create an Adafruit_Sensor compatible object for the temp sensor
      @param parent A pointer to the ICM20X class */
  Adafruit_ICM20X_Temp(Adafruit_ICM20X *parent) { _theICM20X = parent; }
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff61 	bl	80016a8 <_ZN15Adafruit_SensorC1Ev>
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <_ZN20Adafruit_ICM20X_TempC1EP15Adafruit_ICM20X+0x38>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f240 220d 	movw	r2, #525	; 0x20d
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	0800b3f4 	.word	0x0800b3f4

08001810 <_ZN15Adafruit_ICM20XC1Ev>:
#include "ICM20948\Adafruit_ICM20X.h"

/*!
 *    @brief  Instantiates a new ICM20X class!
 */
Adafruit_ICM20X::Adafruit_ICM20X(void) {}
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	4a0c      	ldr	r2, [pc, #48]	; (800184c <_ZN15Adafruit_ICM20XC1Ev+0x3c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	635a      	str	r2, [r3, #52]	; 0x34
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	639a      	str	r2, [r3, #56]	; 0x38
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	0800b3e4 	.word	0x0800b3e4

08001850 <_ZN15Adafruit_ICM20XD1Ev>:

/*!
 *    @brief  Cleans up the ICM20X
 */
Adafruit_ICM20X::~Adafruit_ICM20X(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <_ZN15Adafruit_ICM20XD1Ev+0x80>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
  if (accel_sensor)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	2b00      	cmp	r3, #0
 8001864:	d008      	beq.n	8001878 <_ZN15Adafruit_ICM20XD1Ev+0x28>
    delete accel_sensor;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <_ZN15Adafruit_ICM20XD1Ev+0x28>
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	3204      	adds	r2, #4
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	4790      	blx	r2
  if (gyro_sensor)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <_ZN15Adafruit_ICM20XD1Ev+0x42>
    delete gyro_sensor;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <_ZN15Adafruit_ICM20XD1Ev+0x42>
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	3204      	adds	r2, #4
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	4790      	blx	r2
  if (mag_sensor)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <_ZN15Adafruit_ICM20XD1Ev+0x5c>
    delete mag_sensor;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <_ZN15Adafruit_ICM20XD1Ev+0x5c>
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	3204      	adds	r2, #4
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	4790      	blx	r2
  if (temp_sensor)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <_ZN15Adafruit_ICM20XD1Ev+0x76>
    delete temp_sensor;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <_ZN15Adafruit_ICM20XD1Ev+0x76>
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	3204      	adds	r2, #4
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	4790      	blx	r2
}
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	0800b3e4 	.word	0x0800b3e4

080018d4 <_ZN15Adafruit_ICM20X9begin_I2CEhl>:
  (void)i2c_address;
  (void)wire;
  (void)sensor_id;
  return false;
}*/
bool Adafruit_ICM20X::begin_I2C(uint8_t i2c_address, int32_t sensor_id) {
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	460b      	mov	r3, r1
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	72fb      	strb	r3, [r7, #11]
  (void)i2c_address;
  (void)sensor_id;
  return false;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_ZN15Adafruit_ICM20X5resetEv>:

/*!
 * @brief Reset the internal registers and restores the default settings
 *
 */
void Adafruit_ICM20X::reset(void) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08e      	sub	sp, #56	; 0x38
 80018f4:	af04      	add	r7, sp, #16
 80018f6:	6078      	str	r0, [r7, #4]
  _setBank(0);
 80018f8:	2100      	movs	r1, #0
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 fa83 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register pwr_mgmt1 = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_PWR_MGMT_1, 1);

  Adafruit_BusIO_Register pwr_mgmt1 = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_PWR_MGMT_1, 1);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001904:	f107 0014 	add.w	r0, r7, #20
 8001908:	2301      	movs	r3, #1
 800190a:	9302      	str	r3, [sp, #8]
 800190c:	2300      	movs	r3, #0
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	2301      	movs	r3, #1
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2306      	movs	r3, #6
 8001916:	2200      	movs	r2, #0
 8001918:	f7ff f9fe 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits reset_bit =
      Adafruit_BusIO_RegisterBits(&pwr_mgmt1, 1, 7);
 800191c:	f107 0114 	add.w	r1, r7, #20
 8001920:	f107 000c 	add.w	r0, r7, #12
 8001924:	2307      	movs	r3, #7
 8001926:	2201      	movs	r2, #1
 8001928:	f7ff fafc 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  reset_bit.write(1);
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2101      	movs	r1, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fb2e 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  HAL_Delay(20);
 8001938:	2014      	movs	r0, #20
 800193a:	f001 fdc7 	bl	80034cc <HAL_Delay>

  while (reset_bit.read()) {
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fb09 	bl	8000f5a <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	bf14      	ite	ne
 800194e:	2301      	movne	r3, #1
 8001950:	2300      	moveq	r3, #0
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <_ZN15Adafruit_ICM20X5resetEv+0x70>
    HAL_Delay(10);
 8001958:	200a      	movs	r0, #10
 800195a:	f001 fdb7 	bl	80034cc <HAL_Delay>
  while (reset_bit.read()) {
 800195e:	e7ee      	b.n	800193e <_ZN15Adafruit_ICM20X5resetEv+0x4e>
  };
  HAL_Delay(50);
 8001960:	2032      	movs	r0, #50	; 0x32
 8001962:	f001 fdb3 	bl	80034cc <HAL_Delay>
}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	; 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_ZN15Adafruit_ICM20X5_initEl>:

/*!  @brief Initilizes the sensor
 *   @param sensor_id Optional unique ID for the sensor set
 *   @returns True if chip identified and initialized
 */
bool Adafruit_ICM20X::_init(int32_t sensor_id) {
 800196e:	b590      	push	{r4, r7, lr}
 8001970:	b095      	sub	sp, #84	; 0x54
 8001972:	af04      	add	r7, sp, #16
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]

	  //Adafruit_BusIO_Register chip_id = Adafruit_BusIO_Register(
	  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_WHOAMI);

  Adafruit_BusIO_Register chip_id = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_WHOAMI);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800197c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001980:	2301      	movs	r3, #1
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	2300      	movs	r3, #0
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2301      	movs	r3, #1
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2300      	movs	r3, #0
 800198e:	2200      	movs	r2, #0
 8001990:	f7ff f9c2 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  _setBank(0);
 8001994:	2100      	movs	r1, #0
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 fa35 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
  uint8_t chip_id_ = chip_id.read();
 800199c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fa4d 	bl	8000e40 <_ZN23Adafruit_BusIO_Register4readEv>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  // This returns true when using a 649 lib with a 948
  if ((chip_id_ != ICM20649_CHIP_ID) && (chip_id_ != ICM20948_CHIP_ID)) {
 80019ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019b0:	2be1      	cmp	r3, #225	; 0xe1
 80019b2:	d005      	beq.n	80019c0 <_ZN15Adafruit_ICM20X5_initEl+0x52>
 80019b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019b8:	2bea      	cmp	r3, #234	; 0xea
 80019ba:	d001      	beq.n	80019c0 <_ZN15Adafruit_ICM20X5_initEl+0x52>
    return false;
 80019bc:	2300      	movs	r3, #0
 80019be:	e078      	b.n	8001ab2 <_ZN15Adafruit_ICM20X5_initEl+0x144>
  }

  _sensorid_accel = sensor_id;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  _sensorid_gyro = sensor_id + 1;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  _sensorid_mag = sensor_id + 2;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3302      	adds	r3, #2
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  _sensorid_temp = sensor_id + 3;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	3303      	adds	r3, #3
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  reset();
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff7b 	bl	80018f0 <_ZN15Adafruit_ICM20X5resetEv>

  //Adafruit_BusIO_Register pwr_mgmt_1 = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_PWR_MGMT_1);

  Adafruit_BusIO_Register pwr_mgmt_1 = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_PWR_MGMT_1);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019fe:	f107 0014 	add.w	r0, r7, #20
 8001a02:	2301      	movs	r3, #1
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2300      	movs	r3, #0
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2306      	movs	r3, #6
 8001a10:	2200      	movs	r2, #0
 8001a12:	f7ff f981 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits sleep =
      Adafruit_BusIO_RegisterBits(&pwr_mgmt_1, 1, 6);
 8001a16:	f107 0114 	add.w	r1, r7, #20
 8001a1a:	f107 000c 	add.w	r0, r7, #12
 8001a1e:	2306      	movs	r3, #6
 8001a20:	2201      	movs	r2, #1
 8001a22:	f7ff fa7f 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  sleep.write(false); // take out of default sleep state
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fab1 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // 3 will be the largest range for either sensor
  writeGyroRange(3);
 8001a32:	2103      	movs	r1, #3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fa9b 	bl	8001f70 <_ZN15Adafruit_ICM20X14writeGyroRangeEh>
  writeAccelRange(3);
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 fa34 	bl	8001eaa <_ZN15Adafruit_ICM20X15writeAccelRangeEh>

  // 1100Hz/(1+10) = 100Hz
  setGyroRateDivisor(10);
 8001a42:	210a      	movs	r1, #10
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fb39 	bl	80020bc <_ZN15Adafruit_ICM20X18setGyroRateDivisorEh>

  // # 1125Hz/(1+20) = 53.57Hz
  setAccelRateDivisor(20);
 8001a4a:	2114      	movs	r1, #20
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 fae8 	bl	8002022 <_ZN15Adafruit_ICM20X19setAccelRateDivisorEt>

  temp_sensor = new Adafruit_ICM20X_Temp(this);
 8001a52:	200c      	movs	r0, #12
 8001a54:	f009 faf0 	bl	800b038 <_Znwj>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461c      	mov	r4, r3
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f7ff feb8 	bl	80017d4 <_ZN20Adafruit_ICM20X_TempC1EP15Adafruit_ICM20X>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	63dc      	str	r4, [r3, #60]	; 0x3c
  accel_sensor = new Adafruit_ICM20X_Accelerometer(this);
 8001a68:	200c      	movs	r0, #12
 8001a6a:	f009 fae5 	bl	800b038 <_Znwj>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461c      	mov	r4, r3
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4620      	mov	r0, r4
 8001a76:	f7ff fe53 	bl	8001720 <_ZN29Adafruit_ICM20X_AccelerometerC1EP15Adafruit_ICM20X>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	631c      	str	r4, [r3, #48]	; 0x30
  gyro_sensor = new Adafruit_ICM20X_Gyro(this);
 8001a7e:	200c      	movs	r0, #12
 8001a80:	f009 fada 	bl	800b038 <_Znwj>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461c      	mov	r4, r3
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f7ff fe66 	bl	800175c <_ZN20Adafruit_ICM20X_GyroC1EP15Adafruit_ICM20X>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	635c      	str	r4, [r3, #52]	; 0x34
  mag_sensor = new Adafruit_ICM20X_Magnetometer(this);
 8001a94:	200c      	movs	r0, #12
 8001a96:	f009 facf 	bl	800b038 <_Znwj>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461c      	mov	r4, r3
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff fe79 	bl	8001798 <_ZN28Adafruit_ICM20X_MagnetometerC1EP15Adafruit_ICM20X>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	639c      	str	r4, [r3, #56]	; 0x38
  HAL_Delay(20);
 8001aaa:	2014      	movs	r0, #20
 8001aac:	f001 fd0e 	bl	80034cc <HAL_Delay>

  return true;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3744      	adds	r7, #68	; 0x44
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd90      	pop	{r4, r7, pc}

08001aba <_ZN15Adafruit_ICM20X8getEventEP15sensors_event_tS1_S1_S1_>:

    @return True on successful read
*/
/**************************************************************************/
bool Adafruit_ICM20X::getEvent(sensors_event_t *accel, sensors_event_t *gyro,
                               sensors_event_t *temp, sensors_event_t *mag) {
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
  //uint32_t t = millis();
  uint32_t t = HAL_GetTick();
 8001ac8:	f001 fcf4 	bl	80034b4 <HAL_GetTick>
 8001acc:	6178      	str	r0, [r7, #20]
  _read();
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 f8fc 	bl	8001ccc <_ZN15Adafruit_ICM20X5_readEv>

  // use helpers to fill in the events
  fillAccelEvent(accel, t);
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f817 	bl	8001b0c <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm>
  fillGyroEvent(gyro, t);
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 f84e 	bl	8001b84 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm>
  fillTempEvent(temp, t);
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	6839      	ldr	r1, [r7, #0]
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f8af 	bl	8001c50 <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm>
  if (mag) {
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <_ZN15Adafruit_ICM20X8getEventEP15sensors_event_tS1_S1_S1_+0x48>
    fillMagEvent(mag, t);
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	6a39      	ldr	r1, [r7, #32]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f87d 	bl	8001bfc <_ZN15Adafruit_ICM20X12fillMagEventEP15sensors_event_tm>
  }

  return true;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm>:

void Adafruit_ICM20X::fillAccelEvent(sensors_event_t *accel,
                                     uint32_t timestamp) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  //memset(accel, 0, sizeof(sensors_event_t));
  accel->version = 1;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
  accel->sensor_id = _sensorid_accel;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b24:	461a      	mov	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	605a      	str	r2, [r3, #4]
  accel->type = SENSOR_TYPE_ACCELEROMETER;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	609a      	str	r2, [r3, #8]
  accel->timestamp = timestamp;
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	611a      	str	r2, [r3, #16]

  accel->acceleration.x = accX * SENSORS_GRAVITY_EARTH;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b3c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001b80 <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm+0x74>
 8001b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	edc3 7a05 	vstr	s15, [r3, #20]
  accel->acceleration.y = accY * SENSORS_GRAVITY_EARTH;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b50:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001b80 <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm+0x74>
 8001b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	edc3 7a06 	vstr	s15, [r3, #24]
  accel->acceleration.z = accZ * SENSORS_GRAVITY_EARTH;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b64:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001b80 <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm+0x74>
 8001b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	411ce80a 	.word	0x411ce80a

08001b84 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm>:

void Adafruit_ICM20X::fillGyroEvent(sensors_event_t *gyro, uint32_t timestamp) {
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  //memset(gyro, 0, sizeof(sensors_event_t));
  gyro->version = 1;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
  gyro->sensor_id = _sensorid_gyro;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	605a      	str	r2, [r3, #4]
  gyro->type = SENSOR_TYPE_GYROSCOPE;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	609a      	str	r2, [r3, #8]
  gyro->timestamp = timestamp;
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	611a      	str	r2, [r3, #16]
  gyro->gyro.x = gyroX * SENSORS_DPS_TO_RADS;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bb4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001bf8 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm+0x74>
 8001bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	edc3 7a05 	vstr	s15, [r3, #20]
  gyro->gyro.y = gyroY * SENSORS_DPS_TO_RADS;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001bc8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001bf8 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm+0x74>
 8001bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	edc3 7a06 	vstr	s15, [r3, #24]
  gyro->gyro.z = gyroZ * SENSORS_DPS_TO_RADS;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bdc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001bf8 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm+0x74>
 8001be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	3c8efa35 	.word	0x3c8efa35

08001bfc <_ZN15Adafruit_ICM20X12fillMagEventEP15sensors_event_tm>:

void Adafruit_ICM20X::fillMagEvent(sensors_event_t *mag, uint32_t timestamp) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  //memset(mag, 0, sizeof(sensors_event_t));
  mag->version = 1;
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
  mag->sensor_id = _sensorid_mag;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	605a      	str	r2, [r3, #4]
  mag->type = SENSOR_TYPE_MAGNETIC_FIELD;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	609a      	str	r2, [r3, #8]
  mag->timestamp = timestamp;
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	611a      	str	r2, [r3, #16]
  mag->magnetic.x = magX; // magic number!
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a1a      	ldr	r2, [r3, #32]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	615a      	str	r2, [r3, #20]
  mag->magnetic.y = magY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	619a      	str	r2, [r3, #24]
  mag->magnetic.z = magZ;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	61da      	str	r2, [r3, #28]
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	0000      	movs	r0, r0
 8001c4c:	0000      	movs	r0, r0
	...

08001c50 <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm>:

void Adafruit_ICM20X::fillTempEvent(sensors_event_t *temp, uint32_t timestamp) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]

  //memset(temp, 0, sizeof(sensors_event_t));
  temp->version = sizeof(sensors_event_t);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2224      	movs	r2, #36	; 0x24
 8001c60:	601a      	str	r2, [r3, #0]
  temp->sensor_id = _sensorid_temp;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001c68:	461a      	mov	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	605a      	str	r2, [r3, #4]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	220d      	movs	r2, #13
 8001c72:	609a      	str	r2, [r3, #8]
  temp->timestamp = timestamp;
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	611a      	str	r2, [r3, #16]
  temp->temperature = (temperature / 333.87) + 21.0;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc0e 	bl	80004a0 <__aeabi_f2d>
 8001c84:	a30f      	add	r3, pc, #60	; (adr r3, 8001cc4 <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm+0x74>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fd8b 	bl	80007a4 <__aeabi_ddiv>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm+0x70>)
 8001c9c:	f7fe faa2 	bl	80001e4 <__adddf3>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe fe64 	bl	8000974 <__aeabi_d2f>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	615a      	str	r2, [r3, #20]
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	40350000 	.word	0x40350000
 8001cc4:	851eb852 	.word	0x851eb852
 8001cc8:	4074ddeb 	.word	0x4074ddeb

08001ccc <_ZN15Adafruit_ICM20X5_readEv>:
/******************* Adafruit_Sensor functions *****************/
/*!
 *     @brief  Updates the measurement data for all sensors simultaneously
 */
/**************************************************************************/
void Adafruit_ICM20X::_read(void) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b092      	sub	sp, #72	; 0x48
 8001cd0:	af04      	add	r7, sp, #16
 8001cd2:	6078      	str	r0, [r7, #4]

  _setBank(0);
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f895 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  // reading 9 bytes of mag data to fetch the register that tells the mag we've
  // read all the data
  const uint8_t numbytes = 14 + 9; // Read Accel, gyro, temp, and 9 bytes of mag
 8001cdc:	2317      	movs	r3, #23
 8001cde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  //Adafruit_BusIO_Register data_reg = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_ACCEL_XOUT_H, numbytes);

  Adafruit_BusIO_Register data_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_ACCEL_XOUT_H, numbytes);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ce6:	f107 0020 	add.w	r0, r7, #32
 8001cea:	2301      	movs	r3, #1
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	2317      	movs	r3, #23
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	232d      	movs	r3, #45	; 0x2d
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f7ff f80d 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  uint8_t buffer[numbytes];
  data_reg.read(buffer, numbytes);
 8001cfe:	f107 0108 	add.w	r1, r7, #8
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2217      	movs	r2, #23
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff f8e0 	bl	8000ece <_ZN23Adafruit_BusIO_Register4readEPhh>

  rawAccX = buffer[0] << 8 | buffer[1];
 8001d0e:	7a3b      	ldrb	r3, [r7, #8]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	7a7b      	ldrb	r3, [r7, #9]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b21a      	sxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  rawAccY = buffer[2] << 8 | buffer[3];
 8001d22:	7abb      	ldrb	r3, [r7, #10]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	b21a      	sxth	r2, r3
 8001d28:	7afb      	ldrb	r3, [r7, #11]
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  rawAccZ = buffer[4] << 8 | buffer[5];
 8001d36:	7b3b      	ldrb	r3, [r7, #12]
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	7b7b      	ldrb	r3, [r7, #13]
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  rawGyroX = buffer[6] << 8 | buffer[7];
 8001d4a:	7bbb      	ldrb	r3, [r7, #14]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  rawGyroY = buffer[8] << 8 | buffer[9];
 8001d5e:	7c3b      	ldrb	r3, [r7, #16]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	7c7b      	ldrb	r3, [r7, #17]
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  rawGyroZ = buffer[10] << 8 | buffer[11];
 8001d72:	7cbb      	ldrb	r3, [r7, #18]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	7cfb      	ldrb	r3, [r7, #19]
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b21a      	sxth	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  temperature = buffer[12] << 8 | buffer[13];
 8001d86:	7d3b      	ldrb	r3, [r7, #20]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	7d7a      	ldrb	r2, [r7, #21]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	edc3 7a01 	vstr	s15, [r3, #4]

  rawMagX = ((buffer[16] << 8) |
 8001d9c:	7e3b      	ldrb	r3, [r7, #24]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	b21a      	sxth	r2, r3
             (buffer[15] & 0xFF)); // Mag data is read little endian
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	b21b      	sxth	r3, r3
  rawMagX = ((buffer[16] << 8) |
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  rawMagY = ((buffer[18] << 8) | (buffer[17] & 0xFF));
 8001db0:	7ebb      	ldrb	r3, [r7, #26]
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	b21a      	sxth	r2, r3
 8001db6:	7e7b      	ldrb	r3, [r7, #25]
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	b21a      	sxth	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  rawMagZ = ((buffer[20] << 8) | (buffer[19] & 0xFF));
 8001dc4:	7f3b      	ldrb	r3, [r7, #28]
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	7efb      	ldrb	r3, [r7, #27]
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  scaleValues();
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	4798      	blx	r3
  _setBank(0);
 8001de2:	2100      	movs	r1, #0
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f80e 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8001dea:	bf00      	nop
 8001dec:	3738      	adds	r7, #56	; 0x38
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_ZN15Adafruit_ICM20X11scaleValuesEv>:
/*!
 * @brief Scales the raw variables based on the current measurement range
 *
 */
void Adafruit_ICM20X::scaleValues(void) {}
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <_ZN15Adafruit_ICM20X8_setBankEh>:
/*!
    @brief Sets register bank.
    @param  bank_number
          The bank to set to active
*/
void Adafruit_ICM20X::_setBank(uint8_t bank_number) {
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b08c      	sub	sp, #48	; 0x30
 8001e0a:	af04      	add	r7, sp, #16
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	70fb      	strb	r3, [r7, #3]

	  //Adafruit_BusIO_Register reg_bank_sel = Adafruit_BusIO_Register(
	  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_REG_BANK_SEL);

  Adafruit_BusIO_Register reg_bank_sel = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_REG_BANK_SEL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e16:	f107 000c 	add.w	r0, r7, #12
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	2301      	movs	r3, #1
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	237f      	movs	r3, #127	; 0x7f
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f7fe ff75 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  reg_bank_sel.write((bank_number & 0b11) << 4);
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe ffb9 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
 8001e42:	bf00      	nop
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_ZN15Adafruit_ICM20X14readAccelRangeEv>:
/**************************************************************************/
/*!
    @brief Get the accelerometer's measurement range.
    @returns The accelerometer's measurement range (`icm20x_accel_range_t`).
*/
uint8_t Adafruit_ICM20X::readAccelRange(void) {
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b08e      	sub	sp, #56	; 0x38
 8001e4e:	af04      	add	r7, sp, #16
 8001e50:	6078      	str	r0, [r7, #4]
  _setBank(2);
 8001e52:	2102      	movs	r1, #2
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ffd6 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register accel_config_1 = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_ACCEL_CONFIG_1);

  Adafruit_BusIO_Register accel_config_1 = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_ACCEL_CONFIG_1);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e5e:	f107 0010 	add.w	r0, r7, #16
 8001e62:	2301      	movs	r3, #1
 8001e64:	9302      	str	r3, [sp, #8]
 8001e66:	2300      	movs	r3, #0
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2314      	movs	r3, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	f7fe ff51 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits accel_range =
      Adafruit_BusIO_RegisterBits(&accel_config_1, 2, 1);
 8001e76:	f107 0110 	add.w	r1, r7, #16
 8001e7a:	f107 0008 	add.w	r0, r7, #8
 8001e7e:	2301      	movs	r3, #1
 8001e80:	2202      	movs	r2, #2
 8001e82:	f7ff f84f 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  uint8_t range = accel_range.read();
 8001e86:	f107 0308 	add.w	r3, r7, #8
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f865 	bl	8000f5a <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  _setBank(0);
 8001e96:	2100      	movs	r1, #0
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffb4 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
  return range;
 8001e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3728      	adds	r7, #40	; 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_ZN15Adafruit_ICM20X15writeAccelRangeEh>:
    @brief Sets the accelerometer's measurement range.
    @param  new_accel_range
            Measurement range to be set. Must be an
            `icm20x_accel_range_t`.
*/
void Adafruit_ICM20X::writeAccelRange(uint8_t new_accel_range) {
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b08e      	sub	sp, #56	; 0x38
 8001eae:	af04      	add	r7, sp, #16
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	70fb      	strb	r3, [r7, #3]
  _setBank(2);
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ffa4 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register accel_config_1 = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_ACCEL_CONFIG_1);

  Adafruit_BusIO_Register accel_config_1 = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_ACCEL_CONFIG_1);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ec2:	f107 0014 	add.w	r0, r7, #20
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	9302      	str	r3, [sp, #8]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2314      	movs	r3, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f7fe ff1f 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits accel_range =
      Adafruit_BusIO_RegisterBits(&accel_config_1, 2, 1);
 8001eda:	f107 0114 	add.w	r1, r7, #20
 8001ede:	f107 000c 	add.w	r0, r7, #12
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f7ff f81d 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  accel_range.write(new_accel_range);
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f84e 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  current_accel_range = new_accel_range;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  _setBank(0);
 8001f00:	2100      	movs	r1, #0
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ff7f 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8001f08:	bf00      	nop
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_ZN15Adafruit_ICM20X13readGyroRangeEv>:
/**************************************************************************/
/*!
    @brief Get the gyro's measurement range.
    @returns The gyro's measurement range (`icm20x_gyro_range_t`).
*/
uint8_t Adafruit_ICM20X::readGyroRange(void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	; 0x38
 8001f14:	af04      	add	r7, sp, #16
 8001f16:	6078      	str	r0, [r7, #4]
  _setBank(2);
 8001f18:	2102      	movs	r1, #2
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ff73 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register gyro_config_1 = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_GYRO_CONFIG_1);

  Adafruit_BusIO_Register gyro_config_1 = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_GYRO_CONFIG_1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f24:	f107 0010 	add.w	r0, r7, #16
 8001f28:	2301      	movs	r3, #1
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	2301      	movs	r3, #1
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2301      	movs	r3, #1
 8001f36:	2200      	movs	r2, #0
 8001f38:	f7fe feee 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits gyro_range =
      Adafruit_BusIO_RegisterBits(&gyro_config_1, 2, 1);
 8001f3c:	f107 0110 	add.w	r1, r7, #16
 8001f40:	f107 0008 	add.w	r0, r7, #8
 8001f44:	2301      	movs	r3, #1
 8001f46:	2202      	movs	r2, #2
 8001f48:	f7fe ffec 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  uint8_t range = gyro_range.read();
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f802 	bl	8000f5a <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  _setBank(0);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ff51 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
  return range;
 8001f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_ZN15Adafruit_ICM20X14writeGyroRangeEh>:
    @brief Sets the gyro's measurement range.
    @param  new_gyro_range
            Measurement range to be set. Must be an
            `icm20x_gyro_range_t`.
*/
void Adafruit_ICM20X::writeGyroRange(uint8_t new_gyro_range) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08e      	sub	sp, #56	; 0x38
 8001f74:	af04      	add	r7, sp, #16
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
  _setBank(2);
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ff41 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register gyro_config_1 = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_GYRO_CONFIG_1);

  Adafruit_BusIO_Register gyro_config_1 = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_GYRO_CONFIG_1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f88:	f107 0014 	add.w	r0, r7, #20
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	9302      	str	r3, [sp, #8]
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2301      	movs	r3, #1
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f7fe febc 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits gyro_range =
      Adafruit_BusIO_RegisterBits(&gyro_config_1, 2, 1);
 8001fa0:	f107 0114 	add.w	r1, r7, #20
 8001fa4:	f107 000c 	add.w	r0, r7, #12
 8001fa8:	2301      	movs	r3, #1
 8001faa:	2202      	movs	r2, #2
 8001fac:	f7fe ffba 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  gyro_range.write(new_gyro_range);
 8001fb0:	78fa      	ldrb	r2, [r7, #3]
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe ffeb 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  current_gyro_range = new_gyro_range;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	78fa      	ldrb	r2, [r7, #3]
 8001fc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  _setBank(0);
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff1c 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8001fce:	bf00      	nop
 8001fd0:	3728      	adds	r7, #40	; 0x28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_ZN15Adafruit_ICM20X19getAccelRateDivisorEv>:
/**************************************************************************/
/*!
    @brief Get the accelerometer's data rate divisor.
    @returns The accelerometer's data rate divisor (`uint8_t`).
*/
uint16_t Adafruit_ICM20X::getAccelRateDivisor(void) {
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b08c      	sub	sp, #48	; 0x30
 8001fda:	af04      	add	r7, sp, #16
 8001fdc:	6078      	str	r0, [r7, #4]
  _setBank(2);
 8001fde:	2102      	movs	r1, #2
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff10 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
  //    Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
  //                            ICM20X_B2_ACCEL_SMPLRT_DIV_1, 2, MSBFIRST);

  Adafruit_BusIO_Register accel_rate_divisor =
      Adafruit_BusIO_Register(i2c_dev, ADDRBIT8_HIGH_TOREAD,
                              ICM20X_B2_ACCEL_SMPLRT_DIV_1, 2, MSBFIRST);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fea:	f107 0008 	add.w	r0, r7, #8
 8001fee:	2301      	movs	r3, #1
 8001ff0:	9302      	str	r3, [sp, #8]
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2310      	movs	r3, #16
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f7fe fe8b 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  uint16_t divisor_val = accel_rate_divisor.read();
 8002002:	f107 0308 	add.w	r3, r7, #8
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe ff1a 	bl	8000e40 <_ZN23Adafruit_BusIO_Register4readEv>
 800200c:	4603      	mov	r3, r0
 800200e:	83fb      	strh	r3, [r7, #30]

  _setBank(0);
 8002010:	2100      	movs	r1, #0
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fef7 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
  return divisor_val;
 8002018:	8bfb      	ldrh	r3, [r7, #30]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_ZN15Adafruit_ICM20X19setAccelRateDivisorEt>:
    @brief Sets the accelerometer's data rate divisor.
    @param  new_accel_divisor
            The accelerometer's data rate divisor (`uint16_t`). This 12-bit
   value must be <= 4095
*/
void Adafruit_ICM20X::setAccelRateDivisor(uint16_t new_accel_divisor) {
 8002022:	b580      	push	{r7, lr}
 8002024:	b08c      	sub	sp, #48	; 0x30
 8002026:	af04      	add	r7, sp, #16
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	460b      	mov	r3, r1
 800202c:	807b      	strh	r3, [r7, #2]
  _setBank(2);
 800202e:	2102      	movs	r1, #2
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff fee8 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
  //    Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
  //                            ICM20X_B2_ACCEL_SMPLRT_DIV_1, 2, MSBFIRST);

  Adafruit_BusIO_Register accel_rate_divisor =
      Adafruit_BusIO_Register(i2c_dev, ADDRBIT8_HIGH_TOREAD,
                              ICM20X_B2_ACCEL_SMPLRT_DIV_1, 2, MSBFIRST);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800203a:	f107 000c 	add.w	r0, r7, #12
 800203e:	2301      	movs	r3, #1
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	2301      	movs	r3, #1
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	2302      	movs	r3, #2
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2310      	movs	r3, #16
 800204c:	2200      	movs	r2, #0
 800204e:	f7fe fe63 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  accel_rate_divisor.write(new_accel_divisor);
 8002052:	8879      	ldrh	r1, [r7, #2]
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	2200      	movs	r2, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe feaa 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
  _setBank(0);
 8002060:	2100      	movs	r1, #0
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fecf 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8002068:	bf00      	nop
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <_ZN15Adafruit_ICM20X18getGyroRateDivisorEv>:
/**************************************************************************/
/*!
    @brief Get the gyro's data rate divisor.
    @returns The gyro's data rate divisor (`uint8_t`).
*/
uint8_t Adafruit_ICM20X::getGyroRateDivisor(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af04      	add	r7, sp, #16
 8002076:	6078      	str	r0, [r7, #4]
  _setBank(2);
 8002078:	2102      	movs	r1, #2
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fec3 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register gyro_rate_divisor = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_GYRO_SMPLRT_DIV, 1);

  Adafruit_BusIO_Register gyro_rate_divisor = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_GYRO_SMPLRT_DIV, 1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002084:	f107 0008 	add.w	r0, r7, #8
 8002088:	2301      	movs	r3, #1
 800208a:	9302      	str	r3, [sp, #8]
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2301      	movs	r3, #1
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2300      	movs	r3, #0
 8002096:	2200      	movs	r2, #0
 8002098:	f7fe fe3e 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  uint8_t divisor_val = gyro_rate_divisor.read();
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fecd 	bl	8000e40 <_ZN23Adafruit_BusIO_Register4readEv>
 80020a6:	4603      	mov	r3, r0
 80020a8:	77fb      	strb	r3, [r7, #31]

  _setBank(0);
 80020aa:	2100      	movs	r1, #0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff feaa 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
  return divisor_val;
 80020b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZN15Adafruit_ICM20X18setGyroRateDivisorEh>:

    @brief Sets the gyro's data rate divisor.
    @param  new_gyro_divisor
            The gyro's data rate divisor (`uint8_t`).
*/
void Adafruit_ICM20X::setGyroRateDivisor(uint8_t new_gyro_divisor) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af04      	add	r7, sp, #16
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	70fb      	strb	r3, [r7, #3]
  _setBank(2);
 80020c8:	2102      	movs	r1, #2
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fe9b 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register gyro_rate_divisor = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_GYRO_SMPLRT_DIV, 1);

  Adafruit_BusIO_Register gyro_rate_divisor = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_GYRO_SMPLRT_DIV, 1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020d4:	f107 000c 	add.w	r0, r7, #12
 80020d8:	2301      	movs	r3, #1
 80020da:	9302      	str	r3, [sp, #8]
 80020dc:	2300      	movs	r3, #0
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2301      	movs	r3, #1
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	2200      	movs	r2, #0
 80020e8:	f7fe fe16 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  gyro_rate_divisor.write(new_gyro_divisor);
 80020ec:	78f9      	ldrb	r1, [r7, #3]
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	2200      	movs	r2, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fe5d 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
  _setBank(0);
 80020fa:	2100      	movs	r1, #0
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fe82 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8002102:	bf00      	nop
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_ZN15Adafruit_ICM20X12setI2CBypassEb>:
 *
 * @param bypass_i2c Set to true to bypass the internal I2C master circuitry,
 * connecting the external I2C bus to the main I2C bus. Set to false to
 * re-connect
 */
void Adafruit_ICM20X::setI2CBypass(bool bypass_i2c) {
 800210a:	b580      	push	{r7, lr}
 800210c:	b08e      	sub	sp, #56	; 0x38
 800210e:	af04      	add	r7, sp, #16
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	70fb      	strb	r3, [r7, #3]
  _setBank(0);
 8002116:	2100      	movs	r1, #0
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fe74 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register int_enable_1 = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_REG_INT_PIN_CFG);

  Adafruit_BusIO_Register int_enable_1 = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_REG_INT_PIN_CFG);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002122:	f107 0014 	add.w	r0, r7, #20
 8002126:	2301      	movs	r3, #1
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	2300      	movs	r3, #0
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	2301      	movs	r3, #1
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	230f      	movs	r3, #15
 8002134:	2200      	movs	r2, #0
 8002136:	f7fe fdef 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits i2c_bypass_enable =
      Adafruit_BusIO_RegisterBits(&int_enable_1, 1, 1);
 800213a:	f107 0114 	add.w	r1, r7, #20
 800213e:	f107 000c 	add.w	r0, r7, #12
 8002142:	2301      	movs	r3, #1
 8002144:	2201      	movs	r2, #1
 8002146:	f7fe feed 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  i2c_bypass_enable.write(bypass_i2c);
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe ff1e 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_ZN15Adafruit_ICM20X15enableI2CMasterEb>:
 *
 * @param enable_i2c_master true: enable false: disable
 *
 * @return true: success false: error
 */
bool Adafruit_ICM20X::enableI2CMaster(bool enable_i2c_master) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b08e      	sub	sp, #56	; 0x38
 8002164:	af04      	add	r7, sp, #16
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
  _setBank(0);
 800216c:	2100      	movs	r1, #0
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fe49 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register user_ctrl_reg = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_USER_CTRL);

  Adafruit_BusIO_Register user_ctrl_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_USER_CTRL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002178:	f107 0014 	add.w	r0, r7, #20
 800217c:	2301      	movs	r3, #1
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	2300      	movs	r3, #0
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	2301      	movs	r3, #1
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2303      	movs	r3, #3
 800218a:	2200      	movs	r2, #0
 800218c:	f7fe fdc4 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits i2c_master_enable_bit =
      Adafruit_BusIO_RegisterBits(&user_ctrl_reg, 1, 5);
 8002190:	f107 0114 	add.w	r1, r7, #20
 8002194:	f107 000c 	add.w	r0, r7, #12
 8002198:	2305      	movs	r3, #5
 800219a:	2201      	movs	r2, #1
 800219c:	f7fe fec2 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  return i2c_master_enable_bit.write(enable_i2c_master);
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe fef3 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
 80021ae:	4603      	mov	r3, r0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3728      	adds	r7, #40	; 0x28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_ZN15Adafruit_ICM20X18configureI2CMasterEv>:
 * @brief Set the I2C clock rate for the auxillary I2C bus to 345.60kHz and
 * disable repeated start
 *
 * @return true: success false: failure
 */
bool Adafruit_ICM20X::configureI2CMaster(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af04      	add	r7, sp, #16
 80021be:	6078      	str	r0, [r7, #4]

  _setBank(3);
 80021c0:	2103      	movs	r1, #3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fe1f 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register i2c_master_ctrl_reg = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_MST_CTRL);

  Adafruit_BusIO_Register i2c_master_ctrl_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_MST_CTRL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021cc:	f107 000c 	add.w	r0, r7, #12
 80021d0:	2301      	movs	r3, #1
 80021d2:	9302      	str	r3, [sp, #8]
 80021d4:	2300      	movs	r3, #0
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	2301      	movs	r3, #1
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2301      	movs	r3, #1
 80021de:	2200      	movs	r2, #0
 80021e0:	f7fe fd9a 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  return i2c_master_ctrl_reg.write(0x17);
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	2200      	movs	r2, #0
 80021ea:	2117      	movs	r1, #23
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fde1 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
 80021f2:	4603      	mov	r3, r0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <_ZN15Adafruit_ICM20X20readExternalRegisterEhh>:
 * @param slv_addr the 7-bit I2C address of the slave device
 * @param reg_addr the register address to read from
 * @return the requested register value
 */
uint8_t Adafruit_ICM20X::readExternalRegister(uint8_t slv_addr,
                                              uint8_t reg_addr) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af02      	add	r7, sp, #8
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
 8002208:	4613      	mov	r3, r2
 800220a:	70bb      	strb	r3, [r7, #2]

  return auxillaryRegisterTransaction(true, slv_addr, reg_addr);
 800220c:	78bb      	ldrb	r3, [r7, #2]
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	21ff      	movs	r1, #255	; 0xff
 8002212:	9100      	str	r1, [sp, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f825 	bl	8002266 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_ZN15Adafruit_ICM20X21writeExternalRegisterEhhh>:
 * @param value the value to write
 * @return true
 * @return false
 */
bool Adafruit_ICM20X::writeExternalRegister(uint8_t slv_addr, uint8_t reg_addr,
                                            uint8_t value) {
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af02      	add	r7, sp, #8
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	4608      	mov	r0, r1
 8002230:	4611      	mov	r1, r2
 8002232:	461a      	mov	r2, r3
 8002234:	4603      	mov	r3, r0
 8002236:	70fb      	strb	r3, [r7, #3]
 8002238:	460b      	mov	r3, r1
 800223a:	70bb      	strb	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]

  return (bool)auxillaryRegisterTransaction(false, slv_addr, reg_addr, value);
 8002240:	78b9      	ldrb	r1, [r7, #2]
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	460b      	mov	r3, r1
 800224a:	2100      	movs	r1, #0
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f80a 	bl	8002266 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh>:
 * @return false
 */
uint8_t Adafruit_ICM20X::auxillaryRegisterTransaction(bool read,
                                                      uint8_t slv_addr,
                                                      uint8_t reg_addr,
                                                      uint8_t value) {
 8002266:	b590      	push	{r4, r7, lr}
 8002268:	b0a1      	sub	sp, #132	; 0x84
 800226a:	af04      	add	r7, sp, #16
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	4608      	mov	r0, r1
 8002270:	4611      	mov	r1, r2
 8002272:	461a      	mov	r2, r3
 8002274:	4603      	mov	r3, r0
 8002276:	70fb      	strb	r3, [r7, #3]
 8002278:	460b      	mov	r3, r1
 800227a:	70bb      	strb	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]

  _setBank(3);
 8002280:	2103      	movs	r1, #3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fdbf 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  Adafruit_BusIO_Register i2c_master_status_reg = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_I2C_MST_STATUS);*/

  Adafruit_BusIO_Register slv4_addr_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_ADDR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800228c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002290:	2301      	movs	r3, #1
 8002292:	9302      	str	r3, [sp, #8]
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	2301      	movs	r3, #1
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	2313      	movs	r3, #19
 800229e:	2200      	movs	r2, #0
 80022a0:	f7fe fd3a 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_Register slv4_reg_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_REG);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022a8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80022ac:	2301      	movs	r3, #1
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	2300      	movs	r3, #0
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	2301      	movs	r3, #1
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2314      	movs	r3, #20
 80022ba:	2200      	movs	r2, #0
 80022bc:	f7fe fd2c 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_Register slv4_ctrl_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_CTRL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022c4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80022c8:	2301      	movs	r3, #1
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	2300      	movs	r3, #0
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	2301      	movs	r3, #1
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2315      	movs	r3, #21
 80022d6:	2200      	movs	r2, #0
 80022d8:	f7fe fd1e 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_Register i2c_master_status_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_I2C_MST_STATUS);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e0:	f107 0014 	add.w	r0, r7, #20
 80022e4:	2301      	movs	r3, #1
 80022e6:	9302      	str	r3, [sp, #8]
 80022e8:	2300      	movs	r3, #0
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	2301      	movs	r3, #1
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2317      	movs	r3, #23
 80022f2:	2200      	movs	r2, #0
 80022f4:	f7fe fd10 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits slave_finished_bit =
      Adafruit_BusIO_RegisterBits(&i2c_master_status_reg, 1, 6);
 80022f8:	f107 0114 	add.w	r1, r7, #20
 80022fc:	f107 000c 	add.w	r0, r7, #12
 8002300:	2306      	movs	r3, #6
 8002302:	2201      	movs	r2, #1
 8002304:	f7fe fe0e 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  if (read) {
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d017      	beq.n	800233e <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0xd8>
    slv_addr |= 0x80; // set high bit for read, presumably for multi-byte reads
 800230e:	78bb      	ldrb	r3, [r7, #2]
 8002310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002314:	70bb      	strb	r3, [r7, #2]

    //slv4_di_reg = new Adafruit_BusIO_Register(
    //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_DI);

    slv4_di_reg = new Adafruit_BusIO_Register(
        i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_DI);
 8002316:	2014      	movs	r0, #20
 8002318:	f008 fe8e 	bl	800b038 <_Znwj>
 800231c:	4603      	mov	r3, r0
 800231e:	461c      	mov	r4, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002324:	2301      	movs	r3, #1
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	2300      	movs	r3, #0
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2301      	movs	r3, #1
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2317      	movs	r3, #23
 8002332:	2200      	movs	r2, #0
 8002334:	4620      	mov	r0, r4
 8002336:	f7fe fcef 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>
    slv4_di_reg = new Adafruit_BusIO_Register(
 800233a:	66fc      	str	r4, [r7, #108]	; 0x6c
 800233c:	e021      	b.n	8002382 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x11c>

	    //slv4_do_reg = new Adafruit_BusIO_Register(
	    //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_DO);

    slv4_do_reg = new Adafruit_BusIO_Register(
        i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_DO);
 800233e:	2014      	movs	r0, #20
 8002340:	f008 fe7a 	bl	800b038 <_Znwj>
 8002344:	4603      	mov	r3, r0
 8002346:	461c      	mov	r4, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800234c:	2301      	movs	r3, #1
 800234e:	9302      	str	r3, [sp, #8]
 8002350:	2300      	movs	r3, #0
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	2301      	movs	r3, #1
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2316      	movs	r3, #22
 800235a:	2200      	movs	r2, #0
 800235c:	4620      	mov	r0, r4
 800235e:	f7fe fcdb 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>
    slv4_do_reg = new Adafruit_BusIO_Register(
 8002362:	667c      	str	r4, [r7, #100]	; 0x64

    if (!slv4_do_reg->write(value)) {
 8002364:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002368:	2200      	movs	r2, #0
 800236a:	4619      	mov	r1, r3
 800236c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800236e:	f7fe fd21 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
 8002372:	4603      	mov	r3, r0
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x11c>
      return (uint8_t) false;
 800237e:	2300      	movs	r3, #0
 8002380:	e059      	b.n	8002436 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1d0>
    }
  }

  if (!slv4_addr_reg.write(slv_addr)) {
 8002382:	78b9      	ldrb	r1, [r7, #2]
 8002384:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002388:	2200      	movs	r2, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fd12 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
 8002390:	4603      	mov	r3, r0
 8002392:	f083 0301 	eor.w	r3, r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x13a>
    return (uint8_t) false;
 800239c:	2300      	movs	r3, #0
 800239e:	e04a      	b.n	8002436 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1d0>
  }
  if (!slv4_reg_reg.write(reg_addr)) {
 80023a0:	7879      	ldrb	r1, [r7, #1]
 80023a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023a6:	2200      	movs	r2, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fd03 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f083 0301 	eor.w	r3, r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x158>
    return (uint8_t) false;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e03b      	b.n	8002436 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1d0>
  }

  if (!slv4_ctrl_reg.write(0x80)) {
 80023be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023c2:	2200      	movs	r2, #0
 80023c4:	2180      	movs	r1, #128	; 0x80
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe fcf4 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x176>
    return (uint8_t) false;
 80023d8:	2300      	movs	r3, #0
 80023da:	e02c      	b.n	8002436 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1d0>
  }

  _setBank(0);
 80023dc:	2100      	movs	r1, #0
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff fd11 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
  uint8_t tries = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  // wait until the operation is finished
  while (slave_finished_bit.read() != true) {
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fdb3 	bl	8000f5a <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	bf14      	ite	ne
 80023fa:	2301      	movne	r3, #1
 80023fc:	2300      	moveq	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1b4>
    tries++;
 8002404:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002408:	3301      	adds	r3, #1
 800240a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    if (tries >= NUM_FINISHED_CHECKS) {
 800240e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002412:	2b63      	cmp	r3, #99	; 0x63
 8002414:	d9e9      	bls.n	80023ea <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x184>
      return (uint8_t) false;
 8002416:	2300      	movs	r3, #0
 8002418:	e00d      	b.n	8002436 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1d0>
    }
  }
  if (read) {
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d009      	beq.n	8002434 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1ce>
    _setBank(3);
 8002420:	2103      	movs	r1, #3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fcef 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>
    return slv4_di_reg->read();
 8002428:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800242a:	f7fe fd09 	bl	8000e40 <_ZN23Adafruit_BusIO_Register4readEv>
 800242e:	4603      	mov	r3, r0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e000      	b.n	8002436 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1d0>
  }
  return (uint8_t) true;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	3774      	adds	r7, #116	; 0x74
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}

0800243e <_ZN15Adafruit_ICM20X14resetI2CMasterEv>:
/**************************************************************************/
/*!
 * @brief Reset the I2C master
 *
 */
void Adafruit_ICM20X::resetI2CMaster(void) {
 800243e:	b580      	push	{r7, lr}
 8002440:	b08e      	sub	sp, #56	; 0x38
 8002442:	af04      	add	r7, sp, #16
 8002444:	6078      	str	r0, [r7, #4]

  _setBank(0);
 8002446:	2100      	movs	r1, #0
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff fcdc 	bl	8001e06 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register user_ctrl = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_USER_CTRL);

  Adafruit_BusIO_Register user_ctrl = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_USER_CTRL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002452:	f107 0014 	add.w	r0, r7, #20
 8002456:	2301      	movs	r3, #1
 8002458:	9302      	str	r3, [sp, #8]
 800245a:	2300      	movs	r3, #0
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	2301      	movs	r3, #1
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2303      	movs	r3, #3
 8002464:	2200      	movs	r2, #0
 8002466:	f7fe fc57 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits i2c_master_reset_bit =
      Adafruit_BusIO_RegisterBits(&user_ctrl, 1, 1);
 800246a:	f107 0114 	add.w	r1, r7, #20
 800246e:	f107 000c 	add.w	r0, r7, #12
 8002472:	2301      	movs	r3, #1
 8002474:	2201      	movs	r2, #1
 8002476:	f7fe fd55 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  i2c_master_reset_bit.write(true);
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	2101      	movs	r1, #1
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fd87 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  while (i2c_master_reset_bit.read()) {
 8002486:	f107 030c 	add.w	r3, r7, #12
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fd65 	bl	8000f5a <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <_ZN15Adafruit_ICM20X14resetI2CMasterEv+0x6a>
    HAL_Delay(10);
 80024a0:	200a      	movs	r0, #10
 80024a2:	f001 f813 	bl	80034cc <HAL_Delay>
  while (i2c_master_reset_bit.read()) {
 80024a6:	e7ee      	b.n	8002486 <_ZN15Adafruit_ICM20X14resetI2CMasterEv+0x48>
  }
  HAL_Delay(100);
 80024a8:	2064      	movs	r0, #100	; 0x64
 80024aa:	f001 f80f 	bl	80034cc <HAL_Delay>
}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the ICM20X's accelerometer
*/
/**************************************************************************/
void Adafruit_ICM20X_Accelerometer::getSensor(sensor_t *sensor) {
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  //memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  //strncpy(sensor->name, "ICM20X_A", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2200      	movs	r2, #0
 80024c6:	72da      	strb	r2, [r3, #11]
  sensor->version = 1;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	2201      	movs	r2, #1
 80024cc:	60da      	str	r2, [r3, #12]
  sensor->sensor_id = _sensorID;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	611a      	str	r2, [r3, #16]
  sensor->type = SENSOR_TYPE_ACCELEROMETER;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	615a      	str	r2, [r3, #20]
  sensor->min_delay = 0;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2200      	movs	r2, #0
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->min_value = -294.1995F; /*  -30g = 294.1995 m/s^2  */
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	4a06      	ldr	r2, [pc, #24]	; (8002500 <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t+0x48>)
 80024e6:	61da      	str	r2, [r3, #28]
  sensor->max_value = 294.1995F;  /* 30g = 294.1995 m/s^2  */
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4a06      	ldr	r2, [pc, #24]	; (8002504 <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t+0x4c>)
 80024ec:	619a      	str	r2, [r3, #24]
  sensor->resolution =
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	4a05      	ldr	r2, [pc, #20]	; (8002508 <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t+0x50>)
 80024f2:	621a      	str	r2, [r3, #32]
      0.122; /* 8192LSB/1000 mG -> 8.192 LSB/ mG => 0.122 mG/LSB at +-4g */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	c3931989 	.word	0xc3931989
 8002504:	43931989 	.word	0x43931989
 8002508:	3df9db23 	.word	0x3df9db23

0800250c <_ZN29Adafruit_ICM20X_Accelerometer8getEventEP15sensors_event_t>:
    @brief  Gets the accelerometer as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_ICM20X_Accelerometer::getEvent(sensors_event_t *event) {
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  _theICM20X->_read();
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fbd6 	bl	8001ccc <_ZN15Adafruit_ICM20X5_readEv>
  _theICM20X->fillAccelEvent(event, HAL_GetTick());
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689c      	ldr	r4, [r3, #8]
 8002524:	f000 ffc6 	bl	80034b4 <HAL_GetTick>
 8002528:	4603      	mov	r3, r0
 800252a:	461a      	mov	r2, r3
 800252c:	6839      	ldr	r1, [r7, #0]
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff faec 	bl	8001b0c <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm>

  return true;
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bd90      	pop	{r4, r7, pc}
	...

08002540 <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the ICM20X's gyroscope sensor
*/
/**************************************************************************/
void Adafruit_ICM20X_Gyro::getSensor(sensor_t *sensor) {
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  //memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  //strncpy(sensor->name, "ICM20X_G", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name) - 1] = 0;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	72da      	strb	r2, [r3, #11]
  sensor->version = 1;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2201      	movs	r2, #1
 8002554:	60da      	str	r2, [r3, #12]
  sensor->sensor_id = _sensorID;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	611a      	str	r2, [r3, #16]
  sensor->type = SENSOR_TYPE_GYROSCOPE;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2204      	movs	r2, #4
 8002562:	615a      	str	r2, [r3, #20]
  sensor->min_delay = 0;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->min_value = -69.81; /* -4000 dps -> rad/s (radians per second) */
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	4a06      	ldr	r2, [pc, #24]	; (8002588 <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t+0x48>)
 800256e:	61da      	str	r2, [r3, #28]
  sensor->max_value = +69.81;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4a06      	ldr	r2, [pc, #24]	; (800258c <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t+0x4c>)
 8002574:	619a      	str	r2, [r3, #24]
  sensor->resolution = 2.665e-7; /* 65.5 LSB/DPS */
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	4a05      	ldr	r2, [pc, #20]	; (8002590 <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t+0x50>)
 800257a:	621a      	str	r2, [r3, #32]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	c28b9eb8 	.word	0xc28b9eb8
 800258c:	428b9eb8 	.word	0x428b9eb8
 8002590:	348f137b 	.word	0x348f137b

08002594 <_ZN20Adafruit_ICM20X_Gyro8getEventEP15sensors_event_t>:
    @brief  Gets the gyroscope as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_ICM20X_Gyro::getEvent(sensors_event_t *event) {
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  _theICM20X->_read();
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fb92 	bl	8001ccc <_ZN15Adafruit_ICM20X5_readEv>

  //_theICM20X->fillGyroEvent(event, millis());
  _theICM20X->fillGyroEvent(event, HAL_GetTick());
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689c      	ldr	r4, [r3, #8]
 80025ac:	f000 ff82 	bl	80034b4 <HAL_GetTick>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	4620      	mov	r0, r4
 80025b8:	f7ff fae4 	bl	8001b84 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm>

  return true;
 80025bc:	2301      	movs	r3, #1
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}
	...

080025c8 <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the ICM20X's magnetometer sensor
*/
/**************************************************************************/
void Adafruit_ICM20X_Magnetometer::getSensor(sensor_t *sensor) {
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  //memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  //strncpy(sensor->name, "ICM20X_M", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2200      	movs	r2, #0
 80025d6:	72da      	strb	r2, [r3, #11]
  sensor->version = 1;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	60da      	str	r2, [r3, #12]
  sensor->sensor_id = _sensorID;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	611a      	str	r2, [r3, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2202      	movs	r2, #2
 80025ea:	615a      	str	r2, [r3, #20]
  sensor->min_delay = 0;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->min_value = -4900;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	4a06      	ldr	r2, [pc, #24]	; (8002610 <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t+0x48>)
 80025f6:	61da      	str	r2, [r3, #28]
  sensor->max_value = 4900;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4a06      	ldr	r2, [pc, #24]	; (8002614 <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t+0x4c>)
 80025fc:	619a      	str	r2, [r3, #24]
  sensor->resolution = 0.6667;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	4a05      	ldr	r2, [pc, #20]	; (8002618 <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t+0x50>)
 8002602:	621a      	str	r2, [r3, #32]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	c5992000 	.word	0xc5992000
 8002614:	45992000 	.word	0x45992000
 8002618:	3f2aacda 	.word	0x3f2aacda

0800261c <_ZN28Adafruit_ICM20X_Magnetometer8getEventEP15sensors_event_t>:
    @brief  Gets the magnetometer as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_ICM20X_Magnetometer::getEvent(sensors_event_t *event) {
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  _theICM20X->_read();
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fb4e 	bl	8001ccc <_ZN15Adafruit_ICM20X5_readEv>
  //_theICM20X->fillMagEvent(event, millis());
  _theICM20X->fillMagEvent(event, HAL_GetTick());
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689c      	ldr	r4, [r3, #8]
 8002634:	f000 ff3e 	bl	80034b4 <HAL_GetTick>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	4620      	mov	r0, r4
 8002640:	f7ff fadc 	bl	8001bfc <_ZN15Adafruit_ICM20X12fillMagEventEP15sensors_event_tm>

  return true;
 8002644:	2301      	movs	r3, #1
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
	...

08002650 <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the ICM20X's tenperature
*/
/**************************************************************************/
void Adafruit_ICM20X_Temp::getSensor(sensor_t *sensor) {
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  //memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  //strncpy(sensor->name, "ICM20X_T", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name) - 1] = 0;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2200      	movs	r2, #0
 800265e:	72da      	strb	r2, [r3, #11]
  sensor->version = 1;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2201      	movs	r2, #1
 8002664:	60da      	str	r2, [r3, #12]
  sensor->sensor_id = _sensorID;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	611a      	str	r2, [r3, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	220d      	movs	r2, #13
 8002672:	615a      	str	r2, [r3, #20]
  sensor->min_delay = 0;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2200      	movs	r2, #0
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->min_value = -40;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t+0x48>)
 800267e:	61da      	str	r2, [r3, #28]
  sensor->max_value = 85;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4a06      	ldr	r2, [pc, #24]	; (800269c <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t+0x4c>)
 8002684:	619a      	str	r2, [r3, #24]
  sensor->resolution = 0.0029952; /* 333.87 LSB/C => 1/333.87 C/LSB */
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t+0x50>)
 800268a:	621a      	str	r2, [r3, #32]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	c2200000 	.word	0xc2200000
 800269c:	42aa0000 	.word	0x42aa0000
 80026a0:	3b444b1e 	.word	0x3b444b1e

080026a4 <_ZN20Adafruit_ICM20X_Temp8getEventEP15sensors_event_t>:
    @brief  Gets the temperature as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_ICM20X_Temp::getEvent(sensors_event_t *event) {
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  _theICM20X->_read();
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fb0a 	bl	8001ccc <_ZN15Adafruit_ICM20X5_readEv>
  //_theICM20X->fillTempEvent(event, millis());
  _theICM20X->fillTempEvent(event, HAL_GetTick());
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689c      	ldr	r4, [r3, #8]
 80026bc:	f000 fefa 	bl	80034b4 <HAL_GetTick>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	6839      	ldr	r1, [r7, #0]
 80026c6:	4620      	mov	r0, r4
 80026c8:	f7ff fac2 	bl	8001c50 <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm>

  return true;
 80026cc:	2301      	movs	r3, #1
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}
	...

080026d8 <_ZN20Adafruit_ICM20X_TempD1Ev>:
class Adafruit_ICM20X_Temp : public Adafruit_Sensor {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <_ZN20Adafruit_ICM20X_TempD1Ev+0x20>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe ffed 	bl	80016c8 <_ZN15Adafruit_SensorD1Ev>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	0800b3f4 	.word	0x0800b3f4

080026fc <_ZN20Adafruit_ICM20X_TempD0Ev>:
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ffe7 	bl	80026d8 <_ZN20Adafruit_ICM20X_TempD1Ev>
 800270a:	210c      	movs	r1, #12
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f008 fc91 	bl	800b034 <_ZdlPvj>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_ZN28Adafruit_ICM20X_MagnetometerD1Ev>:
class Adafruit_ICM20X_Magnetometer : public Adafruit_Sensor {
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	4a05      	ldr	r2, [pc, #20]	; (800273c <_ZN28Adafruit_ICM20X_MagnetometerD1Ev+0x20>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe ffcb 	bl	80016c8 <_ZN15Adafruit_SensorD1Ev>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	0800b410 	.word	0x0800b410

08002740 <_ZN28Adafruit_ICM20X_MagnetometerD0Ev>:
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ffe7 	bl	800271c <_ZN28Adafruit_ICM20X_MagnetometerD1Ev>
 800274e:	210c      	movs	r1, #12
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f008 fc6f 	bl	800b034 <_ZdlPvj>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <_ZN20Adafruit_ICM20X_GyroD1Ev>:
class Adafruit_ICM20X_Gyro : public Adafruit_Sensor {
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	4a05      	ldr	r2, [pc, #20]	; (8002780 <_ZN20Adafruit_ICM20X_GyroD1Ev+0x20>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe ffa9 	bl	80016c8 <_ZN15Adafruit_SensorD1Ev>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	0800b42c 	.word	0x0800b42c

08002784 <_ZN20Adafruit_ICM20X_GyroD0Ev>:
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ffe7 	bl	8002760 <_ZN20Adafruit_ICM20X_GyroD1Ev>
 8002792:	210c      	movs	r1, #12
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f008 fc4d 	bl	800b034 <_ZdlPvj>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_ZN29Adafruit_ICM20X_AccelerometerD1Ev>:
class Adafruit_ICM20X_Accelerometer : public Adafruit_Sensor {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <_ZN29Adafruit_ICM20X_AccelerometerD1Ev+0x20>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe ff87 	bl	80016c8 <_ZN15Adafruit_SensorD1Ev>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	0800b448 	.word	0x0800b448

080027c8 <_ZN29Adafruit_ICM20X_AccelerometerD0Ev>:
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ffe7 	bl	80027a4 <_ZN29Adafruit_ICM20X_AccelerometerD1Ev>
 80027d6:	210c      	movs	r1, #12
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f008 fc2b 	bl	800b034 <_ZdlPvj>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_ZN17Adafruit_ICM20948D1Ev>:
 *            the ST ICM2948 9-DoF Accelerometer, gyro, and magnetometer
 */
class Adafruit_ICM20948 : public Adafruit_ICM20X {
public:
  Adafruit_ICM20948();
  ~Adafruit_ICM20948(){};
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	4a05      	ldr	r2, [pc, #20]	; (8002808 <_ZN17Adafruit_ICM20948D1Ev+0x20>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff f829 	bl	8001850 <_ZN15Adafruit_ICM20XD1Ev>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	0800b3d4 	.word	0x0800b3d4
 800280c:	00000000 	.word	0x00000000

08002810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b0b0      	sub	sp, #192	; 0xc0
 8002814:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002816:	f000 fde7 	bl	80033e8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800281a:	f000 f89d 	bl	8002958 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800281e:	f000 f90d 	bl	8002a3c <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002822:	f000 fa33 	bl	8002c8c <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8002826:	f000 f92f 	bl	8002a88 <_ZL12MX_I2C1_Initv>
  MX_I2S2_Init();
 800282a:	f000 f961 	bl	8002af0 <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 800282e:	f000 f993 	bl	8002b58 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8002832:	f000 f9c5 	bl	8002bc0 <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 8002836:	f008 f8f5 	bl	800aa24 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800283a:	f000 f9f9 	bl	8002c30 <_ZL19MX_USART2_UART_Initv>
  SensorAPI_I2Cx_Read(0x1F, pressure_data, 3, &bmp388_address);

  uint8_t config_settings[] = {0x10, 0x20, 0x30}; // Example settings
  SensorAPI_I2Cx_Write(0x1E, config_settings, sizeof(config_settings), &bmp388_address);*/

  icm.begin_I2C();
 800283e:	2200      	movs	r2, #0
 8002840:	2169      	movs	r1, #105	; 0x69
 8002842:	4843      	ldr	r0, [pc, #268]	; (8002950 <main+0x140>)
 8002844:	f7fe fcec 	bl	8001220 <_ZN17Adafruit_ICM209489begin_I2CEhl>
  while (1)
  {
	  //HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
	  //HAL_Delay(1000);
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002848:	f008 f912 	bl	800aa70 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    int accelRange = icm.getAccelRange();
 800284c:	4840      	ldr	r0, [pc, #256]	; (8002950 <main+0x140>)
 800284e:	f7fe fedf 	bl	8001610 <_ZN17Adafruit_ICM2094813getAccelRangeEv>
 8002852:	4603      	mov	r3, r0
 8002854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    int gyroRange = icm.getGyroRange();
 8002858:	483d      	ldr	r0, [pc, #244]	; (8002950 <main+0x140>)
 800285a:	f7fe fee6 	bl	800162a <_ZN17Adafruit_ICM2094812getGyroRangeEv>
 800285e:	4603      	mov	r3, r0
 8002860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t accel_divisor = icm.getAccelRateDivisor();
 8002864:	483a      	ldr	r0, [pc, #232]	; (8002950 <main+0x140>)
 8002866:	f7ff fbb6 	bl	8001fd6 <_ZN15Adafruit_ICM20X19getAccelRateDivisorEv>
 800286a:	4603      	mov	r3, r0
 800286c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
    float accel_rate = 1125 / (1.0 + accel_divisor);
 8002870:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8002874:	4618      	mov	r0, r3
 8002876:	f7fd fe01 	bl	800047c <__aeabi_i2d>
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	4b35      	ldr	r3, [pc, #212]	; (8002954 <main+0x144>)
 8002880:	f7fd fcb0 	bl	80001e4 <__adddf3>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	a12d      	add	r1, pc, #180	; (adr r1, 8002940 <main+0x130>)
 800288a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800288e:	f7fd ff89 	bl	80007a4 <__aeabi_ddiv>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f7fe f86b 	bl	8000974 <__aeabi_d2f>
 800289e:	4603      	mov	r3, r0
 80028a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    uint8_t gyro_divisor = icm.getGyroRateDivisor();
 80028a4:	482a      	ldr	r0, [pc, #168]	; (8002950 <main+0x140>)
 80028a6:	f7ff fbe3 	bl	8002070 <_ZN15Adafruit_ICM20X18getGyroRateDivisorEv>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    float gyro_rate = 1100 / (1.0 + gyro_divisor);
 80028b0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fd fde1 	bl	800047c <__aeabi_i2d>
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	4b25      	ldr	r3, [pc, #148]	; (8002954 <main+0x144>)
 80028c0:	f7fd fc90 	bl	80001e4 <__adddf3>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	a11f      	add	r1, pc, #124	; (adr r1, 8002948 <main+0x138>)
 80028ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028ce:	f7fd ff69 	bl	80007a4 <__aeabi_ddiv>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe f84b 	bl	8000974 <__aeabi_d2f>
 80028de:	4603      	mov	r3, r0
 80028e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    int magDataRate = icm.getMagDataRate();
 80028e4:	481a      	ldr	r0, [pc, #104]	; (8002950 <main+0x140>)
 80028e6:	f7fe fead 	bl	8001644 <_ZN17Adafruit_ICM2094814getMagDataRateEv>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    sensors_event_t accel;
    sensors_event_t gyro;
    sensors_event_t mag;
    sensors_event_t temp;
    icm.getEvent(&accel, &gyro, &temp, &mag);
 80028f0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80028f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80028f8:	4639      	mov	r1, r7
 80028fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4603      	mov	r3, r0
 8002902:	4813      	ldr	r0, [pc, #76]	; (8002950 <main+0x140>)
 8002904:	f7ff f8d9 	bl	8001aba <_ZN15Adafruit_ICM20X8getEventEP15sensors_event_tS1_S1_S1_>
    int x = accel.acceleration.x;
 8002908:	edd7 7a05 	vldr	s15, [r7, #20]
 800290c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002910:	ee17 3a90 	vmov	r3, s15
 8002914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    int y = accel.acceleration.y;
 8002918:	edd7 7a06 	vldr	s15, [r7, #24]
 800291c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002920:	ee17 3a90 	vmov	r3, s15
 8002924:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int z = accel.acceleration.z;
 8002928:	edd7 7a07 	vldr	s15, [r7, #28]
 800292c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002930:	ee17 3a90 	vmov	r3, s15
 8002934:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    HAL_Delay(100);
 8002938:	2064      	movs	r0, #100	; 0x64
 800293a:	f000 fdc7 	bl	80034cc <HAL_Delay>

    // HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 5000);
    // HAL_UART_Receive(&huart2, RX_Data, sizeof(RX_Data), 1000);
    // HAL_Delay(2000);
  }
 800293e:	e783      	b.n	8002848 <main+0x38>
 8002940:	00000000 	.word	0x00000000
 8002944:	40919400 	.word	0x40919400
 8002948:	00000000 	.word	0x00000000
 800294c:	40913000 	.word	0x40913000
 8002950:	20000230 	.word	0x20000230
 8002954:	3ff00000 	.word	0x3ff00000

08002958 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b094      	sub	sp, #80	; 0x50
 800295c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800295e:	f107 0320 	add.w	r3, r7, #32
 8002962:	2230      	movs	r2, #48	; 0x30
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f008 fbd8 	bl	800b11c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <_Z18SystemClock_Configv+0xdc>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	4a2b      	ldr	r2, [pc, #172]	; (8002a34 <_Z18SystemClock_Configv+0xdc>)
 8002986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298a:	6413      	str	r3, [r2, #64]	; 0x40
 800298c:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <_Z18SystemClock_Configv+0xdc>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002998:	2300      	movs	r3, #0
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <_Z18SystemClock_Configv+0xe0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a25      	ldr	r2, [pc, #148]	; (8002a38 <_Z18SystemClock_Configv+0xe0>)
 80029a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <_Z18SystemClock_Configv+0xe0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029b4:	2301      	movs	r3, #1
 80029b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029be:	2302      	movs	r3, #2
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80029c8:	2304      	movs	r3, #4
 80029ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80029cc:	23c0      	movs	r3, #192	; 0xc0
 80029ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80029d0:	2304      	movs	r3, #4
 80029d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80029d4:	2308      	movs	r3, #8
 80029d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d8:	f107 0320 	add.w	r3, r7, #32
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 fac9 	bl	8005f74 <HAL_RCC_OscConfig>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf14      	ite	ne
 80029e8:	2301      	movne	r3, #1
 80029ea:	2300      	moveq	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80029f2:	f000 fa19 	bl	8002e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f6:	230f      	movs	r3, #15
 80029f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029fa:	2302      	movs	r3, #2
 80029fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002a0c:	f107 030c 	add.w	r3, r7, #12
 8002a10:	2103      	movs	r1, #3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 fd26 	bl	8006464 <HAL_RCC_ClockConfig>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bf14      	ite	ne
 8002a1e:	2301      	movne	r3, #1
 8002a20:	2300      	moveq	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002a28:	f000 f9fe 	bl	8002e28 <Error_Handler>
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3750      	adds	r7, #80	; 0x50
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40007000 	.word	0x40007000

08002a3c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a42:	463b      	mov	r3, r7
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
 8002a50:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002a52:	2301      	movs	r3, #1
 8002a54:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8002a56:	23c8      	movs	r3, #200	; 0xc8
 8002a58:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8002a5a:	2305      	movs	r3, #5
 8002a5c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a62:	463b      	mov	r3, r7
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 ff1d 	bl	80068a4 <HAL_RCCEx_PeriphCLKConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 8002a7a:	f000 f9d5 	bl	8002e28 <Error_Handler>
  }
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002a8e:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <_ZL12MX_I2C1_Initv+0x60>)
 8002a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002a92:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <_ZL12MX_I2C1_Initv+0x64>)
 8002a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ac4:	4807      	ldr	r0, [pc, #28]	; (8002ae4 <_ZL12MX_I2C1_Initv+0x5c>)
 8002ac6:	f002 fc71 	bl	80053ac <HAL_I2C_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf14      	ite	ne
 8002ad0:	2301      	movne	r3, #1
 8002ad2:	2300      	moveq	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002ada:	f000 f9a5 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200000b0 	.word	0x200000b0
 8002ae8:	40005400 	.word	0x40005400
 8002aec:	000186a0 	.word	0x000186a0

08002af0 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <_ZL12MX_I2S2_Initv+0x5c>)
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <_ZL12MX_I2S2_Initv+0x60>)
 8002af8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <_ZL12MX_I2S2_Initv+0x5c>)
 8002afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b00:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <_ZL12MX_I2S2_Initv+0x5c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <_ZL12MX_I2S2_Initv+0x5c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <_ZL12MX_I2S2_Initv+0x5c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002b14:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <_ZL12MX_I2S2_Initv+0x5c>)
 8002b16:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <_ZL12MX_I2S2_Initv+0x64>)
 8002b18:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <_ZL12MX_I2S2_Initv+0x5c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <_ZL12MX_I2S2_Initv+0x5c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <_ZL12MX_I2S2_Initv+0x5c>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002b2c:	4807      	ldr	r0, [pc, #28]	; (8002b4c <_ZL12MX_I2S2_Initv+0x5c>)
 8002b2e:	f002 fd81 	bl	8005634 <HAL_I2S_Init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <_ZL12MX_I2S2_Initv+0x56>
  {
    Error_Handler();
 8002b42:	f000 f971 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000104 	.word	0x20000104
 8002b50:	40003800 	.word	0x40003800
 8002b54:	00017700 	.word	0x00017700

08002b58 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002b5e:	4a16      	ldr	r2, [pc, #88]	; (8002bb8 <_ZL12MX_I2S3_Initv+0x60>)
 8002b60:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b68:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002b80:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <_ZL12MX_I2S3_Initv+0x64>)
 8002b82:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002b96:	4807      	ldr	r0, [pc, #28]	; (8002bb4 <_ZL12MX_I2S3_Initv+0x5c>)
 8002b98:	f002 fd4c 	bl	8005634 <HAL_I2S_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf14      	ite	ne
 8002ba2:	2301      	movne	r3, #1
 8002ba4:	2300      	moveq	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8002bac:	f000 f93c 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002bb0:	bf00      	nop
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	2000014c 	.word	0x2000014c
 8002bb8:	40003c00 	.word	0x40003c00
 8002bbc:	00017700 	.word	0x00017700

08002bc0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <_ZL12MX_SPI1_Initv+0x68>)
 8002bc6:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <_ZL12MX_SPI1_Initv+0x6c>)
 8002bc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <_ZL12MX_SPI1_Initv+0x68>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <_ZL12MX_SPI1_Initv+0x68>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <_ZL12MX_SPI1_Initv+0x68>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <_ZL12MX_SPI1_Initv+0x68>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <_ZL12MX_SPI1_Initv+0x68>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <_ZL12MX_SPI1_Initv+0x68>)
 8002bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bee:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bf0:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <_ZL12MX_SPI1_Initv+0x68>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <_ZL12MX_SPI1_Initv+0x68>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <_ZL12MX_SPI1_Initv+0x68>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <_ZL12MX_SPI1_Initv+0x68>)
 8002c04:	220a      	movs	r2, #10
 8002c06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c08:	4807      	ldr	r0, [pc, #28]	; (8002c28 <_ZL12MX_SPI1_Initv+0x68>)
 8002c0a:	f003 ff9b 	bl	8006b44 <HAL_SPI_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <_ZL12MX_SPI1_Initv+0x62>
  {
    Error_Handler();
 8002c1e:	f000 f903 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000194 	.word	0x20000194
 8002c2c:	40013000 	.word	0x40013000

08002c30 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c34:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c36:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c56:	220c      	movs	r2, #12
 8002c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c66:	4807      	ldr	r0, [pc, #28]	; (8002c84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c68:	f003 fff5 	bl	8006c56 <HAL_UART_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002c7c:	f000 f8d4 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200001ec 	.word	0x200001ec
 8002c88:	40004400 	.word	0x40004400

08002c8c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c92:	f107 031c 	add.w	r3, r7, #28
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	4b5b      	ldr	r3, [pc, #364]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a5a      	ldr	r2, [pc, #360]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002cac:	f043 0310 	orr.w	r3, r3, #16
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b58      	ldr	r3, [pc, #352]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	4b54      	ldr	r3, [pc, #336]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a53      	ldr	r2, [pc, #332]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b51      	ldr	r3, [pc, #324]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	4b4d      	ldr	r3, [pc, #308]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a4c      	ldr	r2, [pc, #304]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b4a      	ldr	r3, [pc, #296]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a45      	ldr	r2, [pc, #276]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	4b3f      	ldr	r3, [pc, #252]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	4a3e      	ldr	r2, [pc, #248]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	6313      	str	r3, [r2, #48]	; 0x30
 8002d22:	4b3c      	ldr	r3, [pc, #240]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	4b38      	ldr	r3, [pc, #224]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a37      	ldr	r2, [pc, #220]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002d38:	f043 0308 	orr.w	r3, r3, #8
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b35      	ldr	r3, [pc, #212]	; (8002e14 <_ZL12MX_GPIO_Initv+0x188>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	607b      	str	r3, [r7, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2108      	movs	r1, #8
 8002d4e:	4832      	ldr	r0, [pc, #200]	; (8002e18 <_ZL12MX_GPIO_Initv+0x18c>)
 8002d50:	f000 ff08 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002d54:	2201      	movs	r2, #1
 8002d56:	2101      	movs	r1, #1
 8002d58:	4830      	ldr	r0, [pc, #192]	; (8002e1c <_ZL12MX_GPIO_Initv+0x190>)
 8002d5a:	f000 ff03 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002d64:	482e      	ldr	r0, [pc, #184]	; (8002e20 <_ZL12MX_GPIO_Initv+0x194>)
 8002d66:	f000 fefd 	bl	8003b64 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8002d76:	f107 031c 	add.w	r3, r7, #28
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4826      	ldr	r0, [pc, #152]	; (8002e18 <_ZL12MX_GPIO_Initv+0x18c>)
 8002d7e:	f000 fd6d 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002d82:	2308      	movs	r3, #8
 8002d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d86:	2301      	movs	r3, #1
 8002d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002d92:	f107 031c 	add.w	r3, r7, #28
 8002d96:	4619      	mov	r1, r3
 8002d98:	481f      	ldr	r0, [pc, #124]	; (8002e18 <_ZL12MX_GPIO_Initv+0x18c>)
 8002d9a:	f000 fd5f 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8002d9e:	2332      	movs	r3, #50	; 0x32
 8002da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002da2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dac:	f107 031c 	add.w	r3, r7, #28
 8002db0:	4619      	mov	r1, r3
 8002db2:	4819      	ldr	r0, [pc, #100]	; (8002e18 <_ZL12MX_GPIO_Initv+0x18c>)
 8002db4:	f000 fd52 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002db8:	2301      	movs	r3, #1
 8002dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002dc8:	f107 031c 	add.w	r3, r7, #28
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4813      	ldr	r0, [pc, #76]	; (8002e1c <_ZL12MX_GPIO_Initv+0x190>)
 8002dd0:	f000 fd44 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002dd8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de2:	f107 031c 	add.w	r3, r7, #28
 8002de6:	4619      	mov	r1, r3
 8002de8:	480e      	ldr	r0, [pc, #56]	; (8002e24 <_ZL12MX_GPIO_Initv+0x198>)
 8002dea:	f000 fd37 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002dee:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002df2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df4:	2301      	movs	r3, #1
 8002df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	4619      	mov	r1, r3
 8002e06:	4806      	ldr	r0, [pc, #24]	; (8002e20 <_ZL12MX_GPIO_Initv+0x194>)
 8002e08:	f000 fd28 	bl	800385c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e0c:	bf00      	nop
 8002e0e:	3730      	adds	r7, #48	; 0x30
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020c00 	.word	0x40020c00
 8002e24:	40020000 	.word	0x40020000

08002e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e2c:	b672      	cpsid	i
}
 8002e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <Error_Handler+0x8>
	...

08002e34 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d107      	bne.n	8002e54 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d102      	bne.n	8002e54 <_Z41__static_initialization_and_destruction_0ii+0x20>
Adafruit_ICM20948 icm;
 8002e4e:	4809      	ldr	r0, [pc, #36]	; (8002e74 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002e50:	f7fe f9d4 	bl	80011fc <_ZN17Adafruit_ICM20948C1Ev>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d102      	bne.n	8002e6a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002e64:	4803      	ldr	r0, [pc, #12]	; (8002e74 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002e66:	f7ff fcbf 	bl	80027e8 <_ZN17Adafruit_ICM20948D1Ev>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000230 	.word	0x20000230

08002e78 <_GLOBAL__sub_I_hi2c1>:
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e80:	2001      	movs	r0, #1
 8002e82:	f7ff ffd7 	bl	8002e34 <_Z41__static_initialization_and_destruction_0ii>
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <_GLOBAL__sub_D_hi2c1>:
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7ff ffcf 	bl	8002e34 <_Z41__static_initialization_and_destruction_0ii>
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	4a0f      	ldr	r2, [pc, #60]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eac:	6453      	str	r3, [r2, #68]	; 0x44
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a08      	ldr	r2, [pc, #32]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_MspInit+0x4c>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ed6:	2007      	movs	r0, #7
 8002ed8:	f000 fbec 	bl	80036b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40023800 	.word	0x40023800

08002ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <HAL_I2C_MspInit+0x84>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d12c      	bne.n	8002f64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <HAL_I2C_MspInit+0x88>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <HAL_I2C_MspInit+0x88>)
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <HAL_I2C_MspInit+0x88>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002f26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f2c:	2312      	movs	r3, #18
 8002f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f30:	2301      	movs	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f34:	2300      	movs	r3, #0
 8002f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f38:	2304      	movs	r3, #4
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	4619      	mov	r1, r3
 8002f42:	480c      	ldr	r0, [pc, #48]	; (8002f74 <HAL_I2C_MspInit+0x8c>)
 8002f44:	f000 fc8a 	bl	800385c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_I2C_MspInit+0x88>)
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	4a07      	ldr	r2, [pc, #28]	; (8002f70 <HAL_I2C_MspInit+0x88>)
 8002f52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f56:	6413      	str	r3, [r2, #64]	; 0x40
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_I2C_MspInit+0x88>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f64:	bf00      	nop
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40005400 	.word	0x40005400
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40020400 	.word	0x40020400

08002f78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08e      	sub	sp, #56	; 0x38
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a59      	ldr	r2, [pc, #356]	; (80030fc <HAL_I2S_MspInit+0x184>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d15b      	bne.n	8003052 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	623b      	str	r3, [r7, #32]
 8002f9e:	4b58      	ldr	r3, [pc, #352]	; (8003100 <HAL_I2S_MspInit+0x188>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a57      	ldr	r2, [pc, #348]	; (8003100 <HAL_I2S_MspInit+0x188>)
 8002fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002faa:	4b55      	ldr	r3, [pc, #340]	; (8003100 <HAL_I2S_MspInit+0x188>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb2:	623b      	str	r3, [r7, #32]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	4b51      	ldr	r3, [pc, #324]	; (8003100 <HAL_I2S_MspInit+0x188>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4a50      	ldr	r2, [pc, #320]	; (8003100 <HAL_I2S_MspInit+0x188>)
 8002fc0:	f043 0304 	orr.w	r3, r3, #4
 8002fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc6:	4b4e      	ldr	r3, [pc, #312]	; (8003100 <HAL_I2S_MspInit+0x188>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <HAL_I2S_MspInit+0x188>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a49      	ldr	r2, [pc, #292]	; (8003100 <HAL_I2S_MspInit+0x188>)
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b47      	ldr	r3, [pc, #284]	; (8003100 <HAL_I2S_MspInit+0x188>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]
 8002fec:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fee:	2304      	movs	r3, #4
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8002ffe:	2306      	movs	r3, #6
 8003000:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003006:	4619      	mov	r1, r3
 8003008:	483e      	ldr	r0, [pc, #248]	; (8003104 <HAL_I2S_MspInit+0x18c>)
 800300a:	f000 fc27 	bl	800385c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800300e:	2308      	movs	r3, #8
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800301e:	2305      	movs	r3, #5
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003026:	4619      	mov	r1, r3
 8003028:	4836      	ldr	r0, [pc, #216]	; (8003104 <HAL_I2S_MspInit+0x18c>)
 800302a:	f000 fc17 	bl	800385c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800302e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2300      	movs	r3, #0
 800303e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003040:	2305      	movs	r3, #5
 8003042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003048:	4619      	mov	r1, r3
 800304a:	482f      	ldr	r0, [pc, #188]	; (8003108 <HAL_I2S_MspInit+0x190>)
 800304c:	f000 fc06 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003050:	e04f      	b.n	80030f2 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2d      	ldr	r2, [pc, #180]	; (800310c <HAL_I2S_MspInit+0x194>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d14a      	bne.n	80030f2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	4b27      	ldr	r3, [pc, #156]	; (8003100 <HAL_I2S_MspInit+0x188>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	4a26      	ldr	r2, [pc, #152]	; (8003100 <HAL_I2S_MspInit+0x188>)
 8003066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800306a:	6413      	str	r3, [r2, #64]	; 0x40
 800306c:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_I2S_MspInit+0x188>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	4b20      	ldr	r3, [pc, #128]	; (8003100 <HAL_I2S_MspInit+0x188>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	4a1f      	ldr	r2, [pc, #124]	; (8003100 <HAL_I2S_MspInit+0x188>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6313      	str	r3, [r2, #48]	; 0x30
 8003088:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HAL_I2S_MspInit+0x188>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <HAL_I2S_MspInit+0x188>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	4a18      	ldr	r2, [pc, #96]	; (8003100 <HAL_I2S_MspInit+0x188>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	6313      	str	r3, [r2, #48]	; 0x30
 80030a4:	4b16      	ldr	r3, [pc, #88]	; (8003100 <HAL_I2S_MspInit+0x188>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80030b0:	2310      	movs	r3, #16
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b4:	2302      	movs	r3, #2
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030bc:	2300      	movs	r3, #0
 80030be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030c0:	2306      	movs	r3, #6
 80030c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80030c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c8:	4619      	mov	r1, r3
 80030ca:	4811      	ldr	r0, [pc, #68]	; (8003110 <HAL_I2S_MspInit+0x198>)
 80030cc:	f000 fbc6 	bl	800385c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80030d0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	2300      	movs	r3, #0
 80030e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030e2:	2306      	movs	r3, #6
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ea:	4619      	mov	r1, r3
 80030ec:	4805      	ldr	r0, [pc, #20]	; (8003104 <HAL_I2S_MspInit+0x18c>)
 80030ee:	f000 fbb5 	bl	800385c <HAL_GPIO_Init>
}
 80030f2:	bf00      	nop
 80030f4:	3738      	adds	r7, #56	; 0x38
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40003800 	.word	0x40003800
 8003100:	40023800 	.word	0x40023800
 8003104:	40020800 	.word	0x40020800
 8003108:	40020400 	.word	0x40020400
 800310c:	40003c00 	.word	0x40003c00
 8003110:	40020000 	.word	0x40020000

08003114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a19      	ldr	r2, [pc, #100]	; (8003198 <HAL_SPI_MspInit+0x84>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d12b      	bne.n	800318e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <HAL_SPI_MspInit+0x88>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	4a17      	ldr	r2, [pc, #92]	; (800319c <HAL_SPI_MspInit+0x88>)
 8003140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003144:	6453      	str	r3, [r2, #68]	; 0x44
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <HAL_SPI_MspInit+0x88>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_SPI_MspInit+0x88>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a10      	ldr	r2, [pc, #64]	; (800319c <HAL_SPI_MspInit+0x88>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b0e      	ldr	r3, [pc, #56]	; (800319c <HAL_SPI_MspInit+0x88>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800316e:	23e0      	movs	r3, #224	; 0xe0
 8003170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317a:	2303      	movs	r3, #3
 800317c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800317e:	2305      	movs	r3, #5
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	4805      	ldr	r0, [pc, #20]	; (80031a0 <HAL_SPI_MspInit+0x8c>)
 800318a:	f000 fb67 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800318e:	bf00      	nop
 8003190:	3728      	adds	r7, #40	; 0x28
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40013000 	.word	0x40013000
 800319c:	40023800 	.word	0x40023800
 80031a0:	40020000 	.word	0x40020000

080031a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	; 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <HAL_UART_MspInit+0x94>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d133      	bne.n	800322e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <HAL_UART_MspInit+0x98>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	4a1b      	ldr	r2, [pc, #108]	; (800323c <HAL_UART_MspInit+0x98>)
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d4:	6413      	str	r3, [r2, #64]	; 0x40
 80031d6:	4b19      	ldr	r3, [pc, #100]	; (800323c <HAL_UART_MspInit+0x98>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_UART_MspInit+0x98>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a14      	ldr	r2, [pc, #80]	; (800323c <HAL_UART_MspInit+0x98>)
 80031ec:	f043 0308 	orr.w	r3, r3, #8
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_UART_MspInit+0x98>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80031fe:	2360      	movs	r3, #96	; 0x60
 8003200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320a:	2303      	movs	r3, #3
 800320c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800320e:	2307      	movs	r3, #7
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003212:	f107 0314 	add.w	r3, r7, #20
 8003216:	4619      	mov	r1, r3
 8003218:	4809      	ldr	r0, [pc, #36]	; (8003240 <HAL_UART_MspInit+0x9c>)
 800321a:	f000 fb1f 	bl	800385c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	2100      	movs	r1, #0
 8003222:	2026      	movs	r0, #38	; 0x26
 8003224:	f000 fa51 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003228:	2026      	movs	r0, #38	; 0x26
 800322a:	f000 fa6a 	bl	8003702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800322e:	bf00      	nop
 8003230:	3728      	adds	r7, #40	; 0x28
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40004400 	.word	0x40004400
 800323c:	40023800 	.word	0x40023800
 8003240:	40020c00 	.word	0x40020c00

08003244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003248:	e7fe      	b.n	8003248 <NMI_Handler+0x4>

0800324a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800324e:	e7fe      	b.n	800324e <HardFault_Handler+0x4>

08003250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003254:	e7fe      	b.n	8003254 <MemManage_Handler+0x4>

08003256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003256:	b480      	push	{r7}
 8003258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800325a:	e7fe      	b.n	800325a <BusFault_Handler+0x4>

0800325c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003260:	e7fe      	b.n	8003260 <UsageFault_Handler+0x4>

08003262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003290:	f000 f8fc 	bl	800348c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}

08003298 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800329c:	4802      	ldr	r0, [pc, #8]	; (80032a8 <USART2_IRQHandler+0x10>)
 800329e:	f003 fd27 	bl	8006cf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200001ec 	.word	0x200001ec

080032ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80032b0:	4802      	ldr	r0, [pc, #8]	; (80032bc <OTG_FS_IRQHandler+0x10>)
 80032b2:	f000 fedb 	bl	800406c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000674 	.word	0x20000674

080032c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  return 1;
 80032c4:	2301      	movs	r3, #1
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <_kill>:

int _kill(int pid, int sig)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032da:	f007 fee5 	bl	800b0a8 <__errno>
 80032de:	4603      	mov	r3, r0
 80032e0:	2216      	movs	r2, #22
 80032e2:	601a      	str	r2, [r3, #0]
  return -1;
 80032e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_exit>:

void _exit (int status)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032f8:	f04f 31ff 	mov.w	r1, #4294967295
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ffe7 	bl	80032d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003302:	e7fe      	b.n	8003302 <_exit+0x12>

08003304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <_sbrk+0x5c>)
 800330e:	4b15      	ldr	r3, [pc, #84]	; (8003364 <_sbrk+0x60>)
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <_sbrk+0x64>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <_sbrk+0x64>)
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <_sbrk+0x68>)
 8003324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <_sbrk+0x64>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	429a      	cmp	r2, r3
 8003332:	d207      	bcs.n	8003344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003334:	f007 feb8 	bl	800b0a8 <__errno>
 8003338:	4603      	mov	r3, r0
 800333a:	220c      	movs	r2, #12
 800333c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	e009      	b.n	8003358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <_sbrk+0x64>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <_sbrk+0x64>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <_sbrk+0x64>)
 8003354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003356:	68fb      	ldr	r3, [r7, #12]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	20020000 	.word	0x20020000
 8003364:	00000400 	.word	0x00000400
 8003368:	20000290 	.word	0x20000290
 800336c:	20000990 	.word	0x20000990

08003370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <SystemInit+0x20>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <SystemInit+0x20>)
 800337c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003398:	480d      	ldr	r0, [pc, #52]	; (80033d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800339a:	490e      	ldr	r1, [pc, #56]	; (80033d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800339c:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800339e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033a0:	e002      	b.n	80033a8 <LoopCopyDataInit>

080033a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033a6:	3304      	adds	r3, #4

080033a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033ac:	d3f9      	bcc.n	80033a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ae:	4a0b      	ldr	r2, [pc, #44]	; (80033dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033b0:	4c0b      	ldr	r4, [pc, #44]	; (80033e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033b4:	e001      	b.n	80033ba <LoopFillZerobss>

080033b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033b8:	3204      	adds	r2, #4

080033ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033bc:	d3fb      	bcc.n	80033b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033be:	f7ff ffd7 	bl	8003370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033c2:	f007 fe77 	bl	800b0b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033c6:	f7ff fa23 	bl	8002810 <main>
  bx  lr    
 80033ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80033d8:	0800b4a8 	.word	0x0800b4a8
  ldr r2, =_sbss
 80033dc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80033e0:	2000098c 	.word	0x2000098c

080033e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033e4:	e7fe      	b.n	80033e4 <ADC_IRQHandler>
	...

080033e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033ec:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <HAL_Init+0x40>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0d      	ldr	r2, [pc, #52]	; (8003428 <HAL_Init+0x40>)
 80033f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_Init+0x40>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <HAL_Init+0x40>)
 80033fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003402:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_Init+0x40>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a07      	ldr	r2, [pc, #28]	; (8003428 <HAL_Init+0x40>)
 800340a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003410:	2003      	movs	r0, #3
 8003412:	f000 f94f 	bl	80036b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003416:	2000      	movs	r0, #0
 8003418:	f000 f808 	bl	800342c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800341c:	f7ff fd3c 	bl	8002e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40023c00 	.word	0x40023c00

0800342c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_InitTick+0x54>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_InitTick+0x58>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4619      	mov	r1, r3
 800343e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003442:	fbb3 f3f1 	udiv	r3, r3, r1
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f967 	bl	800371e <HAL_SYSTICK_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e00e      	b.n	8003478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b0f      	cmp	r3, #15
 800345e:	d80a      	bhi.n	8003476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003460:	2200      	movs	r2, #0
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	f000 f92f 	bl	80036ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800346c:	4a06      	ldr	r2, [pc, #24]	; (8003488 <HAL_InitTick+0x5c>)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e000      	b.n	8003478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000000 	.word	0x20000000
 8003484:	20000008 	.word	0x20000008
 8003488:	20000004 	.word	0x20000004

0800348c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_IncTick+0x20>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_IncTick+0x24>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4413      	add	r3, r2
 800349c:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <HAL_IncTick+0x24>)
 800349e:	6013      	str	r3, [r2, #0]
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000008 	.word	0x20000008
 80034b0:	20000294 	.word	0x20000294

080034b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return uwTick;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_GetTick+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000294 	.word	0x20000294

080034cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034d4:	f7ff ffee 	bl	80034b4 <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d005      	beq.n	80034f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_Delay+0x44>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034f2:	bf00      	nop
 80034f4:	f7ff ffde 	bl	80034b4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	429a      	cmp	r2, r3
 8003502:	d8f7      	bhi.n	80034f4 <HAL_Delay+0x28>
  {
  }
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000008 	.word	0x20000008

08003514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003530:	4013      	ands	r3, r2
 8003532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800353c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003546:	4a04      	ldr	r2, [pc, #16]	; (8003558 <__NVIC_SetPriorityGrouping+0x44>)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	60d3      	str	r3, [r2, #12]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <__NVIC_GetPriorityGrouping+0x18>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0307 	and.w	r3, r3, #7
}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	2b00      	cmp	r3, #0
 8003588:	db0b      	blt.n	80035a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	f003 021f 	and.w	r2, r3, #31
 8003590:	4907      	ldr	r1, [pc, #28]	; (80035b0 <__NVIC_EnableIRQ+0x38>)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	2001      	movs	r0, #1
 800359a:	fa00 f202 	lsl.w	r2, r0, r2
 800359e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000e100 	.word	0xe000e100

080035b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	6039      	str	r1, [r7, #0]
 80035be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	db0a      	blt.n	80035de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	490c      	ldr	r1, [pc, #48]	; (8003600 <__NVIC_SetPriority+0x4c>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	440b      	add	r3, r1
 80035d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035dc:	e00a      	b.n	80035f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4908      	ldr	r1, [pc, #32]	; (8003604 <__NVIC_SetPriority+0x50>)
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	3b04      	subs	r3, #4
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	440b      	add	r3, r1
 80035f2:	761a      	strb	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000e100 	.word	0xe000e100
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f1c3 0307 	rsb	r3, r3, #7
 8003622:	2b04      	cmp	r3, #4
 8003624:	bf28      	it	cs
 8003626:	2304      	movcs	r3, #4
 8003628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3304      	adds	r3, #4
 800362e:	2b06      	cmp	r3, #6
 8003630:	d902      	bls.n	8003638 <NVIC_EncodePriority+0x30>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3b03      	subs	r3, #3
 8003636:	e000      	b.n	800363a <NVIC_EncodePriority+0x32>
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	401a      	ands	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003650:	f04f 31ff 	mov.w	r1, #4294967295
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	43d9      	mvns	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003660:	4313      	orrs	r3, r2
         );
}
 8003662:	4618      	mov	r0, r3
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003680:	d301      	bcc.n	8003686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003682:	2301      	movs	r3, #1
 8003684:	e00f      	b.n	80036a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <SysTick_Config+0x40>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800368e:	210f      	movs	r1, #15
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	f7ff ff8e 	bl	80035b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <SysTick_Config+0x40>)
 800369a:	2200      	movs	r2, #0
 800369c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <SysTick_Config+0x40>)
 80036a0:	2207      	movs	r2, #7
 80036a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	e000e010 	.word	0xe000e010

080036b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff29 	bl	8003514 <__NVIC_SetPriorityGrouping>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b086      	sub	sp, #24
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036dc:	f7ff ff3e 	bl	800355c <__NVIC_GetPriorityGrouping>
 80036e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	6978      	ldr	r0, [r7, #20]
 80036e8:	f7ff ff8e 	bl	8003608 <NVIC_EncodePriority>
 80036ec:	4602      	mov	r2, r0
 80036ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff5d 	bl	80035b4 <__NVIC_SetPriority>
}
 80036fa:	bf00      	nop
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	4603      	mov	r3, r0
 800370a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800370c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff31 	bl	8003578 <__NVIC_EnableIRQ>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ffa2 	bl	8003670 <SysTick_Config>
 800372c:	4603      	mov	r3, r0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003744:	f7ff feb6 	bl	80034b4 <HAL_GetTick>
 8003748:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d008      	beq.n	8003768 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e052      	b.n	800380e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0216 	bic.w	r2, r2, #22
 8003776:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003786:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <HAL_DMA_Abort+0x62>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0208 	bic.w	r2, r2, #8
 80037a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b8:	e013      	b.n	80037e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ba:	f7ff fe7b 	bl	80034b4 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d90c      	bls.n	80037e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2203      	movs	r2, #3
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e015      	b.n	800380e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e4      	bne.n	80037ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	223f      	movs	r2, #63	; 0x3f
 80037f6:	409a      	lsls	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d004      	beq.n	8003834 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2280      	movs	r2, #128	; 0x80
 800382e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e00c      	b.n	800384e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2205      	movs	r2, #5
 8003838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	e159      	b.n	8003b2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003878:	2201      	movs	r2, #1
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	429a      	cmp	r2, r3
 8003892:	f040 8148 	bne.w	8003b26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d005      	beq.n	80038ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d130      	bne.n	8003910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	2203      	movs	r2, #3
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e4:	2201      	movs	r2, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 0201 	and.w	r2, r3, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b03      	cmp	r3, #3
 800391a:	d017      	beq.n	800394c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	2203      	movs	r2, #3
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d123      	bne.n	80039a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	08da      	lsrs	r2, r3, #3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3208      	adds	r2, #8
 8003960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	220f      	movs	r2, #15
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	08da      	lsrs	r2, r3, #3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3208      	adds	r2, #8
 800399a:	69b9      	ldr	r1, [r7, #24]
 800399c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	2203      	movs	r2, #3
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0203 	and.w	r2, r3, #3
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80a2 	beq.w	8003b26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	4b57      	ldr	r3, [pc, #348]	; (8003b44 <HAL_GPIO_Init+0x2e8>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	4a56      	ldr	r2, [pc, #344]	; (8003b44 <HAL_GPIO_Init+0x2e8>)
 80039ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039f0:	6453      	str	r3, [r2, #68]	; 0x44
 80039f2:	4b54      	ldr	r3, [pc, #336]	; (8003b44 <HAL_GPIO_Init+0x2e8>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039fe:	4a52      	ldr	r2, [pc, #328]	; (8003b48 <HAL_GPIO_Init+0x2ec>)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	3302      	adds	r3, #2
 8003a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	220f      	movs	r2, #15
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a49      	ldr	r2, [pc, #292]	; (8003b4c <HAL_GPIO_Init+0x2f0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d019      	beq.n	8003a5e <HAL_GPIO_Init+0x202>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a48      	ldr	r2, [pc, #288]	; (8003b50 <HAL_GPIO_Init+0x2f4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_GPIO_Init+0x1fe>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a47      	ldr	r2, [pc, #284]	; (8003b54 <HAL_GPIO_Init+0x2f8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00d      	beq.n	8003a56 <HAL_GPIO_Init+0x1fa>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a46      	ldr	r2, [pc, #280]	; (8003b58 <HAL_GPIO_Init+0x2fc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <HAL_GPIO_Init+0x1f6>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a45      	ldr	r2, [pc, #276]	; (8003b5c <HAL_GPIO_Init+0x300>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_GPIO_Init+0x1f2>
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	e008      	b.n	8003a60 <HAL_GPIO_Init+0x204>
 8003a4e:	2307      	movs	r3, #7
 8003a50:	e006      	b.n	8003a60 <HAL_GPIO_Init+0x204>
 8003a52:	2303      	movs	r3, #3
 8003a54:	e004      	b.n	8003a60 <HAL_GPIO_Init+0x204>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e002      	b.n	8003a60 <HAL_GPIO_Init+0x204>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <HAL_GPIO_Init+0x204>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	f002 0203 	and.w	r2, r2, #3
 8003a66:	0092      	lsls	r2, r2, #2
 8003a68:	4093      	lsls	r3, r2
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a70:	4935      	ldr	r1, [pc, #212]	; (8003b48 <HAL_GPIO_Init+0x2ec>)
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	089b      	lsrs	r3, r3, #2
 8003a76:	3302      	adds	r3, #2
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a7e:	4b38      	ldr	r3, [pc, #224]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aa2:	4a2f      	ldr	r2, [pc, #188]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003acc:	4a24      	ldr	r2, [pc, #144]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ad2:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003af6:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003afc:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b20:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <HAL_GPIO_Init+0x304>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b0f      	cmp	r3, #15
 8003b30:	f67f aea2 	bls.w	8003878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	3724      	adds	r7, #36	; 0x24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40013800 	.word	0x40013800
 8003b4c:	40020000 	.word	0x40020000
 8003b50:	40020400 	.word	0x40020400
 8003b54:	40020800 	.word	0x40020800
 8003b58:	40020c00 	.word	0x40020c00
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40013c00 	.word	0x40013c00

08003b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
 8003b70:	4613      	mov	r3, r2
 8003b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b74:	787b      	ldrb	r3, [r7, #1]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b80:	e003      	b.n	8003b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	041a      	lsls	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	619a      	str	r2, [r3, #24]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b98:	b08f      	sub	sp, #60	; 0x3c
 8003b9a:	af0a      	add	r7, sp, #40	; 0x28
 8003b9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e054      	b.n	8003c52 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f006 ff8c 	bl	800aae0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2203      	movs	r2, #3
 8003bcc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d102      	bne.n	8003be2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 ffba 	bl	8007b60 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	687e      	ldr	r6, [r7, #4]
 8003bf4:	466d      	mov	r5, sp
 8003bf6:	f106 0410 	add.w	r4, r6, #16
 8003bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c06:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c0a:	1d33      	adds	r3, r6, #4
 8003c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c0e:	6838      	ldr	r0, [r7, #0]
 8003c10:	f003 ff34 	bl	8007a7c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f003 ffb1 	bl	8007b82 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	687e      	ldr	r6, [r7, #4]
 8003c28:	466d      	mov	r5, sp
 8003c2a:	f106 0410 	add.w	r4, r6, #16
 8003c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c3e:	1d33      	adds	r3, r6, #4
 8003c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c42:	6838      	ldr	r0, [r7, #0]
 8003c44:	f004 f93a 	bl	8007ebc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c5a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003c5a:	b590      	push	{r4, r7, lr}
 8003c5c:	b089      	sub	sp, #36	; 0x24
 8003c5e:	af04      	add	r7, sp, #16
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	4608      	mov	r0, r1
 8003c64:	4611      	mov	r1, r2
 8003c66:	461a      	mov	r2, r3
 8003c68:	4603      	mov	r3, r0
 8003c6a:	70fb      	strb	r3, [r7, #3]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	70bb      	strb	r3, [r7, #2]
 8003c70:	4613      	mov	r3, r2
 8003c72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_HCD_HC_Init+0x28>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e076      	b.n	8003d70 <HAL_HCD_HC_Init+0x116>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	212c      	movs	r1, #44	; 0x2c
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	4413      	add	r3, r2
 8003c96:	333d      	adds	r3, #61	; 0x3d
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3338      	adds	r3, #56	; 0x38
 8003caa:	787a      	ldrb	r2, [r7, #1]
 8003cac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3340      	adds	r3, #64	; 0x40
 8003cbc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003cbe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	212c      	movs	r1, #44	; 0x2c
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	3339      	adds	r3, #57	; 0x39
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	212c      	movs	r1, #44	; 0x2c
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	333f      	adds	r3, #63	; 0x3f
 8003ce0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003ce4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	78ba      	ldrb	r2, [r7, #2]
 8003cea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cee:	b2d0      	uxtb	r0, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	212c      	movs	r1, #44	; 0x2c
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	333a      	adds	r3, #58	; 0x3a
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003d00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	da09      	bge.n	8003d1c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	212c      	movs	r1, #44	; 0x2c
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	333b      	adds	r3, #59	; 0x3b
 8003d16:	2201      	movs	r2, #1
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	e008      	b.n	8003d2e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	212c      	movs	r1, #44	; 0x2c
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	333b      	adds	r3, #59	; 0x3b
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	212c      	movs	r1, #44	; 0x2c
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	333c      	adds	r3, #60	; 0x3c
 8003d3c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003d40:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	787c      	ldrb	r4, [r7, #1]
 8003d48:	78ba      	ldrb	r2, [r7, #2]
 8003d4a:	78f9      	ldrb	r1, [r7, #3]
 8003d4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d4e:	9302      	str	r3, [sp, #8]
 8003d50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	4623      	mov	r3, r4
 8003d5e:	f004 fa33 	bl	80081c8 <USB_HC_Init>
 8003d62:	4603      	mov	r3, r0
 8003d64:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd90      	pop	{r4, r7, pc}

08003d78 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_HCD_HC_Halt+0x1e>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e00f      	b.n	8003db6 <HAL_HCD_HC_Halt+0x3e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f004 fc83 	bl	80086b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	4608      	mov	r0, r1
 8003dca:	4611      	mov	r1, r2
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4603      	mov	r3, r0
 8003dd0:	70fb      	strb	r3, [r7, #3]
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	70bb      	strb	r3, [r7, #2]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	212c      	movs	r1, #44	; 0x2c
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	333b      	adds	r3, #59	; 0x3b
 8003de8:	78ba      	ldrb	r2, [r7, #2]
 8003dea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	212c      	movs	r1, #44	; 0x2c
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	333f      	adds	r3, #63	; 0x3f
 8003dfa:	787a      	ldrb	r2, [r7, #1]
 8003dfc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003dfe:	7c3b      	ldrb	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d112      	bne.n	8003e2a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3342      	adds	r3, #66	; 0x42
 8003e12:	2203      	movs	r2, #3
 8003e14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	212c      	movs	r1, #44	; 0x2c
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	4413      	add	r3, r2
 8003e22:	333d      	adds	r3, #61	; 0x3d
 8003e24:	7f3a      	ldrb	r2, [r7, #28]
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	e008      	b.n	8003e3c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	212c      	movs	r1, #44	; 0x2c
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	4413      	add	r3, r2
 8003e36:	3342      	adds	r3, #66	; 0x42
 8003e38:	2202      	movs	r2, #2
 8003e3a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003e3c:	787b      	ldrb	r3, [r7, #1]
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	f200 80c6 	bhi.w	8003fd0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003e44:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e5d 	.word	0x08003e5d
 8003e50:	08003fbd 	.word	0x08003fbd
 8003e54:	08003ec1 	.word	0x08003ec1
 8003e58:	08003f3f 	.word	0x08003f3f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003e5c:	7c3b      	ldrb	r3, [r7, #16]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	f040 80b8 	bne.w	8003fd4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003e64:	78bb      	ldrb	r3, [r7, #2]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f040 80b4 	bne.w	8003fd4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003e6c:	8b3b      	ldrh	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d108      	bne.n	8003e84 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	212c      	movs	r1, #44	; 0x2c
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3355      	adds	r3, #85	; 0x55
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	212c      	movs	r1, #44	; 0x2c
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	4413      	add	r3, r2
 8003e90:	3355      	adds	r3, #85	; 0x55
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3342      	adds	r3, #66	; 0x42
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003eaa:	e093      	b.n	8003fd4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	212c      	movs	r1, #44	; 0x2c
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3342      	adds	r3, #66	; 0x42
 8003eba:	2202      	movs	r2, #2
 8003ebc:	701a      	strb	r2, [r3, #0]
      break;
 8003ebe:	e089      	b.n	8003fd4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ec0:	78bb      	ldrb	r3, [r7, #2]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11d      	bne.n	8003f02 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	212c      	movs	r1, #44	; 0x2c
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3355      	adds	r3, #85	; 0x55
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	212c      	movs	r1, #44	; 0x2c
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3342      	adds	r3, #66	; 0x42
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003eec:	e073      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	212c      	movs	r1, #44	; 0x2c
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	3342      	adds	r3, #66	; 0x42
 8003efc:	2202      	movs	r2, #2
 8003efe:	701a      	strb	r2, [r3, #0]
      break;
 8003f00:	e069      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3354      	adds	r3, #84	; 0x54
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	3342      	adds	r3, #66	; 0x42
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
      break;
 8003f28:	e055      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	212c      	movs	r1, #44	; 0x2c
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	3342      	adds	r3, #66	; 0x42
 8003f38:	2202      	movs	r2, #2
 8003f3a:	701a      	strb	r2, [r3, #0]
      break;
 8003f3c:	e04b      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003f3e:	78bb      	ldrb	r3, [r7, #2]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d11d      	bne.n	8003f80 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	212c      	movs	r1, #44	; 0x2c
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	4413      	add	r3, r2
 8003f50:	3355      	adds	r3, #85	; 0x55
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d109      	bne.n	8003f6c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	212c      	movs	r1, #44	; 0x2c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	3342      	adds	r3, #66	; 0x42
 8003f66:	2200      	movs	r2, #0
 8003f68:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003f6a:	e034      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	212c      	movs	r1, #44	; 0x2c
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	4413      	add	r3, r2
 8003f78:	3342      	adds	r3, #66	; 0x42
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	701a      	strb	r2, [r3, #0]
      break;
 8003f7e:	e02a      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	212c      	movs	r1, #44	; 0x2c
 8003f86:	fb01 f303 	mul.w	r3, r1, r3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3354      	adds	r3, #84	; 0x54
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	212c      	movs	r1, #44	; 0x2c
 8003f9a:	fb01 f303 	mul.w	r3, r1, r3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3342      	adds	r3, #66	; 0x42
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	701a      	strb	r2, [r3, #0]
      break;
 8003fa6:	e016      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	212c      	movs	r1, #44	; 0x2c
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3342      	adds	r3, #66	; 0x42
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	701a      	strb	r2, [r3, #0]
      break;
 8003fba:	e00c      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	212c      	movs	r1, #44	; 0x2c
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3342      	adds	r3, #66	; 0x42
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
      break;
 8003fce:	e002      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003fd4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	212c      	movs	r1, #44	; 0x2c
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3344      	adds	r3, #68	; 0x44
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	8b3a      	ldrh	r2, [r7, #24]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	202c      	movs	r0, #44	; 0x2c
 8003ff0:	fb00 f303 	mul.w	r3, r0, r3
 8003ff4:	440b      	add	r3, r1
 8003ff6:	334c      	adds	r3, #76	; 0x4c
 8003ff8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	3360      	adds	r3, #96	; 0x60
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	212c      	movs	r1, #44	; 0x2c
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	4413      	add	r3, r2
 8004018:	3350      	adds	r3, #80	; 0x50
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	212c      	movs	r1, #44	; 0x2c
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	4413      	add	r3, r2
 800402a:	3339      	adds	r3, #57	; 0x39
 800402c:	78fa      	ldrb	r2, [r7, #3]
 800402e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	212c      	movs	r1, #44	; 0x2c
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	4413      	add	r3, r2
 800403c:	3361      	adds	r3, #97	; 0x61
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	222c      	movs	r2, #44	; 0x2c
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	3338      	adds	r3, #56	; 0x38
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	18d1      	adds	r1, r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	f004 f9d6 	bl	800840c <USB_HC_StartXfer>
 8004060:	4603      	mov	r3, r0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop

0800406c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f003 fed7 	bl	8007e36 <USB_GetMode>
 8004088:	4603      	mov	r3, r0
 800408a:	2b01      	cmp	r3, #1
 800408c:	f040 80f6 	bne.w	800427c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f003 febb 	bl	8007e10 <USB_ReadInterrupts>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80ec 	beq.w	800427a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f003 feb2 	bl	8007e10 <USB_ReadInterrupts>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040b6:	d104      	bne.n	80040c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80040c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 fea2 	bl	8007e10 <USB_ReadInterrupts>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d6:	d104      	bne.n	80040e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f003 fe92 	bl	8007e10 <USB_ReadInterrupts>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040f6:	d104      	bne.n	8004102 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004100:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f003 fe82 	bl	8007e10 <USB_ReadInterrupts>
 800410c:	4603      	mov	r3, r0
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b02      	cmp	r3, #2
 8004114:	d103      	bne.n	800411e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2202      	movs	r2, #2
 800411c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f003 fe74 	bl	8007e10 <USB_ReadInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800412e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004132:	d11c      	bne.n	800416e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800413c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10f      	bne.n	800416e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800414e:	2110      	movs	r1, #16
 8004150:	6938      	ldr	r0, [r7, #16]
 8004152:	f003 fd63 	bl	8007c1c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004156:	6938      	ldr	r0, [r7, #16]
 8004158:	f003 fd94 	bl	8007c84 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2101      	movs	r1, #1
 8004162:	4618      	mov	r0, r3
 8004164:	f003 ff6a 	bl	800803c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f006 fd37 	bl	800abdc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f003 fe4c 	bl	8007e10 <USB_ReadInterrupts>
 8004178:	4603      	mov	r3, r0
 800417a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800417e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004182:	d102      	bne.n	800418a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f001 f89e 	bl	80052c6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f003 fe3e 	bl	8007e10 <USB_ReadInterrupts>
 8004194:	4603      	mov	r3, r0
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b08      	cmp	r3, #8
 800419c:	d106      	bne.n	80041ac <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f006 fd00 	bl	800aba4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2208      	movs	r2, #8
 80041aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f003 fe2d 	bl	8007e10 <USB_ReadInterrupts>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d101      	bne.n	80041c4 <HAL_HCD_IRQHandler+0x158>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <HAL_HCD_IRQHandler+0x15a>
 80041c4:	2300      	movs	r3, #0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d012      	beq.n	80041f0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0210 	bic.w	r2, r2, #16
 80041d8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 ffa1 	bl	8005122 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0210 	orr.w	r2, r2, #16
 80041ee:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f003 fe0b 	bl	8007e10 <USB_ReadInterrupts>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004200:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004204:	d13a      	bne.n	800427c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f004 fa40 	bl	8008690 <USB_HC_ReadInterrupt>
 8004210:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e025      	b.n	8004264 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d018      	beq.n	800425e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800423e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004242:	d106      	bne.n	8004252 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	4619      	mov	r1, r3
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f8ab 	bl	80043a6 <HCD_HC_IN_IRQHandler>
 8004250:	e005      	b.n	800425e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fbf9 	bl	8004a50 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	3301      	adds	r3, #1
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	429a      	cmp	r2, r3
 800426c:	d3d4      	bcc.n	8004218 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004276:	615a      	str	r2, [r3, #20]
 8004278:	e000      	b.n	800427c <HAL_HCD_IRQHandler+0x210>
      return;
 800427a:	bf00      	nop
    }
  }
}
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_HCD_Start+0x16>
 8004294:	2302      	movs	r3, #2
 8004296:	e013      	b.n	80042c0 <HAL_HCD_Start+0x3e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f003 ff2c 	bl	8008104 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f003 fc44 	bl	8007b3e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_HCD_Stop+0x16>
 80042da:	2302      	movs	r3, #2
 80042dc:	e00d      	b.n	80042fa <HAL_HCD_Stop+0x32>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f004 fb1a 	bl	8008924 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f003 fece 	bl	80080b0 <USB_ResetPort>
 8004314:	4603      	mov	r3, r0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	212c      	movs	r1, #44	; 0x2c
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	4413      	add	r3, r2
 8004336:	3360      	adds	r3, #96	; 0x60
 8004338:	781b      	ldrb	r3, [r3, #0]
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	460b      	mov	r3, r1
 8004350:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	212c      	movs	r1, #44	; 0x2c
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	4413      	add	r3, r2
 800435e:	3350      	adds	r3, #80	; 0x50
 8004360:	681b      	ldr	r3, [r3, #0]
}
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f003 ff12 	bl	80081a4 <USB_GetCurrentFrame>
 8004380:	4603      	mov	r3, r0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f003 feed 	bl	8008176 <USB_GetHostSpeed>
 800439c:	4603      	mov	r3, r0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b086      	sub	sp, #24
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	460b      	mov	r3, r1
 80043b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d11a      	bne.n	800440c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	461a      	mov	r2, r3
 80043e4:	2304      	movs	r3, #4
 80043e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	212c      	movs	r1, #44	; 0x2c
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	3361      	adds	r3, #97	; 0x61
 80043f6:	2206      	movs	r2, #6
 80043f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	4611      	mov	r1, r2
 8004404:	4618      	mov	r0, r3
 8004406:	f004 f954 	bl	80086b2 <USB_HC_Halt>
 800440a:	e0af      	b.n	800456c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004422:	d11b      	bne.n	800445c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004430:	461a      	mov	r2, r3
 8004432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004436:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	212c      	movs	r1, #44	; 0x2c
 800443e:	fb01 f303 	mul.w	r3, r1, r3
 8004442:	4413      	add	r3, r2
 8004444:	3361      	adds	r3, #97	; 0x61
 8004446:	2207      	movs	r2, #7
 8004448:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f004 f92c 	bl	80086b2 <USB_HC_Halt>
 800445a:	e087      	b.n	800456c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b20      	cmp	r3, #32
 8004470:	d109      	bne.n	8004486 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4413      	add	r3, r2
 800447a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447e:	461a      	mov	r2, r3
 8004480:	2320      	movs	r3, #32
 8004482:	6093      	str	r3, [r2, #8]
 8004484:	e072      	b.n	800456c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4413      	add	r3, r2
 800448e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b08      	cmp	r3, #8
 800449a:	d11a      	bne.n	80044d2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a8:	461a      	mov	r2, r3
 80044aa:	2308      	movs	r3, #8
 80044ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	212c      	movs	r1, #44	; 0x2c
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	3361      	adds	r3, #97	; 0x61
 80044bc:	2205      	movs	r2, #5
 80044be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f004 f8f1 	bl	80086b2 <USB_HC_Halt>
 80044d0:	e04c      	b.n	800456c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e8:	d11b      	bne.n	8004522 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f6:	461a      	mov	r2, r3
 80044f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	212c      	movs	r1, #44	; 0x2c
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	4413      	add	r3, r2
 800450a:	3361      	adds	r3, #97	; 0x61
 800450c:	2208      	movs	r2, #8
 800450e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f004 f8c9 	bl	80086b2 <USB_HC_Halt>
 8004520:	e024      	b.n	800456c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4413      	add	r3, r2
 800452a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d119      	bne.n	800456c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004544:	461a      	mov	r2, r3
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	212c      	movs	r1, #44	; 0x2c
 8004550:	fb01 f303 	mul.w	r3, r1, r3
 8004554:	4413      	add	r3, r2
 8004556:	3361      	adds	r3, #97	; 0x61
 8004558:	2206      	movs	r2, #6
 800455a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	4611      	mov	r1, r2
 8004566:	4618      	mov	r0, r3
 8004568:	f004 f8a3 	bl	80086b2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4413      	add	r3, r2
 8004574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004582:	d112      	bne.n	80045aa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	4611      	mov	r1, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f004 f88f 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a0:	461a      	mov	r2, r3
 80045a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045a6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80045a8:	e24e      	b.n	8004a48 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	f040 80df 	bne.w	8004780 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d019      	beq.n	80045fe <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	212c      	movs	r1, #44	; 0x2c
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	4413      	add	r3, r2
 80045d6:	3348      	adds	r3, #72	; 0x48
 80045d8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	0159      	lsls	r1, r3, #5
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	440b      	add	r3, r1
 80045e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80045ec:	1ad2      	subs	r2, r2, r3
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	202c      	movs	r0, #44	; 0x2c
 80045f4:	fb00 f303 	mul.w	r3, r0, r3
 80045f8:	440b      	add	r3, r1
 80045fa:	3350      	adds	r3, #80	; 0x50
 80045fc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	212c      	movs	r1, #44	; 0x2c
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	4413      	add	r3, r2
 800460a:	3361      	adds	r3, #97	; 0x61
 800460c:	2201      	movs	r2, #1
 800460e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	212c      	movs	r1, #44	; 0x2c
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	4413      	add	r3, r2
 800461c:	335c      	adds	r3, #92	; 0x5c
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800462e:	461a      	mov	r2, r3
 8004630:	2301      	movs	r3, #1
 8004632:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	212c      	movs	r1, #44	; 0x2c
 800463a:	fb01 f303 	mul.w	r3, r1, r3
 800463e:	4413      	add	r3, r2
 8004640:	333f      	adds	r3, #63	; 0x3f
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	212c      	movs	r1, #44	; 0x2c
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	4413      	add	r3, r2
 8004654:	333f      	adds	r3, #63	; 0x3f
 8004656:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004658:	2b02      	cmp	r3, #2
 800465a:	d111      	bne.n	8004680 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f004 f823 	bl	80086b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4413      	add	r3, r2
 8004674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004678:	461a      	mov	r2, r3
 800467a:	2310      	movs	r3, #16
 800467c:	6093      	str	r3, [r2, #8]
 800467e:	e03a      	b.n	80046f6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	212c      	movs	r1, #44	; 0x2c
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	333f      	adds	r3, #63	; 0x3f
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b03      	cmp	r3, #3
 8004692:	d009      	beq.n	80046a8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	212c      	movs	r1, #44	; 0x2c
 800469a:	fb01 f303 	mul.w	r3, r1, r3
 800469e:	4413      	add	r3, r2
 80046a0:	333f      	adds	r3, #63	; 0x3f
 80046a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d126      	bne.n	80046f6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046c6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	3360      	adds	r3, #96	; 0x60
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	b2d9      	uxtb	r1, r3
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	202c      	movs	r0, #44	; 0x2c
 80046e4:	fb00 f303 	mul.w	r3, r0, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	3360      	adds	r3, #96	; 0x60
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f006 fa81 	bl	800abf8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d12b      	bne.n	8004756 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	3348      	adds	r3, #72	; 0x48
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	202c      	movs	r0, #44	; 0x2c
 8004714:	fb00 f202 	mul.w	r2, r0, r2
 8004718:	440a      	add	r2, r1
 800471a:	3240      	adds	r2, #64	; 0x40
 800471c:	8812      	ldrh	r2, [r2, #0]
 800471e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 818e 	beq.w	8004a48 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	212c      	movs	r1, #44	; 0x2c
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	3354      	adds	r3, #84	; 0x54
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	f083 0301 	eor.w	r3, r3, #1
 8004740:	b2d8      	uxtb	r0, r3
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	212c      	movs	r1, #44	; 0x2c
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	4413      	add	r3, r2
 800474e:	3354      	adds	r3, #84	; 0x54
 8004750:	4602      	mov	r2, r0
 8004752:	701a      	strb	r2, [r3, #0]
}
 8004754:	e178      	b.n	8004a48 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	212c      	movs	r1, #44	; 0x2c
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	4413      	add	r3, r2
 8004762:	3354      	adds	r3, #84	; 0x54
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	f083 0301 	eor.w	r3, r3, #1
 800476a:	b2d8      	uxtb	r0, r3
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	212c      	movs	r1, #44	; 0x2c
 8004772:	fb01 f303 	mul.w	r3, r1, r3
 8004776:	4413      	add	r3, r2
 8004778:	3354      	adds	r3, #84	; 0x54
 800477a:	4602      	mov	r2, r0
 800477c:	701a      	strb	r2, [r3, #0]
}
 800477e:	e163      	b.n	8004a48 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4413      	add	r3, r2
 8004788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	f040 80f6 	bne.w	8004984 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	212c      	movs	r1, #44	; 0x2c
 800479e:	fb01 f303 	mul.w	r3, r1, r3
 80047a2:	4413      	add	r3, r2
 80047a4:	3361      	adds	r3, #97	; 0x61
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d109      	bne.n	80047c0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	212c      	movs	r1, #44	; 0x2c
 80047b2:	fb01 f303 	mul.w	r3, r1, r3
 80047b6:	4413      	add	r3, r2
 80047b8:	3360      	adds	r3, #96	; 0x60
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
 80047be:	e0c9      	b.n	8004954 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	212c      	movs	r1, #44	; 0x2c
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	3361      	adds	r3, #97	; 0x61
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b05      	cmp	r3, #5
 80047d2:	d109      	bne.n	80047e8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	212c      	movs	r1, #44	; 0x2c
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	4413      	add	r3, r2
 80047e0:	3360      	adds	r3, #96	; 0x60
 80047e2:	2205      	movs	r2, #5
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e0b5      	b.n	8004954 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	212c      	movs	r1, #44	; 0x2c
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	4413      	add	r3, r2
 80047f4:	3361      	adds	r3, #97	; 0x61
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b06      	cmp	r3, #6
 80047fa:	d009      	beq.n	8004810 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	212c      	movs	r1, #44	; 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	3361      	adds	r3, #97	; 0x61
 800480a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800480c:	2b08      	cmp	r3, #8
 800480e:	d150      	bne.n	80048b2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	212c      	movs	r1, #44	; 0x2c
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	4413      	add	r3, r2
 800481c:	335c      	adds	r3, #92	; 0x5c
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	202c      	movs	r0, #44	; 0x2c
 8004828:	fb00 f303 	mul.w	r3, r0, r3
 800482c:	440b      	add	r3, r1
 800482e:	335c      	adds	r3, #92	; 0x5c
 8004830:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	212c      	movs	r1, #44	; 0x2c
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	4413      	add	r3, r2
 800483e:	335c      	adds	r3, #92	; 0x5c
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d912      	bls.n	800486c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	212c      	movs	r1, #44	; 0x2c
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	4413      	add	r3, r2
 8004852:	335c      	adds	r3, #92	; 0x5c
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	212c      	movs	r1, #44	; 0x2c
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	4413      	add	r3, r2
 8004864:	3360      	adds	r3, #96	; 0x60
 8004866:	2204      	movs	r2, #4
 8004868:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800486a:	e073      	b.n	8004954 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	212c      	movs	r1, #44	; 0x2c
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	4413      	add	r3, r2
 8004878:	3360      	adds	r3, #96	; 0x60
 800487a:	2202      	movs	r2, #2
 800487c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4413      	add	r3, r2
 8004886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004894:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800489c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048aa:	461a      	mov	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048b0:	e050      	b.n	8004954 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	212c      	movs	r1, #44	; 0x2c
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	4413      	add	r3, r2
 80048be:	3361      	adds	r3, #97	; 0x61
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d122      	bne.n	800490c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	212c      	movs	r1, #44	; 0x2c
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	4413      	add	r3, r2
 80048d2:	3360      	adds	r3, #96	; 0x60
 80048d4:	2202      	movs	r2, #2
 80048d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e023      	b.n	8004954 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	212c      	movs	r1, #44	; 0x2c
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	4413      	add	r3, r2
 8004918:	3361      	adds	r3, #97	; 0x61
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b07      	cmp	r3, #7
 800491e:	d119      	bne.n	8004954 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	212c      	movs	r1, #44	; 0x2c
 8004926:	fb01 f303 	mul.w	r3, r1, r3
 800492a:	4413      	add	r3, r2
 800492c:	335c      	adds	r3, #92	; 0x5c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	202c      	movs	r0, #44	; 0x2c
 8004938:	fb00 f303 	mul.w	r3, r0, r3
 800493c:	440b      	add	r3, r1
 800493e:	335c      	adds	r3, #92	; 0x5c
 8004940:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	212c      	movs	r1, #44	; 0x2c
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	4413      	add	r3, r2
 800494e:	3360      	adds	r3, #96	; 0x60
 8004950:	2204      	movs	r2, #4
 8004952:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	4413      	add	r3, r2
 800495c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004960:	461a      	mov	r2, r3
 8004962:	2302      	movs	r3, #2
 8004964:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	b2d9      	uxtb	r1, r3
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	202c      	movs	r0, #44	; 0x2c
 8004970:	fb00 f303 	mul.w	r3, r0, r3
 8004974:	4413      	add	r3, r2
 8004976:	3360      	adds	r3, #96	; 0x60
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f006 f93b 	bl	800abf8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004982:	e061      	b.n	8004a48 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4413      	add	r3, r2
 800498c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b10      	cmp	r3, #16
 8004998:	d156      	bne.n	8004a48 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	212c      	movs	r1, #44	; 0x2c
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	4413      	add	r3, r2
 80049a6:	333f      	adds	r3, #63	; 0x3f
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d111      	bne.n	80049d2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	212c      	movs	r1, #44	; 0x2c
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	4413      	add	r3, r2
 80049ba:	335c      	adds	r3, #92	; 0x5c
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	4611      	mov	r1, r2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f003 fe71 	bl	80086b2 <USB_HC_Halt>
 80049d0:	e031      	b.n	8004a36 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	212c      	movs	r1, #44	; 0x2c
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	4413      	add	r3, r2
 80049de:	333f      	adds	r3, #63	; 0x3f
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	212c      	movs	r1, #44	; 0x2c
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	333f      	adds	r3, #63	; 0x3f
 80049f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d11d      	bne.n	8004a36 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	212c      	movs	r1, #44	; 0x2c
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	335c      	adds	r3, #92	; 0x5c
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d110      	bne.n	8004a36 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	212c      	movs	r1, #44	; 0x2c
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	3361      	adds	r3, #97	; 0x61
 8004a22:	2203      	movs	r2, #3
 8004a24:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	b2d2      	uxtb	r2, r2
 8004a2e:	4611      	mov	r1, r2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f003 fe3e 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a42:	461a      	mov	r2, r3
 8004a44:	2310      	movs	r3, #16
 8004a46:	6093      	str	r3, [r2, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d11a      	bne.n	8004ab6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2304      	movs	r3, #4
 8004a90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	212c      	movs	r1, #44	; 0x2c
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3361      	adds	r3, #97	; 0x61
 8004aa0:	2206      	movs	r2, #6
 8004aa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	4611      	mov	r1, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f003 fdff 	bl	80086b2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004ab4:	e331      	b.n	800511a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d12e      	bne.n	8004b2a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2320      	movs	r3, #32
 8004adc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	212c      	movs	r1, #44	; 0x2c
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	333d      	adds	r3, #61	; 0x3d
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	f040 8313 	bne.w	800511a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	212c      	movs	r1, #44	; 0x2c
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	4413      	add	r3, r2
 8004b00:	333d      	adds	r3, #61	; 0x3d
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	212c      	movs	r1, #44	; 0x2c
 8004b0c:	fb01 f303 	mul.w	r3, r1, r3
 8004b10:	4413      	add	r3, r2
 8004b12:	3360      	adds	r3, #96	; 0x60
 8004b14:	2202      	movs	r2, #2
 8004b16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	4611      	mov	r1, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f003 fdc5 	bl	80086b2 <USB_HC_Halt>
}
 8004b28:	e2f7      	b.n	800511a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b40:	d112      	bne.n	8004b68 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f003 fda6 	bl	80086b2 <USB_HC_Halt>
}
 8004b66:	e2d8      	b.n	800511a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d140      	bne.n	8004c00 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	212c      	movs	r1, #44	; 0x2c
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	335c      	adds	r3, #92	; 0x5c
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	d111      	bne.n	8004bca <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	212c      	movs	r1, #44	; 0x2c
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	333d      	adds	r3, #61	; 0x3d
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	2340      	movs	r3, #64	; 0x40
 8004bc8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2301      	movs	r3, #1
 8004bda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	212c      	movs	r1, #44	; 0x2c
 8004be2:	fb01 f303 	mul.w	r3, r1, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	3361      	adds	r3, #97	; 0x61
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f003 fd5a 	bl	80086b2 <USB_HC_Halt>
}
 8004bfe:	e28c      	b.n	800511a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d12c      	bne.n	8004c70 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	212c      	movs	r1, #44	; 0x2c
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	3361      	adds	r3, #97	; 0x61
 8004c24:	2204      	movs	r2, #4
 8004c26:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	212c      	movs	r1, #44	; 0x2c
 8004c2e:	fb01 f303 	mul.w	r3, r1, r3
 8004c32:	4413      	add	r3, r2
 8004c34:	333d      	adds	r3, #61	; 0x3d
 8004c36:	2201      	movs	r2, #1
 8004c38:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	212c      	movs	r1, #44	; 0x2c
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	335c      	adds	r3, #92	; 0x5c
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f003 fd2b 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2340      	movs	r3, #64	; 0x40
 8004c6c:	6093      	str	r3, [r2, #8]
}
 8004c6e:	e254      	b.n	800511a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d11a      	bne.n	8004cbc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c92:	461a      	mov	r2, r3
 8004c94:	2308      	movs	r3, #8
 8004c96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	212c      	movs	r1, #44	; 0x2c
 8004c9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3361      	adds	r3, #97	; 0x61
 8004ca6:	2205      	movs	r2, #5
 8004ca8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f003 fcfc 	bl	80086b2 <USB_HC_Halt>
}
 8004cba:	e22e      	b.n	800511a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b10      	cmp	r3, #16
 8004cd0:	d140      	bne.n	8004d54 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	212c      	movs	r1, #44	; 0x2c
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	4413      	add	r3, r2
 8004cde:	335c      	adds	r3, #92	; 0x5c
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	212c      	movs	r1, #44	; 0x2c
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	3361      	adds	r3, #97	; 0x61
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	212c      	movs	r1, #44	; 0x2c
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	333d      	adds	r3, #61	; 0x3d
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d112      	bne.n	8004d30 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	333c      	adds	r3, #60	; 0x3c
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d108      	bne.n	8004d30 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	212c      	movs	r1, #44	; 0x2c
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	4413      	add	r3, r2
 8004d2a:	333d      	adds	r3, #61	; 0x3d
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f003 fcb9 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2310      	movs	r3, #16
 8004d50:	6093      	str	r3, [r2, #8]
}
 8004d52:	e1e2      	b.n	800511a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	d164      	bne.n	8004e34 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d111      	bne.n	8004d96 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	212c      	movs	r1, #44	; 0x2c
 8004d78:	fb01 f303 	mul.w	r3, r1, r3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3361      	adds	r3, #97	; 0x61
 8004d80:	2206      	movs	r2, #6
 8004d82:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f003 fc8f 	bl	80086b2 <USB_HC_Halt>
 8004d94:	e044      	b.n	8004e20 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	212c      	movs	r1, #44	; 0x2c
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	4413      	add	r3, r2
 8004da2:	335c      	adds	r3, #92	; 0x5c
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	202c      	movs	r0, #44	; 0x2c
 8004dae:	fb00 f303 	mul.w	r3, r0, r3
 8004db2:	440b      	add	r3, r1
 8004db4:	335c      	adds	r3, #92	; 0x5c
 8004db6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	212c      	movs	r1, #44	; 0x2c
 8004dbe:	fb01 f303 	mul.w	r3, r1, r3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	335c      	adds	r3, #92	; 0x5c
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d920      	bls.n	8004e0e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	212c      	movs	r1, #44	; 0x2c
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	335c      	adds	r3, #92	; 0x5c
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	212c      	movs	r1, #44	; 0x2c
 8004de4:	fb01 f303 	mul.w	r3, r1, r3
 8004de8:	4413      	add	r3, r2
 8004dea:	3360      	adds	r3, #96	; 0x60
 8004dec:	2204      	movs	r2, #4
 8004dee:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	b2d9      	uxtb	r1, r3
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	202c      	movs	r0, #44	; 0x2c
 8004dfa:	fb00 f303 	mul.w	r3, r0, r3
 8004dfe:	4413      	add	r3, r2
 8004e00:	3360      	adds	r3, #96	; 0x60
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f005 fef6 	bl	800abf8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004e0c:	e008      	b.n	8004e20 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	212c      	movs	r1, #44	; 0x2c
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	4413      	add	r3, r2
 8004e1a:	3360      	adds	r3, #96	; 0x60
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	6093      	str	r3, [r2, #8]
}
 8004e32:	e172      	b.n	800511a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4a:	d11b      	bne.n	8004e84 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	212c      	movs	r1, #44	; 0x2c
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	3361      	adds	r3, #97	; 0x61
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	4611      	mov	r1, r2
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f003 fc22 	bl	80086b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e80:	6093      	str	r3, [r2, #8]
}
 8004e82:	e14a      	b.n	800511a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	f040 813f 	bne.w	800511a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	212c      	movs	r1, #44	; 0x2c
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3361      	adds	r3, #97	; 0x61
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d17d      	bne.n	8004fac <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	212c      	movs	r1, #44	; 0x2c
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	4413      	add	r3, r2
 8004ebc:	3360      	adds	r3, #96	; 0x60
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	212c      	movs	r1, #44	; 0x2c
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	4413      	add	r3, r2
 8004ece:	333f      	adds	r3, #63	; 0x3f
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d00a      	beq.n	8004eec <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	212c      	movs	r1, #44	; 0x2c
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	333f      	adds	r3, #63	; 0x3f
 8004ee4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	f040 8100 	bne.w	80050ec <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d113      	bne.n	8004f1c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	212c      	movs	r1, #44	; 0x2c
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	3355      	adds	r3, #85	; 0x55
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	f083 0301 	eor.w	r3, r3, #1
 8004f08:	b2d8      	uxtb	r0, r3
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	212c      	movs	r1, #44	; 0x2c
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	4413      	add	r3, r2
 8004f16:	3355      	adds	r3, #85	; 0x55
 8004f18:	4602      	mov	r2, r0
 8004f1a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	f040 80e3 	bne.w	80050ec <HCD_HC_OUT_IRQHandler+0x69c>
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	212c      	movs	r1, #44	; 0x2c
 8004f2c:	fb01 f303 	mul.w	r3, r1, r3
 8004f30:	4413      	add	r3, r2
 8004f32:	334c      	adds	r3, #76	; 0x4c
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 80d8 	beq.w	80050ec <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	212c      	movs	r1, #44	; 0x2c
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	4413      	add	r3, r2
 8004f48:	334c      	adds	r3, #76	; 0x4c
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	202c      	movs	r0, #44	; 0x2c
 8004f52:	fb00 f202 	mul.w	r2, r0, r2
 8004f56:	440a      	add	r2, r1
 8004f58:	3240      	adds	r2, #64	; 0x40
 8004f5a:	8812      	ldrh	r2, [r2, #0]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	202c      	movs	r0, #44	; 0x2c
 8004f66:	fb00 f202 	mul.w	r2, r0, r2
 8004f6a:	440a      	add	r2, r1
 8004f6c:	3240      	adds	r2, #64	; 0x40
 8004f6e:	8812      	ldrh	r2, [r2, #0]
 8004f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80b5 	beq.w	80050ec <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	212c      	movs	r1, #44	; 0x2c
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3355      	adds	r3, #85	; 0x55
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	f083 0301 	eor.w	r3, r3, #1
 8004f96:	b2d8      	uxtb	r0, r3
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	212c      	movs	r1, #44	; 0x2c
 8004f9e:	fb01 f303 	mul.w	r3, r1, r3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	3355      	adds	r3, #85	; 0x55
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	e09f      	b.n	80050ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	212c      	movs	r1, #44	; 0x2c
 8004fb2:	fb01 f303 	mul.w	r3, r1, r3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3361      	adds	r3, #97	; 0x61
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d109      	bne.n	8004fd4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	212c      	movs	r1, #44	; 0x2c
 8004fc6:	fb01 f303 	mul.w	r3, r1, r3
 8004fca:	4413      	add	r3, r2
 8004fcc:	3360      	adds	r3, #96	; 0x60
 8004fce:	2202      	movs	r2, #2
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e08b      	b.n	80050ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	212c      	movs	r1, #44	; 0x2c
 8004fda:	fb01 f303 	mul.w	r3, r1, r3
 8004fde:	4413      	add	r3, r2
 8004fe0:	3361      	adds	r3, #97	; 0x61
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d109      	bne.n	8004ffc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	212c      	movs	r1, #44	; 0x2c
 8004fee:	fb01 f303 	mul.w	r3, r1, r3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3360      	adds	r3, #96	; 0x60
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e077      	b.n	80050ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	212c      	movs	r1, #44	; 0x2c
 8005002:	fb01 f303 	mul.w	r3, r1, r3
 8005006:	4413      	add	r3, r2
 8005008:	3361      	adds	r3, #97	; 0x61
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b05      	cmp	r3, #5
 800500e:	d109      	bne.n	8005024 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	212c      	movs	r1, #44	; 0x2c
 8005016:	fb01 f303 	mul.w	r3, r1, r3
 800501a:	4413      	add	r3, r2
 800501c:	3360      	adds	r3, #96	; 0x60
 800501e:	2205      	movs	r2, #5
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	e063      	b.n	80050ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	212c      	movs	r1, #44	; 0x2c
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	4413      	add	r3, r2
 8005030:	3361      	adds	r3, #97	; 0x61
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b06      	cmp	r3, #6
 8005036:	d009      	beq.n	800504c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	212c      	movs	r1, #44	; 0x2c
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	4413      	add	r3, r2
 8005044:	3361      	adds	r3, #97	; 0x61
 8005046:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005048:	2b08      	cmp	r3, #8
 800504a:	d14f      	bne.n	80050ec <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	212c      	movs	r1, #44	; 0x2c
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	4413      	add	r3, r2
 8005058:	335c      	adds	r3, #92	; 0x5c
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	202c      	movs	r0, #44	; 0x2c
 8005064:	fb00 f303 	mul.w	r3, r0, r3
 8005068:	440b      	add	r3, r1
 800506a:	335c      	adds	r3, #92	; 0x5c
 800506c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	212c      	movs	r1, #44	; 0x2c
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	4413      	add	r3, r2
 800507a:	335c      	adds	r3, #92	; 0x5c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d912      	bls.n	80050a8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	212c      	movs	r1, #44	; 0x2c
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	4413      	add	r3, r2
 800508e:	335c      	adds	r3, #92	; 0x5c
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	212c      	movs	r1, #44	; 0x2c
 800509a:	fb01 f303 	mul.w	r3, r1, r3
 800509e:	4413      	add	r3, r2
 80050a0:	3360      	adds	r3, #96	; 0x60
 80050a2:	2204      	movs	r2, #4
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	e021      	b.n	80050ec <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	212c      	movs	r1, #44	; 0x2c
 80050ae:	fb01 f303 	mul.w	r3, r1, r3
 80050b2:	4413      	add	r3, r2
 80050b4:	3360      	adds	r3, #96	; 0x60
 80050b6:	2202      	movs	r2, #2
 80050b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050d0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050d8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e6:	461a      	mov	r2, r3
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f8:	461a      	mov	r2, r3
 80050fa:	2302      	movs	r3, #2
 80050fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	b2d9      	uxtb	r1, r3
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	202c      	movs	r0, #44	; 0x2c
 8005108:	fb00 f303 	mul.w	r3, r0, r3
 800510c:	4413      	add	r3, r2
 800510e:	3360      	adds	r3, #96	; 0x60
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f005 fd6f 	bl	800abf8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800511a:	bf00      	nop
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b08a      	sub	sp, #40	; 0x28
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	0c5b      	lsrs	r3, r3, #17
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005156:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d004      	beq.n	8005168 <HCD_RXQLVL_IRQHandler+0x46>
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b05      	cmp	r3, #5
 8005162:	f000 80a9 	beq.w	80052b8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005166:	e0aa      	b.n	80052be <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 80a6 	beq.w	80052bc <HCD_RXQLVL_IRQHandler+0x19a>
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	212c      	movs	r1, #44	; 0x2c
 8005176:	fb01 f303 	mul.w	r3, r1, r3
 800517a:	4413      	add	r3, r2
 800517c:	3344      	adds	r3, #68	; 0x44
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 809b 	beq.w	80052bc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	212c      	movs	r1, #44	; 0x2c
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	4413      	add	r3, r2
 8005192:	3350      	adds	r3, #80	; 0x50
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	441a      	add	r2, r3
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	202c      	movs	r0, #44	; 0x2c
 80051a0:	fb00 f303 	mul.w	r3, r0, r3
 80051a4:	440b      	add	r3, r1
 80051a6:	334c      	adds	r3, #76	; 0x4c
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d87a      	bhi.n	80052a4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	212c      	movs	r1, #44	; 0x2c
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	4413      	add	r3, r2
 80051be:	3344      	adds	r3, #68	; 0x44
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	b292      	uxth	r2, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	f002 fdca 	bl	8007d60 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	212c      	movs	r1, #44	; 0x2c
 80051d2:	fb01 f303 	mul.w	r3, r1, r3
 80051d6:	4413      	add	r3, r2
 80051d8:	3344      	adds	r3, #68	; 0x44
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	441a      	add	r2, r3
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	202c      	movs	r0, #44	; 0x2c
 80051e6:	fb00 f303 	mul.w	r3, r0, r3
 80051ea:	440b      	add	r3, r1
 80051ec:	3344      	adds	r3, #68	; 0x44
 80051ee:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	212c      	movs	r1, #44	; 0x2c
 80051f6:	fb01 f303 	mul.w	r3, r1, r3
 80051fa:	4413      	add	r3, r2
 80051fc:	3350      	adds	r3, #80	; 0x50
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	441a      	add	r2, r3
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	202c      	movs	r0, #44	; 0x2c
 800520a:	fb00 f303 	mul.w	r3, r0, r3
 800520e:	440b      	add	r3, r1
 8005210:	3350      	adds	r3, #80	; 0x50
 8005212:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	4413      	add	r3, r2
 800521c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	0cdb      	lsrs	r3, r3, #19
 8005224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005228:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	212c      	movs	r1, #44	; 0x2c
 8005230:	fb01 f303 	mul.w	r3, r1, r3
 8005234:	4413      	add	r3, r2
 8005236:	3340      	adds	r3, #64	; 0x40
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4293      	cmp	r3, r2
 8005240:	d13c      	bne.n	80052bc <HCD_RXQLVL_IRQHandler+0x19a>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d039      	beq.n	80052bc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800525e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005266:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	4413      	add	r3, r2
 8005270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005274:	461a      	mov	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	212c      	movs	r1, #44	; 0x2c
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	4413      	add	r3, r2
 8005286:	3354      	adds	r3, #84	; 0x54
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	f083 0301 	eor.w	r3, r3, #1
 800528e:	b2d8      	uxtb	r0, r3
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	212c      	movs	r1, #44	; 0x2c
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	4413      	add	r3, r2
 800529c:	3354      	adds	r3, #84	; 0x54
 800529e:	4602      	mov	r2, r0
 80052a0:	701a      	strb	r2, [r3, #0]
      break;
 80052a2:	e00b      	b.n	80052bc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	212c      	movs	r1, #44	; 0x2c
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	3360      	adds	r3, #96	; 0x60
 80052b2:	2204      	movs	r2, #4
 80052b4:	701a      	strb	r2, [r3, #0]
      break;
 80052b6:	e001      	b.n	80052bc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80052b8:	bf00      	nop
 80052ba:	e000      	b.n	80052be <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80052bc:	bf00      	nop
  }
}
 80052be:	bf00      	nop
 80052c0:	3728      	adds	r7, #40	; 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052f2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d10b      	bne.n	8005316 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d102      	bne.n	800530e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f005 fc59 	bl	800abc0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f043 0302 	orr.w	r3, r3, #2
 8005314:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b08      	cmp	r3, #8
 800531e:	d132      	bne.n	8005386 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f043 0308 	orr.w	r3, r3, #8
 8005326:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b04      	cmp	r3, #4
 8005330:	d126      	bne.n	8005380 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d113      	bne.n	8005362 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005344:	d106      	bne.n	8005354 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2102      	movs	r1, #2
 800534c:	4618      	mov	r0, r3
 800534e:	f002 fe75 	bl	800803c <USB_InitFSLSPClkSel>
 8005352:	e011      	b.n	8005378 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2101      	movs	r1, #1
 800535a:	4618      	mov	r0, r3
 800535c:	f002 fe6e 	bl	800803c <USB_InitFSLSPClkSel>
 8005360:	e00a      	b.n	8005378 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d106      	bne.n	8005378 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005370:	461a      	mov	r2, r3
 8005372:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005376:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f005 fc4b 	bl	800ac14 <HAL_HCD_PortEnabled_Callback>
 800537e:	e002      	b.n	8005386 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f005 fc55 	bl	800ac30 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b20      	cmp	r3, #32
 800538e:	d103      	bne.n	8005398 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f043 0320 	orr.w	r3, r3, #32
 8005396:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800539e:	461a      	mov	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	6013      	str	r3, [r2, #0]
}
 80053a4:	bf00      	nop
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e12b      	b.n	8005616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fd fd88 	bl	8002ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2224      	movs	r2, #36	; 0x24
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800540e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005410:	f001 fa20 	bl	8006854 <HAL_RCC_GetPCLK1Freq>
 8005414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4a81      	ldr	r2, [pc, #516]	; (8005620 <HAL_I2C_Init+0x274>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d807      	bhi.n	8005430 <HAL_I2C_Init+0x84>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a80      	ldr	r2, [pc, #512]	; (8005624 <HAL_I2C_Init+0x278>)
 8005424:	4293      	cmp	r3, r2
 8005426:	bf94      	ite	ls
 8005428:	2301      	movls	r3, #1
 800542a:	2300      	movhi	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e006      	b.n	800543e <HAL_I2C_Init+0x92>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a7d      	ldr	r2, [pc, #500]	; (8005628 <HAL_I2C_Init+0x27c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	bf94      	ite	ls
 8005438:	2301      	movls	r3, #1
 800543a:	2300      	movhi	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e0e7      	b.n	8005616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4a78      	ldr	r2, [pc, #480]	; (800562c <HAL_I2C_Init+0x280>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	0c9b      	lsrs	r3, r3, #18
 8005450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4a6a      	ldr	r2, [pc, #424]	; (8005620 <HAL_I2C_Init+0x274>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d802      	bhi.n	8005480 <HAL_I2C_Init+0xd4>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	3301      	adds	r3, #1
 800547e:	e009      	b.n	8005494 <HAL_I2C_Init+0xe8>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	4a69      	ldr	r2, [pc, #420]	; (8005630 <HAL_I2C_Init+0x284>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	099b      	lsrs	r3, r3, #6
 8005492:	3301      	adds	r3, #1
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	430b      	orrs	r3, r1
 800549a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	495c      	ldr	r1, [pc, #368]	; (8005620 <HAL_I2C_Init+0x274>)
 80054b0:	428b      	cmp	r3, r1
 80054b2:	d819      	bhi.n	80054e8 <HAL_I2C_Init+0x13c>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	1e59      	subs	r1, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fbb1 f3f3 	udiv	r3, r1, r3
 80054c2:	1c59      	adds	r1, r3, #1
 80054c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054c8:	400b      	ands	r3, r1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_I2C_Init+0x138>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1e59      	subs	r1, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80054dc:	3301      	adds	r3, #1
 80054de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e2:	e051      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 80054e4:	2304      	movs	r3, #4
 80054e6:	e04f      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d111      	bne.n	8005514 <HAL_I2C_Init+0x168>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	1e58      	subs	r0, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6859      	ldr	r1, [r3, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	440b      	add	r3, r1
 80054fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005502:	3301      	adds	r3, #1
 8005504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005508:	2b00      	cmp	r3, #0
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	e012      	b.n	800553a <HAL_I2C_Init+0x18e>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	1e58      	subs	r0, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6859      	ldr	r1, [r3, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	0099      	lsls	r1, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	fbb0 f3f3 	udiv	r3, r0, r3
 800552a:	3301      	adds	r3, #1
 800552c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005530:	2b00      	cmp	r3, #0
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_I2C_Init+0x196>
 800553e:	2301      	movs	r3, #1
 8005540:	e022      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10e      	bne.n	8005568 <HAL_I2C_Init+0x1bc>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1e58      	subs	r0, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6859      	ldr	r1, [r3, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	440b      	add	r3, r1
 8005558:	fbb0 f3f3 	udiv	r3, r0, r3
 800555c:	3301      	adds	r3, #1
 800555e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005566:	e00f      	b.n	8005588 <HAL_I2C_Init+0x1dc>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	1e58      	subs	r0, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	0099      	lsls	r1, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	fbb0 f3f3 	udiv	r3, r0, r3
 800557e:	3301      	adds	r3, #1
 8005580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	6809      	ldr	r1, [r1, #0]
 800558c:	4313      	orrs	r3, r2
 800558e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6911      	ldr	r1, [r2, #16]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68d2      	ldr	r2, [r2, #12]
 80055c2:	4311      	orrs	r1, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	000186a0 	.word	0x000186a0
 8005624:	001e847f 	.word	0x001e847f
 8005628:	003d08ff 	.word	0x003d08ff
 800562c:	431bde83 	.word	0x431bde83
 8005630:	10624dd3 	.word	0x10624dd3

08005634 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e128      	b.n	8005898 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a90      	ldr	r2, [pc, #576]	; (80058a0 <HAL_I2S_Init+0x26c>)
 800565e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7fd fc89 	bl	8002f78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800567c:	f023 030f 	bic.w	r3, r3, #15
 8005680:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2202      	movs	r2, #2
 8005688:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d060      	beq.n	8005754 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800569a:	2310      	movs	r3, #16
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	e001      	b.n	80056a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80056a0:	2320      	movs	r3, #32
 80056a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d802      	bhi.n	80056b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80056b2:	2001      	movs	r0, #1
 80056b4:	f001 f9e6 	bl	8006a84 <HAL_RCCEx_GetPeriphCLKFreq>
 80056b8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c2:	d125      	bne.n	8005710 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d010      	beq.n	80056ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	461a      	mov	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	3305      	adds	r3, #5
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	e01f      	b.n	800572e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	461a      	mov	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	fbb2 f3f3 	udiv	r3, r2, r3
 800570a:	3305      	adds	r3, #5
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	e00e      	b.n	800572e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	fbb2 f2f3 	udiv	r2, r2, r3
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	461a      	mov	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	fbb2 f3f3 	udiv	r3, r2, r3
 800572a:	3305      	adds	r3, #5
 800572c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4a5c      	ldr	r2, [pc, #368]	; (80058a4 <HAL_I2S_Init+0x270>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	08db      	lsrs	r3, r3, #3
 8005738:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	021b      	lsls	r3, r3, #8
 8005750:	61bb      	str	r3, [r7, #24]
 8005752:	e003      	b.n	800575c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005754:	2302      	movs	r3, #2
 8005756:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d902      	bls.n	8005768 <HAL_I2S_Init+0x134>
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2bff      	cmp	r3, #255	; 0xff
 8005766:	d907      	bls.n	8005778 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576c:	f043 0210 	orr.w	r2, r3, #16
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e08f      	b.n	8005898 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	ea42 0103 	orr.w	r1, r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	430a      	orrs	r2, r1
 800578a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005796:	f023 030f 	bic.w	r3, r3, #15
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6851      	ldr	r1, [r2, #4]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6892      	ldr	r2, [r2, #8]
 80057a2:	4311      	orrs	r1, r2
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	68d2      	ldr	r2, [r2, #12]
 80057a8:	4311      	orrs	r1, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6992      	ldr	r2, [r2, #24]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d161      	bne.n	8005888 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a38      	ldr	r2, [pc, #224]	; (80058a8 <HAL_I2S_Init+0x274>)
 80057c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a37      	ldr	r2, [pc, #220]	; (80058ac <HAL_I2S_Init+0x278>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d101      	bne.n	80057d8 <HAL_I2S_Init+0x1a4>
 80057d4:	4b36      	ldr	r3, [pc, #216]	; (80058b0 <HAL_I2S_Init+0x27c>)
 80057d6:	e001      	b.n	80057dc <HAL_I2S_Init+0x1a8>
 80057d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	4932      	ldr	r1, [pc, #200]	; (80058ac <HAL_I2S_Init+0x278>)
 80057e4:	428a      	cmp	r2, r1
 80057e6:	d101      	bne.n	80057ec <HAL_I2S_Init+0x1b8>
 80057e8:	4a31      	ldr	r2, [pc, #196]	; (80058b0 <HAL_I2S_Init+0x27c>)
 80057ea:	e001      	b.n	80057f0 <HAL_I2S_Init+0x1bc>
 80057ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80057f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80057f4:	f023 030f 	bic.w	r3, r3, #15
 80057f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a2b      	ldr	r2, [pc, #172]	; (80058ac <HAL_I2S_Init+0x278>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d101      	bne.n	8005808 <HAL_I2S_Init+0x1d4>
 8005804:	4b2a      	ldr	r3, [pc, #168]	; (80058b0 <HAL_I2S_Init+0x27c>)
 8005806:	e001      	b.n	800580c <HAL_I2S_Init+0x1d8>
 8005808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800580c:	2202      	movs	r2, #2
 800580e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a25      	ldr	r2, [pc, #148]	; (80058ac <HAL_I2S_Init+0x278>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d101      	bne.n	800581e <HAL_I2S_Init+0x1ea>
 800581a:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <HAL_I2S_Init+0x27c>)
 800581c:	e001      	b.n	8005822 <HAL_I2S_Init+0x1ee>
 800581e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800582e:	d003      	beq.n	8005838 <HAL_I2S_Init+0x204>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d103      	bne.n	8005840 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	e001      	b.n	8005844 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800584e:	4313      	orrs	r3, r2
 8005850:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005858:	4313      	orrs	r3, r2
 800585a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005862:	4313      	orrs	r3, r2
 8005864:	b29a      	uxth	r2, r3
 8005866:	897b      	ldrh	r3, [r7, #10]
 8005868:	4313      	orrs	r3, r2
 800586a:	b29b      	uxth	r3, r3
 800586c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005870:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a0d      	ldr	r2, [pc, #52]	; (80058ac <HAL_I2S_Init+0x278>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d101      	bne.n	8005880 <HAL_I2S_Init+0x24c>
 800587c:	4b0c      	ldr	r3, [pc, #48]	; (80058b0 <HAL_I2S_Init+0x27c>)
 800587e:	e001      	b.n	8005884 <HAL_I2S_Init+0x250>
 8005880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005884:	897a      	ldrh	r2, [r7, #10]
 8005886:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3720      	adds	r7, #32
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	080059ab 	.word	0x080059ab
 80058a4:	cccccccd 	.word	0xcccccccd
 80058a8:	08005ac1 	.word	0x08005ac1
 80058ac:	40003800 	.word	0x40003800
 80058b0:	40003400 	.word	0x40003400

080058b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	881a      	ldrh	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	1c9a      	adds	r2, r3, #2
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	3b01      	subs	r3, #1
 8005916:	b29a      	uxth	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10e      	bne.n	8005944 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005934:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff ffb8 	bl	80058b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005944:	bf00      	nop
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	b292      	uxth	r2, r2
 8005960:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	1c9a      	adds	r2, r3, #2
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10e      	bne.n	80059a2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005992:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff ff93 	bl	80058c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80059a2:	bf00      	nop
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b086      	sub	sp, #24
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d13a      	bne.n	8005a3c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d109      	bne.n	80059e4 <I2S_IRQHandler+0x3a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d102      	bne.n	80059e4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff ffb4 	bl	800594c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b40      	cmp	r3, #64	; 0x40
 80059ec:	d126      	bne.n	8005a3c <I2S_IRQHandler+0x92>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d11f      	bne.n	8005a3c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	f043 0202 	orr.w	r2, r3, #2
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff ff50 	bl	80058dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d136      	bne.n	8005ab6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d109      	bne.n	8005a66 <I2S_IRQHandler+0xbc>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5c:	2b80      	cmp	r3, #128	; 0x80
 8005a5e:	d102      	bne.n	8005a66 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff ff45 	bl	80058f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d122      	bne.n	8005ab6 <I2S_IRQHandler+0x10c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b20      	cmp	r3, #32
 8005a7c:	d11b      	bne.n	8005ab6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a8c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa8:	f043 0204 	orr.w	r2, r3, #4
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff ff13 	bl	80058dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a92      	ldr	r2, [pc, #584]	; (8005d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d101      	bne.n	8005ade <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005ada:	4b92      	ldr	r3, [pc, #584]	; (8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005adc:	e001      	b.n	8005ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a8b      	ldr	r2, [pc, #556]	; (8005d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d101      	bne.n	8005afc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005af8:	4b8a      	ldr	r3, [pc, #552]	; (8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005afa:	e001      	b.n	8005b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b0c:	d004      	beq.n	8005b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f040 8099 	bne.w	8005c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d107      	bne.n	8005b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f925 	bl	8005d7c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d107      	bne.n	8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f9c8 	bl	8005edc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b52:	2b40      	cmp	r3, #64	; 0x40
 8005b54:	d13a      	bne.n	8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d035      	beq.n	8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a6e      	ldr	r2, [pc, #440]	; (8005d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005b6a:	4b6e      	ldr	r3, [pc, #440]	; (8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b6c:	e001      	b.n	8005b72 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4969      	ldr	r1, [pc, #420]	; (8005d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b7a:	428b      	cmp	r3, r1
 8005b7c:	d101      	bne.n	8005b82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005b7e:	4b69      	ldr	r3, [pc, #420]	; (8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b80:	e001      	b.n	8005b86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005b82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b8a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	f043 0202 	orr.w	r2, r3, #2
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fe88 	bl	80058dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	f040 80c3 	bne.w	8005d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 80bd 	beq.w	8005d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bf2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a49      	ldr	r2, [pc, #292]	; (8005d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d101      	bne.n	8005c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005bfe:	4b49      	ldr	r3, [pc, #292]	; (8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c00:	e001      	b.n	8005c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005c02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4944      	ldr	r1, [pc, #272]	; (8005d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c0e:	428b      	cmp	r3, r1
 8005c10:	d101      	bne.n	8005c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005c12:	4b44      	ldr	r3, [pc, #272]	; (8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c14:	e001      	b.n	8005c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005c16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c1e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c20:	2300      	movs	r3, #0
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	60bb      	str	r3, [r7, #8]
 8005c2c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3a:	f043 0204 	orr.w	r2, r3, #4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff fe4a 	bl	80058dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c48:	e089      	b.n	8005d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d107      	bne.n	8005c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f8be 	bl	8005de0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d107      	bne.n	8005c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f8fd 	bl	8005e78 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c84:	2b40      	cmp	r3, #64	; 0x40
 8005c86:	d12f      	bne.n	8005ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d02a      	beq.n	8005ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ca0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1e      	ldr	r2, [pc, #120]	; (8005d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d101      	bne.n	8005cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005cac:	4b1d      	ldr	r3, [pc, #116]	; (8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cae:	e001      	b.n	8005cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005cb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4919      	ldr	r1, [pc, #100]	; (8005d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cbc:	428b      	cmp	r3, r1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005cc0:	4b18      	ldr	r3, [pc, #96]	; (8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cc2:	e001      	b.n	8005cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005cc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ccc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cda:	f043 0202 	orr.w	r2, r3, #2
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff fdfa 	bl	80058dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d136      	bne.n	8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f003 0320 	and.w	r3, r3, #32
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d031      	beq.n	8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d101      	bne.n	8005d0a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005d06:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d08:	e001      	b.n	8005d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005d0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4902      	ldr	r1, [pc, #8]	; (8005d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d16:	428b      	cmp	r3, r1
 8005d18:	d106      	bne.n	8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005d1a:	4b02      	ldr	r3, [pc, #8]	; (8005d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d1c:	e006      	b.n	8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005d1e:	bf00      	nop
 8005d20:	40003800 	.word	0x40003800
 8005d24:	40003400 	.word	0x40003400
 8005d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d30:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d40:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	f043 0204 	orr.w	r2, r3, #4
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff fdc0 	bl	80058dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d5c:	e000      	b.n	8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d5e:	bf00      	nop
}
 8005d60:	bf00      	nop
 8005d62:	3720      	adds	r7, #32
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	1c99      	adds	r1, r3, #2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6251      	str	r1, [r2, #36]	; 0x24
 8005d8e:	881a      	ldrh	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d113      	bne.n	8005dd6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dbc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff ffc9 	bl	8005d68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
	...

08005de0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	1c99      	adds	r1, r3, #2
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6251      	str	r1, [r2, #36]	; 0x24
 8005df2:	8819      	ldrh	r1, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1d      	ldr	r2, [pc, #116]	; (8005e70 <I2SEx_TxISR_I2SExt+0x90>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <I2SEx_TxISR_I2SExt+0x22>
 8005dfe:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <I2SEx_TxISR_I2SExt+0x94>)
 8005e00:	e001      	b.n	8005e06 <I2SEx_TxISR_I2SExt+0x26>
 8005e02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e06:	460a      	mov	r2, r1
 8005e08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d121      	bne.n	8005e66 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a12      	ldr	r2, [pc, #72]	; (8005e70 <I2SEx_TxISR_I2SExt+0x90>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d101      	bne.n	8005e30 <I2SEx_TxISR_I2SExt+0x50>
 8005e2c:	4b11      	ldr	r3, [pc, #68]	; (8005e74 <I2SEx_TxISR_I2SExt+0x94>)
 8005e2e:	e001      	b.n	8005e34 <I2SEx_TxISR_I2SExt+0x54>
 8005e30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	490d      	ldr	r1, [pc, #52]	; (8005e70 <I2SEx_TxISR_I2SExt+0x90>)
 8005e3c:	428b      	cmp	r3, r1
 8005e3e:	d101      	bne.n	8005e44 <I2SEx_TxISR_I2SExt+0x64>
 8005e40:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <I2SEx_TxISR_I2SExt+0x94>)
 8005e42:	e001      	b.n	8005e48 <I2SEx_TxISR_I2SExt+0x68>
 8005e44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d106      	bne.n	8005e66 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff ff81 	bl	8005d68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40003800 	.word	0x40003800
 8005e74:	40003400 	.word	0x40003400

08005e78 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68d8      	ldr	r0, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	1c99      	adds	r1, r3, #2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005e90:	b282      	uxth	r2, r0
 8005e92:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d113      	bne.n	8005ed4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005eba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff ff4a 	bl	8005d68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a20      	ldr	r2, [pc, #128]	; (8005f6c <I2SEx_RxISR_I2SExt+0x90>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d101      	bne.n	8005ef2 <I2SEx_RxISR_I2SExt+0x16>
 8005eee:	4b20      	ldr	r3, [pc, #128]	; (8005f70 <I2SEx_RxISR_I2SExt+0x94>)
 8005ef0:	e001      	b.n	8005ef6 <I2SEx_RxISR_I2SExt+0x1a>
 8005ef2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ef6:	68d8      	ldr	r0, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	1c99      	adds	r1, r3, #2
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005f02:	b282      	uxth	r2, r0
 8005f04:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d121      	bne.n	8005f62 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a12      	ldr	r2, [pc, #72]	; (8005f6c <I2SEx_RxISR_I2SExt+0x90>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d101      	bne.n	8005f2c <I2SEx_RxISR_I2SExt+0x50>
 8005f28:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <I2SEx_RxISR_I2SExt+0x94>)
 8005f2a:	e001      	b.n	8005f30 <I2SEx_RxISR_I2SExt+0x54>
 8005f2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	490d      	ldr	r1, [pc, #52]	; (8005f6c <I2SEx_RxISR_I2SExt+0x90>)
 8005f38:	428b      	cmp	r3, r1
 8005f3a:	d101      	bne.n	8005f40 <I2SEx_RxISR_I2SExt+0x64>
 8005f3c:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <I2SEx_RxISR_I2SExt+0x94>)
 8005f3e:	e001      	b.n	8005f44 <I2SEx_RxISR_I2SExt+0x68>
 8005f40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f48:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d106      	bne.n	8005f62 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff ff03 	bl	8005d68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40003800 	.word	0x40003800
 8005f70:	40003400 	.word	0x40003400

08005f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e267      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d075      	beq.n	800607e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f92:	4b88      	ldr	r3, [pc, #544]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 030c 	and.w	r3, r3, #12
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d00c      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f9e:	4b85      	ldr	r3, [pc, #532]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d112      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005faa:	4b82      	ldr	r3, [pc, #520]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fb6:	d10b      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb8:	4b7e      	ldr	r3, [pc, #504]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d05b      	beq.n	800607c <HAL_RCC_OscConfig+0x108>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d157      	bne.n	800607c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e242      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd8:	d106      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x74>
 8005fda:	4b76      	ldr	r3, [pc, #472]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a75      	ldr	r2, [pc, #468]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	e01d      	b.n	8006024 <HAL_RCC_OscConfig+0xb0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff0:	d10c      	bne.n	800600c <HAL_RCC_OscConfig+0x98>
 8005ff2:	4b70      	ldr	r3, [pc, #448]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a6f      	ldr	r2, [pc, #444]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	4b6d      	ldr	r3, [pc, #436]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a6c      	ldr	r2, [pc, #432]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	e00b      	b.n	8006024 <HAL_RCC_OscConfig+0xb0>
 800600c:	4b69      	ldr	r3, [pc, #420]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a68      	ldr	r2, [pc, #416]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	4b66      	ldr	r3, [pc, #408]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a65      	ldr	r2, [pc, #404]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 800601e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d013      	beq.n	8006054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602c:	f7fd fa42 	bl	80034b4 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006034:	f7fd fa3e 	bl	80034b4 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b64      	cmp	r3, #100	; 0x64
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e207      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006046:	4b5b      	ldr	r3, [pc, #364]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0xc0>
 8006052:	e014      	b.n	800607e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006054:	f7fd fa2e 	bl	80034b4 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800605c:	f7fd fa2a 	bl	80034b4 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b64      	cmp	r3, #100	; 0x64
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e1f3      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606e:	4b51      	ldr	r3, [pc, #324]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f0      	bne.n	800605c <HAL_RCC_OscConfig+0xe8>
 800607a:	e000      	b.n	800607e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800607c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d063      	beq.n	8006152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800608a:	4b4a      	ldr	r3, [pc, #296]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 030c 	and.w	r3, r3, #12
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006096:	4b47      	ldr	r3, [pc, #284]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800609e:	2b08      	cmp	r3, #8
 80060a0:	d11c      	bne.n	80060dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060a2:	4b44      	ldr	r3, [pc, #272]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d116      	bne.n	80060dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ae:	4b41      	ldr	r3, [pc, #260]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <HAL_RCC_OscConfig+0x152>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d001      	beq.n	80060c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e1c7      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c6:	4b3b      	ldr	r3, [pc, #236]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4937      	ldr	r1, [pc, #220]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060da:	e03a      	b.n	8006152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d020      	beq.n	8006126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e4:	4b34      	ldr	r3, [pc, #208]	; (80061b8 <HAL_RCC_OscConfig+0x244>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ea:	f7fd f9e3 	bl	80034b4 <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f0:	e008      	b.n	8006104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060f2:	f7fd f9df 	bl	80034b4 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e1a8      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006104:	4b2b      	ldr	r3, [pc, #172]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0f0      	beq.n	80060f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006110:	4b28      	ldr	r3, [pc, #160]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	4925      	ldr	r1, [pc, #148]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006120:	4313      	orrs	r3, r2
 8006122:	600b      	str	r3, [r1, #0]
 8006124:	e015      	b.n	8006152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006126:	4b24      	ldr	r3, [pc, #144]	; (80061b8 <HAL_RCC_OscConfig+0x244>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612c:	f7fd f9c2 	bl	80034b4 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006134:	f7fd f9be 	bl	80034b4 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e187      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006146:	4b1b      	ldr	r3, [pc, #108]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	2b00      	cmp	r3, #0
 800615c:	d036      	beq.n	80061cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006166:	4b15      	ldr	r3, [pc, #84]	; (80061bc <HAL_RCC_OscConfig+0x248>)
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800616c:	f7fd f9a2 	bl	80034b4 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006174:	f7fd f99e 	bl	80034b4 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e167      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <HAL_RCC_OscConfig+0x240>)
 8006188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0f0      	beq.n	8006174 <HAL_RCC_OscConfig+0x200>
 8006192:	e01b      	b.n	80061cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006194:	4b09      	ldr	r3, [pc, #36]	; (80061bc <HAL_RCC_OscConfig+0x248>)
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800619a:	f7fd f98b 	bl	80034b4 <HAL_GetTick>
 800619e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061a0:	e00e      	b.n	80061c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061a2:	f7fd f987 	bl	80034b4 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d907      	bls.n	80061c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e150      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
 80061b4:	40023800 	.word	0x40023800
 80061b8:	42470000 	.word	0x42470000
 80061bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c0:	4b88      	ldr	r3, [pc, #544]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80061c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1ea      	bne.n	80061a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8097 	beq.w	8006308 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061da:	2300      	movs	r3, #0
 80061dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061de:	4b81      	ldr	r3, [pc, #516]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10f      	bne.n	800620a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061ea:	2300      	movs	r3, #0
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	4b7d      	ldr	r3, [pc, #500]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	4a7c      	ldr	r2, [pc, #496]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80061f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f8:	6413      	str	r3, [r2, #64]	; 0x40
 80061fa:	4b7a      	ldr	r3, [pc, #488]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006202:	60bb      	str	r3, [r7, #8]
 8006204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006206:	2301      	movs	r3, #1
 8006208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620a:	4b77      	ldr	r3, [pc, #476]	; (80063e8 <HAL_RCC_OscConfig+0x474>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d118      	bne.n	8006248 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006216:	4b74      	ldr	r3, [pc, #464]	; (80063e8 <HAL_RCC_OscConfig+0x474>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a73      	ldr	r2, [pc, #460]	; (80063e8 <HAL_RCC_OscConfig+0x474>)
 800621c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006222:	f7fd f947 	bl	80034b4 <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006228:	e008      	b.n	800623c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800622a:	f7fd f943 	bl	80034b4 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e10c      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623c:	4b6a      	ldr	r3, [pc, #424]	; (80063e8 <HAL_RCC_OscConfig+0x474>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f0      	beq.n	800622a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d106      	bne.n	800625e <HAL_RCC_OscConfig+0x2ea>
 8006250:	4b64      	ldr	r3, [pc, #400]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006254:	4a63      	ldr	r2, [pc, #396]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	6713      	str	r3, [r2, #112]	; 0x70
 800625c:	e01c      	b.n	8006298 <HAL_RCC_OscConfig+0x324>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	2b05      	cmp	r3, #5
 8006264:	d10c      	bne.n	8006280 <HAL_RCC_OscConfig+0x30c>
 8006266:	4b5f      	ldr	r3, [pc, #380]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626a:	4a5e      	ldr	r2, [pc, #376]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 800626c:	f043 0304 	orr.w	r3, r3, #4
 8006270:	6713      	str	r3, [r2, #112]	; 0x70
 8006272:	4b5c      	ldr	r3, [pc, #368]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006276:	4a5b      	ldr	r2, [pc, #364]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006278:	f043 0301 	orr.w	r3, r3, #1
 800627c:	6713      	str	r3, [r2, #112]	; 0x70
 800627e:	e00b      	b.n	8006298 <HAL_RCC_OscConfig+0x324>
 8006280:	4b58      	ldr	r3, [pc, #352]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006284:	4a57      	ldr	r2, [pc, #348]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006286:	f023 0301 	bic.w	r3, r3, #1
 800628a:	6713      	str	r3, [r2, #112]	; 0x70
 800628c:	4b55      	ldr	r3, [pc, #340]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 800628e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006290:	4a54      	ldr	r2, [pc, #336]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006292:	f023 0304 	bic.w	r3, r3, #4
 8006296:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d015      	beq.n	80062cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a0:	f7fd f908 	bl	80034b4 <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a6:	e00a      	b.n	80062be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a8:	f7fd f904 	bl	80034b4 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e0cb      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062be:	4b49      	ldr	r3, [pc, #292]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0ee      	beq.n	80062a8 <HAL_RCC_OscConfig+0x334>
 80062ca:	e014      	b.n	80062f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062cc:	f7fd f8f2 	bl	80034b4 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062d2:	e00a      	b.n	80062ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d4:	f7fd f8ee 	bl	80034b4 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e0b5      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ea:	4b3e      	ldr	r3, [pc, #248]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1ee      	bne.n	80062d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d105      	bne.n	8006308 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062fc:	4b39      	ldr	r3, [pc, #228]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	4a38      	ldr	r2, [pc, #224]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006306:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80a1 	beq.w	8006454 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006312:	4b34      	ldr	r3, [pc, #208]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
 800631a:	2b08      	cmp	r3, #8
 800631c:	d05c      	beq.n	80063d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d141      	bne.n	80063aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006326:	4b31      	ldr	r3, [pc, #196]	; (80063ec <HAL_RCC_OscConfig+0x478>)
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800632c:	f7fd f8c2 	bl	80034b4 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006334:	f7fd f8be 	bl	80034b4 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e087      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006346:	4b27      	ldr	r3, [pc, #156]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f0      	bne.n	8006334 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69da      	ldr	r2, [r3, #28]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	019b      	lsls	r3, r3, #6
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	085b      	lsrs	r3, r3, #1
 800636a:	3b01      	subs	r3, #1
 800636c:	041b      	lsls	r3, r3, #16
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	061b      	lsls	r3, r3, #24
 8006376:	491b      	ldr	r1, [pc, #108]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 8006378:	4313      	orrs	r3, r2
 800637a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_RCC_OscConfig+0x478>)
 800637e:	2201      	movs	r2, #1
 8006380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006382:	f7fd f897 	bl	80034b4 <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800638a:	f7fd f893 	bl	80034b4 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e05c      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800639c:	4b11      	ldr	r3, [pc, #68]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_RCC_OscConfig+0x416>
 80063a8:	e054      	b.n	8006454 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <HAL_RCC_OscConfig+0x478>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b0:	f7fd f880 	bl	80034b4 <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b8:	f7fd f87c 	bl	80034b4 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e045      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_RCC_OscConfig+0x470>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x444>
 80063d6:	e03d      	b.n	8006454 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d107      	bne.n	80063f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e038      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40007000 	.word	0x40007000
 80063ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063f0:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <HAL_RCC_OscConfig+0x4ec>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d028      	beq.n	8006450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006408:	429a      	cmp	r2, r3
 800640a:	d121      	bne.n	8006450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006416:	429a      	cmp	r2, r3
 8006418:	d11a      	bne.n	8006450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006420:	4013      	ands	r3, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006428:	4293      	cmp	r3, r2
 800642a:	d111      	bne.n	8006450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	085b      	lsrs	r3, r3, #1
 8006438:	3b01      	subs	r3, #1
 800643a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800643c:	429a      	cmp	r2, r3
 800643e:	d107      	bne.n	8006450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800644c:	429a      	cmp	r2, r3
 800644e:	d001      	beq.n	8006454 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e000      	b.n	8006456 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40023800 	.word	0x40023800

08006464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e0cc      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006478:	4b68      	ldr	r3, [pc, #416]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d90c      	bls.n	80064a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006486:	4b65      	ldr	r3, [pc, #404]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800648e:	4b63      	ldr	r3, [pc, #396]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d001      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e0b8      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d020      	beq.n	80064ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064b8:	4b59      	ldr	r3, [pc, #356]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4a58      	ldr	r2, [pc, #352]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064d0:	4b53      	ldr	r3, [pc, #332]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	4a52      	ldr	r2, [pc, #328]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064dc:	4b50      	ldr	r3, [pc, #320]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	494d      	ldr	r1, [pc, #308]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d044      	beq.n	8006584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d107      	bne.n	8006512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006502:	4b47      	ldr	r3, [pc, #284]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d119      	bne.n	8006542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e07f      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d003      	beq.n	8006522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800651e:	2b03      	cmp	r3, #3
 8006520:	d107      	bne.n	8006532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006522:	4b3f      	ldr	r3, [pc, #252]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d109      	bne.n	8006542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e06f      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006532:	4b3b      	ldr	r3, [pc, #236]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e067      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006542:	4b37      	ldr	r3, [pc, #220]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f023 0203 	bic.w	r2, r3, #3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	4934      	ldr	r1, [pc, #208]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 8006550:	4313      	orrs	r3, r2
 8006552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006554:	f7fc ffae 	bl	80034b4 <HAL_GetTick>
 8006558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655a:	e00a      	b.n	8006572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800655c:	f7fc ffaa 	bl	80034b4 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	f241 3288 	movw	r2, #5000	; 0x1388
 800656a:	4293      	cmp	r3, r2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e04f      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006572:	4b2b      	ldr	r3, [pc, #172]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 020c 	and.w	r2, r3, #12
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	429a      	cmp	r2, r3
 8006582:	d1eb      	bne.n	800655c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006584:	4b25      	ldr	r3, [pc, #148]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d20c      	bcs.n	80065ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006592:	4b22      	ldr	r3, [pc, #136]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800659a:	4b20      	ldr	r3, [pc, #128]	; (800661c <HAL_RCC_ClockConfig+0x1b8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d001      	beq.n	80065ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e032      	b.n	8006612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065b8:	4b19      	ldr	r3, [pc, #100]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	4916      	ldr	r1, [pc, #88]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065d6:	4b12      	ldr	r3, [pc, #72]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	490e      	ldr	r1, [pc, #56]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065ea:	f000 f821 	bl	8006630 <HAL_RCC_GetSysClockFreq>
 80065ee:	4602      	mov	r2, r0
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <HAL_RCC_ClockConfig+0x1bc>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	091b      	lsrs	r3, r3, #4
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	490a      	ldr	r1, [pc, #40]	; (8006624 <HAL_RCC_ClockConfig+0x1c0>)
 80065fc:	5ccb      	ldrb	r3, [r1, r3]
 80065fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006602:	4a09      	ldr	r2, [pc, #36]	; (8006628 <HAL_RCC_ClockConfig+0x1c4>)
 8006604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006606:	4b09      	ldr	r3, [pc, #36]	; (800662c <HAL_RCC_ClockConfig+0x1c8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f7fc ff0e 	bl	800342c <HAL_InitTick>

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40023c00 	.word	0x40023c00
 8006620:	40023800 	.word	0x40023800
 8006624:	0800b478 	.word	0x0800b478
 8006628:	20000000 	.word	0x20000000
 800662c:	20000004 	.word	0x20000004

08006630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006634:	b094      	sub	sp, #80	; 0x50
 8006636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	647b      	str	r3, [r7, #68]	; 0x44
 800663c:	2300      	movs	r3, #0
 800663e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006640:	2300      	movs	r3, #0
 8006642:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006648:	4b79      	ldr	r3, [pc, #484]	; (8006830 <HAL_RCC_GetSysClockFreq+0x200>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 030c 	and.w	r3, r3, #12
 8006650:	2b08      	cmp	r3, #8
 8006652:	d00d      	beq.n	8006670 <HAL_RCC_GetSysClockFreq+0x40>
 8006654:	2b08      	cmp	r3, #8
 8006656:	f200 80e1 	bhi.w	800681c <HAL_RCC_GetSysClockFreq+0x1ec>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_RCC_GetSysClockFreq+0x34>
 800665e:	2b04      	cmp	r3, #4
 8006660:	d003      	beq.n	800666a <HAL_RCC_GetSysClockFreq+0x3a>
 8006662:	e0db      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006664:	4b73      	ldr	r3, [pc, #460]	; (8006834 <HAL_RCC_GetSysClockFreq+0x204>)
 8006666:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006668:	e0db      	b.n	8006822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800666a:	4b73      	ldr	r3, [pc, #460]	; (8006838 <HAL_RCC_GetSysClockFreq+0x208>)
 800666c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800666e:	e0d8      	b.n	8006822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006670:	4b6f      	ldr	r3, [pc, #444]	; (8006830 <HAL_RCC_GetSysClockFreq+0x200>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006678:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800667a:	4b6d      	ldr	r3, [pc, #436]	; (8006830 <HAL_RCC_GetSysClockFreq+0x200>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d063      	beq.n	800674e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006686:	4b6a      	ldr	r3, [pc, #424]	; (8006830 <HAL_RCC_GetSysClockFreq+0x200>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	099b      	lsrs	r3, r3, #6
 800668c:	2200      	movs	r2, #0
 800668e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006698:	633b      	str	r3, [r7, #48]	; 0x30
 800669a:	2300      	movs	r3, #0
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
 800669e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80066a2:	4622      	mov	r2, r4
 80066a4:	462b      	mov	r3, r5
 80066a6:	f04f 0000 	mov.w	r0, #0
 80066aa:	f04f 0100 	mov.w	r1, #0
 80066ae:	0159      	lsls	r1, r3, #5
 80066b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066b4:	0150      	lsls	r0, r2, #5
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4621      	mov	r1, r4
 80066bc:	1a51      	subs	r1, r2, r1
 80066be:	6139      	str	r1, [r7, #16]
 80066c0:	4629      	mov	r1, r5
 80066c2:	eb63 0301 	sbc.w	r3, r3, r1
 80066c6:	617b      	str	r3, [r7, #20]
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066d4:	4659      	mov	r1, fp
 80066d6:	018b      	lsls	r3, r1, #6
 80066d8:	4651      	mov	r1, sl
 80066da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066de:	4651      	mov	r1, sl
 80066e0:	018a      	lsls	r2, r1, #6
 80066e2:	4651      	mov	r1, sl
 80066e4:	ebb2 0801 	subs.w	r8, r2, r1
 80066e8:	4659      	mov	r1, fp
 80066ea:	eb63 0901 	sbc.w	r9, r3, r1
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006702:	4690      	mov	r8, r2
 8006704:	4699      	mov	r9, r3
 8006706:	4623      	mov	r3, r4
 8006708:	eb18 0303 	adds.w	r3, r8, r3
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	462b      	mov	r3, r5
 8006710:	eb49 0303 	adc.w	r3, r9, r3
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	f04f 0200 	mov.w	r2, #0
 800671a:	f04f 0300 	mov.w	r3, #0
 800671e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006722:	4629      	mov	r1, r5
 8006724:	024b      	lsls	r3, r1, #9
 8006726:	4621      	mov	r1, r4
 8006728:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800672c:	4621      	mov	r1, r4
 800672e:	024a      	lsls	r2, r1, #9
 8006730:	4610      	mov	r0, r2
 8006732:	4619      	mov	r1, r3
 8006734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006736:	2200      	movs	r2, #0
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
 800673a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800673c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006740:	f7fa f968 	bl	8000a14 <__aeabi_uldivmod>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4613      	mov	r3, r2
 800674a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800674c:	e058      	b.n	8006800 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800674e:	4b38      	ldr	r3, [pc, #224]	; (8006830 <HAL_RCC_GetSysClockFreq+0x200>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	099b      	lsrs	r3, r3, #6
 8006754:	2200      	movs	r2, #0
 8006756:	4618      	mov	r0, r3
 8006758:	4611      	mov	r1, r2
 800675a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800675e:	623b      	str	r3, [r7, #32]
 8006760:	2300      	movs	r3, #0
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
 8006764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006768:	4642      	mov	r2, r8
 800676a:	464b      	mov	r3, r9
 800676c:	f04f 0000 	mov.w	r0, #0
 8006770:	f04f 0100 	mov.w	r1, #0
 8006774:	0159      	lsls	r1, r3, #5
 8006776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800677a:	0150      	lsls	r0, r2, #5
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4641      	mov	r1, r8
 8006782:	ebb2 0a01 	subs.w	sl, r2, r1
 8006786:	4649      	mov	r1, r9
 8006788:	eb63 0b01 	sbc.w	fp, r3, r1
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006798:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800679c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067a0:	ebb2 040a 	subs.w	r4, r2, sl
 80067a4:	eb63 050b 	sbc.w	r5, r3, fp
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	f04f 0300 	mov.w	r3, #0
 80067b0:	00eb      	lsls	r3, r5, #3
 80067b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067b6:	00e2      	lsls	r2, r4, #3
 80067b8:	4614      	mov	r4, r2
 80067ba:	461d      	mov	r5, r3
 80067bc:	4643      	mov	r3, r8
 80067be:	18e3      	adds	r3, r4, r3
 80067c0:	603b      	str	r3, [r7, #0]
 80067c2:	464b      	mov	r3, r9
 80067c4:	eb45 0303 	adc.w	r3, r5, r3
 80067c8:	607b      	str	r3, [r7, #4]
 80067ca:	f04f 0200 	mov.w	r2, #0
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067d6:	4629      	mov	r1, r5
 80067d8:	028b      	lsls	r3, r1, #10
 80067da:	4621      	mov	r1, r4
 80067dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067e0:	4621      	mov	r1, r4
 80067e2:	028a      	lsls	r2, r1, #10
 80067e4:	4610      	mov	r0, r2
 80067e6:	4619      	mov	r1, r3
 80067e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ea:	2200      	movs	r2, #0
 80067ec:	61bb      	str	r3, [r7, #24]
 80067ee:	61fa      	str	r2, [r7, #28]
 80067f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067f4:	f7fa f90e 	bl	8000a14 <__aeabi_uldivmod>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4613      	mov	r3, r2
 80067fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <HAL_RCC_GetSysClockFreq+0x200>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	0c1b      	lsrs	r3, r3, #16
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	3301      	adds	r3, #1
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006814:	fbb2 f3f3 	udiv	r3, r2, r3
 8006818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800681a:	e002      	b.n	8006822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <HAL_RCC_GetSysClockFreq+0x204>)
 800681e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006824:	4618      	mov	r0, r3
 8006826:	3750      	adds	r7, #80	; 0x50
 8006828:	46bd      	mov	sp, r7
 800682a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800682e:	bf00      	nop
 8006830:	40023800 	.word	0x40023800
 8006834:	00f42400 	.word	0x00f42400
 8006838:	007a1200 	.word	0x007a1200

0800683c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006840:	4b03      	ldr	r3, [pc, #12]	; (8006850 <HAL_RCC_GetHCLKFreq+0x14>)
 8006842:	681b      	ldr	r3, [r3, #0]
}
 8006844:	4618      	mov	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20000000 	.word	0x20000000

08006854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006858:	f7ff fff0 	bl	800683c <HAL_RCC_GetHCLKFreq>
 800685c:	4602      	mov	r2, r0
 800685e:	4b05      	ldr	r3, [pc, #20]	; (8006874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	0a9b      	lsrs	r3, r3, #10
 8006864:	f003 0307 	and.w	r3, r3, #7
 8006868:	4903      	ldr	r1, [pc, #12]	; (8006878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800686a:	5ccb      	ldrb	r3, [r1, r3]
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006870:	4618      	mov	r0, r3
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40023800 	.word	0x40023800
 8006878:	0800b488 	.word	0x0800b488

0800687c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006880:	f7ff ffdc 	bl	800683c <HAL_RCC_GetHCLKFreq>
 8006884:	4602      	mov	r2, r0
 8006886:	4b05      	ldr	r3, [pc, #20]	; (800689c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	0b5b      	lsrs	r3, r3, #13
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	4903      	ldr	r1, [pc, #12]	; (80068a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006892:	5ccb      	ldrb	r3, [r1, r3]
 8006894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006898:	4618      	mov	r0, r3
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40023800 	.word	0x40023800
 80068a0:	0800b488 	.word	0x0800b488

080068a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d105      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d038      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068cc:	4b68      	ldr	r3, [pc, #416]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068d2:	f7fc fdef 	bl	80034b4 <HAL_GetTick>
 80068d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068d8:	e008      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068da:	f7fc fdeb 	bl	80034b4 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e0bd      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068ec:	4b61      	ldr	r3, [pc, #388]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1f0      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	019b      	lsls	r3, r3, #6
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	071b      	lsls	r3, r3, #28
 800690a:	495a      	ldr	r1, [pc, #360]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800690c:	4313      	orrs	r3, r2
 800690e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006912:	4b57      	ldr	r3, [pc, #348]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006918:	f7fc fdcc 	bl	80034b4 <HAL_GetTick>
 800691c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800691e:	e008      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006920:	f7fc fdc8 	bl	80034b4 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e09a      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006932:	4b50      	ldr	r3, [pc, #320]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f0      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 8083 	beq.w	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	4b48      	ldr	r3, [pc, #288]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006954:	4a47      	ldr	r2, [pc, #284]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800695a:	6413      	str	r3, [r2, #64]	; 0x40
 800695c:	4b45      	ldr	r3, [pc, #276]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006968:	4b43      	ldr	r3, [pc, #268]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a42      	ldr	r2, [pc, #264]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800696e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006972:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006974:	f7fc fd9e 	bl	80034b4 <HAL_GetTick>
 8006978:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800697a:	e008      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800697c:	f7fc fd9a 	bl	80034b4 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	2b02      	cmp	r3, #2
 8006988:	d901      	bls.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e06c      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800698e:	4b3a      	ldr	r3, [pc, #232]	; (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0f0      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800699a:	4b36      	ldr	r3, [pc, #216]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069a2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d02f      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d028      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069b8:	4b2e      	ldr	r3, [pc, #184]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069c2:	4b2e      	ldr	r3, [pc, #184]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069c8:	4b2c      	ldr	r3, [pc, #176]	; (8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069ce:	4a29      	ldr	r2, [pc, #164]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069d4:	4b27      	ldr	r3, [pc, #156]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d114      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069e0:	f7fc fd68 	bl	80034b4 <HAL_GetTick>
 80069e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069e6:	e00a      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069e8:	f7fc fd64 	bl	80034b4 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e034      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069fe:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0ee      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a16:	d10d      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006a18:	4b16      	ldr	r3, [pc, #88]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a2c:	4911      	ldr	r1, [pc, #68]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	608b      	str	r3, [r1, #8]
 8006a32:	e005      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006a34:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	4a0e      	ldr	r2, [pc, #56]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a3a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a3e:	6093      	str	r3, [r2, #8]
 8006a40:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a4c:	4909      	ldr	r1, [pc, #36]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	7d1a      	ldrb	r2, [r3, #20]
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006a64:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	42470068 	.word	0x42470068
 8006a74:	40023800 	.word	0x40023800
 8006a78:	40007000 	.word	0x40007000
 8006a7c:	42470e40 	.word	0x42470e40
 8006a80:	424711e0 	.word	0x424711e0

08006a84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d140      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006aa2:	4b24      	ldr	r3, [pc, #144]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d005      	beq.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d131      	bne.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ab8:	4b1f      	ldr	r3, [pc, #124]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006aba:	617b      	str	r3, [r7, #20]
          break;
 8006abc:	e031      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006abe:	4b1d      	ldr	r3, [pc, #116]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aca:	d109      	bne.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006acc:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ad2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ad6:	4a19      	ldr	r2, [pc, #100]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	e008      	b.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006ae0:	4b14      	ldr	r3, [pc, #80]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006aea:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006af2:	4b10      	ldr	r3, [pc, #64]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af8:	099b      	lsrs	r3, r3, #6
 8006afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	fb02 f303 	mul.w	r3, r2, r3
 8006b04:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b06:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b0c:	0f1b      	lsrs	r3, r3, #28
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b18:	617b      	str	r3, [r7, #20]
          break;
 8006b1a:	e002      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
          break;
 8006b20:	bf00      	nop
        }
      }
      break;
 8006b22:	bf00      	nop
    }
  }
  return frequency;
 8006b24:	697b      	ldr	r3, [r7, #20]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40023800 	.word	0x40023800
 8006b38:	00bb8000 	.word	0x00bb8000
 8006b3c:	007a1200 	.word	0x007a1200
 8006b40:	00f42400 	.word	0x00f42400

08006b44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e07b      	b.n	8006c4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d108      	bne.n	8006b70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b66:	d009      	beq.n	8006b7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	61da      	str	r2, [r3, #28]
 8006b6e:	e005      	b.n	8006b7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fc fabc 	bl	8003114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c00:	ea42 0103 	orr.w	r1, r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	0c1b      	lsrs	r3, r3, #16
 8006c1a:	f003 0104 	and.w	r1, r3, #4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	f003 0210 	and.w	r2, r3, #16
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e03f      	b.n	8006ce8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d106      	bne.n	8006c82 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7fc fa91 	bl	80031a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2224      	movs	r2, #36	; 0x24
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c98:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fc7a 	bl	8007594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695a      	ldr	r2, [r3, #20]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cbe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b0ba      	sub	sp, #232	; 0xe8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10f      	bne.n	8006d56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d009      	beq.n	8006d56 <HAL_UART_IRQHandler+0x66>
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fb65 	bl	800741e <UART_Receive_IT>
      return;
 8006d54:	e256      	b.n	8007204 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80de 	beq.w	8006f1c <HAL_UART_IRQHandler+0x22c>
 8006d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d106      	bne.n	8006d7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80d1 	beq.w	8006f1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <HAL_UART_IRQHandler+0xae>
 8006d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0201 	orr.w	r2, r3, #1
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xd2>
 8006daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d005      	beq.n	8006dc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f043 0202 	orr.w	r2, r3, #2
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <HAL_UART_IRQHandler+0xf6>
 8006dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	f043 0204 	orr.w	r2, r3, #4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d011      	beq.n	8006e16 <HAL_UART_IRQHandler+0x126>
 8006df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d105      	bne.n	8006e0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	f043 0208 	orr.w	r2, r3, #8
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 81ed 	beq.w	80071fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d008      	beq.n	8006e3e <HAL_UART_IRQHandler+0x14e>
 8006e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 faf0 	bl	800741e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b40      	cmp	r3, #64	; 0x40
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2301      	moveq	r3, #1
 8006e4e:	2300      	movne	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	f003 0308 	and.w	r3, r3, #8
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d103      	bne.n	8006e6a <HAL_UART_IRQHandler+0x17a>
 8006e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d04f      	beq.n	8006f0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f9f8 	bl	8007260 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7a:	2b40      	cmp	r3, #64	; 0x40
 8006e7c:	d141      	bne.n	8006f02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3314      	adds	r3, #20
 8006e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3314      	adds	r3, #20
 8006ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1d9      	bne.n	8006e7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d013      	beq.n	8006efa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	4a7d      	ldr	r2, [pc, #500]	; (80070cc <HAL_UART_IRQHandler+0x3dc>)
 8006ed8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fc fc99 	bl	8003816 <HAL_DMA_Abort_IT>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d016      	beq.n	8006f18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef8:	e00e      	b.n	8006f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f99a 	bl	8007234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f00:	e00a      	b.n	8006f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f996 	bl	8007234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	e006      	b.n	8006f18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f992 	bl	8007234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006f16:	e170      	b.n	80071fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f18:	bf00      	nop
    return;
 8006f1a:	e16e      	b.n	80071fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	f040 814a 	bne.w	80071ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8143 	beq.w	80071ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f38:	f003 0310 	and.w	r3, r3, #16
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 813c 	beq.w	80071ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60bb      	str	r3, [r7, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	60bb      	str	r3, [r7, #8]
 8006f56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	f040 80b4 	bne.w	80070d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 8140 	beq.w	80071fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f86:	429a      	cmp	r2, r3
 8006f88:	f080 8139 	bcs.w	80071fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9e:	f000 8088 	beq.w	80070b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	330c      	adds	r3, #12
 8006fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fb0:	e853 3f00 	ldrex	r3, [r3]
 8006fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	330c      	adds	r3, #12
 8006fca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006fce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1d9      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3314      	adds	r3, #20
 8006ff4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007000:	f023 0301 	bic.w	r3, r3, #1
 8007004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3314      	adds	r3, #20
 800700e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007012:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007016:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800701a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800701e:	e841 2300 	strex	r3, r2, [r1]
 8007022:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1e1      	bne.n	8006fee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3314      	adds	r3, #20
 8007030:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800703a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800703c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3314      	adds	r3, #20
 800704a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800704e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007050:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007054:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800705c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e3      	bne.n	800702a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	330c      	adds	r3, #12
 8007076:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007082:	f023 0310 	bic.w	r3, r3, #16
 8007086:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	330c      	adds	r3, #12
 8007090:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007094:	65ba      	str	r2, [r7, #88]	; 0x58
 8007096:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800709a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e3      	bne.n	8007070 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fc fb42 	bl	8003736 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	b29b      	uxth	r3, r3
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8c0 	bl	8007248 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070c8:	e099      	b.n	80071fe <HAL_UART_IRQHandler+0x50e>
 80070ca:	bf00      	nop
 80070cc:	08007327 	.word	0x08007327
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070d8:	b29b      	uxth	r3, r3
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f000 808b 	beq.w	8007202 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80070ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8086 	beq.w	8007202 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	330c      	adds	r3, #12
 80070fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007108:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800710c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	330c      	adds	r3, #12
 8007116:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800711a:	647a      	str	r2, [r7, #68]	; 0x44
 800711c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e3      	bne.n	80070f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3314      	adds	r3, #20
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	623b      	str	r3, [r7, #32]
   return(result);
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	f023 0301 	bic.w	r3, r3, #1
 8007144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3314      	adds	r3, #20
 800714e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007152:	633a      	str	r2, [r7, #48]	; 0x30
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e3      	bne.n	800712e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	330c      	adds	r3, #12
 800717a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	60fb      	str	r3, [r7, #12]
   return(result);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0310 	bic.w	r3, r3, #16
 800718a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	330c      	adds	r3, #12
 8007194:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007198:	61fa      	str	r2, [r7, #28]
 800719a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	69b9      	ldr	r1, [r7, #24]
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	617b      	str	r3, [r7, #20]
   return(result);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e3      	bne.n	8007174 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f848 	bl	8007248 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071b8:	e023      	b.n	8007202 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d009      	beq.n	80071da <HAL_UART_IRQHandler+0x4ea>
 80071c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d003      	beq.n	80071da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f8bb 	bl	800734e <UART_Transmit_IT>
    return;
 80071d8:	e014      	b.n	8007204 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00e      	beq.n	8007204 <HAL_UART_IRQHandler+0x514>
 80071e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d008      	beq.n	8007204 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f8fb 	bl	80073ee <UART_EndTransmit_IT>
    return;
 80071f8:	e004      	b.n	8007204 <HAL_UART_IRQHandler+0x514>
    return;
 80071fa:	bf00      	nop
 80071fc:	e002      	b.n	8007204 <HAL_UART_IRQHandler+0x514>
      return;
 80071fe:	bf00      	nop
 8007200:	e000      	b.n	8007204 <HAL_UART_IRQHandler+0x514>
      return;
 8007202:	bf00      	nop
  }
}
 8007204:	37e8      	adds	r7, #232	; 0xe8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop

0800720c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007260:	b480      	push	{r7}
 8007262:	b095      	sub	sp, #84	; 0x54
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800727e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	330c      	adds	r3, #12
 8007286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007288:	643a      	str	r2, [r7, #64]	; 0x40
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800728e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e5      	bne.n	8007268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3314      	adds	r3, #20
 80072a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	f023 0301 	bic.w	r3, r3, #1
 80072b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3314      	adds	r3, #20
 80072ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e5      	bne.n	800729c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d119      	bne.n	800730c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	330c      	adds	r3, #12
 80072de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	e853 3f00 	ldrex	r3, [r3]
 80072e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f023 0310 	bic.w	r3, r3, #16
 80072ee:	647b      	str	r3, [r7, #68]	; 0x44
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	330c      	adds	r3, #12
 80072f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072f8:	61ba      	str	r2, [r7, #24]
 80072fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	6979      	ldr	r1, [r7, #20]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	613b      	str	r3, [r7, #16]
   return(result);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e5      	bne.n	80072d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2220      	movs	r2, #32
 8007310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	631a      	str	r2, [r3, #48]	; 0x30
}
 800731a:	bf00      	nop
 800731c:	3754      	adds	r7, #84	; 0x54
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7ff ff77 	bl	8007234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007346:	bf00      	nop
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800734e:	b480      	push	{r7}
 8007350:	b085      	sub	sp, #20
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b21      	cmp	r3, #33	; 0x21
 8007360:	d13e      	bne.n	80073e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736a:	d114      	bne.n	8007396 <UART_Transmit_IT+0x48>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d110      	bne.n	8007396 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007388:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	1c9a      	adds	r2, r3, #2
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	621a      	str	r2, [r3, #32]
 8007394:	e008      	b.n	80073a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	1c59      	adds	r1, r3, #1
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6211      	str	r1, [r2, #32]
 80073a0:	781a      	ldrb	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	4619      	mov	r1, r3
 80073b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10f      	bne.n	80073dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073dc:	2300      	movs	r3, #0
 80073de:	e000      	b.n	80073e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073e0:	2302      	movs	r3, #2
  }
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007404:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff fefc 	bl	800720c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b08c      	sub	sp, #48	; 0x30
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b22      	cmp	r3, #34	; 0x22
 8007430:	f040 80ab 	bne.w	800758a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800743c:	d117      	bne.n	800746e <UART_Receive_IT+0x50>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d113      	bne.n	800746e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007446:	2300      	movs	r3, #0
 8007448:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	b29b      	uxth	r3, r3
 8007458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745c:	b29a      	uxth	r2, r3
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007466:	1c9a      	adds	r2, r3, #2
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	629a      	str	r2, [r3, #40]	; 0x28
 800746c:	e026      	b.n	80074bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007474:	2300      	movs	r3, #0
 8007476:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007480:	d007      	beq.n	8007492 <UART_Receive_IT+0x74>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10a      	bne.n	80074a0 <UART_Receive_IT+0x82>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	b2da      	uxtb	r2, r3
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	e008      	b.n	80074b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	4619      	mov	r1, r3
 80074ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d15a      	bne.n	8007586 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 0220 	bic.w	r2, r2, #32
 80074de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695a      	ldr	r2, [r3, #20]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0201 	bic.w	r2, r2, #1
 80074fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2220      	movs	r2, #32
 8007504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	2b01      	cmp	r3, #1
 800750e:	d135      	bne.n	800757c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	330c      	adds	r3, #12
 800751c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	613b      	str	r3, [r7, #16]
   return(result);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f023 0310 	bic.w	r3, r3, #16
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	330c      	adds	r3, #12
 8007534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007536:	623a      	str	r2, [r7, #32]
 8007538:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	69f9      	ldr	r1, [r7, #28]
 800753c:	6a3a      	ldr	r2, [r7, #32]
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	61bb      	str	r3, [r7, #24]
   return(result);
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e5      	bne.n	8007516 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0310 	and.w	r3, r3, #16
 8007554:	2b10      	cmp	r3, #16
 8007556:	d10a      	bne.n	800756e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007558:	2300      	movs	r3, #0
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff fe67 	bl	8007248 <HAL_UARTEx_RxEventCallback>
 800757a:	e002      	b.n	8007582 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff fe4f 	bl	8007220 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	e002      	b.n	800758c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	e000      	b.n	800758c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800758a:	2302      	movs	r3, #2
  }
}
 800758c:	4618      	mov	r0, r3
 800758e:	3730      	adds	r7, #48	; 0x30
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007598:	b0c0      	sub	sp, #256	; 0x100
 800759a:	af00      	add	r7, sp, #0
 800759c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b0:	68d9      	ldr	r1, [r3, #12]
 80075b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	ea40 0301 	orr.w	r3, r0, r1
 80075bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80075e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80075ec:	f021 010c 	bic.w	r1, r1, #12
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075fa:	430b      	orrs	r3, r1
 80075fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800760a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760e:	6999      	ldr	r1, [r3, #24]
 8007610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	ea40 0301 	orr.w	r3, r0, r1
 800761a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800761c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4b8f      	ldr	r3, [pc, #572]	; (8007860 <UART_SetConfig+0x2cc>)
 8007624:	429a      	cmp	r2, r3
 8007626:	d005      	beq.n	8007634 <UART_SetConfig+0xa0>
 8007628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	4b8d      	ldr	r3, [pc, #564]	; (8007864 <UART_SetConfig+0x2d0>)
 8007630:	429a      	cmp	r2, r3
 8007632:	d104      	bne.n	800763e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007634:	f7ff f922 	bl	800687c <HAL_RCC_GetPCLK2Freq>
 8007638:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800763c:	e003      	b.n	8007646 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800763e:	f7ff f909 	bl	8006854 <HAL_RCC_GetPCLK1Freq>
 8007642:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007650:	f040 810c 	bne.w	800786c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007658:	2200      	movs	r2, #0
 800765a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800765e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007662:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007666:	4622      	mov	r2, r4
 8007668:	462b      	mov	r3, r5
 800766a:	1891      	adds	r1, r2, r2
 800766c:	65b9      	str	r1, [r7, #88]	; 0x58
 800766e:	415b      	adcs	r3, r3
 8007670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007672:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007676:	4621      	mov	r1, r4
 8007678:	eb12 0801 	adds.w	r8, r2, r1
 800767c:	4629      	mov	r1, r5
 800767e:	eb43 0901 	adc.w	r9, r3, r1
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800768e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007696:	4690      	mov	r8, r2
 8007698:	4699      	mov	r9, r3
 800769a:	4623      	mov	r3, r4
 800769c:	eb18 0303 	adds.w	r3, r8, r3
 80076a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076a4:	462b      	mov	r3, r5
 80076a6:	eb49 0303 	adc.w	r3, r9, r3
 80076aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80076be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80076c2:	460b      	mov	r3, r1
 80076c4:	18db      	adds	r3, r3, r3
 80076c6:	653b      	str	r3, [r7, #80]	; 0x50
 80076c8:	4613      	mov	r3, r2
 80076ca:	eb42 0303 	adc.w	r3, r2, r3
 80076ce:	657b      	str	r3, [r7, #84]	; 0x54
 80076d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076d8:	f7f9 f99c 	bl	8000a14 <__aeabi_uldivmod>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4b61      	ldr	r3, [pc, #388]	; (8007868 <UART_SetConfig+0x2d4>)
 80076e2:	fba3 2302 	umull	r2, r3, r3, r2
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	011c      	lsls	r4, r3, #4
 80076ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80076f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80076fc:	4642      	mov	r2, r8
 80076fe:	464b      	mov	r3, r9
 8007700:	1891      	adds	r1, r2, r2
 8007702:	64b9      	str	r1, [r7, #72]	; 0x48
 8007704:	415b      	adcs	r3, r3
 8007706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800770c:	4641      	mov	r1, r8
 800770e:	eb12 0a01 	adds.w	sl, r2, r1
 8007712:	4649      	mov	r1, r9
 8007714:	eb43 0b01 	adc.w	fp, r3, r1
 8007718:	f04f 0200 	mov.w	r2, #0
 800771c:	f04f 0300 	mov.w	r3, #0
 8007720:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007724:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800772c:	4692      	mov	sl, r2
 800772e:	469b      	mov	fp, r3
 8007730:	4643      	mov	r3, r8
 8007732:	eb1a 0303 	adds.w	r3, sl, r3
 8007736:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800773a:	464b      	mov	r3, r9
 800773c:	eb4b 0303 	adc.w	r3, fp, r3
 8007740:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007750:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007754:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007758:	460b      	mov	r3, r1
 800775a:	18db      	adds	r3, r3, r3
 800775c:	643b      	str	r3, [r7, #64]	; 0x40
 800775e:	4613      	mov	r3, r2
 8007760:	eb42 0303 	adc.w	r3, r2, r3
 8007764:	647b      	str	r3, [r7, #68]	; 0x44
 8007766:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800776a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800776e:	f7f9 f951 	bl	8000a14 <__aeabi_uldivmod>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4611      	mov	r1, r2
 8007778:	4b3b      	ldr	r3, [pc, #236]	; (8007868 <UART_SetConfig+0x2d4>)
 800777a:	fba3 2301 	umull	r2, r3, r3, r1
 800777e:	095b      	lsrs	r3, r3, #5
 8007780:	2264      	movs	r2, #100	; 0x64
 8007782:	fb02 f303 	mul.w	r3, r2, r3
 8007786:	1acb      	subs	r3, r1, r3
 8007788:	00db      	lsls	r3, r3, #3
 800778a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800778e:	4b36      	ldr	r3, [pc, #216]	; (8007868 <UART_SetConfig+0x2d4>)
 8007790:	fba3 2302 	umull	r2, r3, r3, r2
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800779c:	441c      	add	r4, r3
 800779e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80077ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80077b0:	4642      	mov	r2, r8
 80077b2:	464b      	mov	r3, r9
 80077b4:	1891      	adds	r1, r2, r2
 80077b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80077b8:	415b      	adcs	r3, r3
 80077ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077c0:	4641      	mov	r1, r8
 80077c2:	1851      	adds	r1, r2, r1
 80077c4:	6339      	str	r1, [r7, #48]	; 0x30
 80077c6:	4649      	mov	r1, r9
 80077c8:	414b      	adcs	r3, r1
 80077ca:	637b      	str	r3, [r7, #52]	; 0x34
 80077cc:	f04f 0200 	mov.w	r2, #0
 80077d0:	f04f 0300 	mov.w	r3, #0
 80077d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80077d8:	4659      	mov	r1, fp
 80077da:	00cb      	lsls	r3, r1, #3
 80077dc:	4651      	mov	r1, sl
 80077de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077e2:	4651      	mov	r1, sl
 80077e4:	00ca      	lsls	r2, r1, #3
 80077e6:	4610      	mov	r0, r2
 80077e8:	4619      	mov	r1, r3
 80077ea:	4603      	mov	r3, r0
 80077ec:	4642      	mov	r2, r8
 80077ee:	189b      	adds	r3, r3, r2
 80077f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077f4:	464b      	mov	r3, r9
 80077f6:	460a      	mov	r2, r1
 80077f8:	eb42 0303 	adc.w	r3, r2, r3
 80077fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800780c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007814:	460b      	mov	r3, r1
 8007816:	18db      	adds	r3, r3, r3
 8007818:	62bb      	str	r3, [r7, #40]	; 0x28
 800781a:	4613      	mov	r3, r2
 800781c:	eb42 0303 	adc.w	r3, r2, r3
 8007820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007826:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800782a:	f7f9 f8f3 	bl	8000a14 <__aeabi_uldivmod>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <UART_SetConfig+0x2d4>)
 8007834:	fba3 1302 	umull	r1, r3, r3, r2
 8007838:	095b      	lsrs	r3, r3, #5
 800783a:	2164      	movs	r1, #100	; 0x64
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	3332      	adds	r3, #50	; 0x32
 8007846:	4a08      	ldr	r2, [pc, #32]	; (8007868 <UART_SetConfig+0x2d4>)
 8007848:	fba2 2303 	umull	r2, r3, r2, r3
 800784c:	095b      	lsrs	r3, r3, #5
 800784e:	f003 0207 	and.w	r2, r3, #7
 8007852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4422      	add	r2, r4
 800785a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800785c:	e105      	b.n	8007a6a <UART_SetConfig+0x4d6>
 800785e:	bf00      	nop
 8007860:	40011000 	.word	0x40011000
 8007864:	40011400 	.word	0x40011400
 8007868:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800786c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007870:	2200      	movs	r2, #0
 8007872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007876:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800787a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800787e:	4642      	mov	r2, r8
 8007880:	464b      	mov	r3, r9
 8007882:	1891      	adds	r1, r2, r2
 8007884:	6239      	str	r1, [r7, #32]
 8007886:	415b      	adcs	r3, r3
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
 800788a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800788e:	4641      	mov	r1, r8
 8007890:	1854      	adds	r4, r2, r1
 8007892:	4649      	mov	r1, r9
 8007894:	eb43 0501 	adc.w	r5, r3, r1
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	00eb      	lsls	r3, r5, #3
 80078a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078a6:	00e2      	lsls	r2, r4, #3
 80078a8:	4614      	mov	r4, r2
 80078aa:	461d      	mov	r5, r3
 80078ac:	4643      	mov	r3, r8
 80078ae:	18e3      	adds	r3, r4, r3
 80078b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078b4:	464b      	mov	r3, r9
 80078b6:	eb45 0303 	adc.w	r3, r5, r3
 80078ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	f04f 0300 	mov.w	r3, #0
 80078d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80078da:	4629      	mov	r1, r5
 80078dc:	008b      	lsls	r3, r1, #2
 80078de:	4621      	mov	r1, r4
 80078e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078e4:	4621      	mov	r1, r4
 80078e6:	008a      	lsls	r2, r1, #2
 80078e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80078ec:	f7f9 f892 	bl	8000a14 <__aeabi_uldivmod>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4b60      	ldr	r3, [pc, #384]	; (8007a78 <UART_SetConfig+0x4e4>)
 80078f6:	fba3 2302 	umull	r2, r3, r3, r2
 80078fa:	095b      	lsrs	r3, r3, #5
 80078fc:	011c      	lsls	r4, r3, #4
 80078fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007902:	2200      	movs	r2, #0
 8007904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007908:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800790c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007910:	4642      	mov	r2, r8
 8007912:	464b      	mov	r3, r9
 8007914:	1891      	adds	r1, r2, r2
 8007916:	61b9      	str	r1, [r7, #24]
 8007918:	415b      	adcs	r3, r3
 800791a:	61fb      	str	r3, [r7, #28]
 800791c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007920:	4641      	mov	r1, r8
 8007922:	1851      	adds	r1, r2, r1
 8007924:	6139      	str	r1, [r7, #16]
 8007926:	4649      	mov	r1, r9
 8007928:	414b      	adcs	r3, r1
 800792a:	617b      	str	r3, [r7, #20]
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	f04f 0300 	mov.w	r3, #0
 8007934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007938:	4659      	mov	r1, fp
 800793a:	00cb      	lsls	r3, r1, #3
 800793c:	4651      	mov	r1, sl
 800793e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007942:	4651      	mov	r1, sl
 8007944:	00ca      	lsls	r2, r1, #3
 8007946:	4610      	mov	r0, r2
 8007948:	4619      	mov	r1, r3
 800794a:	4603      	mov	r3, r0
 800794c:	4642      	mov	r2, r8
 800794e:	189b      	adds	r3, r3, r2
 8007950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007954:	464b      	mov	r3, r9
 8007956:	460a      	mov	r2, r1
 8007958:	eb42 0303 	adc.w	r3, r2, r3
 800795c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	67bb      	str	r3, [r7, #120]	; 0x78
 800796a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800796c:	f04f 0200 	mov.w	r2, #0
 8007970:	f04f 0300 	mov.w	r3, #0
 8007974:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007978:	4649      	mov	r1, r9
 800797a:	008b      	lsls	r3, r1, #2
 800797c:	4641      	mov	r1, r8
 800797e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007982:	4641      	mov	r1, r8
 8007984:	008a      	lsls	r2, r1, #2
 8007986:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800798a:	f7f9 f843 	bl	8000a14 <__aeabi_uldivmod>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4b39      	ldr	r3, [pc, #228]	; (8007a78 <UART_SetConfig+0x4e4>)
 8007994:	fba3 1302 	umull	r1, r3, r3, r2
 8007998:	095b      	lsrs	r3, r3, #5
 800799a:	2164      	movs	r1, #100	; 0x64
 800799c:	fb01 f303 	mul.w	r3, r1, r3
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	3332      	adds	r3, #50	; 0x32
 80079a6:	4a34      	ldr	r2, [pc, #208]	; (8007a78 <UART_SetConfig+0x4e4>)
 80079a8:	fba2 2303 	umull	r2, r3, r2, r3
 80079ac:	095b      	lsrs	r3, r3, #5
 80079ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079b2:	441c      	add	r4, r3
 80079b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079b8:	2200      	movs	r2, #0
 80079ba:	673b      	str	r3, [r7, #112]	; 0x70
 80079bc:	677a      	str	r2, [r7, #116]	; 0x74
 80079be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80079c2:	4642      	mov	r2, r8
 80079c4:	464b      	mov	r3, r9
 80079c6:	1891      	adds	r1, r2, r2
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	415b      	adcs	r3, r3
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079d2:	4641      	mov	r1, r8
 80079d4:	1851      	adds	r1, r2, r1
 80079d6:	6039      	str	r1, [r7, #0]
 80079d8:	4649      	mov	r1, r9
 80079da:	414b      	adcs	r3, r1
 80079dc:	607b      	str	r3, [r7, #4]
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	f04f 0300 	mov.w	r3, #0
 80079e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079ea:	4659      	mov	r1, fp
 80079ec:	00cb      	lsls	r3, r1, #3
 80079ee:	4651      	mov	r1, sl
 80079f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079f4:	4651      	mov	r1, sl
 80079f6:	00ca      	lsls	r2, r1, #3
 80079f8:	4610      	mov	r0, r2
 80079fa:	4619      	mov	r1, r3
 80079fc:	4603      	mov	r3, r0
 80079fe:	4642      	mov	r2, r8
 8007a00:	189b      	adds	r3, r3, r2
 8007a02:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a04:	464b      	mov	r3, r9
 8007a06:	460a      	mov	r2, r1
 8007a08:	eb42 0303 	adc.w	r3, r2, r3
 8007a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	663b      	str	r3, [r7, #96]	; 0x60
 8007a18:	667a      	str	r2, [r7, #100]	; 0x64
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	f04f 0300 	mov.w	r3, #0
 8007a22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a26:	4649      	mov	r1, r9
 8007a28:	008b      	lsls	r3, r1, #2
 8007a2a:	4641      	mov	r1, r8
 8007a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a30:	4641      	mov	r1, r8
 8007a32:	008a      	lsls	r2, r1, #2
 8007a34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a38:	f7f8 ffec 	bl	8000a14 <__aeabi_uldivmod>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4b0d      	ldr	r3, [pc, #52]	; (8007a78 <UART_SetConfig+0x4e4>)
 8007a42:	fba3 1302 	umull	r1, r3, r3, r2
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	2164      	movs	r1, #100	; 0x64
 8007a4a:	fb01 f303 	mul.w	r3, r1, r3
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	3332      	adds	r3, #50	; 0x32
 8007a54:	4a08      	ldr	r2, [pc, #32]	; (8007a78 <UART_SetConfig+0x4e4>)
 8007a56:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	f003 020f 	and.w	r2, r3, #15
 8007a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4422      	add	r2, r4
 8007a68:	609a      	str	r2, [r3, #8]
}
 8007a6a:	bf00      	nop
 8007a6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a70:	46bd      	mov	sp, r7
 8007a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a76:	bf00      	nop
 8007a78:	51eb851f 	.word	0x51eb851f

08007a7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	f107 001c 	add.w	r0, r7, #28
 8007a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d122      	bne.n	8007ada <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d105      	bne.n	8007ace <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f9c0 	bl	8007e54 <USB_CoreReset>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	73fb      	strb	r3, [r7, #15]
 8007ad8:	e01a      	b.n	8007b10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f9b4 	bl	8007e54 <USB_CoreReset>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d106      	bne.n	8007b04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	639a      	str	r2, [r3, #56]	; 0x38
 8007b02:	e005      	b.n	8007b10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d10b      	bne.n	8007b2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f043 0206 	orr.w	r2, r3, #6
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f043 0220 	orr.w	r2, r3, #32
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b3a:	b004      	add	sp, #16
 8007b3c:	4770      	bx	lr

08007b3e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f043 0201 	orr.w	r2, r3, #1
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f023 0201 	bic.w	r2, r3, #1
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d115      	bne.n	8007bd0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	f7fb fc8b 	bl	80034cc <HAL_Delay>
      ms++;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f93a 	bl	8007e36 <USB_GetMode>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d01e      	beq.n	8007c06 <USB_SetCurrentMode+0x84>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b31      	cmp	r3, #49	; 0x31
 8007bcc:	d9f0      	bls.n	8007bb0 <USB_SetCurrentMode+0x2e>
 8007bce:	e01a      	b.n	8007c06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d115      	bne.n	8007c02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007be2:	2001      	movs	r0, #1
 8007be4:	f7fb fc72 	bl	80034cc <HAL_Delay>
      ms++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f921 	bl	8007e36 <USB_GetMode>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <USB_SetCurrentMode+0x84>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b31      	cmp	r3, #49	; 0x31
 8007bfe:	d9f0      	bls.n	8007be2 <USB_SetCurrentMode+0x60>
 8007c00:	e001      	b.n	8007c06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e005      	b.n	8007c12 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2b32      	cmp	r3, #50	; 0x32
 8007c0a:	d101      	bne.n	8007c10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e000      	b.n	8007c12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4a13      	ldr	r2, [pc, #76]	; (8007c80 <USB_FlushTxFifo+0x64>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d901      	bls.n	8007c3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e01b      	b.n	8007c74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	daf2      	bge.n	8007c2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	019b      	lsls	r3, r3, #6
 8007c4c:	f043 0220 	orr.w	r2, r3, #32
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3301      	adds	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4a08      	ldr	r2, [pc, #32]	; (8007c80 <USB_FlushTxFifo+0x64>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d901      	bls.n	8007c66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e006      	b.n	8007c74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f003 0320 	and.w	r3, r3, #32
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	d0f0      	beq.n	8007c54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	00030d40 	.word	0x00030d40

08007c84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3301      	adds	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4a11      	ldr	r2, [pc, #68]	; (8007ce0 <USB_FlushRxFifo+0x5c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d901      	bls.n	8007ca2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e018      	b.n	8007cd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	daf2      	bge.n	8007c90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2210      	movs	r2, #16
 8007cb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4a08      	ldr	r2, [pc, #32]	; (8007ce0 <USB_FlushRxFifo+0x5c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d901      	bls.n	8007cc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e006      	b.n	8007cd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	2b10      	cmp	r3, #16
 8007cd0:	d0f0      	beq.n	8007cb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	00030d40 	.word	0x00030d40

08007ce4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b089      	sub	sp, #36	; 0x24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4611      	mov	r1, r2
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	71fb      	strb	r3, [r7, #7]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007d02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d123      	bne.n	8007d52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d0a:	88bb      	ldrh	r3, [r7, #4]
 8007d0c:	3303      	adds	r3, #3
 8007d0e:	089b      	lsrs	r3, r3, #2
 8007d10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d12:	2300      	movs	r3, #0
 8007d14:	61bb      	str	r3, [r7, #24]
 8007d16:	e018      	b.n	8007d4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	031a      	lsls	r2, r3, #12
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d24:	461a      	mov	r2, r3
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	3301      	adds	r3, #1
 8007d36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	3301      	adds	r3, #1
 8007d42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	3301      	adds	r3, #1
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d3e2      	bcc.n	8007d18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3724      	adds	r7, #36	; 0x24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b08b      	sub	sp, #44	; 0x2c
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	089b      	lsrs	r3, r3, #2
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d7e:	88fb      	ldrh	r3, [r7, #6]
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d86:	2300      	movs	r3, #0
 8007d88:	623b      	str	r3, [r7, #32]
 8007d8a:	e014      	b.n	8007db6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	3301      	adds	r3, #1
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	3301      	adds	r3, #1
 8007da8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	3301      	adds	r3, #1
 8007dae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	3301      	adds	r3, #1
 8007db4:	623b      	str	r3, [r7, #32]
 8007db6:	6a3a      	ldr	r2, [r7, #32]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d3e6      	bcc.n	8007d8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007dbe:	8bfb      	ldrh	r3, [r7, #30]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d01e      	beq.n	8007e02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f107 0310 	add.w	r3, r7, #16
 8007dd4:	6812      	ldr	r2, [r2, #0]
 8007dd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	fa22 f303 	lsr.w	r3, r2, r3
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	701a      	strb	r2, [r3, #0]
      i++;
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	3301      	adds	r3, #1
 8007dee:	623b      	str	r3, [r7, #32]
      pDest++;
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	3301      	adds	r3, #1
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007df6:	8bfb      	ldrh	r3, [r7, #30]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007dfc:	8bfb      	ldrh	r3, [r7, #30]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1ea      	bne.n	8007dd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	372c      	adds	r7, #44	; 0x2c
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4013      	ands	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e28:	68fb      	ldr	r3, [r7, #12]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	f003 0301 	and.w	r3, r3, #1
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
	...

08007e54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3301      	adds	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4a13      	ldr	r2, [pc, #76]	; (8007eb8 <USB_CoreReset+0x64>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d901      	bls.n	8007e72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e01b      	b.n	8007eaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	daf2      	bge.n	8007e60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	f043 0201 	orr.w	r2, r3, #1
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4a09      	ldr	r2, [pc, #36]	; (8007eb8 <USB_CoreReset+0x64>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d901      	bls.n	8007e9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e006      	b.n	8007eaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d0f0      	beq.n	8007e8a <USB_CoreReset+0x36>

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	00030d40 	.word	0x00030d40

08007ebc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b086      	sub	sp, #24
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007edc:	461a      	mov	r2, r3
 8007ede:	2300      	movs	r3, #0
 8007ee0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d018      	beq.n	8007f44 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d10a      	bne.n	8007f2e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f26:	f043 0304 	orr.w	r3, r3, #4
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	e014      	b.n	8007f58 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f3c:	f023 0304 	bic.w	r3, r3, #4
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	e009      	b.n	8007f58 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f52:	f023 0304 	bic.w	r3, r3, #4
 8007f56:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f58:	2110      	movs	r1, #16
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7ff fe5e 	bl	8007c1c <USB_FlushTxFifo>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff fe8a 	bl	8007c84 <USB_FlushRxFifo>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	613b      	str	r3, [r7, #16]
 8007f7e:	e015      	b.n	8007fac <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f92:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	613b      	str	r3, [r7, #16]
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d3e5      	bcc.n	8007f80 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fd4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a13      	ldr	r2, [pc, #76]	; (8008028 <USB_HostInit+0x16c>)
 8007fda:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a13      	ldr	r2, [pc, #76]	; (800802c <USB_HostInit+0x170>)
 8007fe0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007fe4:	e009      	b.n	8007ffa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2280      	movs	r2, #128	; 0x80
 8007fea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a10      	ldr	r2, [pc, #64]	; (8008030 <USB_HostInit+0x174>)
 8007ff0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a0f      	ldr	r2, [pc, #60]	; (8008034 <USB_HostInit+0x178>)
 8007ff6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d105      	bne.n	800800c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	f043 0210 	orr.w	r2, r3, #16
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699a      	ldr	r2, [r3, #24]
 8008010:	4b09      	ldr	r3, [pc, #36]	; (8008038 <USB_HostInit+0x17c>)
 8008012:	4313      	orrs	r3, r2
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008024:	b004      	add	sp, #16
 8008026:	4770      	bx	lr
 8008028:	01000200 	.word	0x01000200
 800802c:	00e00300 	.word	0x00e00300
 8008030:	00600080 	.word	0x00600080
 8008034:	004000e0 	.word	0x004000e0
 8008038:	a3200008 	.word	0xa3200008

0800803c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	f003 0303 	and.w	r3, r3, #3
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008074:	4313      	orrs	r3, r2
 8008076:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d107      	bne.n	800808e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008084:	461a      	mov	r2, r3
 8008086:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800808a:	6053      	str	r3, [r2, #4]
 800808c:	e009      	b.n	80080a2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800808e:	78fb      	ldrb	r3, [r7, #3]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d106      	bne.n	80080a2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800809a:	461a      	mov	r2, r3
 800809c:	f241 7370 	movw	r3, #6000	; 0x1770
 80080a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80080bc:	2300      	movs	r3, #0
 80080be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80080d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080de:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80080e0:	2064      	movs	r0, #100	; 0x64
 80080e2:	f7fb f9f3 	bl	80034cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80080f4:	200a      	movs	r0, #10
 80080f6:	f7fb f9e9 	bl	80034cc <HAL_Delay>

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008128:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d109      	bne.n	8008148 <USB_DriveVbus+0x44>
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d106      	bne.n	8008148 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008142:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008146:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800814e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008152:	d109      	bne.n	8008168 <USB_DriveVbus+0x64>
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d106      	bne.n	8008168 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008166:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008176:	b480      	push	{r7}
 8008178:	b085      	sub	sp, #20
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	0c5b      	lsrs	r3, r3, #17
 8008194:	f003 0303 	and.w	r3, r3, #3
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	b29b      	uxth	r3, r3
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
	...

080081c8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	4608      	mov	r0, r1
 80081d2:	4611      	mov	r1, r2
 80081d4:	461a      	mov	r2, r3
 80081d6:	4603      	mov	r3, r0
 80081d8:	70fb      	strb	r3, [r7, #3]
 80081da:	460b      	mov	r3, r1
 80081dc:	70bb      	strb	r3, [r7, #2]
 80081de:	4613      	mov	r3, r2
 80081e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081f6:	461a      	mov	r2, r3
 80081f8:	f04f 33ff 	mov.w	r3, #4294967295
 80081fc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80081fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008202:	2b03      	cmp	r3, #3
 8008204:	d87e      	bhi.n	8008304 <USB_HC_Init+0x13c>
 8008206:	a201      	add	r2, pc, #4	; (adr r2, 800820c <USB_HC_Init+0x44>)
 8008208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820c:	0800821d 	.word	0x0800821d
 8008210:	080082c7 	.word	0x080082c7
 8008214:	0800821d 	.word	0x0800821d
 8008218:	08008289 	.word	0x08008289
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800821c:	78fb      	ldrb	r3, [r7, #3]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	4413      	add	r3, r2
 8008224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008228:	461a      	mov	r2, r3
 800822a:	f240 439d 	movw	r3, #1181	; 0x49d
 800822e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008230:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008234:	2b00      	cmp	r3, #0
 8008236:	da10      	bge.n	800825a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	4413      	add	r3, r2
 8008240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	78fa      	ldrb	r2, [r7, #3]
 8008248:	0151      	lsls	r1, r2, #5
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	440a      	add	r2, r1
 800824e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008256:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008258:	e057      	b.n	800830a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008262:	2b00      	cmp	r3, #0
 8008264:	d051      	beq.n	800830a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008266:	78fb      	ldrb	r3, [r7, #3]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	4413      	add	r3, r2
 800826e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	78fa      	ldrb	r2, [r7, #3]
 8008276:	0151      	lsls	r1, r2, #5
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	440a      	add	r2, r1
 800827c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008280:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008284:	60d3      	str	r3, [r2, #12]
      break;
 8008286:	e040      	b.n	800830a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	4413      	add	r3, r2
 8008290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008294:	461a      	mov	r2, r3
 8008296:	f240 639d 	movw	r3, #1693	; 0x69d
 800829a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800829c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	da34      	bge.n	800830e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	78fa      	ldrb	r2, [r7, #3]
 80082b4:	0151      	lsls	r1, r2, #5
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	440a      	add	r2, r1
 80082ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082c2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80082c4:	e023      	b.n	800830e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d2:	461a      	mov	r2, r3
 80082d4:	f240 2325 	movw	r3, #549	; 0x225
 80082d8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da17      	bge.n	8008312 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80082e2:	78fb      	ldrb	r3, [r7, #3]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	78fa      	ldrb	r2, [r7, #3]
 80082f2:	0151      	lsls	r1, r2, #5
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	440a      	add	r2, r1
 80082f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082fc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008300:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008302:	e006      	b.n	8008312 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	77fb      	strb	r3, [r7, #31]
      break;
 8008308:	e004      	b.n	8008314 <USB_HC_Init+0x14c>
      break;
 800830a:	bf00      	nop
 800830c:	e002      	b.n	8008314 <USB_HC_Init+0x14c>
      break;
 800830e:	bf00      	nop
 8008310:	e000      	b.n	8008314 <USB_HC_Init+0x14c>
      break;
 8008312:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	4413      	add	r3, r2
 800831c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	0151      	lsls	r1, r2, #5
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	440a      	add	r2, r1
 800832a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800832e:	f043 0302 	orr.w	r3, r3, #2
 8008332:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800833a:	699a      	ldr	r2, [r3, #24]
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	f003 030f 	and.w	r3, r3, #15
 8008342:	2101      	movs	r1, #1
 8008344:	fa01 f303 	lsl.w	r3, r1, r3
 8008348:	6939      	ldr	r1, [r7, #16]
 800834a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800834e:	4313      	orrs	r3, r2
 8008350:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800835e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008362:	2b00      	cmp	r3, #0
 8008364:	da03      	bge.n	800836e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800836a:	61bb      	str	r3, [r7, #24]
 800836c:	e001      	b.n	8008372 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800836e:	2300      	movs	r3, #0
 8008370:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7ff feff 	bl	8008176 <USB_GetHostSpeed>
 8008378:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800837a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800837e:	2b02      	cmp	r3, #2
 8008380:	d106      	bne.n	8008390 <USB_HC_Init+0x1c8>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b02      	cmp	r3, #2
 8008386:	d003      	beq.n	8008390 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	e001      	b.n	8008394 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008394:	787b      	ldrb	r3, [r7, #1]
 8008396:	059b      	lsls	r3, r3, #22
 8008398:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800839c:	78bb      	ldrb	r3, [r7, #2]
 800839e:	02db      	lsls	r3, r3, #11
 80083a0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083a4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083aa:	049b      	lsls	r3, r3, #18
 80083ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80083b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083be:	78fb      	ldrb	r3, [r7, #3]
 80083c0:	0159      	lsls	r1, r3, #5
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	440b      	add	r3, r1
 80083c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ca:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083d0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80083d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d003      	beq.n	80083e2 <USB_HC_Init+0x21a>
 80083da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d10f      	bne.n	8008402 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	78fa      	ldrb	r2, [r7, #3]
 80083f2:	0151      	lsls	r1, r2, #5
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	440a      	add	r2, r1
 80083f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008400:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008402:	7ffb      	ldrb	r3, [r7, #31]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3720      	adds	r7, #32
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08c      	sub	sp, #48	; 0x30
 8008410:	af02      	add	r7, sp, #8
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	785b      	ldrb	r3, [r3, #1]
 8008422:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008428:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008432:	2b00      	cmp	r3, #0
 8008434:	d02d      	beq.n	8008492 <USB_HC_StartXfer+0x86>
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	791b      	ldrb	r3, [r3, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d129      	bne.n	8008492 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d117      	bne.n	8008474 <USB_HC_StartXfer+0x68>
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	79db      	ldrb	r3, [r3, #7]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <USB_HC_StartXfer+0x48>
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	79db      	ldrb	r3, [r3, #7]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d10f      	bne.n	8008474 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	4413      	add	r3, r2
 800845c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	0151      	lsls	r1, r2, #5
 8008466:	6a3a      	ldr	r2, [r7, #32]
 8008468:	440a      	add	r2, r1
 800846a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800846e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008472:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10b      	bne.n	8008492 <USB_HC_StartXfer+0x86>
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	795b      	ldrb	r3, [r3, #5]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d107      	bne.n	8008492 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	785b      	ldrb	r3, [r3, #1]
 8008486:	4619      	mov	r1, r3
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f000 fa0f 	bl	80088ac <USB_DoPing>
      return HAL_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	e0f8      	b.n	8008684 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d018      	beq.n	80084cc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	8912      	ldrh	r2, [r2, #8]
 80084a2:	4413      	add	r3, r2
 80084a4:	3b01      	subs	r3, #1
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	8912      	ldrh	r2, [r2, #8]
 80084aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80084b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084b2:	8b7b      	ldrh	r3, [r7, #26]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d90b      	bls.n	80084d0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80084b8:	8b7b      	ldrh	r3, [r7, #26]
 80084ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	8912      	ldrh	r2, [r2, #8]
 80084c2:	fb03 f202 	mul.w	r2, r3, r2
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	611a      	str	r2, [r3, #16]
 80084ca:	e001      	b.n	80084d0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80084cc:	2301      	movs	r3, #1
 80084ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	78db      	ldrb	r3, [r3, #3]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	8912      	ldrh	r2, [r2, #8]
 80084de:	fb03 f202 	mul.w	r2, r3, r2
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	611a      	str	r2, [r3, #16]
 80084e6:	e003      	b.n	80084f0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	695a      	ldr	r2, [r3, #20]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084fa:	04d9      	lsls	r1, r3, #19
 80084fc:	4b63      	ldr	r3, [pc, #396]	; (800868c <USB_HC_StartXfer+0x280>)
 80084fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008500:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	7a9b      	ldrb	r3, [r3, #10]
 8008506:	075b      	lsls	r3, r3, #29
 8008508:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800850c:	69f9      	ldr	r1, [r7, #28]
 800850e:	0148      	lsls	r0, r1, #5
 8008510:	6a39      	ldr	r1, [r7, #32]
 8008512:	4401      	add	r1, r0
 8008514:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008518:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800851a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800851c:	79fb      	ldrb	r3, [r7, #7]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d009      	beq.n	8008536 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	68d9      	ldr	r1, [r3, #12]
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	4413      	add	r3, r2
 800852e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008532:	460a      	mov	r2, r1
 8008534:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	bf0c      	ite	eq
 8008546:	2301      	moveq	r3, #1
 8008548:	2300      	movne	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	4413      	add	r3, r2
 8008556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	69fa      	ldr	r2, [r7, #28]
 800855e:	0151      	lsls	r1, r2, #5
 8008560:	6a3a      	ldr	r2, [r7, #32]
 8008562:	440a      	add	r2, r1
 8008564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008568:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800856c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	4413      	add	r3, r2
 8008576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	7e7b      	ldrb	r3, [r7, #25]
 800857e:	075b      	lsls	r3, r3, #29
 8008580:	69f9      	ldr	r1, [r7, #28]
 8008582:	0148      	lsls	r0, r1, #5
 8008584:	6a39      	ldr	r1, [r7, #32]
 8008586:	4401      	add	r1, r0
 8008588:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800858c:	4313      	orrs	r3, r2
 800858e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	4413      	add	r3, r2
 8008598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085a6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	78db      	ldrb	r3, [r3, #3]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d004      	beq.n	80085ba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085b6:	613b      	str	r3, [r7, #16]
 80085b8:	e003      	b.n	80085c2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085c0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085c8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085d6:	461a      	mov	r2, r3
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	e04e      	b.n	8008684 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	78db      	ldrb	r3, [r3, #3]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d149      	bne.n	8008682 <USB_HC_StartXfer+0x276>
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d045      	beq.n	8008682 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	79db      	ldrb	r3, [r3, #7]
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d830      	bhi.n	8008660 <USB_HC_StartXfer+0x254>
 80085fe:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <USB_HC_StartXfer+0x1f8>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008615 	.word	0x08008615
 8008608:	08008639 	.word	0x08008639
 800860c:	08008615 	.word	0x08008615
 8008610:	08008639 	.word	0x08008639
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	3303      	adds	r3, #3
 800861a:	089b      	lsrs	r3, r3, #2
 800861c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800861e:	8afa      	ldrh	r2, [r7, #22]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	b29b      	uxth	r3, r3
 8008626:	429a      	cmp	r2, r3
 8008628:	d91c      	bls.n	8008664 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f043 0220 	orr.w	r2, r3, #32
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	619a      	str	r2, [r3, #24]
        }
        break;
 8008636:	e015      	b.n	8008664 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	3303      	adds	r3, #3
 800863e:	089b      	lsrs	r3, r3, #2
 8008640:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008642:	8afa      	ldrh	r2, [r7, #22]
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	b29b      	uxth	r3, r3
 800864e:	429a      	cmp	r2, r3
 8008650:	d90a      	bls.n	8008668 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	619a      	str	r2, [r3, #24]
        }
        break;
 800865e:	e003      	b.n	8008668 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008660:	bf00      	nop
 8008662:	e002      	b.n	800866a <USB_HC_StartXfer+0x25e>
        break;
 8008664:	bf00      	nop
 8008666:	e000      	b.n	800866a <USB_HC_StartXfer+0x25e>
        break;
 8008668:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	68d9      	ldr	r1, [r3, #12]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	785a      	ldrb	r2, [r3, #1]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	b29b      	uxth	r3, r3
 8008678:	2000      	movs	r0, #0
 800867a:	9000      	str	r0, [sp, #0]
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff fb31 	bl	8007ce4 <USB_WritePacket>
  }

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3728      	adds	r7, #40	; 0x28
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	1ff80000 	.word	0x1ff80000

08008690 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	b29b      	uxth	r3, r3
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b089      	sub	sp, #36	; 0x24
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80086c2:	78fb      	ldrb	r3, [r7, #3]
 80086c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	0c9b      	lsrs	r3, r3, #18
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	0fdb      	lsrs	r3, r3, #31
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f003 0320 	and.w	r3, r3, #32
 80086fe:	2b20      	cmp	r3, #32
 8008700:	d104      	bne.n	800870c <USB_HC_Halt+0x5a>
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	e0c8      	b.n	800889e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <USB_HC_Halt+0x66>
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b02      	cmp	r3, #2
 8008716:	d163      	bne.n	80087e0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	4413      	add	r3, r2
 8008720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	0151      	lsls	r1, r2, #5
 800872a:	69fa      	ldr	r2, [r7, #28]
 800872c:	440a      	add	r2, r1
 800872e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008736:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f003 0320 	and.w	r3, r3, #32
 8008740:	2b00      	cmp	r3, #0
 8008742:	f040 80ab 	bne.w	800889c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d133      	bne.n	80087ba <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	4413      	add	r3, r2
 800875a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	0151      	lsls	r1, r2, #5
 8008764:	69fa      	ldr	r2, [r7, #28]
 8008766:	440a      	add	r2, r1
 8008768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800876c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008770:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	0151      	lsls	r1, r2, #5
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	440a      	add	r2, r1
 8008788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800878c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008790:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800879e:	d81d      	bhi.n	80087dc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087b6:	d0ec      	beq.n	8008792 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087b8:	e070      	b.n	800889c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	0151      	lsls	r1, r2, #5
 80087cc:	69fa      	ldr	r2, [r7, #28]
 80087ce:	440a      	add	r2, r1
 80087d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087da:	e05f      	b.n	800889c <USB_HC_Halt+0x1ea>
            break;
 80087dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087de:	e05d      	b.n	800889c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	0151      	lsls	r1, r2, #5
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	440a      	add	r2, r1
 80087f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d133      	bne.n	8008878 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69ba      	ldr	r2, [r7, #24]
 8008820:	0151      	lsls	r1, r2, #5
 8008822:	69fa      	ldr	r2, [r7, #28]
 8008824:	440a      	add	r2, r1
 8008826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800882a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800882e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	4413      	add	r3, r2
 8008838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	0151      	lsls	r1, r2, #5
 8008842:	69fa      	ldr	r2, [r7, #28]
 8008844:	440a      	add	r2, r1
 8008846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800884a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800884e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3301      	adds	r3, #1
 8008854:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800885c:	d81d      	bhi.n	800889a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	4413      	add	r3, r2
 8008866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008874:	d0ec      	beq.n	8008850 <USB_HC_Halt+0x19e>
 8008876:	e011      	b.n	800889c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	4413      	add	r3, r2
 8008880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	0151      	lsls	r1, r2, #5
 800888a:	69fa      	ldr	r2, [r7, #28]
 800888c:	440a      	add	r2, r1
 800888e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	e000      	b.n	800889c <USB_HC_Halt+0x1ea>
          break;
 800889a:	bf00      	nop
    }
  }

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3724      	adds	r7, #36	; 0x24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
	...

080088ac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80088bc:	78fb      	ldrb	r3, [r7, #3]
 80088be:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80088c0:	2301      	movs	r3, #1
 80088c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	04da      	lsls	r2, r3, #19
 80088c8:	4b15      	ldr	r3, [pc, #84]	; (8008920 <USB_DoPing+0x74>)
 80088ca:	4013      	ands	r3, r2
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088dc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088f4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088fc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	4413      	add	r3, r2
 8008906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800890a:	461a      	mov	r2, r3
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	1ff80000 	.word	0x1ff80000

08008924 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008934:	2300      	movs	r3, #0
 8008936:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7ff f911 	bl	8007b60 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800893e:	2110      	movs	r1, #16
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff f96b 	bl	8007c1c <USB_FlushTxFifo>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff f997 	bl	8007c84 <USB_FlushRxFifo>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008960:	2300      	movs	r3, #0
 8008962:	61bb      	str	r3, [r7, #24]
 8008964:	e01f      	b.n	80089a6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	4413      	add	r3, r2
 800896e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800897c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008984:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800898c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	015a      	lsls	r2, r3, #5
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	4413      	add	r3, r2
 8008996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800899a:	461a      	mov	r2, r3
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	3301      	adds	r3, #1
 80089a4:	61bb      	str	r3, [r7, #24]
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	2b0f      	cmp	r3, #15
 80089aa:	d9dc      	bls.n	8008966 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089ac:	2300      	movs	r3, #0
 80089ae:	61bb      	str	r3, [r7, #24]
 80089b0:	e034      	b.n	8008a1c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e6:	461a      	mov	r2, r3
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3301      	adds	r3, #1
 80089f0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089f8:	d80c      	bhi.n	8008a14 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a10:	d0ec      	beq.n	80089ec <USB_StopHost+0xc8>
 8008a12:	e000      	b.n	8008a16 <USB_StopHost+0xf2>
        break;
 8008a14:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	61bb      	str	r3, [r7, #24]
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	2b0f      	cmp	r3, #15
 8008a20:	d9c7      	bls.n	80089b2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a2e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f04f 32ff 	mov.w	r2, #4294967295
 8008a36:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff f880 	bl	8007b3e <USB_EnableGlobalInt>

  return ret;
 8008a3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3720      	adds	r7, #32
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008a48:	b590      	push	{r4, r7, lr}
 8008a4a:	b089      	sub	sp, #36	; 0x24
 8008a4c:	af04      	add	r7, sp, #16
 8008a4e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008a50:	2301      	movs	r3, #1
 8008a52:	2202      	movs	r2, #2
 8008a54:	2102      	movs	r1, #2
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fc66 	bl	8009328 <USBH_FindInterface>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2bff      	cmp	r3, #255	; 0xff
 8008a64:	d002      	beq.n	8008a6c <USBH_CDC_InterfaceInit+0x24>
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d901      	bls.n	8008a70 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e13d      	b.n	8008cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fc3b 	bl	80092f0 <USBH_SelectInterface>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008a84:	2302      	movs	r3, #2
 8008a86:	e131      	b.n	8008cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008a8e:	2050      	movs	r0, #80	; 0x50
 8008a90:	f002 fb34 	bl	800b0fc <malloc>
 8008a94:	4603      	mov	r3, r0
 8008a96:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e11f      	b.n	8008cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008aac:	2250      	movs	r2, #80	; 0x50
 8008aae:	2100      	movs	r1, #0
 8008ab0:	68b8      	ldr	r0, [r7, #8]
 8008ab2:	f002 fb33 	bl	800b11c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	211a      	movs	r1, #26
 8008abc:	fb01 f303 	mul.w	r3, r1, r3
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	b25b      	sxtb	r3, r3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	da15      	bge.n	8008afa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	211a      	movs	r1, #26
 8008ad4:	fb01 f303 	mul.w	r3, r1, r3
 8008ad8:	4413      	add	r3, r2
 8008ada:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ade:	781a      	ldrb	r2, [r3, #0]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	211a      	movs	r1, #26
 8008aea:	fb01 f303 	mul.w	r3, r1, r3
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008af4:	881a      	ldrh	r2, [r3, #0]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 ff2c 	bl	800a95e <USBH_AllocPipe>
 8008b06:	4603      	mov	r3, r0
 8008b08:	461a      	mov	r2, r3
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	7819      	ldrb	r1, [r3, #0]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	7858      	ldrb	r0, [r3, #1]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	8952      	ldrh	r2, [r2, #10]
 8008b26:	9202      	str	r2, [sp, #8]
 8008b28:	2203      	movs	r2, #3
 8008b2a:	9201      	str	r2, [sp, #4]
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	4623      	mov	r3, r4
 8008b30:	4602      	mov	r2, r0
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 fee4 	bl	800a900 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f002 f9f3 	bl	800af2c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008b46:	2300      	movs	r3, #0
 8008b48:	2200      	movs	r2, #0
 8008b4a:	210a      	movs	r1, #10
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fbeb 	bl	8009328 <USBH_FindInterface>
 8008b52:	4603      	mov	r3, r0
 8008b54:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	2bff      	cmp	r3, #255	; 0xff
 8008b5a:	d002      	beq.n	8008b62 <USBH_CDC_InterfaceInit+0x11a>
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d901      	bls.n	8008b66 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b62:	2302      	movs	r3, #2
 8008b64:	e0c2      	b.n	8008cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	211a      	movs	r1, #26
 8008b6c:	fb01 f303 	mul.w	r3, r1, r3
 8008b70:	4413      	add	r3, r2
 8008b72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	b25b      	sxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	da16      	bge.n	8008bac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	211a      	movs	r1, #26
 8008b84:	fb01 f303 	mul.w	r3, r1, r3
 8008b88:	4413      	add	r3, r2
 8008b8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b8e:	781a      	ldrb	r2, [r3, #0]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	211a      	movs	r1, #26
 8008b9a:	fb01 f303 	mul.w	r3, r1, r3
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ba4:	881a      	ldrh	r2, [r3, #0]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	835a      	strh	r2, [r3, #26]
 8008baa:	e015      	b.n	8008bd8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	211a      	movs	r1, #26
 8008bb2:	fb01 f303 	mul.w	r3, r1, r3
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bbc:	781a      	ldrb	r2, [r3, #0]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	211a      	movs	r1, #26
 8008bc8:	fb01 f303 	mul.w	r3, r1, r3
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008bd2:	881a      	ldrh	r2, [r3, #0]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	211a      	movs	r1, #26
 8008bde:	fb01 f303 	mul.w	r3, r1, r3
 8008be2:	4413      	add	r3, r2
 8008be4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	b25b      	sxtb	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	da16      	bge.n	8008c1e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	211a      	movs	r1, #26
 8008bf6:	fb01 f303 	mul.w	r3, r1, r3
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	211a      	movs	r1, #26
 8008c0c:	fb01 f303 	mul.w	r3, r1, r3
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c16:	881a      	ldrh	r2, [r3, #0]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	835a      	strh	r2, [r3, #26]
 8008c1c:	e015      	b.n	8008c4a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	211a      	movs	r1, #26
 8008c24:	fb01 f303 	mul.w	r3, r1, r3
 8008c28:	4413      	add	r3, r2
 8008c2a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	211a      	movs	r1, #26
 8008c3a:	fb01 f303 	mul.w	r3, r1, r3
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c44:	881a      	ldrh	r2, [r3, #0]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	7b9b      	ldrb	r3, [r3, #14]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 fe84 	bl	800a95e <USBH_AllocPipe>
 8008c56:	4603      	mov	r3, r0
 8008c58:	461a      	mov	r2, r3
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	7bdb      	ldrb	r3, [r3, #15]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 fe7a 	bl	800a95e <USBH_AllocPipe>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	7b59      	ldrb	r1, [r3, #13]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	7b98      	ldrb	r0, [r3, #14]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	8b12      	ldrh	r2, [r2, #24]
 8008c8a:	9202      	str	r2, [sp, #8]
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	9201      	str	r2, [sp, #4]
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	4623      	mov	r3, r4
 8008c94:	4602      	mov	r2, r0
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f001 fe32 	bl	800a900 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	7b19      	ldrb	r1, [r3, #12]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	7bd8      	ldrb	r0, [r3, #15]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	8b52      	ldrh	r2, [r2, #26]
 8008cb4:	9202      	str	r2, [sp, #8]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	9201      	str	r2, [sp, #4]
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	4623      	mov	r3, r4
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 fe1d 	bl	800a900 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	7b5b      	ldrb	r3, [r3, #13]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f002 f928 	bl	800af2c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	7b1b      	ldrb	r3, [r3, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f002 f921 	bl	800af2c <USBH_LL_SetToggle>

  return USBH_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd90      	pop	{r4, r7, pc}

08008cf4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d02:	69db      	ldr	r3, [r3, #28]
 8008d04:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00e      	beq.n	8008d2c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 fe12 	bl	800a93e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 fe3d 	bl	800a9a0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	7b1b      	ldrb	r3, [r3, #12]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00e      	beq.n	8008d52 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	7b1b      	ldrb	r3, [r3, #12]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f001 fdff 	bl	800a93e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	7b1b      	ldrb	r3, [r3, #12]
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 fe2a 	bl	800a9a0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	7b5b      	ldrb	r3, [r3, #13]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00e      	beq.n	8008d78 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	7b5b      	ldrb	r3, [r3, #13]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f001 fdec 	bl	800a93e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	7b5b      	ldrb	r3, [r3, #13]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f001 fe17 	bl	800a9a0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00b      	beq.n	8008d9c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f002 f9bd 	bl	800b10c <free>
    phost->pActiveClass->pData = 0U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d98:	2200      	movs	r2, #0
 8008d9a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	3340      	adds	r3, #64	; 0x40
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f8b1 	bl	8008f26 <GetLineCoding>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d105      	bne.n	8008dda <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008dd4:	2102      	movs	r1, #2
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008dda:	7afb      	ldrb	r3, [r7, #11]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008dec:	2301      	movs	r3, #1
 8008dee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008e04:	2b04      	cmp	r3, #4
 8008e06:	d877      	bhi.n	8008ef8 <USBH_CDC_Process+0x114>
 8008e08:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <USBH_CDC_Process+0x2c>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e25 	.word	0x08008e25
 8008e14:	08008e2b 	.word	0x08008e2b
 8008e18:	08008e5b 	.word	0x08008e5b
 8008e1c:	08008ecf 	.word	0x08008ecf
 8008e20:	08008edd 	.word	0x08008edd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
      break;
 8008e28:	e06d      	b.n	8008f06 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f897 	bl	8008f64 <SetLineCoding>
 8008e36:	4603      	mov	r3, r0
 8008e38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d104      	bne.n	8008e4a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2202      	movs	r2, #2
 8008e44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e48:	e058      	b.n	8008efc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d055      	beq.n	8008efc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	2204      	movs	r2, #4
 8008e54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008e58:	e050      	b.n	8008efc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	3340      	adds	r3, #64	; 0x40
 8008e5e:	4619      	mov	r1, r3
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f860 	bl	8008f26 <GetLineCoding>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d126      	bne.n	8008ebe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e82:	791b      	ldrb	r3, [r3, #4]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d13b      	bne.n	8008f00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e92:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d133      	bne.n	8008f00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ea2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d12b      	bne.n	8008f00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eb0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d124      	bne.n	8008f00 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f958 	bl	800916c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ebc:	e020      	b.n	8008f00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d01d      	beq.n	8008f00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2204      	movs	r2, #4
 8008ec8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008ecc:	e018      	b.n	8008f00 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f867 	bl	8008fa2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f8da 	bl	800908e <CDC_ProcessReception>
      break;
 8008eda:	e014      	b.n	8008f06 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008edc:	2100      	movs	r1, #0
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 ffef 	bl	8009ec2 <USBH_ClrFeature>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008ef6:	e005      	b.n	8008f04 <USBH_CDC_Process+0x120>

    default:
      break;
 8008ef8:	bf00      	nop
 8008efa:	e004      	b.n	8008f06 <USBH_CDC_Process+0x122>
      break;
 8008efc:	bf00      	nop
 8008efe:	e002      	b.n	8008f06 <USBH_CDC_Process+0x122>
      break;
 8008f00:	bf00      	nop
 8008f02:	e000      	b.n	8008f06 <USBH_CDC_Process+0x122>
      break;
 8008f04:	bf00      	nop

  }

  return status;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	370c      	adds	r7, #12
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b082      	sub	sp, #8
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	22a1      	movs	r2, #161	; 0xa1
 8008f34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2221      	movs	r2, #33	; 0x21
 8008f3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2207      	movs	r2, #7
 8008f4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2207      	movs	r2, #7
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f001 fa81 	bl	800a45c <USBH_CtlReq>
 8008f5a:	4603      	mov	r3, r0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2221      	movs	r2, #33	; 0x21
 8008f72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2220      	movs	r2, #32
 8008f78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2207      	movs	r2, #7
 8008f8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2207      	movs	r2, #7
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f001 fa62 	bl	800a45c <USBH_CtlReq>
 8008f98:	4603      	mov	r3, r0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b086      	sub	sp, #24
 8008fa6:	af02      	add	r7, sp, #8
 8008fa8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d002      	beq.n	8008fc8 <CDC_ProcessTransmission+0x26>
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d023      	beq.n	800900e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008fc6:	e05e      	b.n	8009086 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	8b12      	ldrh	r2, [r2, #24]
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d90b      	bls.n	8008fec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	69d9      	ldr	r1, [r3, #28]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	8b1a      	ldrh	r2, [r3, #24]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	7b5b      	ldrb	r3, [r3, #13]
 8008fe0:	2001      	movs	r0, #1
 8008fe2:	9000      	str	r0, [sp, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 fc48 	bl	800a87a <USBH_BulkSendData>
 8008fea:	e00b      	b.n	8009004 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	7b5b      	ldrb	r3, [r3, #13]
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	9000      	str	r0, [sp, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f001 fc3b 	bl	800a87a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2202      	movs	r2, #2
 8009008:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800900c:	e03b      	b.n	8009086 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	7b5b      	ldrb	r3, [r3, #13]
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 ff5f 	bl	800aed8 <USBH_LL_GetURBState>
 800901a:	4603      	mov	r3, r0
 800901c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800901e:	7afb      	ldrb	r3, [r7, #11]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d128      	bne.n	8009076 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	8b12      	ldrh	r2, [r2, #24]
 800902c:	4293      	cmp	r3, r2
 800902e:	d90e      	bls.n	800904e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	8b12      	ldrh	r2, [r2, #24]
 8009038:	1a9a      	subs	r2, r3, r2
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	8b12      	ldrh	r2, [r2, #24]
 8009046:	441a      	add	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	61da      	str	r2, [r3, #28]
 800904c:	e002      	b.n	8009054 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009058:	2b00      	cmp	r3, #0
 800905a:	d004      	beq.n	8009066 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009064:	e00e      	b.n	8009084 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f868 	bl	8009144 <USBH_CDC_TransmitCallback>
      break;
 8009074:	e006      	b.n	8009084 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009076:	7afb      	ldrb	r3, [r7, #11]
 8009078:	2b02      	cmp	r3, #2
 800907a:	d103      	bne.n	8009084 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009084:	bf00      	nop
  }
}
 8009086:	bf00      	nop
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b086      	sub	sp, #24
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090a0:	2300      	movs	r3, #0
 80090a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d002      	beq.n	80090b4 <CDC_ProcessReception+0x26>
 80090ae:	2b04      	cmp	r3, #4
 80090b0:	d00e      	beq.n	80090d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80090b2:	e043      	b.n	800913c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	6a19      	ldr	r1, [r3, #32]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	8b5a      	ldrh	r2, [r3, #26]
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	7b1b      	ldrb	r3, [r3, #12]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 fbff 	bl	800a8c4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2204      	movs	r2, #4
 80090ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80090ce:	e035      	b.n	800913c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	7b1b      	ldrb	r3, [r3, #12]
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 fefe 	bl	800aed8 <USBH_LL_GetURBState>
 80090dc:	4603      	mov	r3, r0
 80090de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80090e0:	7cfb      	ldrb	r3, [r7, #19]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d129      	bne.n	800913a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	7b1b      	ldrb	r3, [r3, #12]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 fe61 	bl	800adb4 <USBH_LL_GetLastXferSize>
 80090f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d016      	beq.n	800912c <CDC_ProcessReception+0x9e>
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	8b5b      	ldrh	r3, [r3, #26]
 8009102:	461a      	mov	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	4293      	cmp	r3, r2
 8009108:	d910      	bls.n	800912c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1ad2      	subs	r2, r2, r3
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	6a1a      	ldr	r2, [r3, #32]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	441a      	add	r2, r3
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2203      	movs	r2, #3
 8009126:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800912a:	e006      	b.n	800913a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f80f 	bl	8009158 <USBH_CDC_ReceiveCallback>
      break;
 800913a:	bf00      	nop
  }
}
 800913c:	bf00      	nop
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	4613      	mov	r3, r2
 800918c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009194:	2302      	movs	r3, #2
 8009196:	e029      	b.n	80091ec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	79fa      	ldrb	r2, [r7, #7]
 800919c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 f81f 	bl	80091f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	68ba      	ldr	r2, [r7, #8]
 80091e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f001 fd31 	bl	800ac4c <USBH_LL_Init>

  return USBH_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	e009      	b.n	800921a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	33e0      	adds	r3, #224	; 0xe0
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	4413      	add	r3, r2
 8009210:	2200      	movs	r2, #0
 8009212:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3301      	adds	r3, #1
 8009218:	60fb      	str	r3, [r7, #12]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2b0f      	cmp	r3, #15
 800921e:	d9f2      	bls.n	8009206 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009220:	2300      	movs	r3, #0
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	e009      	b.n	800923a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4413      	add	r3, r2
 800922c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009230:	2200      	movs	r2, #0
 8009232:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3301      	adds	r3, #1
 8009238:	60fb      	str	r3, [r7, #12]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009240:	d3f1      	bcc.n	8009226 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2240      	movs	r2, #64	; 0x40
 8009266:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d016      	beq.n	80092de <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10e      	bne.n	80092d8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092c0:	1c59      	adds	r1, r3, #1
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	33de      	adds	r3, #222	; 0xde
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73fb      	strb	r3, [r7, #15]
 80092d6:	e004      	b.n	80092e2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80092d8:	2302      	movs	r3, #2
 80092da:	73fb      	strb	r3, [r7, #15]
 80092dc:	e001      	b.n	80092e2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80092de:	2302      	movs	r3, #2
 80092e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009306:	78fa      	ldrb	r2, [r7, #3]
 8009308:	429a      	cmp	r2, r3
 800930a:	d204      	bcs.n	8009316 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	78fa      	ldrb	r2, [r7, #3]
 8009310:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009314:	e001      	b.n	800931a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009316:	2302      	movs	r3, #2
 8009318:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800931a:	7bfb      	ldrb	r3, [r7, #15]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	4608      	mov	r0, r1
 8009332:	4611      	mov	r1, r2
 8009334:	461a      	mov	r2, r3
 8009336:	4603      	mov	r3, r0
 8009338:	70fb      	strb	r3, [r7, #3]
 800933a:	460b      	mov	r3, r1
 800933c:	70bb      	strb	r3, [r7, #2]
 800933e:	4613      	mov	r3, r2
 8009340:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009342:	2300      	movs	r3, #0
 8009344:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009346:	2300      	movs	r3, #0
 8009348:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009350:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009352:	e025      	b.n	80093a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009354:	7dfb      	ldrb	r3, [r7, #23]
 8009356:	221a      	movs	r2, #26
 8009358:	fb02 f303 	mul.w	r3, r2, r3
 800935c:	3308      	adds	r3, #8
 800935e:	68fa      	ldr	r2, [r7, #12]
 8009360:	4413      	add	r3, r2
 8009362:	3302      	adds	r3, #2
 8009364:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	795b      	ldrb	r3, [r3, #5]
 800936a:	78fa      	ldrb	r2, [r7, #3]
 800936c:	429a      	cmp	r2, r3
 800936e:	d002      	beq.n	8009376 <USBH_FindInterface+0x4e>
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	2bff      	cmp	r3, #255	; 0xff
 8009374:	d111      	bne.n	800939a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800937a:	78ba      	ldrb	r2, [r7, #2]
 800937c:	429a      	cmp	r2, r3
 800937e:	d002      	beq.n	8009386 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009380:	78bb      	ldrb	r3, [r7, #2]
 8009382:	2bff      	cmp	r3, #255	; 0xff
 8009384:	d109      	bne.n	800939a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800938a:	787a      	ldrb	r2, [r7, #1]
 800938c:	429a      	cmp	r2, r3
 800938e:	d002      	beq.n	8009396 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009390:	787b      	ldrb	r3, [r7, #1]
 8009392:	2bff      	cmp	r3, #255	; 0xff
 8009394:	d101      	bne.n	800939a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009396:	7dfb      	ldrb	r3, [r7, #23]
 8009398:	e006      	b.n	80093a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	3301      	adds	r3, #1
 800939e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d9d6      	bls.n	8009354 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80093a6:	23ff      	movs	r3, #255	; 0xff
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	371c      	adds	r7, #28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 fc81 	bl	800acc4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80093c2:	2101      	movs	r1, #1
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 fd9a 	bl	800aefe <USBH_LL_DriverVBUS>

  return USBH_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af04      	add	r7, sp, #16
 80093da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80093dc:	2302      	movs	r3, #2
 80093de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d102      	bne.n	80093f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2203      	movs	r2, #3
 80093f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b0b      	cmp	r3, #11
 80093fe:	f200 81be 	bhi.w	800977e <USBH_Process+0x3aa>
 8009402:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <USBH_Process+0x34>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	08009439 	.word	0x08009439
 800940c:	0800946b 	.word	0x0800946b
 8009410:	080094d3 	.word	0x080094d3
 8009414:	08009719 	.word	0x08009719
 8009418:	0800977f 	.word	0x0800977f
 800941c:	08009577 	.word	0x08009577
 8009420:	080096bf 	.word	0x080096bf
 8009424:	080095ad 	.word	0x080095ad
 8009428:	080095cd 	.word	0x080095cd
 800942c:	080095ed 	.word	0x080095ed
 8009430:	08009631 	.word	0x08009631
 8009434:	08009701 	.word	0x08009701
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 819e 	beq.w	8009782 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800944c:	20c8      	movs	r0, #200	; 0xc8
 800944e:	f001 fd9d 	bl	800af8c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f001 fc93 	bl	800ad7e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009468:	e18b      	b.n	8009782 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009470:	2b01      	cmp	r3, #1
 8009472:	d107      	bne.n	8009484 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2202      	movs	r2, #2
 8009480:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009482:	e18d      	b.n	80097a0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800948a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800948e:	d914      	bls.n	80094ba <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009496:	3301      	adds	r3, #1
 8009498:	b2da      	uxtb	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d903      	bls.n	80094b2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	220d      	movs	r2, #13
 80094ae:	701a      	strb	r2, [r3, #0]
      break;
 80094b0:	e176      	b.n	80097a0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	701a      	strb	r2, [r3, #0]
      break;
 80094b8:	e172      	b.n	80097a0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094c0:	f103 020a 	add.w	r2, r3, #10
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80094ca:	200a      	movs	r0, #10
 80094cc:	f001 fd5e 	bl	800af8c <USBH_Delay>
      break;
 80094d0:	e166      	b.n	80097a0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d005      	beq.n	80094e8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094e2:	2104      	movs	r1, #4
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80094e8:	2064      	movs	r0, #100	; 0x64
 80094ea:	f001 fd4f 	bl	800af8c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f001 fc1e 	bl	800ad30 <USBH_LL_GetSpeed>
 80094f4:	4603      	mov	r3, r0
 80094f6:	461a      	mov	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2205      	movs	r2, #5
 8009502:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009504:	2100      	movs	r1, #0
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f001 fa29 	bl	800a95e <USBH_AllocPipe>
 800950c:	4603      	mov	r3, r0
 800950e:	461a      	mov	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009514:	2180      	movs	r1, #128	; 0x80
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 fa21 	bl	800a95e <USBH_AllocPipe>
 800951c:	4603      	mov	r3, r0
 800951e:	461a      	mov	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	7919      	ldrb	r1, [r3, #4]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009538:	b292      	uxth	r2, r2
 800953a:	9202      	str	r2, [sp, #8]
 800953c:	2200      	movs	r2, #0
 800953e:	9201      	str	r2, [sp, #4]
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	4603      	mov	r3, r0
 8009544:	2280      	movs	r2, #128	; 0x80
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f001 f9da 	bl	800a900 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	7959      	ldrb	r1, [r3, #5]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009560:	b292      	uxth	r2, r2
 8009562:	9202      	str	r2, [sp, #8]
 8009564:	2200      	movs	r2, #0
 8009566:	9201      	str	r2, [sp, #4]
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	4603      	mov	r3, r0
 800956c:	2200      	movs	r2, #0
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 f9c6 	bl	800a900 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009574:	e114      	b.n	80097a0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f918 	bl	80097ac <USBH_HandleEnum>
 800957c:	4603      	mov	r3, r0
 800957e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	f040 80fe 	bne.w	8009786 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009598:	2b01      	cmp	r3, #1
 800959a:	d103      	bne.n	80095a4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2208      	movs	r2, #8
 80095a0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80095a2:	e0f0      	b.n	8009786 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2207      	movs	r2, #7
 80095a8:	701a      	strb	r2, [r3, #0]
      break;
 80095aa:	e0ec      	b.n	8009786 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 80e9 	beq.w	800978a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095be:	2101      	movs	r1, #1
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2208      	movs	r2, #8
 80095c8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80095ca:	e0de      	b.n	800978a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fc2c 	bl	8009e34 <USBH_SetCfg>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f040 80d5 	bne.w	800978e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2209      	movs	r2, #9
 80095e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095ea:	e0d0      	b.n	800978e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d016      	beq.n	8009628 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80095fa:	2101      	movs	r1, #1
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fc3c 	bl	8009e7a <USBH_SetFeature>
 8009602:	4603      	mov	r3, r0
 8009604:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	220a      	movs	r2, #10
 8009612:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009614:	e0bd      	b.n	8009792 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009616:	7bbb      	ldrb	r3, [r7, #14]
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b03      	cmp	r3, #3
 800961c:	f040 80b9 	bne.w	8009792 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	220a      	movs	r2, #10
 8009624:	701a      	strb	r2, [r3, #0]
      break;
 8009626:	e0b4      	b.n	8009792 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	220a      	movs	r2, #10
 800962c:	701a      	strb	r2, [r3, #0]
      break;
 800962e:	e0b0      	b.n	8009792 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 80ad 	beq.w	8009796 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]
 8009648:	e016      	b.n	8009678 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800964a:	7bfa      	ldrb	r2, [r7, #15]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	32de      	adds	r2, #222	; 0xde
 8009650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009654:	791a      	ldrb	r2, [r3, #4]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800965c:	429a      	cmp	r2, r3
 800965e:	d108      	bne.n	8009672 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009660:	7bfa      	ldrb	r2, [r7, #15]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	32de      	adds	r2, #222	; 0xde
 8009666:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009670:	e005      	b.n	800967e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	3301      	adds	r3, #1
 8009676:	73fb      	strb	r3, [r7, #15]
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0e5      	beq.n	800964a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009684:	2b00      	cmp	r3, #0
 8009686:	d016      	beq.n	80096b6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	4798      	blx	r3
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d109      	bne.n	80096ae <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2206      	movs	r2, #6
 800969e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096a6:	2103      	movs	r1, #3
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096ac:	e073      	b.n	8009796 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	220d      	movs	r2, #13
 80096b2:	701a      	strb	r2, [r3, #0]
      break;
 80096b4:	e06f      	b.n	8009796 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	220d      	movs	r2, #13
 80096ba:	701a      	strb	r2, [r3, #0]
      break;
 80096bc:	e06b      	b.n	8009796 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d017      	beq.n	80096f8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4798      	blx	r3
 80096d4:	4603      	mov	r3, r0
 80096d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d103      	bne.n	80096e8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	220b      	movs	r2, #11
 80096e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096e6:	e058      	b.n	800979a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d154      	bne.n	800979a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	220d      	movs	r2, #13
 80096f4:	701a      	strb	r2, [r3, #0]
      break;
 80096f6:	e050      	b.n	800979a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	220d      	movs	r2, #13
 80096fc:	701a      	strb	r2, [r3, #0]
      break;
 80096fe:	e04c      	b.n	800979a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009706:	2b00      	cmp	r3, #0
 8009708:	d049      	beq.n	800979e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	4798      	blx	r3
      }
      break;
 8009716:	e042      	b.n	800979e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff fd67 	bl	80091f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800972c:	2b00      	cmp	r3, #0
 800972e:	d009      	beq.n	8009744 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800974a:	2b00      	cmp	r3, #0
 800974c:	d005      	beq.n	800975a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009754:	2105      	movs	r1, #5
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b01      	cmp	r3, #1
 8009764:	d107      	bne.n	8009776 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff fe20 	bl	80093b4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009774:	e014      	b.n	80097a0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f001 faa4 	bl	800acc4 <USBH_LL_Start>
      break;
 800977c:	e010      	b.n	80097a0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800977e:	bf00      	nop
 8009780:	e00e      	b.n	80097a0 <USBH_Process+0x3cc>
      break;
 8009782:	bf00      	nop
 8009784:	e00c      	b.n	80097a0 <USBH_Process+0x3cc>
      break;
 8009786:	bf00      	nop
 8009788:	e00a      	b.n	80097a0 <USBH_Process+0x3cc>
    break;
 800978a:	bf00      	nop
 800978c:	e008      	b.n	80097a0 <USBH_Process+0x3cc>
      break;
 800978e:	bf00      	nop
 8009790:	e006      	b.n	80097a0 <USBH_Process+0x3cc>
      break;
 8009792:	bf00      	nop
 8009794:	e004      	b.n	80097a0 <USBH_Process+0x3cc>
      break;
 8009796:	bf00      	nop
 8009798:	e002      	b.n	80097a0 <USBH_Process+0x3cc>
      break;
 800979a:	bf00      	nop
 800979c:	e000      	b.n	80097a0 <USBH_Process+0x3cc>
      break;
 800979e:	bf00      	nop
  }
  return USBH_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop

080097ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af04      	add	r7, sp, #16
 80097b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80097b8:	2301      	movs	r3, #1
 80097ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	785b      	ldrb	r3, [r3, #1]
 80097c0:	2b07      	cmp	r3, #7
 80097c2:	f200 81c1 	bhi.w	8009b48 <USBH_HandleEnum+0x39c>
 80097c6:	a201      	add	r2, pc, #4	; (adr r2, 80097cc <USBH_HandleEnum+0x20>)
 80097c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097cc:	080097ed 	.word	0x080097ed
 80097d0:	080098ab 	.word	0x080098ab
 80097d4:	08009915 	.word	0x08009915
 80097d8:	080099a3 	.word	0x080099a3
 80097dc:	08009a0d 	.word	0x08009a0d
 80097e0:	08009a7d 	.word	0x08009a7d
 80097e4:	08009ac3 	.word	0x08009ac3
 80097e8:	08009b09 	.word	0x08009b09
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80097ec:	2108      	movs	r1, #8
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa50 	bl	8009c94 <USBH_Get_DevDesc>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d130      	bne.n	8009860 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	7919      	ldrb	r1, [r3, #4]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009822:	b292      	uxth	r2, r2
 8009824:	9202      	str	r2, [sp, #8]
 8009826:	2200      	movs	r2, #0
 8009828:	9201      	str	r2, [sp, #4]
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	4603      	mov	r3, r0
 800982e:	2280      	movs	r2, #128	; 0x80
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f001 f865 	bl	800a900 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	7959      	ldrb	r1, [r3, #5]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800984a:	b292      	uxth	r2, r2
 800984c:	9202      	str	r2, [sp, #8]
 800984e:	2200      	movs	r2, #0
 8009850:	9201      	str	r2, [sp, #4]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	4603      	mov	r3, r0
 8009856:	2200      	movs	r2, #0
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f001 f851 	bl	800a900 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800985e:	e175      	b.n	8009b4c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	2b03      	cmp	r3, #3
 8009864:	f040 8172 	bne.w	8009b4c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800986e:	3301      	adds	r3, #1
 8009870:	b2da      	uxtb	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800987e:	2b03      	cmp	r3, #3
 8009880:	d903      	bls.n	800988a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	220d      	movs	r2, #13
 8009886:	701a      	strb	r2, [r3, #0]
      break;
 8009888:	e160      	b.n	8009b4c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	795b      	ldrb	r3, [r3, #5]
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f001 f885 	bl	800a9a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	791b      	ldrb	r3, [r3, #4]
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f001 f87f 	bl	800a9a0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	701a      	strb	r2, [r3, #0]
      break;
 80098a8:	e150      	b.n	8009b4c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80098aa:	2112      	movs	r1, #18
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f9f1 	bl	8009c94 <USBH_Get_DevDesc>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098b6:	7bbb      	ldrb	r3, [r7, #14]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d103      	bne.n	80098c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2202      	movs	r2, #2
 80098c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098c2:	e145      	b.n	8009b50 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	f040 8142 	bne.w	8009b50 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098d2:	3301      	adds	r3, #1
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	d903      	bls.n	80098ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	220d      	movs	r2, #13
 80098ea:	701a      	strb	r2, [r3, #0]
      break;
 80098ec:	e130      	b.n	8009b50 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	795b      	ldrb	r3, [r3, #5]
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f001 f853 	bl	800a9a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	791b      	ldrb	r3, [r3, #4]
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f001 f84d 	bl	800a9a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	701a      	strb	r2, [r3, #0]
      break;
 8009912:	e11d      	b.n	8009b50 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009914:	2101      	movs	r1, #1
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fa68 	bl	8009dec <USBH_SetAddress>
 800991c:	4603      	mov	r3, r0
 800991e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009920:	7bbb      	ldrb	r3, [r7, #14]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d132      	bne.n	800998c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009926:	2002      	movs	r0, #2
 8009928:	f001 fb30 	bl	800af8c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2203      	movs	r2, #3
 8009938:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	7919      	ldrb	r1, [r3, #4]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800994e:	b292      	uxth	r2, r2
 8009950:	9202      	str	r2, [sp, #8]
 8009952:	2200      	movs	r2, #0
 8009954:	9201      	str	r2, [sp, #4]
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	4603      	mov	r3, r0
 800995a:	2280      	movs	r2, #128	; 0x80
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 ffcf 	bl	800a900 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	7959      	ldrb	r1, [r3, #5]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009976:	b292      	uxth	r2, r2
 8009978:	9202      	str	r2, [sp, #8]
 800997a:	2200      	movs	r2, #0
 800997c:	9201      	str	r2, [sp, #4]
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	4603      	mov	r3, r0
 8009982:	2200      	movs	r2, #0
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 ffbb 	bl	800a900 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800998a:	e0e3      	b.n	8009b54 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	2b03      	cmp	r3, #3
 8009990:	f040 80e0 	bne.w	8009b54 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	220d      	movs	r2, #13
 8009998:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	705a      	strb	r2, [r3, #1]
      break;
 80099a0:	e0d8      	b.n	8009b54 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80099a2:	2109      	movs	r1, #9
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f99d 	bl	8009ce4 <USBH_Get_CfgDesc>
 80099aa:	4603      	mov	r3, r0
 80099ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d103      	bne.n	80099bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2204      	movs	r2, #4
 80099b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099ba:	e0cd      	b.n	8009b58 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099bc:	7bbb      	ldrb	r3, [r7, #14]
 80099be:	2b03      	cmp	r3, #3
 80099c0:	f040 80ca 	bne.w	8009b58 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099ca:	3301      	adds	r3, #1
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d903      	bls.n	80099e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	220d      	movs	r2, #13
 80099e2:	701a      	strb	r2, [r3, #0]
      break;
 80099e4:	e0b8      	b.n	8009b58 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	795b      	ldrb	r3, [r3, #5]
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 ffd7 	bl	800a9a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	791b      	ldrb	r3, [r3, #4]
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 ffd1 	bl	800a9a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	701a      	strb	r2, [r3, #0]
      break;
 8009a0a:	e0a5      	b.n	8009b58 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f965 	bl	8009ce4 <USBH_Get_CfgDesc>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d103      	bne.n	8009a2c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2205      	movs	r2, #5
 8009a28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a2a:	e097      	b.n	8009b5c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	2b03      	cmp	r3, #3
 8009a30:	f040 8094 	bne.w	8009b5c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	d903      	bls.n	8009a56 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	220d      	movs	r2, #13
 8009a52:	701a      	strb	r2, [r3, #0]
      break;
 8009a54:	e082      	b.n	8009b5c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	795b      	ldrb	r3, [r3, #5]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 ff9f 	bl	800a9a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	791b      	ldrb	r3, [r3, #4]
 8009a66:	4619      	mov	r1, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 ff99 	bl	800a9a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	701a      	strb	r2, [r3, #0]
      break;
 8009a7a:	e06f      	b.n	8009b5c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d019      	beq.n	8009aba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a92:	23ff      	movs	r3, #255	; 0xff
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f949 	bl	8009d2c <USBH_Get_StringDesc>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a9e:	7bbb      	ldrb	r3, [r7, #14]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d103      	bne.n	8009aac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2206      	movs	r2, #6
 8009aa8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009aaa:	e059      	b.n	8009b60 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	d156      	bne.n	8009b60 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2206      	movs	r2, #6
 8009ab6:	705a      	strb	r2, [r3, #1]
      break;
 8009ab8:	e052      	b.n	8009b60 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2206      	movs	r2, #6
 8009abe:	705a      	strb	r2, [r3, #1]
      break;
 8009ac0:	e04e      	b.n	8009b60 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d019      	beq.n	8009b00 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ad8:	23ff      	movs	r3, #255	; 0xff
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f926 	bl	8009d2c <USBH_Get_StringDesc>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ae4:	7bbb      	ldrb	r3, [r7, #14]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d103      	bne.n	8009af2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2207      	movs	r2, #7
 8009aee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009af0:	e038      	b.n	8009b64 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d135      	bne.n	8009b64 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2207      	movs	r2, #7
 8009afc:	705a      	strb	r2, [r3, #1]
      break;
 8009afe:	e031      	b.n	8009b64 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2207      	movs	r2, #7
 8009b04:	705a      	strb	r2, [r3, #1]
      break;
 8009b06:	e02d      	b.n	8009b64 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d017      	beq.n	8009b42 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b1e:	23ff      	movs	r3, #255	; 0xff
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f903 	bl	8009d2c <USBH_Get_StringDesc>
 8009b26:	4603      	mov	r3, r0
 8009b28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009b34:	e018      	b.n	8009b68 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b36:	7bbb      	ldrb	r3, [r7, #14]
 8009b38:	2b03      	cmp	r3, #3
 8009b3a:	d115      	bne.n	8009b68 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b40:	e012      	b.n	8009b68 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]
      break;
 8009b46:	e00f      	b.n	8009b68 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009b48:	bf00      	nop
 8009b4a:	e00e      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b4c:	bf00      	nop
 8009b4e:	e00c      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b50:	bf00      	nop
 8009b52:	e00a      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b54:	bf00      	nop
 8009b56:	e008      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b58:	bf00      	nop
 8009b5a:	e006      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b5c:	bf00      	nop
 8009b5e:	e004      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b60:	bf00      	nop
 8009b62:	e002      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b64:	bf00      	nop
 8009b66:	e000      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b68:	bf00      	nop
  }
  return Status;
 8009b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f804 	bl	8009bb6 <USBH_HandleSof>
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b082      	sub	sp, #8
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b0b      	cmp	r3, #11
 8009bc6:	d10a      	bne.n	8009bde <USBH_HandleSof+0x28>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d005      	beq.n	8009bde <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	4798      	blx	r3
  }
}
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b083      	sub	sp, #12
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009bf6:	bf00      	nop
}
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b083      	sub	sp, #12
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009c12:	bf00      	nop
}
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b083      	sub	sp, #12
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f001 f844 	bl	800acfa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	791b      	ldrb	r3, [r3, #4]
 8009c76:	4619      	mov	r1, r3
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fe91 	bl	800a9a0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	795b      	ldrb	r3, [r3, #5]
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fe8b 	bl	800a9a0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af02      	add	r7, sp, #8
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009ca6:	78fb      	ldrb	r3, [r7, #3]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	4613      	mov	r3, r2
 8009cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f864 	bl	8009d82 <USBH_GetDescriptor>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009cd0:	78fa      	ldrb	r2, [r7, #3]
 8009cd2:	b292      	uxth	r2, r2
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	f000 f918 	bl	8009f0a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af02      	add	r7, sp, #8
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	331c      	adds	r3, #28
 8009cf4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009cf6:	887b      	ldrh	r3, [r7, #2]
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d00:	2100      	movs	r1, #0
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f83d 	bl	8009d82 <USBH_GetDescriptor>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d107      	bne.n	8009d22 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009d12:	887b      	ldrh	r3, [r7, #2]
 8009d14:	461a      	mov	r2, r3
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f987 	bl	800a02c <USBH_ParseCfgDesc>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af02      	add	r7, sp, #8
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	607a      	str	r2, [r7, #4]
 8009d36:	461a      	mov	r2, r3
 8009d38:	460b      	mov	r3, r1
 8009d3a:	72fb      	strb	r3, [r7, #11]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009d40:	7afb      	ldrb	r3, [r7, #11]
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d48:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009d50:	893b      	ldrh	r3, [r7, #8]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	460b      	mov	r3, r1
 8009d56:	2100      	movs	r1, #0
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f000 f812 	bl	8009d82 <USBH_GetDescriptor>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d107      	bne.n	8009d78 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d6e:	893a      	ldrh	r2, [r7, #8]
 8009d70:	6879      	ldr	r1, [r7, #4]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 fb24 	bl	800a3c0 <USBH_ParseStringDesc>
  }

  return status;
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b084      	sub	sp, #16
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	607b      	str	r3, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	72fb      	strb	r3, [r7, #11]
 8009d90:	4613      	mov	r3, r2
 8009d92:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	789b      	ldrb	r3, [r3, #2]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d11c      	bne.n	8009dd6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009d9c:	7afb      	ldrb	r3, [r7, #11]
 8009d9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2206      	movs	r2, #6
 8009dac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	893a      	ldrh	r2, [r7, #8]
 8009db2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009db4:	893b      	ldrh	r3, [r7, #8]
 8009db6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dbe:	d104      	bne.n	8009dca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f240 4209 	movw	r2, #1033	; 0x409
 8009dc6:	829a      	strh	r2, [r3, #20]
 8009dc8:	e002      	b.n	8009dd0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	8b3a      	ldrh	r2, [r7, #24]
 8009dd4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009dd6:	8b3b      	ldrh	r3, [r7, #24]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 fb3d 	bl	800a45c <USBH_CtlReq>
 8009de2:	4603      	mov	r3, r0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	789b      	ldrb	r3, [r3, #2]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d10f      	bne.n	8009e20 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2205      	movs	r2, #5
 8009e0a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e20:	2200      	movs	r2, #0
 8009e22:	2100      	movs	r1, #0
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fb19 	bl	800a45c <USBH_CtlReq>
 8009e2a:	4603      	mov	r3, r0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	789b      	ldrb	r3, [r3, #2]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d10e      	bne.n	8009e66 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2209      	movs	r2, #9
 8009e52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	887a      	ldrh	r2, [r7, #2]
 8009e58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e66:	2200      	movs	r2, #0
 8009e68:	2100      	movs	r1, #0
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 faf6 	bl	800a45c <USBH_CtlReq>
 8009e70:	4603      	mov	r3, r0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	460b      	mov	r3, r1
 8009e84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	789b      	ldrb	r3, [r3, #2]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d10f      	bne.n	8009eae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2203      	movs	r2, #3
 8009e98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009e9a:	78fb      	ldrb	r3, [r7, #3]
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fad2 	bl	800a45c <USBH_CtlReq>
 8009eb8:	4603      	mov	r3, r0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	789b      	ldrb	r3, [r3, #2]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d10f      	bne.n	8009ef6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009ee8:	78fb      	ldrb	r3, [r7, #3]
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	2100      	movs	r1, #0
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 faae 	bl	800a45c <USBH_CtlReq>
 8009f00:	4603      	mov	r3, r0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	60b9      	str	r1, [r7, #8]
 8009f14:	4613      	mov	r3, r2
 8009f16:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	781a      	ldrb	r2, [r3, #0]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	785a      	ldrb	r2, [r3, #1]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	3302      	adds	r3, #2
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	3303      	adds	r3, #3
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	021b      	lsls	r3, r3, #8
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	791a      	ldrb	r2, [r3, #4]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	795a      	ldrb	r2, [r3, #5]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	799a      	ldrb	r2, [r3, #6]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	79da      	ldrb	r2, [r3, #7]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	79db      	ldrb	r3, [r3, #7]
 8009f68:	2b20      	cmp	r3, #32
 8009f6a:	dc11      	bgt.n	8009f90 <USBH_ParseDevDesc+0x86>
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	db16      	blt.n	8009f9e <USBH_ParseDevDesc+0x94>
 8009f70:	3b08      	subs	r3, #8
 8009f72:	2201      	movs	r2, #1
 8009f74:	fa02 f303 	lsl.w	r3, r2, r3
 8009f78:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	bf14      	ite	ne
 8009f84:	2301      	movne	r3, #1
 8009f86:	2300      	moveq	r3, #0
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d102      	bne.n	8009f94 <USBH_ParseDevDesc+0x8a>
 8009f8e:	e006      	b.n	8009f9e <USBH_ParseDevDesc+0x94>
 8009f90:	2b40      	cmp	r3, #64	; 0x40
 8009f92:	d104      	bne.n	8009f9e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	79da      	ldrb	r2, [r3, #7]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	71da      	strb	r2, [r3, #7]
      break;
 8009f9c:	e003      	b.n	8009fa6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2240      	movs	r2, #64	; 0x40
 8009fa2:	71da      	strb	r2, [r3, #7]
      break;
 8009fa4:	bf00      	nop
  }

  if (length > 8U)
 8009fa6:	88fb      	ldrh	r3, [r7, #6]
 8009fa8:	2b08      	cmp	r3, #8
 8009faa:	d939      	bls.n	800a020 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	3308      	adds	r3, #8
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	3309      	adds	r3, #9
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	021b      	lsls	r3, r3, #8
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	330a      	adds	r3, #10
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	330b      	adds	r3, #11
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	021b      	lsls	r3, r3, #8
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	330c      	adds	r3, #12
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	330d      	adds	r3, #13
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	021b      	lsls	r3, r3, #8
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	7b9a      	ldrb	r2, [r3, #14]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	7bda      	ldrb	r2, [r3, #15]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	7c1a      	ldrb	r2, [r3, #16]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	7c5a      	ldrb	r2, [r3, #17]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	745a      	strb	r2, [r3, #17]
  }
}
 800a020:	bf00      	nop
 800a022:	3714      	adds	r7, #20
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b08c      	sub	sp, #48	; 0x30
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	4613      	mov	r3, r2
 800a038:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a040:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	781a      	ldrb	r2, [r3, #0]
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	785a      	ldrb	r2, [r3, #1]
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	3302      	adds	r3, #2
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	b29a      	uxth	r2, r3
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	3303      	adds	r3, #3
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	021b      	lsls	r3, r3, #8
 800a07e:	b29b      	uxth	r3, r3
 800a080:	4313      	orrs	r3, r2
 800a082:	b29b      	uxth	r3, r3
 800a084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a088:	bf28      	it	cs
 800a08a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a08e:	b29a      	uxth	r2, r3
 800a090:	6a3b      	ldr	r3, [r7, #32]
 800a092:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	791a      	ldrb	r2, [r3, #4]
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	795a      	ldrb	r2, [r3, #5]
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	799a      	ldrb	r2, [r3, #6]
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	79da      	ldrb	r2, [r3, #7]
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	7a1a      	ldrb	r2, [r3, #8]
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	2b09      	cmp	r3, #9
 800a0c2:	d002      	beq.n	800a0ca <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	2209      	movs	r2, #9
 800a0c8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a0ca:	88fb      	ldrh	r3, [r7, #6]
 800a0cc:	2b09      	cmp	r3, #9
 800a0ce:	f240 809d 	bls.w	800a20c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a0d2:	2309      	movs	r3, #9
 800a0d4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a0da:	e081      	b.n	800a1e0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0dc:	f107 0316 	add.w	r3, r7, #22
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0e4:	f000 f99f 	bl	800a426 <USBH_GetNextDesc>
 800a0e8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ec:	785b      	ldrb	r3, [r3, #1]
 800a0ee:	2b04      	cmp	r3, #4
 800a0f0:	d176      	bne.n	800a1e0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	2b09      	cmp	r3, #9
 800a0f8:	d002      	beq.n	800a100 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fc:	2209      	movs	r2, #9
 800a0fe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a104:	221a      	movs	r2, #26
 800a106:	fb02 f303 	mul.w	r3, r2, r3
 800a10a:	3308      	adds	r3, #8
 800a10c:	6a3a      	ldr	r2, [r7, #32]
 800a10e:	4413      	add	r3, r2
 800a110:	3302      	adds	r3, #2
 800a112:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a116:	69f8      	ldr	r0, [r7, #28]
 800a118:	f000 f87e 	bl	800a218 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a11c:	2300      	movs	r3, #0
 800a11e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a122:	2300      	movs	r3, #0
 800a124:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a126:	e043      	b.n	800a1b0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a128:	f107 0316 	add.w	r3, r7, #22
 800a12c:	4619      	mov	r1, r3
 800a12e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a130:	f000 f979 	bl	800a426 <USBH_GetNextDesc>
 800a134:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a138:	785b      	ldrb	r3, [r3, #1]
 800a13a:	2b05      	cmp	r3, #5
 800a13c:	d138      	bne.n	800a1b0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	795b      	ldrb	r3, [r3, #5]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d10f      	bne.n	800a166 <USBH_ParseCfgDesc+0x13a>
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	799b      	ldrb	r3, [r3, #6]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d10b      	bne.n	800a166 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	79db      	ldrb	r3, [r3, #7]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10f      	bne.n	800a176 <USBH_ParseCfgDesc+0x14a>
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b09      	cmp	r3, #9
 800a15c:	d00b      	beq.n	800a176 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	2209      	movs	r2, #9
 800a162:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a164:	e007      	b.n	800a176 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b07      	cmp	r3, #7
 800a16c:	d004      	beq.n	800a178 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	2207      	movs	r2, #7
 800a172:	701a      	strb	r2, [r3, #0]
 800a174:	e000      	b.n	800a178 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a176:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a17c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a180:	3201      	adds	r2, #1
 800a182:	00d2      	lsls	r2, r2, #3
 800a184:	211a      	movs	r1, #26
 800a186:	fb01 f303 	mul.w	r3, r1, r3
 800a18a:	4413      	add	r3, r2
 800a18c:	3308      	adds	r3, #8
 800a18e:	6a3a      	ldr	r2, [r7, #32]
 800a190:	4413      	add	r3, r2
 800a192:	3304      	adds	r3, #4
 800a194:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a198:	69b9      	ldr	r1, [r7, #24]
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f000 f86b 	bl	800a276 <USBH_ParseEPDesc>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a1a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	791b      	ldrb	r3, [r3, #4]
 800a1b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d204      	bcs.n	800a1c6 <USBH_ParseCfgDesc+0x19a>
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	885a      	ldrh	r2, [r3, #2]
 800a1c0:	8afb      	ldrh	r3, [r7, #22]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d8b0      	bhi.n	800a128 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	791b      	ldrb	r3, [r3, #4]
 800a1ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d201      	bcs.n	800a1d6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e01c      	b.n	800a210 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a1d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1da:	3301      	adds	r3, #1
 800a1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a1e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d805      	bhi.n	800a1f4 <USBH_ParseCfgDesc+0x1c8>
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	885a      	ldrh	r2, [r3, #2]
 800a1ec:	8afb      	ldrh	r3, [r7, #22]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	f63f af74 	bhi.w	800a0dc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	791b      	ldrb	r3, [r3, #4]
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	bf28      	it	cs
 800a1fc:	2302      	movcs	r3, #2
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a204:	429a      	cmp	r2, r3
 800a206:	d201      	bcs.n	800a20c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a208:	2303      	movs	r3, #3
 800a20a:	e001      	b.n	800a210 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a20c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a210:	4618      	mov	r0, r3
 800a212:	3730      	adds	r7, #48	; 0x30
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	781a      	ldrb	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	785a      	ldrb	r2, [r3, #1]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	789a      	ldrb	r2, [r3, #2]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	78da      	ldrb	r2, [r3, #3]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	791a      	ldrb	r2, [r3, #4]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	795a      	ldrb	r2, [r3, #5]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	799a      	ldrb	r2, [r3, #6]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	79da      	ldrb	r2, [r3, #7]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	7a1a      	ldrb	r2, [r3, #8]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	721a      	strb	r2, [r3, #8]
}
 800a26a:	bf00      	nop
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a276:	b480      	push	{r7}
 800a278:	b087      	sub	sp, #28
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	60f8      	str	r0, [r7, #12]
 800a27e:	60b9      	str	r1, [r7, #8]
 800a280:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	781a      	ldrb	r2, [r3, #0]
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	785a      	ldrb	r2, [r3, #1]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	789a      	ldrb	r2, [r3, #2]
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	78da      	ldrb	r2, [r3, #3]
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3305      	adds	r3, #5
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	021b      	lsls	r3, r3, #8
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	799a      	ldrb	r2, [r3, #6]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	889b      	ldrh	r3, [r3, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d102      	bne.n	800a2d8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	75fb      	strb	r3, [r7, #23]
 800a2d6:	e033      	b.n	800a340 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	889b      	ldrh	r3, [r3, #4]
 800a2dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a2e0:	f023 0307 	bic.w	r3, r3, #7
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	889b      	ldrh	r3, [r3, #4]
 800a2ee:	b21a      	sxth	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	b299      	uxth	r1, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3305      	adds	r3, #5
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	021b      	lsls	r3, r3, #8
 800a302:	b29b      	uxth	r3, r3
 800a304:	430b      	orrs	r3, r1
 800a306:	b29b      	uxth	r3, r3
 800a308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d110      	bne.n	800a332 <USBH_ParseEPDesc+0xbc>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	3304      	adds	r3, #4
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	b299      	uxth	r1, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	3305      	adds	r3, #5
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	021b      	lsls	r3, r3, #8
 800a322:	b29b      	uxth	r3, r3
 800a324:	430b      	orrs	r3, r1
 800a326:	b29b      	uxth	r3, r3
 800a328:	b21b      	sxth	r3, r3
 800a32a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a32e:	b21b      	sxth	r3, r3
 800a330:	e001      	b.n	800a336 <USBH_ParseEPDesc+0xc0>
 800a332:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a336:	4313      	orrs	r3, r2
 800a338:	b21b      	sxth	r3, r3
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a346:	2b00      	cmp	r3, #0
 800a348:	d116      	bne.n	800a378 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	78db      	ldrb	r3, [r3, #3]
 800a34e:	f003 0303 	and.w	r3, r3, #3
 800a352:	2b01      	cmp	r3, #1
 800a354:	d005      	beq.n	800a362 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	78db      	ldrb	r3, [r3, #3]
 800a35a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d127      	bne.n	800a3b2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	799b      	ldrb	r3, [r3, #6]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <USBH_ParseEPDesc+0xfc>
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	799b      	ldrb	r3, [r3, #6]
 800a36e:	2b10      	cmp	r3, #16
 800a370:	d91f      	bls.n	800a3b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a372:	2303      	movs	r3, #3
 800a374:	75fb      	strb	r3, [r7, #23]
 800a376:	e01c      	b.n	800a3b2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	78db      	ldrb	r3, [r3, #3]
 800a37c:	f003 0303 	and.w	r3, r3, #3
 800a380:	2b01      	cmp	r3, #1
 800a382:	d10a      	bne.n	800a39a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	799b      	ldrb	r3, [r3, #6]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <USBH_ParseEPDesc+0x11e>
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	799b      	ldrb	r3, [r3, #6]
 800a390:	2b10      	cmp	r3, #16
 800a392:	d90e      	bls.n	800a3b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a394:	2303      	movs	r3, #3
 800a396:	75fb      	strb	r3, [r7, #23]
 800a398:	e00b      	b.n	800a3b2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	78db      	ldrb	r3, [r3, #3]
 800a39e:	f003 0303 	and.w	r3, r3, #3
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d105      	bne.n	800a3b2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	799b      	ldrb	r3, [r3, #6]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	371c      	adds	r7, #28
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d120      	bne.n	800a41a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	1e9a      	subs	r2, r3, #2
 800a3de:	88fb      	ldrh	r3, [r7, #6]
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	bf28      	it	cs
 800a3e4:	4613      	movcs	r3, r2
 800a3e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3302      	adds	r3, #2
 800a3ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	82fb      	strh	r3, [r7, #22]
 800a3f2:	e00b      	b.n	800a40c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a3f4:	8afb      	ldrh	r3, [r7, #22]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	781a      	ldrb	r2, [r3, #0]
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	3301      	adds	r3, #1
 800a404:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a406:	8afb      	ldrh	r3, [r7, #22]
 800a408:	3302      	adds	r3, #2
 800a40a:	82fb      	strh	r3, [r7, #22]
 800a40c:	8afa      	ldrh	r2, [r7, #22]
 800a40e:	8abb      	ldrh	r3, [r7, #20]
 800a410:	429a      	cmp	r2, r3
 800a412:	d3ef      	bcc.n	800a3f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2200      	movs	r2, #0
 800a418:	701a      	strb	r2, [r3, #0]
  }
}
 800a41a:	bf00      	nop
 800a41c:	371c      	adds	r7, #28
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a426:	b480      	push	{r7}
 800a428:	b085      	sub	sp, #20
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	881a      	ldrh	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	b29b      	uxth	r3, r3
 800a43a:	4413      	add	r3, r2
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4413      	add	r3, r2
 800a44c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a44e:	68fb      	ldr	r3, [r7, #12]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	4613      	mov	r3, r2
 800a468:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a46a:	2301      	movs	r3, #1
 800a46c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	789b      	ldrb	r3, [r3, #2]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d002      	beq.n	800a47c <USBH_CtlReq+0x20>
 800a476:	2b02      	cmp	r3, #2
 800a478:	d00f      	beq.n	800a49a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a47a:	e027      	b.n	800a4cc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	88fa      	ldrh	r2, [r7, #6]
 800a486:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2201      	movs	r2, #1
 800a48c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2202      	movs	r2, #2
 800a492:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a494:	2301      	movs	r3, #1
 800a496:	75fb      	strb	r3, [r7, #23]
      break;
 800a498:	e018      	b.n	800a4cc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f000 f81c 	bl	800a4d8 <USBH_HandleControl>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <USBH_CtlReq+0x54>
 800a4aa:	7dfb      	ldrb	r3, [r7, #23]
 800a4ac:	2b03      	cmp	r3, #3
 800a4ae:	d106      	bne.n	800a4be <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	761a      	strb	r2, [r3, #24]
      break;
 800a4bc:	e005      	b.n	800a4ca <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a4be:	7dfb      	ldrb	r3, [r7, #23]
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d102      	bne.n	800a4ca <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	709a      	strb	r2, [r3, #2]
      break;
 800a4ca:	bf00      	nop
  }
  return status;
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
	...

0800a4d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af02      	add	r7, sp, #8
 800a4de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	7e1b      	ldrb	r3, [r3, #24]
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	2b0a      	cmp	r3, #10
 800a4f0:	f200 8156 	bhi.w	800a7a0 <USBH_HandleControl+0x2c8>
 800a4f4:	a201      	add	r2, pc, #4	; (adr r2, 800a4fc <USBH_HandleControl+0x24>)
 800a4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fa:	bf00      	nop
 800a4fc:	0800a529 	.word	0x0800a529
 800a500:	0800a543 	.word	0x0800a543
 800a504:	0800a5ad 	.word	0x0800a5ad
 800a508:	0800a5d3 	.word	0x0800a5d3
 800a50c:	0800a60b 	.word	0x0800a60b
 800a510:	0800a635 	.word	0x0800a635
 800a514:	0800a687 	.word	0x0800a687
 800a518:	0800a6a9 	.word	0x0800a6a9
 800a51c:	0800a6e5 	.word	0x0800a6e5
 800a520:	0800a70b 	.word	0x0800a70b
 800a524:	0800a749 	.word	0x0800a749
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f103 0110 	add.w	r1, r3, #16
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	795b      	ldrb	r3, [r3, #5]
 800a532:	461a      	mov	r2, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 f943 	bl	800a7c0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2202      	movs	r2, #2
 800a53e:	761a      	strb	r2, [r3, #24]
      break;
 800a540:	e139      	b.n	800a7b6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	795b      	ldrb	r3, [r3, #5]
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fcc5 	bl	800aed8 <USBH_LL_GetURBState>
 800a54e:	4603      	mov	r3, r0
 800a550:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a552:	7bbb      	ldrb	r3, [r7, #14]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d11e      	bne.n	800a596 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	7c1b      	ldrb	r3, [r3, #16]
 800a55c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a560:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	8adb      	ldrh	r3, [r3, #22]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00a      	beq.n	800a580 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a56a:	7b7b      	ldrb	r3, [r7, #13]
 800a56c:	2b80      	cmp	r3, #128	; 0x80
 800a56e:	d103      	bne.n	800a578 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2203      	movs	r2, #3
 800a574:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a576:	e115      	b.n	800a7a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2205      	movs	r2, #5
 800a57c:	761a      	strb	r2, [r3, #24]
      break;
 800a57e:	e111      	b.n	800a7a4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a580:	7b7b      	ldrb	r3, [r7, #13]
 800a582:	2b80      	cmp	r3, #128	; 0x80
 800a584:	d103      	bne.n	800a58e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2209      	movs	r2, #9
 800a58a:	761a      	strb	r2, [r3, #24]
      break;
 800a58c:	e10a      	b.n	800a7a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2207      	movs	r2, #7
 800a592:	761a      	strb	r2, [r3, #24]
      break;
 800a594:	e106      	b.n	800a7a4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	2b04      	cmp	r3, #4
 800a59a:	d003      	beq.n	800a5a4 <USBH_HandleControl+0xcc>
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	f040 8100 	bne.w	800a7a4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	220b      	movs	r2, #11
 800a5a8:	761a      	strb	r2, [r3, #24]
      break;
 800a5aa:	e0fb      	b.n	800a7a4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6899      	ldr	r1, [r3, #8]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	899a      	ldrh	r2, [r3, #12]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	791b      	ldrb	r3, [r3, #4]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f93a 	bl	800a83e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2204      	movs	r2, #4
 800a5ce:	761a      	strb	r2, [r3, #24]
      break;
 800a5d0:	e0f1      	b.n	800a7b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	791b      	ldrb	r3, [r3, #4]
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fc7d 	bl	800aed8 <USBH_LL_GetURBState>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d102      	bne.n	800a5ee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2209      	movs	r2, #9
 800a5ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a5ee:	7bbb      	ldrb	r3, [r7, #14]
 800a5f0:	2b05      	cmp	r3, #5
 800a5f2:	d102      	bne.n	800a5fa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a5f8:	e0d6      	b.n	800a7a8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a5fa:	7bbb      	ldrb	r3, [r7, #14]
 800a5fc:	2b04      	cmp	r3, #4
 800a5fe:	f040 80d3 	bne.w	800a7a8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	220b      	movs	r2, #11
 800a606:	761a      	strb	r2, [r3, #24]
      break;
 800a608:	e0ce      	b.n	800a7a8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6899      	ldr	r1, [r3, #8]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	899a      	ldrh	r2, [r3, #12]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	795b      	ldrb	r3, [r3, #5]
 800a616:	2001      	movs	r0, #1
 800a618:	9000      	str	r0, [sp, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f8ea 	bl	800a7f4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a626:	b29a      	uxth	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2206      	movs	r2, #6
 800a630:	761a      	strb	r2, [r3, #24]
      break;
 800a632:	e0c0      	b.n	800a7b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	795b      	ldrb	r3, [r3, #5]
 800a638:	4619      	mov	r1, r3
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fc4c 	bl	800aed8 <USBH_LL_GetURBState>
 800a640:	4603      	mov	r3, r0
 800a642:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d103      	bne.n	800a652 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2207      	movs	r2, #7
 800a64e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a650:	e0ac      	b.n	800a7ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a652:	7bbb      	ldrb	r3, [r7, #14]
 800a654:	2b05      	cmp	r3, #5
 800a656:	d105      	bne.n	800a664 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	220c      	movs	r2, #12
 800a65c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a65e:	2303      	movs	r3, #3
 800a660:	73fb      	strb	r3, [r7, #15]
      break;
 800a662:	e0a3      	b.n	800a7ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a664:	7bbb      	ldrb	r3, [r7, #14]
 800a666:	2b02      	cmp	r3, #2
 800a668:	d103      	bne.n	800a672 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2205      	movs	r2, #5
 800a66e:	761a      	strb	r2, [r3, #24]
      break;
 800a670:	e09c      	b.n	800a7ac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a672:	7bbb      	ldrb	r3, [r7, #14]
 800a674:	2b04      	cmp	r3, #4
 800a676:	f040 8099 	bne.w	800a7ac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	220b      	movs	r2, #11
 800a67e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a680:	2302      	movs	r3, #2
 800a682:	73fb      	strb	r3, [r7, #15]
      break;
 800a684:	e092      	b.n	800a7ac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	791b      	ldrb	r3, [r3, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	2100      	movs	r1, #0
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f8d5 	bl	800a83e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2208      	movs	r2, #8
 800a6a4:	761a      	strb	r2, [r3, #24]

      break;
 800a6a6:	e086      	b.n	800a7b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	791b      	ldrb	r3, [r3, #4]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fc12 	bl	800aed8 <USBH_LL_GetURBState>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a6b8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d105      	bne.n	800a6ca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	220d      	movs	r2, #13
 800a6c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a6c8:	e072      	b.n	800a7b0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a6ca:	7bbb      	ldrb	r3, [r7, #14]
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	d103      	bne.n	800a6d8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	220b      	movs	r2, #11
 800a6d4:	761a      	strb	r2, [r3, #24]
      break;
 800a6d6:	e06b      	b.n	800a7b0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a6d8:	7bbb      	ldrb	r3, [r7, #14]
 800a6da:	2b05      	cmp	r3, #5
 800a6dc:	d168      	bne.n	800a7b0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6e2:	e065      	b.n	800a7b0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	795b      	ldrb	r3, [r3, #5]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	9200      	str	r2, [sp, #0]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f87f 	bl	800a7f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	220a      	movs	r2, #10
 800a706:	761a      	strb	r2, [r3, #24]
      break;
 800a708:	e055      	b.n	800a7b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	795b      	ldrb	r3, [r3, #5]
 800a70e:	4619      	mov	r1, r3
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fbe1 	bl	800aed8 <USBH_LL_GetURBState>
 800a716:	4603      	mov	r3, r0
 800a718:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a71a:	7bbb      	ldrb	r3, [r7, #14]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d105      	bne.n	800a72c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	220d      	movs	r2, #13
 800a728:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a72a:	e043      	b.n	800a7b4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d103      	bne.n	800a73a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2209      	movs	r2, #9
 800a736:	761a      	strb	r2, [r3, #24]
      break;
 800a738:	e03c      	b.n	800a7b4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a73a:	7bbb      	ldrb	r3, [r7, #14]
 800a73c:	2b04      	cmp	r3, #4
 800a73e:	d139      	bne.n	800a7b4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	220b      	movs	r2, #11
 800a744:	761a      	strb	r2, [r3, #24]
      break;
 800a746:	e035      	b.n	800a7b4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	7e5b      	ldrb	r3, [r3, #25]
 800a74c:	3301      	adds	r3, #1
 800a74e:	b2da      	uxtb	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	765a      	strb	r2, [r3, #25]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	7e5b      	ldrb	r3, [r3, #25]
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d806      	bhi.n	800a76a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a768:	e025      	b.n	800a7b6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a770:	2106      	movs	r1, #6
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	795b      	ldrb	r3, [r3, #5]
 800a780:	4619      	mov	r1, r3
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f90c 	bl	800a9a0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	791b      	ldrb	r3, [r3, #4]
 800a78c:	4619      	mov	r1, r3
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f906 	bl	800a9a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a79a:	2302      	movs	r3, #2
 800a79c:	73fb      	strb	r3, [r7, #15]
      break;
 800a79e:	e00a      	b.n	800a7b6 <USBH_HandleControl+0x2de>

    default:
      break;
 800a7a0:	bf00      	nop
 800a7a2:	e008      	b.n	800a7b6 <USBH_HandleControl+0x2de>
      break;
 800a7a4:	bf00      	nop
 800a7a6:	e006      	b.n	800a7b6 <USBH_HandleControl+0x2de>
      break;
 800a7a8:	bf00      	nop
 800a7aa:	e004      	b.n	800a7b6 <USBH_HandleControl+0x2de>
      break;
 800a7ac:	bf00      	nop
 800a7ae:	e002      	b.n	800a7b6 <USBH_HandleControl+0x2de>
      break;
 800a7b0:	bf00      	nop
 800a7b2:	e000      	b.n	800a7b6 <USBH_HandleControl+0x2de>
      break;
 800a7b4:	bf00      	nop
  }

  return status;
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b088      	sub	sp, #32
 800a7c4:	af04      	add	r7, sp, #16
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7ce:	79f9      	ldrb	r1, [r7, #7]
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	9303      	str	r3, [sp, #12]
 800a7d4:	2308      	movs	r3, #8
 800a7d6:	9302      	str	r3, [sp, #8]
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	9301      	str	r3, [sp, #4]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f000 fb46 	bl	800ae76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b088      	sub	sp, #32
 800a7f8:	af04      	add	r7, sp, #16
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	4611      	mov	r1, r2
 800a800:	461a      	mov	r2, r3
 800a802:	460b      	mov	r3, r1
 800a804:	80fb      	strh	r3, [r7, #6]
 800a806:	4613      	mov	r3, r2
 800a808:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a814:	2300      	movs	r3, #0
 800a816:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a818:	7979      	ldrb	r1, [r7, #5]
 800a81a:	7e3b      	ldrb	r3, [r7, #24]
 800a81c:	9303      	str	r3, [sp, #12]
 800a81e:	88fb      	ldrh	r3, [r7, #6]
 800a820:	9302      	str	r3, [sp, #8]
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	9301      	str	r3, [sp, #4]
 800a826:	2301      	movs	r3, #1
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	2300      	movs	r3, #0
 800a82c:	2200      	movs	r2, #0
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f000 fb21 	bl	800ae76 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b088      	sub	sp, #32
 800a842:	af04      	add	r7, sp, #16
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	4611      	mov	r1, r2
 800a84a:	461a      	mov	r2, r3
 800a84c:	460b      	mov	r3, r1
 800a84e:	80fb      	strh	r3, [r7, #6]
 800a850:	4613      	mov	r3, r2
 800a852:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a854:	7979      	ldrb	r1, [r7, #5]
 800a856:	2300      	movs	r3, #0
 800a858:	9303      	str	r3, [sp, #12]
 800a85a:	88fb      	ldrh	r3, [r7, #6]
 800a85c:	9302      	str	r3, [sp, #8]
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	2301      	movs	r3, #1
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	2300      	movs	r3, #0
 800a868:	2201      	movs	r2, #1
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f000 fb03 	bl	800ae76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a870:	2300      	movs	r3, #0

}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b088      	sub	sp, #32
 800a87e:	af04      	add	r7, sp, #16
 800a880:	60f8      	str	r0, [r7, #12]
 800a882:	60b9      	str	r1, [r7, #8]
 800a884:	4611      	mov	r1, r2
 800a886:	461a      	mov	r2, r3
 800a888:	460b      	mov	r3, r1
 800a88a:	80fb      	strh	r3, [r7, #6]
 800a88c:	4613      	mov	r3, r2
 800a88e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a89a:	2300      	movs	r3, #0
 800a89c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a89e:	7979      	ldrb	r1, [r7, #5]
 800a8a0:	7e3b      	ldrb	r3, [r7, #24]
 800a8a2:	9303      	str	r3, [sp, #12]
 800a8a4:	88fb      	ldrh	r3, [r7, #6]
 800a8a6:	9302      	str	r3, [sp, #8]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	9301      	str	r3, [sp, #4]
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	68f8      	ldr	r0, [r7, #12]
 800a8b6:	f000 fade 	bl	800ae76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b088      	sub	sp, #32
 800a8c8:	af04      	add	r7, sp, #16
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	80fb      	strh	r3, [r7, #6]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a8da:	7979      	ldrb	r1, [r7, #5]
 800a8dc:	2300      	movs	r3, #0
 800a8de:	9303      	str	r3, [sp, #12]
 800a8e0:	88fb      	ldrh	r3, [r7, #6]
 800a8e2:	9302      	str	r3, [sp, #8]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	9301      	str	r3, [sp, #4]
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 fac0 	bl	800ae76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af04      	add	r7, sp, #16
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	4608      	mov	r0, r1
 800a90a:	4611      	mov	r1, r2
 800a90c:	461a      	mov	r2, r3
 800a90e:	4603      	mov	r3, r0
 800a910:	70fb      	strb	r3, [r7, #3]
 800a912:	460b      	mov	r3, r1
 800a914:	70bb      	strb	r3, [r7, #2]
 800a916:	4613      	mov	r3, r2
 800a918:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a91a:	7878      	ldrb	r0, [r7, #1]
 800a91c:	78ba      	ldrb	r2, [r7, #2]
 800a91e:	78f9      	ldrb	r1, [r7, #3]
 800a920:	8b3b      	ldrh	r3, [r7, #24]
 800a922:	9302      	str	r3, [sp, #8]
 800a924:	7d3b      	ldrb	r3, [r7, #20]
 800a926:	9301      	str	r3, [sp, #4]
 800a928:	7c3b      	ldrb	r3, [r7, #16]
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	4603      	mov	r3, r0
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fa53 	bl	800adda <USBH_LL_OpenPipe>

  return USBH_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b082      	sub	sp, #8
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
 800a946:	460b      	mov	r3, r1
 800a948:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a94a:	78fb      	ldrb	r3, [r7, #3]
 800a94c:	4619      	mov	r1, r3
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fa72 	bl	800ae38 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	460b      	mov	r3, r1
 800a968:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f836 	bl	800a9dc <USBH_GetFreePipe>
 800a970:	4603      	mov	r3, r0
 800a972:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a974:	89fb      	ldrh	r3, [r7, #14]
 800a976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d00a      	beq.n	800a994 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a97e:	78fa      	ldrb	r2, [r7, #3]
 800a980:	89fb      	ldrh	r3, [r7, #14]
 800a982:	f003 030f 	and.w	r3, r3, #15
 800a986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a98a:	6879      	ldr	r1, [r7, #4]
 800a98c:	33e0      	adds	r3, #224	; 0xe0
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	440b      	add	r3, r1
 800a992:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a994:	89fb      	ldrh	r3, [r7, #14]
 800a996:	b2db      	uxtb	r3, r3
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a9ac:	78fb      	ldrb	r3, [r7, #3]
 800a9ae:	2b0f      	cmp	r3, #15
 800a9b0:	d80d      	bhi.n	800a9ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a9b2:	78fb      	ldrb	r3, [r7, #3]
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	33e0      	adds	r3, #224	; 0xe0
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	685a      	ldr	r2, [r3, #4]
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a9c4:	6879      	ldr	r1, [r7, #4]
 800a9c6:	33e0      	adds	r3, #224	; 0xe0
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	440b      	add	r3, r1
 800a9cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73fb      	strb	r3, [r7, #15]
 800a9ec:	e00f      	b.n	800aa0e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	33e0      	adds	r3, #224	; 0xe0
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4413      	add	r3, r2
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d102      	bne.n	800aa08 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800aa02:	7bfb      	ldrb	r3, [r7, #15]
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	e007      	b.n	800aa18 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	73fb      	strb	r3, [r7, #15]
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
 800aa10:	2b0f      	cmp	r3, #15
 800aa12:	d9ec      	bls.n	800a9ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800aa14:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800aa28:	2201      	movs	r2, #1
 800aa2a:	490e      	ldr	r1, [pc, #56]	; (800aa64 <MX_USB_HOST_Init+0x40>)
 800aa2c:	480e      	ldr	r0, [pc, #56]	; (800aa68 <MX_USB_HOST_Init+0x44>)
 800aa2e:	f7fe fba7 	bl	8009180 <USBH_Init>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d001      	beq.n	800aa3c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aa38:	f7f8 f9f6 	bl	8002e28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800aa3c:	490b      	ldr	r1, [pc, #44]	; (800aa6c <MX_USB_HOST_Init+0x48>)
 800aa3e:	480a      	ldr	r0, [pc, #40]	; (800aa68 <MX_USB_HOST_Init+0x44>)
 800aa40:	f7fe fc2c 	bl	800929c <USBH_RegisterClass>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d001      	beq.n	800aa4e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aa4a:	f7f8 f9ed 	bl	8002e28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aa4e:	4806      	ldr	r0, [pc, #24]	; (800aa68 <MX_USB_HOST_Init+0x44>)
 800aa50:	f7fe fcb0 	bl	80093b4 <USBH_Start>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aa5a:	f7f8 f9e5 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aa5e:	bf00      	nop
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	0800aa85 	.word	0x0800aa85
 800aa68:	20000298 	.word	0x20000298
 800aa6c:	2000000c 	.word	0x2000000c

0800aa70 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800aa74:	4802      	ldr	r0, [pc, #8]	; (800aa80 <MX_USB_HOST_Process+0x10>)
 800aa76:	f7fe fcad 	bl	80093d4 <USBH_Process>
}
 800aa7a:	bf00      	nop
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	20000298 	.word	0x20000298

0800aa84 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	3b01      	subs	r3, #1
 800aa94:	2b04      	cmp	r3, #4
 800aa96:	d819      	bhi.n	800aacc <USBH_UserProcess+0x48>
 800aa98:	a201      	add	r2, pc, #4	; (adr r2, 800aaa0 <USBH_UserProcess+0x1c>)
 800aa9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9e:	bf00      	nop
 800aaa0:	0800aacd 	.word	0x0800aacd
 800aaa4:	0800aabd 	.word	0x0800aabd
 800aaa8:	0800aacd 	.word	0x0800aacd
 800aaac:	0800aac5 	.word	0x0800aac5
 800aab0:	0800aab5 	.word	0x0800aab5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aab4:	4b09      	ldr	r3, [pc, #36]	; (800aadc <USBH_UserProcess+0x58>)
 800aab6:	2203      	movs	r2, #3
 800aab8:	701a      	strb	r2, [r3, #0]
  break;
 800aaba:	e008      	b.n	800aace <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aabc:	4b07      	ldr	r3, [pc, #28]	; (800aadc <USBH_UserProcess+0x58>)
 800aabe:	2202      	movs	r2, #2
 800aac0:	701a      	strb	r2, [r3, #0]
  break;
 800aac2:	e004      	b.n	800aace <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aac4:	4b05      	ldr	r3, [pc, #20]	; (800aadc <USBH_UserProcess+0x58>)
 800aac6:	2201      	movs	r2, #1
 800aac8:	701a      	strb	r2, [r3, #0]
  break;
 800aaca:	e000      	b.n	800aace <USBH_UserProcess+0x4a>

  default:
  break;
 800aacc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aace:	bf00      	nop
 800aad0:	370c      	adds	r7, #12
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	20000670 	.word	0x20000670

0800aae0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b08a      	sub	sp, #40	; 0x28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aae8:	f107 0314 	add.w	r3, r7, #20
 800aaec:	2200      	movs	r2, #0
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	605a      	str	r2, [r3, #4]
 800aaf2:	609a      	str	r2, [r3, #8]
 800aaf4:	60da      	str	r2, [r3, #12]
 800aaf6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab00:	d147      	bne.n	800ab92 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab02:	2300      	movs	r3, #0
 800ab04:	613b      	str	r3, [r7, #16]
 800ab06:	4b25      	ldr	r3, [pc, #148]	; (800ab9c <HAL_HCD_MspInit+0xbc>)
 800ab08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0a:	4a24      	ldr	r2, [pc, #144]	; (800ab9c <HAL_HCD_MspInit+0xbc>)
 800ab0c:	f043 0301 	orr.w	r3, r3, #1
 800ab10:	6313      	str	r3, [r2, #48]	; 0x30
 800ab12:	4b22      	ldr	r3, [pc, #136]	; (800ab9c <HAL_HCD_MspInit+0xbc>)
 800ab14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab16:	f003 0301 	and.w	r3, r3, #1
 800ab1a:	613b      	str	r3, [r7, #16]
 800ab1c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ab1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab24:	2300      	movs	r3, #0
 800ab26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ab2c:	f107 0314 	add.w	r3, r7, #20
 800ab30:	4619      	mov	r1, r3
 800ab32:	481b      	ldr	r0, [pc, #108]	; (800aba0 <HAL_HCD_MspInit+0xc0>)
 800ab34:	f7f8 fe92 	bl	800385c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ab38:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ab3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab3e:	2302      	movs	r3, #2
 800ab40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab46:	2303      	movs	r3, #3
 800ab48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab4a:	230a      	movs	r3, #10
 800ab4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab4e:	f107 0314 	add.w	r3, r7, #20
 800ab52:	4619      	mov	r1, r3
 800ab54:	4812      	ldr	r0, [pc, #72]	; (800aba0 <HAL_HCD_MspInit+0xc0>)
 800ab56:	f7f8 fe81 	bl	800385c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab5a:	4b10      	ldr	r3, [pc, #64]	; (800ab9c <HAL_HCD_MspInit+0xbc>)
 800ab5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab5e:	4a0f      	ldr	r2, [pc, #60]	; (800ab9c <HAL_HCD_MspInit+0xbc>)
 800ab60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab64:	6353      	str	r3, [r2, #52]	; 0x34
 800ab66:	2300      	movs	r3, #0
 800ab68:	60fb      	str	r3, [r7, #12]
 800ab6a:	4b0c      	ldr	r3, [pc, #48]	; (800ab9c <HAL_HCD_MspInit+0xbc>)
 800ab6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab6e:	4a0b      	ldr	r2, [pc, #44]	; (800ab9c <HAL_HCD_MspInit+0xbc>)
 800ab70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab74:	6453      	str	r3, [r2, #68]	; 0x44
 800ab76:	4b09      	ldr	r3, [pc, #36]	; (800ab9c <HAL_HCD_MspInit+0xbc>)
 800ab78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab82:	2200      	movs	r2, #0
 800ab84:	2100      	movs	r1, #0
 800ab86:	2043      	movs	r0, #67	; 0x43
 800ab88:	f7f8 fd9f 	bl	80036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab8c:	2043      	movs	r0, #67	; 0x43
 800ab8e:	f7f8 fdb8 	bl	8003702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab92:	bf00      	nop
 800ab94:	3728      	adds	r7, #40	; 0x28
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	40023800 	.word	0x40023800
 800aba0:	40020000 	.word	0x40020000

0800aba4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fe ffed 	bl	8009b92 <USBH_LL_IncTimer>
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff f825 	bl	8009c1e <USBH_LL_Connect>
}
 800abd4:	bf00      	nop
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800abea:	4618      	mov	r0, r3
 800abec:	f7ff f82e 	bl	8009c4c <USBH_LL_Disconnect>
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	460b      	mov	r3, r1
 800ac02:	70fb      	strb	r3, [r7, #3]
 800ac04:	4613      	mov	r3, r2
 800ac06:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fe ffdf 	bl	8009be6 <USBH_LL_PortEnabled>
}
 800ac28:	bf00      	nop
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fe ffdf 	bl	8009c02 <USBH_LL_PortDisabled>
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d12a      	bne.n	800acb4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ac5e:	4a18      	ldr	r2, [pc, #96]	; (800acc0 <USBH_LL_Init+0x74>)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a15      	ldr	r2, [pc, #84]	; (800acc0 <USBH_LL_Init+0x74>)
 800ac6a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac6e:	4b14      	ldr	r3, [pc, #80]	; (800acc0 <USBH_LL_Init+0x74>)
 800ac70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ac74:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ac76:	4b12      	ldr	r3, [pc, #72]	; (800acc0 <USBH_LL_Init+0x74>)
 800ac78:	2208      	movs	r2, #8
 800ac7a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ac7c:	4b10      	ldr	r3, [pc, #64]	; (800acc0 <USBH_LL_Init+0x74>)
 800ac7e:	2201      	movs	r2, #1
 800ac80:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac82:	4b0f      	ldr	r3, [pc, #60]	; (800acc0 <USBH_LL_Init+0x74>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ac88:	4b0d      	ldr	r3, [pc, #52]	; (800acc0 <USBH_LL_Init+0x74>)
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac8e:	4b0c      	ldr	r3, [pc, #48]	; (800acc0 <USBH_LL_Init+0x74>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ac94:	480a      	ldr	r0, [pc, #40]	; (800acc0 <USBH_LL_Init+0x74>)
 800ac96:	f7f8 ff7e 	bl	8003b96 <HAL_HCD_Init>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d001      	beq.n	800aca4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aca0:	f7f8 f8c2 	bl	8002e28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aca4:	4806      	ldr	r0, [pc, #24]	; (800acc0 <USBH_LL_Init+0x74>)
 800aca6:	f7f9 fb62 	bl	800436e <HAL_HCD_GetCurrentFrame>
 800acaa:	4603      	mov	r3, r0
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7fe ff60 	bl	8009b74 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20000674 	.word	0x20000674

0800acc4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acda:	4618      	mov	r0, r3
 800acdc:	f7f9 fad1 	bl	8004282 <HAL_HCD_Start>
 800ace0:	4603      	mov	r3, r0
 800ace2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f000 f95c 	bl	800afa4 <USBH_Get_USB_Status>
 800acec:	4603      	mov	r3, r0
 800acee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b084      	sub	sp, #16
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7f9 fad9 	bl	80042c8 <HAL_HCD_Stop>
 800ad16:	4603      	mov	r3, r0
 800ad18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad1a:	7bfb      	ldrb	r3, [r7, #15]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 f941 	bl	800afa4 <USBH_Get_USB_Status>
 800ad22:	4603      	mov	r3, r0
 800ad24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7f9 fb21 	bl	800438a <HAL_HCD_GetCurrentSpeed>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d00c      	beq.n	800ad68 <USBH_LL_GetSpeed+0x38>
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d80d      	bhi.n	800ad6e <USBH_LL_GetSpeed+0x3e>
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d002      	beq.n	800ad5c <USBH_LL_GetSpeed+0x2c>
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d003      	beq.n	800ad62 <USBH_LL_GetSpeed+0x32>
 800ad5a:	e008      	b.n	800ad6e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad60:	e008      	b.n	800ad74 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ad62:	2301      	movs	r3, #1
 800ad64:	73fb      	strb	r3, [r7, #15]
    break;
 800ad66:	e005      	b.n	800ad74 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ad68:	2302      	movs	r3, #2
 800ad6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad6c:	e002      	b.n	800ad74 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	73fb      	strb	r3, [r7, #15]
    break;
 800ad72:	bf00      	nop
  }
  return  speed;
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b084      	sub	sp, #16
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7f9 fab4 	bl	8004302 <HAL_HCD_ResetPort>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad9e:	7bfb      	ldrb	r3, [r7, #15]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 f8ff 	bl	800afa4 <USBH_Get_USB_Status>
 800ada6:	4603      	mov	r3, r0
 800ada8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adc6:	78fa      	ldrb	r2, [r7, #3]
 800adc8:	4611      	mov	r1, r2
 800adca:	4618      	mov	r0, r3
 800adcc:	f7f9 fabb 	bl	8004346 <HAL_HCD_HC_GetXferCount>
 800add0:	4603      	mov	r3, r0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800adda:	b590      	push	{r4, r7, lr}
 800addc:	b089      	sub	sp, #36	; 0x24
 800adde:	af04      	add	r7, sp, #16
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	4608      	mov	r0, r1
 800ade4:	4611      	mov	r1, r2
 800ade6:	461a      	mov	r2, r3
 800ade8:	4603      	mov	r3, r0
 800adea:	70fb      	strb	r3, [r7, #3]
 800adec:	460b      	mov	r3, r1
 800adee:	70bb      	strb	r3, [r7, #2]
 800adf0:	4613      	mov	r3, r2
 800adf2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae02:	787c      	ldrb	r4, [r7, #1]
 800ae04:	78ba      	ldrb	r2, [r7, #2]
 800ae06:	78f9      	ldrb	r1, [r7, #3]
 800ae08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae0a:	9302      	str	r3, [sp, #8]
 800ae0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae16:	9300      	str	r3, [sp, #0]
 800ae18:	4623      	mov	r3, r4
 800ae1a:	f7f8 ff1e 	bl	8003c5a <HAL_HCD_HC_Init>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 f8bd 	bl	800afa4 <USBH_Get_USB_Status>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3714      	adds	r7, #20
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd90      	pop	{r4, r7, pc}

0800ae38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae52:	78fa      	ldrb	r2, [r7, #3]
 800ae54:	4611      	mov	r1, r2
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7f8 ff8e 	bl	8003d78 <HAL_HCD_HC_Halt>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 f89e 	bl	800afa4 <USBH_Get_USB_Status>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ae76:	b590      	push	{r4, r7, lr}
 800ae78:	b089      	sub	sp, #36	; 0x24
 800ae7a:	af04      	add	r7, sp, #16
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	4608      	mov	r0, r1
 800ae80:	4611      	mov	r1, r2
 800ae82:	461a      	mov	r2, r3
 800ae84:	4603      	mov	r3, r0
 800ae86:	70fb      	strb	r3, [r7, #3]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	70bb      	strb	r3, [r7, #2]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae9e:	787c      	ldrb	r4, [r7, #1]
 800aea0:	78ba      	ldrb	r2, [r7, #2]
 800aea2:	78f9      	ldrb	r1, [r7, #3]
 800aea4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aea8:	9303      	str	r3, [sp, #12]
 800aeaa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aeac:	9302      	str	r3, [sp, #8]
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	9301      	str	r3, [sp, #4]
 800aeb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	4623      	mov	r3, r4
 800aeba:	f7f8 ff81 	bl	8003dc0 <HAL_HCD_HC_SubmitRequest>
 800aebe:	4603      	mov	r3, r0
 800aec0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 f86d 	bl	800afa4 <USBH_Get_USB_Status>
 800aeca:	4603      	mov	r3, r0
 800aecc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aece:	7bbb      	ldrb	r3, [r7, #14]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd90      	pop	{r4, r7, pc}

0800aed8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aeea:	78fa      	ldrb	r2, [r7, #3]
 800aeec:	4611      	mov	r1, r2
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7f9 fa15 	bl	800431e <HAL_HCD_HC_GetURBState>
 800aef4:	4603      	mov	r3, r0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b082      	sub	sp, #8
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	460b      	mov	r3, r1
 800af08:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800af10:	2b01      	cmp	r3, #1
 800af12:	d103      	bne.n	800af1c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800af14:	78fb      	ldrb	r3, [r7, #3]
 800af16:	4618      	mov	r0, r3
 800af18:	f000 f870 	bl	800affc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800af1c:	20c8      	movs	r0, #200	; 0xc8
 800af1e:	f7f8 fad5 	bl	80034cc <HAL_Delay>
  return USBH_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	70fb      	strb	r3, [r7, #3]
 800af38:	4613      	mov	r3, r2
 800af3a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af42:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	212c      	movs	r1, #44	; 0x2c
 800af4a:	fb01 f303 	mul.w	r3, r1, r3
 800af4e:	4413      	add	r3, r2
 800af50:	333b      	adds	r3, #59	; 0x3b
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d009      	beq.n	800af6c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800af58:	78fb      	ldrb	r3, [r7, #3]
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	212c      	movs	r1, #44	; 0x2c
 800af5e:	fb01 f303 	mul.w	r3, r1, r3
 800af62:	4413      	add	r3, r2
 800af64:	3354      	adds	r3, #84	; 0x54
 800af66:	78ba      	ldrb	r2, [r7, #2]
 800af68:	701a      	strb	r2, [r3, #0]
 800af6a:	e008      	b.n	800af7e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800af6c:	78fb      	ldrb	r3, [r7, #3]
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	212c      	movs	r1, #44	; 0x2c
 800af72:	fb01 f303 	mul.w	r3, r1, r3
 800af76:	4413      	add	r3, r2
 800af78:	3355      	adds	r3, #85	; 0x55
 800af7a:	78ba      	ldrb	r2, [r7, #2]
 800af7c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7f8 fa99 	bl	80034cc <HAL_Delay>
}
 800af9a:	bf00      	nop
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
	...

0800afa4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	4603      	mov	r3, r0
 800afac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800afb2:	79fb      	ldrb	r3, [r7, #7]
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d817      	bhi.n	800afe8 <USBH_Get_USB_Status+0x44>
 800afb8:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <USBH_Get_USB_Status+0x1c>)
 800afba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbe:	bf00      	nop
 800afc0:	0800afd1 	.word	0x0800afd1
 800afc4:	0800afd7 	.word	0x0800afd7
 800afc8:	0800afdd 	.word	0x0800afdd
 800afcc:	0800afe3 	.word	0x0800afe3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800afd0:	2300      	movs	r3, #0
 800afd2:	73fb      	strb	r3, [r7, #15]
    break;
 800afd4:	e00b      	b.n	800afee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800afd6:	2302      	movs	r3, #2
 800afd8:	73fb      	strb	r3, [r7, #15]
    break;
 800afda:	e008      	b.n	800afee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800afdc:	2301      	movs	r3, #1
 800afde:	73fb      	strb	r3, [r7, #15]
    break;
 800afe0:	e005      	b.n	800afee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800afe2:	2302      	movs	r3, #2
 800afe4:	73fb      	strb	r3, [r7, #15]
    break;
 800afe6:	e002      	b.n	800afee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800afe8:	2302      	movs	r3, #2
 800afea:	73fb      	strb	r3, [r7, #15]
    break;
 800afec:	bf00      	nop
  }
  return usb_status;
 800afee:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	4603      	mov	r3, r0
 800b004:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b006:	79fb      	ldrb	r3, [r7, #7]
 800b008:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d102      	bne.n	800b016 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b010:	2300      	movs	r3, #0
 800b012:	73fb      	strb	r3, [r7, #15]
 800b014:	e001      	b.n	800b01a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b016:	2301      	movs	r3, #1
 800b018:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b01a:	7bfb      	ldrb	r3, [r7, #15]
 800b01c:	461a      	mov	r2, r3
 800b01e:	2101      	movs	r1, #1
 800b020:	4803      	ldr	r0, [pc, #12]	; (800b030 <MX_DriverVbusFS+0x34>)
 800b022:	f7f8 fd9f 	bl	8003b64 <HAL_GPIO_WritePin>
}
 800b026:	bf00      	nop
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	40020800 	.word	0x40020800

0800b034 <_ZdlPvj>:
 800b034:	f000 b814 	b.w	800b060 <_ZdlPv>

0800b038 <_Znwj>:
 800b038:	2801      	cmp	r0, #1
 800b03a:	bf38      	it	cc
 800b03c:	2001      	movcc	r0, #1
 800b03e:	b510      	push	{r4, lr}
 800b040:	4604      	mov	r4, r0
 800b042:	4620      	mov	r0, r4
 800b044:	f000 f85a 	bl	800b0fc <malloc>
 800b048:	b930      	cbnz	r0, 800b058 <_Znwj+0x20>
 800b04a:	f000 f81d 	bl	800b088 <_ZSt15get_new_handlerv>
 800b04e:	b908      	cbnz	r0, 800b054 <_Znwj+0x1c>
 800b050:	f000 f822 	bl	800b098 <abort>
 800b054:	4780      	blx	r0
 800b056:	e7f4      	b.n	800b042 <_Znwj+0xa>
 800b058:	bd10      	pop	{r4, pc}

0800b05a <__cxa_pure_virtual>:
 800b05a:	b508      	push	{r3, lr}
 800b05c:	f000 f80e 	bl	800b07c <_ZSt9terminatev>

0800b060 <_ZdlPv>:
 800b060:	f000 b854 	b.w	800b10c <free>

0800b064 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b064:	b508      	push	{r3, lr}
 800b066:	4780      	blx	r0
 800b068:	f000 f816 	bl	800b098 <abort>

0800b06c <_ZSt13get_terminatev>:
 800b06c:	4b02      	ldr	r3, [pc, #8]	; (800b078 <_ZSt13get_terminatev+0xc>)
 800b06e:	6818      	ldr	r0, [r3, #0]
 800b070:	f3bf 8f5b 	dmb	ish
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	2000002c 	.word	0x2000002c

0800b07c <_ZSt9terminatev>:
 800b07c:	b508      	push	{r3, lr}
 800b07e:	f7ff fff5 	bl	800b06c <_ZSt13get_terminatev>
 800b082:	f7ff ffef 	bl	800b064 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800b088 <_ZSt15get_new_handlerv>:
 800b088:	4b02      	ldr	r3, [pc, #8]	; (800b094 <_ZSt15get_new_handlerv+0xc>)
 800b08a:	6818      	ldr	r0, [r3, #0]
 800b08c:	f3bf 8f5b 	dmb	ish
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	20000978 	.word	0x20000978

0800b098 <abort>:
 800b098:	b508      	push	{r3, lr}
 800b09a:	2006      	movs	r0, #6
 800b09c:	f000 f95e 	bl	800b35c <raise>
 800b0a0:	2001      	movs	r0, #1
 800b0a2:	f7f8 f925 	bl	80032f0 <_exit>
	...

0800b0a8 <__errno>:
 800b0a8:	4b01      	ldr	r3, [pc, #4]	; (800b0b0 <__errno+0x8>)
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	20000030 	.word	0x20000030

0800b0b4 <__libc_init_array>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	4d0d      	ldr	r5, [pc, #52]	; (800b0ec <__libc_init_array+0x38>)
 800b0b8:	4c0d      	ldr	r4, [pc, #52]	; (800b0f0 <__libc_init_array+0x3c>)
 800b0ba:	1b64      	subs	r4, r4, r5
 800b0bc:	10a4      	asrs	r4, r4, #2
 800b0be:	2600      	movs	r6, #0
 800b0c0:	42a6      	cmp	r6, r4
 800b0c2:	d109      	bne.n	800b0d8 <__libc_init_array+0x24>
 800b0c4:	4d0b      	ldr	r5, [pc, #44]	; (800b0f4 <__libc_init_array+0x40>)
 800b0c6:	4c0c      	ldr	r4, [pc, #48]	; (800b0f8 <__libc_init_array+0x44>)
 800b0c8:	f000 f972 	bl	800b3b0 <_init>
 800b0cc:	1b64      	subs	r4, r4, r5
 800b0ce:	10a4      	asrs	r4, r4, #2
 800b0d0:	2600      	movs	r6, #0
 800b0d2:	42a6      	cmp	r6, r4
 800b0d4:	d105      	bne.n	800b0e2 <__libc_init_array+0x2e>
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0dc:	4798      	blx	r3
 800b0de:	3601      	adds	r6, #1
 800b0e0:	e7ee      	b.n	800b0c0 <__libc_init_array+0xc>
 800b0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0e6:	4798      	blx	r3
 800b0e8:	3601      	adds	r6, #1
 800b0ea:	e7f2      	b.n	800b0d2 <__libc_init_array+0x1e>
 800b0ec:	0800b498 	.word	0x0800b498
 800b0f0:	0800b498 	.word	0x0800b498
 800b0f4:	0800b498 	.word	0x0800b498
 800b0f8:	0800b4a0 	.word	0x0800b4a0

0800b0fc <malloc>:
 800b0fc:	4b02      	ldr	r3, [pc, #8]	; (800b108 <malloc+0xc>)
 800b0fe:	4601      	mov	r1, r0
 800b100:	6818      	ldr	r0, [r3, #0]
 800b102:	f000 b87f 	b.w	800b204 <_malloc_r>
 800b106:	bf00      	nop
 800b108:	20000030 	.word	0x20000030

0800b10c <free>:
 800b10c:	4b02      	ldr	r3, [pc, #8]	; (800b118 <free+0xc>)
 800b10e:	4601      	mov	r1, r0
 800b110:	6818      	ldr	r0, [r3, #0]
 800b112:	f000 b80b 	b.w	800b12c <_free_r>
 800b116:	bf00      	nop
 800b118:	20000030 	.word	0x20000030

0800b11c <memset>:
 800b11c:	4402      	add	r2, r0
 800b11e:	4603      	mov	r3, r0
 800b120:	4293      	cmp	r3, r2
 800b122:	d100      	bne.n	800b126 <memset+0xa>
 800b124:	4770      	bx	lr
 800b126:	f803 1b01 	strb.w	r1, [r3], #1
 800b12a:	e7f9      	b.n	800b120 <memset+0x4>

0800b12c <_free_r>:
 800b12c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b12e:	2900      	cmp	r1, #0
 800b130:	d044      	beq.n	800b1bc <_free_r+0x90>
 800b132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b136:	9001      	str	r0, [sp, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f1a1 0404 	sub.w	r4, r1, #4
 800b13e:	bfb8      	it	lt
 800b140:	18e4      	addlt	r4, r4, r3
 800b142:	f000 f927 	bl	800b394 <__malloc_lock>
 800b146:	4a1e      	ldr	r2, [pc, #120]	; (800b1c0 <_free_r+0x94>)
 800b148:	9801      	ldr	r0, [sp, #4]
 800b14a:	6813      	ldr	r3, [r2, #0]
 800b14c:	b933      	cbnz	r3, 800b15c <_free_r+0x30>
 800b14e:	6063      	str	r3, [r4, #4]
 800b150:	6014      	str	r4, [r2, #0]
 800b152:	b003      	add	sp, #12
 800b154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b158:	f000 b922 	b.w	800b3a0 <__malloc_unlock>
 800b15c:	42a3      	cmp	r3, r4
 800b15e:	d908      	bls.n	800b172 <_free_r+0x46>
 800b160:	6825      	ldr	r5, [r4, #0]
 800b162:	1961      	adds	r1, r4, r5
 800b164:	428b      	cmp	r3, r1
 800b166:	bf01      	itttt	eq
 800b168:	6819      	ldreq	r1, [r3, #0]
 800b16a:	685b      	ldreq	r3, [r3, #4]
 800b16c:	1949      	addeq	r1, r1, r5
 800b16e:	6021      	streq	r1, [r4, #0]
 800b170:	e7ed      	b.n	800b14e <_free_r+0x22>
 800b172:	461a      	mov	r2, r3
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	b10b      	cbz	r3, 800b17c <_free_r+0x50>
 800b178:	42a3      	cmp	r3, r4
 800b17a:	d9fa      	bls.n	800b172 <_free_r+0x46>
 800b17c:	6811      	ldr	r1, [r2, #0]
 800b17e:	1855      	adds	r5, r2, r1
 800b180:	42a5      	cmp	r5, r4
 800b182:	d10b      	bne.n	800b19c <_free_r+0x70>
 800b184:	6824      	ldr	r4, [r4, #0]
 800b186:	4421      	add	r1, r4
 800b188:	1854      	adds	r4, r2, r1
 800b18a:	42a3      	cmp	r3, r4
 800b18c:	6011      	str	r1, [r2, #0]
 800b18e:	d1e0      	bne.n	800b152 <_free_r+0x26>
 800b190:	681c      	ldr	r4, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	6053      	str	r3, [r2, #4]
 800b196:	4421      	add	r1, r4
 800b198:	6011      	str	r1, [r2, #0]
 800b19a:	e7da      	b.n	800b152 <_free_r+0x26>
 800b19c:	d902      	bls.n	800b1a4 <_free_r+0x78>
 800b19e:	230c      	movs	r3, #12
 800b1a0:	6003      	str	r3, [r0, #0]
 800b1a2:	e7d6      	b.n	800b152 <_free_r+0x26>
 800b1a4:	6825      	ldr	r5, [r4, #0]
 800b1a6:	1961      	adds	r1, r4, r5
 800b1a8:	428b      	cmp	r3, r1
 800b1aa:	bf04      	itt	eq
 800b1ac:	6819      	ldreq	r1, [r3, #0]
 800b1ae:	685b      	ldreq	r3, [r3, #4]
 800b1b0:	6063      	str	r3, [r4, #4]
 800b1b2:	bf04      	itt	eq
 800b1b4:	1949      	addeq	r1, r1, r5
 800b1b6:	6021      	streq	r1, [r4, #0]
 800b1b8:	6054      	str	r4, [r2, #4]
 800b1ba:	e7ca      	b.n	800b152 <_free_r+0x26>
 800b1bc:	b003      	add	sp, #12
 800b1be:	bd30      	pop	{r4, r5, pc}
 800b1c0:	2000097c 	.word	0x2000097c

0800b1c4 <sbrk_aligned>:
 800b1c4:	b570      	push	{r4, r5, r6, lr}
 800b1c6:	4e0e      	ldr	r6, [pc, #56]	; (800b200 <sbrk_aligned+0x3c>)
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	6831      	ldr	r1, [r6, #0]
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	b911      	cbnz	r1, 800b1d6 <sbrk_aligned+0x12>
 800b1d0:	f000 f88c 	bl	800b2ec <_sbrk_r>
 800b1d4:	6030      	str	r0, [r6, #0]
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	4628      	mov	r0, r5
 800b1da:	f000 f887 	bl	800b2ec <_sbrk_r>
 800b1de:	1c43      	adds	r3, r0, #1
 800b1e0:	d00a      	beq.n	800b1f8 <sbrk_aligned+0x34>
 800b1e2:	1cc4      	adds	r4, r0, #3
 800b1e4:	f024 0403 	bic.w	r4, r4, #3
 800b1e8:	42a0      	cmp	r0, r4
 800b1ea:	d007      	beq.n	800b1fc <sbrk_aligned+0x38>
 800b1ec:	1a21      	subs	r1, r4, r0
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f000 f87c 	bl	800b2ec <_sbrk_r>
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	d101      	bne.n	800b1fc <sbrk_aligned+0x38>
 800b1f8:	f04f 34ff 	mov.w	r4, #4294967295
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	bd70      	pop	{r4, r5, r6, pc}
 800b200:	20000980 	.word	0x20000980

0800b204 <_malloc_r>:
 800b204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b208:	1ccd      	adds	r5, r1, #3
 800b20a:	f025 0503 	bic.w	r5, r5, #3
 800b20e:	3508      	adds	r5, #8
 800b210:	2d0c      	cmp	r5, #12
 800b212:	bf38      	it	cc
 800b214:	250c      	movcc	r5, #12
 800b216:	2d00      	cmp	r5, #0
 800b218:	4607      	mov	r7, r0
 800b21a:	db01      	blt.n	800b220 <_malloc_r+0x1c>
 800b21c:	42a9      	cmp	r1, r5
 800b21e:	d905      	bls.n	800b22c <_malloc_r+0x28>
 800b220:	230c      	movs	r3, #12
 800b222:	603b      	str	r3, [r7, #0]
 800b224:	2600      	movs	r6, #0
 800b226:	4630      	mov	r0, r6
 800b228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b22c:	4e2e      	ldr	r6, [pc, #184]	; (800b2e8 <_malloc_r+0xe4>)
 800b22e:	f000 f8b1 	bl	800b394 <__malloc_lock>
 800b232:	6833      	ldr	r3, [r6, #0]
 800b234:	461c      	mov	r4, r3
 800b236:	bb34      	cbnz	r4, 800b286 <_malloc_r+0x82>
 800b238:	4629      	mov	r1, r5
 800b23a:	4638      	mov	r0, r7
 800b23c:	f7ff ffc2 	bl	800b1c4 <sbrk_aligned>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	4604      	mov	r4, r0
 800b244:	d14d      	bne.n	800b2e2 <_malloc_r+0xde>
 800b246:	6834      	ldr	r4, [r6, #0]
 800b248:	4626      	mov	r6, r4
 800b24a:	2e00      	cmp	r6, #0
 800b24c:	d140      	bne.n	800b2d0 <_malloc_r+0xcc>
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	4631      	mov	r1, r6
 800b252:	4638      	mov	r0, r7
 800b254:	eb04 0803 	add.w	r8, r4, r3
 800b258:	f000 f848 	bl	800b2ec <_sbrk_r>
 800b25c:	4580      	cmp	r8, r0
 800b25e:	d13a      	bne.n	800b2d6 <_malloc_r+0xd2>
 800b260:	6821      	ldr	r1, [r4, #0]
 800b262:	3503      	adds	r5, #3
 800b264:	1a6d      	subs	r5, r5, r1
 800b266:	f025 0503 	bic.w	r5, r5, #3
 800b26a:	3508      	adds	r5, #8
 800b26c:	2d0c      	cmp	r5, #12
 800b26e:	bf38      	it	cc
 800b270:	250c      	movcc	r5, #12
 800b272:	4629      	mov	r1, r5
 800b274:	4638      	mov	r0, r7
 800b276:	f7ff ffa5 	bl	800b1c4 <sbrk_aligned>
 800b27a:	3001      	adds	r0, #1
 800b27c:	d02b      	beq.n	800b2d6 <_malloc_r+0xd2>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	442b      	add	r3, r5
 800b282:	6023      	str	r3, [r4, #0]
 800b284:	e00e      	b.n	800b2a4 <_malloc_r+0xa0>
 800b286:	6822      	ldr	r2, [r4, #0]
 800b288:	1b52      	subs	r2, r2, r5
 800b28a:	d41e      	bmi.n	800b2ca <_malloc_r+0xc6>
 800b28c:	2a0b      	cmp	r2, #11
 800b28e:	d916      	bls.n	800b2be <_malloc_r+0xba>
 800b290:	1961      	adds	r1, r4, r5
 800b292:	42a3      	cmp	r3, r4
 800b294:	6025      	str	r5, [r4, #0]
 800b296:	bf18      	it	ne
 800b298:	6059      	strne	r1, [r3, #4]
 800b29a:	6863      	ldr	r3, [r4, #4]
 800b29c:	bf08      	it	eq
 800b29e:	6031      	streq	r1, [r6, #0]
 800b2a0:	5162      	str	r2, [r4, r5]
 800b2a2:	604b      	str	r3, [r1, #4]
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f104 060b 	add.w	r6, r4, #11
 800b2aa:	f000 f879 	bl	800b3a0 <__malloc_unlock>
 800b2ae:	f026 0607 	bic.w	r6, r6, #7
 800b2b2:	1d23      	adds	r3, r4, #4
 800b2b4:	1af2      	subs	r2, r6, r3
 800b2b6:	d0b6      	beq.n	800b226 <_malloc_r+0x22>
 800b2b8:	1b9b      	subs	r3, r3, r6
 800b2ba:	50a3      	str	r3, [r4, r2]
 800b2bc:	e7b3      	b.n	800b226 <_malloc_r+0x22>
 800b2be:	6862      	ldr	r2, [r4, #4]
 800b2c0:	42a3      	cmp	r3, r4
 800b2c2:	bf0c      	ite	eq
 800b2c4:	6032      	streq	r2, [r6, #0]
 800b2c6:	605a      	strne	r2, [r3, #4]
 800b2c8:	e7ec      	b.n	800b2a4 <_malloc_r+0xa0>
 800b2ca:	4623      	mov	r3, r4
 800b2cc:	6864      	ldr	r4, [r4, #4]
 800b2ce:	e7b2      	b.n	800b236 <_malloc_r+0x32>
 800b2d0:	4634      	mov	r4, r6
 800b2d2:	6876      	ldr	r6, [r6, #4]
 800b2d4:	e7b9      	b.n	800b24a <_malloc_r+0x46>
 800b2d6:	230c      	movs	r3, #12
 800b2d8:	603b      	str	r3, [r7, #0]
 800b2da:	4638      	mov	r0, r7
 800b2dc:	f000 f860 	bl	800b3a0 <__malloc_unlock>
 800b2e0:	e7a1      	b.n	800b226 <_malloc_r+0x22>
 800b2e2:	6025      	str	r5, [r4, #0]
 800b2e4:	e7de      	b.n	800b2a4 <_malloc_r+0xa0>
 800b2e6:	bf00      	nop
 800b2e8:	2000097c 	.word	0x2000097c

0800b2ec <_sbrk_r>:
 800b2ec:	b538      	push	{r3, r4, r5, lr}
 800b2ee:	4d06      	ldr	r5, [pc, #24]	; (800b308 <_sbrk_r+0x1c>)
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	4608      	mov	r0, r1
 800b2f6:	602b      	str	r3, [r5, #0]
 800b2f8:	f7f8 f804 	bl	8003304 <_sbrk>
 800b2fc:	1c43      	adds	r3, r0, #1
 800b2fe:	d102      	bne.n	800b306 <_sbrk_r+0x1a>
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	b103      	cbz	r3, 800b306 <_sbrk_r+0x1a>
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	bd38      	pop	{r3, r4, r5, pc}
 800b308:	20000984 	.word	0x20000984

0800b30c <_raise_r>:
 800b30c:	291f      	cmp	r1, #31
 800b30e:	b538      	push	{r3, r4, r5, lr}
 800b310:	4604      	mov	r4, r0
 800b312:	460d      	mov	r5, r1
 800b314:	d904      	bls.n	800b320 <_raise_r+0x14>
 800b316:	2316      	movs	r3, #22
 800b318:	6003      	str	r3, [r0, #0]
 800b31a:	f04f 30ff 	mov.w	r0, #4294967295
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
 800b320:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b322:	b112      	cbz	r2, 800b32a <_raise_r+0x1e>
 800b324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b328:	b94b      	cbnz	r3, 800b33e <_raise_r+0x32>
 800b32a:	4620      	mov	r0, r4
 800b32c:	f000 f830 	bl	800b390 <_getpid_r>
 800b330:	462a      	mov	r2, r5
 800b332:	4601      	mov	r1, r0
 800b334:	4620      	mov	r0, r4
 800b336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b33a:	f000 b817 	b.w	800b36c <_kill_r>
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d00a      	beq.n	800b358 <_raise_r+0x4c>
 800b342:	1c59      	adds	r1, r3, #1
 800b344:	d103      	bne.n	800b34e <_raise_r+0x42>
 800b346:	2316      	movs	r3, #22
 800b348:	6003      	str	r3, [r0, #0]
 800b34a:	2001      	movs	r0, #1
 800b34c:	e7e7      	b.n	800b31e <_raise_r+0x12>
 800b34e:	2400      	movs	r4, #0
 800b350:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b354:	4628      	mov	r0, r5
 800b356:	4798      	blx	r3
 800b358:	2000      	movs	r0, #0
 800b35a:	e7e0      	b.n	800b31e <_raise_r+0x12>

0800b35c <raise>:
 800b35c:	4b02      	ldr	r3, [pc, #8]	; (800b368 <raise+0xc>)
 800b35e:	4601      	mov	r1, r0
 800b360:	6818      	ldr	r0, [r3, #0]
 800b362:	f7ff bfd3 	b.w	800b30c <_raise_r>
 800b366:	bf00      	nop
 800b368:	20000030 	.word	0x20000030

0800b36c <_kill_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4d07      	ldr	r5, [pc, #28]	; (800b38c <_kill_r+0x20>)
 800b370:	2300      	movs	r3, #0
 800b372:	4604      	mov	r4, r0
 800b374:	4608      	mov	r0, r1
 800b376:	4611      	mov	r1, r2
 800b378:	602b      	str	r3, [r5, #0]
 800b37a:	f7f7 ffa9 	bl	80032d0 <_kill>
 800b37e:	1c43      	adds	r3, r0, #1
 800b380:	d102      	bne.n	800b388 <_kill_r+0x1c>
 800b382:	682b      	ldr	r3, [r5, #0]
 800b384:	b103      	cbz	r3, 800b388 <_kill_r+0x1c>
 800b386:	6023      	str	r3, [r4, #0]
 800b388:	bd38      	pop	{r3, r4, r5, pc}
 800b38a:	bf00      	nop
 800b38c:	20000984 	.word	0x20000984

0800b390 <_getpid_r>:
 800b390:	f7f7 bf96 	b.w	80032c0 <_getpid>

0800b394 <__malloc_lock>:
 800b394:	4801      	ldr	r0, [pc, #4]	; (800b39c <__malloc_lock+0x8>)
 800b396:	f000 b809 	b.w	800b3ac <__retarget_lock_acquire_recursive>
 800b39a:	bf00      	nop
 800b39c:	20000988 	.word	0x20000988

0800b3a0 <__malloc_unlock>:
 800b3a0:	4801      	ldr	r0, [pc, #4]	; (800b3a8 <__malloc_unlock+0x8>)
 800b3a2:	f000 b804 	b.w	800b3ae <__retarget_lock_release_recursive>
 800b3a6:	bf00      	nop
 800b3a8:	20000988 	.word	0x20000988

0800b3ac <__retarget_lock_acquire_recursive>:
 800b3ac:	4770      	bx	lr

0800b3ae <__retarget_lock_release_recursive>:
 800b3ae:	4770      	bx	lr

0800b3b0 <_init>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	bf00      	nop
 800b3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3b6:	bc08      	pop	{r3}
 800b3b8:	469e      	mov	lr, r3
 800b3ba:	4770      	bx	lr

0800b3bc <_fini>:
 800b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3be:	bf00      	nop
 800b3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3c2:	bc08      	pop	{r3}
 800b3c4:	469e      	mov	lr, r3
 800b3c6:	4770      	bx	lr
