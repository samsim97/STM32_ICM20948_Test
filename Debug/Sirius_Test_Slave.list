
Sirius_Test_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800731c  0800731c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800731c  0800731c  0001731c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007324  08007324  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007324  08007324  00017324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800732c  0800732c  0001732c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000074  080073a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080073a8  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a92  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b2  00000000  00000000  00034b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00037ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00038ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019acf  00000000  00000000  00039f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cb1  00000000  00000000  00053a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090d73  00000000  00000000  000686d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f944b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005088  00000000  00000000  000f949c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007240 	.word	0x08007240

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08007240 	.word	0x08007240

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 * Adafruit_BusIO_Register::Adafruit_BusIO_Register(
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	4611      	mov	r1, r2
 8000d24:	461a      	mov	r2, r3
 8000d26:	460b      	mov	r3, r1
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	80bb      	strh	r3, [r7, #4]
    Adafruit_I2CDevice *i2cdevice, Adafruit_BusIO_SPIRegType type,
	uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  //_spidevice = spidevice;
  _i2cdevice = i2cdevice;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	601a      	str	r2, [r3, #0]
  //_spiregtype = type;
  _addrwidth = address_width;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d40:	71da      	strb	r2, [r3, #7]
  _address = reg_addr;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	88ba      	ldrh	r2, [r7, #4]
 8000d46:	809a      	strh	r2, [r3, #4]
  _byteorder = byteorder;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	7f3a      	ldrb	r2, [r7, #28]
 8000d4c:	721a      	strb	r2, [r3, #8]
  _width = width;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	7e3a      	ldrb	r2, [r7, #24]
 8000d52:	719a      	strb	r2, [r3, #6]
}
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b088      	sub	sp, #32
 8000d66:	af02      	add	r7, sp, #8
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	71fb      	strb	r3, [r7, #7]

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	889b      	ldrh	r3, [r3, #4]
                           (uint8_t)(_address >> 8)};
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	753b      	strb	r3, [r7, #20]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	889b      	ldrh	r3, [r3, #4]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	757b      	strb	r3, [r7, #21]

  if (_i2cdevice) {
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d00e      	beq.n	8000daa <_ZN23Adafruit_BusIO_Register5writeEPhh+0x48>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6818      	ldr	r0, [r3, #0]
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	79db      	ldrb	r3, [r3, #7]
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	f000 f997 	bl	80010d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e000      	b.n	8000dac <_ZN23Adafruit_BusIO_Register5writeEPhh+0x4a>
      addrbuffer[0] &= ~0x80;
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }*/
  return false;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if (numbytes == 0) {
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <_ZN23Adafruit_BusIO_Register5writeEmh+0x1a>
    numbytes = _width;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	799b      	ldrb	r3, [r3, #6]
 8000dcc:	71fb      	strb	r3, [r7, #7]
  }
  if (numbytes > 4) {
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d901      	bls.n	8000dd8 <_ZN23Adafruit_BusIO_Register5writeEmh+0x24>
    return false;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e02f      	b.n	8000e38 <_ZN23Adafruit_BusIO_Register5writeEmh+0x84>
  }

  // store a copy
  _cached = value;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	611a      	str	r2, [r3, #16]

  for (int i = 0; i < numbytes; i++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	da1d      	bge.n	8000e26 <_ZN23Adafruit_BusIO_Register5writeEmh+0x72>
    if (_byteorder == LSBFIRST) {
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	7a1b      	ldrb	r3, [r3, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d108      	bne.n	8000e04 <_ZN23Adafruit_BusIO_Register5writeEmh+0x50>
      _buffer[i] = value & 0xFF;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	b2d9      	uxtb	r1, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3309      	adds	r3, #9
 8000dfe:	460a      	mov	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e009      	b.n	8000e18 <_ZN23Adafruit_BusIO_Register5writeEmh+0x64>
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
 8000e04:	79fa      	ldrb	r2, [r7, #7]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	b2d1      	uxtb	r1, r2
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	460a      	mov	r2, r1
 8000e16:	725a      	strb	r2, [r3, #9]
    }
    value >>= 8;
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	0a1b      	lsrs	r3, r3, #8
 8000e1c:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < numbytes; i++) {
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e7dd      	b.n	8000de2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
  }
  return write(_buffer, numbytes);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3309      	adds	r3, #9
 8000e2a:	79fa      	ldrb	r2, [r7, #7]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f7ff ff97 	bl	8000d62 <_ZN23Adafruit_BusIO_Register5writeEPhh>
 8000e34:	4603      	mov	r3, r0
 8000e36:	bf00      	nop
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_ZN23Adafruit_BusIO_Register4readEv>:
/*!
 *    @brief  Read data from the register location. This does not do any error
 * checking!
 *    @return Returns 0xFFFFFFFF on failure, value otherwise
 */
uint32_t Adafruit_BusIO_Register::read(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if (!read(_buffer, _width)) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f103 0109 	add.w	r1, r3, #9
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	799b      	ldrb	r3, [r3, #6]
 8000e52:	461a      	mov	r2, r3
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f83a 	bl	8000ece <_ZN23Adafruit_BusIO_Register4readEPhh>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f083 0301 	eor.w	r3, r3, #1
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <_ZN23Adafruit_BusIO_Register4readEv+0x2c>
    return -1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e02c      	b.n	8000ec6 <_ZN23Adafruit_BusIO_Register4readEv+0x86>
  }

  uint32_t value = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < _width; i++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	799b      	ldrb	r3, [r3, #6]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	da21      	bge.n	8000ec4 <_ZN23Adafruit_BusIO_Register4readEv+0x84>
    value <<= 8;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	60fb      	str	r3, [r7, #12]
    if (_byteorder == LSBFIRST) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7a1b      	ldrb	r3, [r3, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10d      	bne.n	8000eaa <_ZN23Adafruit_BusIO_Register4readEv+0x6a>
      value |= _buffer[_width - i - 1];
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	799b      	ldrb	r3, [r3, #6]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	7a5b      	ldrb	r3, [r3, #9]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e008      	b.n	8000ebc <_ZN23Adafruit_BusIO_Register4readEv+0x7c>
    } else {
      value |= _buffer[i];
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4413      	add	r3, r2
 8000eb0:	3309      	adds	r3, #9
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < _width; i++) {
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	e7d7      	b.n	8000e74 <_ZN23Adafruit_BusIO_Register4readEv+0x34>
    }
  }

  return value;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
 8000ece:	b590      	push	{r4, r7, lr}
 8000ed0:	b089      	sub	sp, #36	; 0x24
 8000ed2:	af02      	add	r7, sp, #8
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71fb      	strb	r3, [r7, #7]
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	889b      	ldrh	r3, [r3, #4]
                           (uint8_t)(_address >> 8)};
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	753b      	strb	r3, [r7, #20]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	889b      	ldrh	r3, [r3, #4]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	757b      	strb	r3, [r7, #21]

  if (_i2cdevice) {
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d010      	beq.n	8000f1a <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	79db      	ldrb	r3, [r3, #7]
 8000f00:	461c      	mov	r4, r3
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f107 0114 	add.w	r1, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	9201      	str	r2, [sp, #4]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4622      	mov	r2, r4
 8000f12:	f000 f94e 	bl	80011b2 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
 8000f16:	4603      	mov	r3, r0
 8000f18:	e000      	b.n	8000f1c <_ZN23Adafruit_BusIO_Register4readEPhh+0x4e>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }*/
  return false;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd90      	pop	{r4, r7, pc}

08000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	460b      	mov	r3, r1
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	4613      	mov	r3, r2
 8000f38:	71bb      	strb	r3, [r7, #6]
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	601a      	str	r2, [r3, #0]
  _bits = bits;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	79fa      	ldrb	r2, [r7, #7]
 8000f44:	711a      	strb	r2, [r3, #4]
  _shift = shift;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	79ba      	ldrb	r2, [r7, #6]
 8000f4a:	715a      	strb	r2, [r3, #5]
}
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  uint32_t val = _register->read();
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff6a 	bl	8000e40 <_ZN23Adafruit_BusIO_Register4readEv>
 8000f6c:	60f8      	str	r0, [r7, #12]
  val >>= _shift;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	795b      	ldrb	r3, [r3, #5]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	40d3      	lsrs	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  return val & ((1 << (_bits)) - 1);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	791b      	ldrb	r3, [r3, #4]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2301      	movs	r3, #1
 8000f82:	4093      	lsls	r3, r2
 8000f84:	3b01      	subs	r3, #1
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4013      	ands	r3, r2
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t val = _register->read();
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff4c 	bl	8000e40 <_ZN23Adafruit_BusIO_Register4readEv>
 8000fa8:	60f8      	str	r0, [r7, #12]

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	791b      	ldrb	r3, [r3, #4]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
  data &= mask;
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	603b      	str	r3, [r7, #0]

  mask <<= _shift;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	795b      	ldrb	r3, [r3, #5]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  val &= ~mask;          // remove the current data at that spot
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  val |= data << _shift; // and add in the new data
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	795b      	ldrb	r3, [r3, #5]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]

  return _register->write(val, _register->width());
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681c      	ldr	r4, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f80b 	bl	800100a <_ZN23Adafruit_BusIO_Register5widthEv>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68f9      	ldr	r1, [r7, #12]
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f7ff feda 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bd90      	pop	{r4, r7, pc}

0800100a <_ZN23Adafruit_BusIO_Register5widthEv>:

/*!
 *    @brief  The width of the register data, helpful for doing calculations
 *    @returns The data width used when initializing the register
 */
uint8_t Adafruit_BusIO_Register::width(void) { return _width; }
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	799b      	ldrb	r3, [r3, #6]
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_ZN18Adafruit_I2CDevice13maxBufferSizeEv>:
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <_ZN18Adafruit_I2CDeviceC1Eh>:
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
#endif
}*/
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr) {
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	70fb      	strb	r3, [r7, #3]
  _addr = addr;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	701a      	strb	r2, [r3, #0]
  //_wire = theWire;
  _begun = false;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	705a      	strb	r2, [r3, #1]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2220      	movs	r2, #32
 8001056:	605a      	str	r2, [r3, #4]
#endif
}
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_ZN18Adafruit_I2CDevice5beginEb>:
    return detected();
  }
  return true;
}*/

bool Adafruit_I2CDevice::begin(bool addr_detect) {
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	460b      	mov	r3, r1
 8001070:	70fb      	strb	r3, [r7, #3]
  //_wire->begin();
  _begun = true;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	705a      	strb	r2, [r3, #1]

  if (addr_detect) {
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <_ZN18Adafruit_I2CDevice5beginEb+0x22>
    return detected();
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f807 	bl	8001092 <_ZN18Adafruit_I2CDevice8detectedEv>
 8001084:	4603      	mov	r3, r0
 8001086:	e000      	b.n	800108a <_ZN18Adafruit_I2CDevice5beginEb+0x24>
  }
  return true;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	f083 0301 	eor.w	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00b      	beq.n	80010c0 <_ZN18Adafruit_I2CDevice8detectedEv+0x2e>
 80010a8:	2101      	movs	r1, #1
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffdb 	bl	8001066 <_ZN18Adafruit_I2CDevice5beginEb>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f083 0301 	eor.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <_ZN18Adafruit_I2CDevice8detectedEv+0x2e>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <_ZN18Adafruit_I2CDevice8detectedEv+0x30>
 80010c0:	2300      	movs	r3, #0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <_ZN18Adafruit_I2CDevice8detectedEv+0x38>
    return false;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <_ZN18Adafruit_I2CDevice8detectedEv+0x3a>
    return true;
  }*/
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	70fb      	strb	r3, [r7, #3]
  if ((len + prefix_len) > maxBufferSize()) {
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	18d4      	adds	r4, r2, r3
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f7ff ff9a 	bl	8001022 <_ZN18Adafruit_I2CDevice13maxBufferSizeEv>
 80010ee:	4603      	mov	r3, r0
 80010f0:	429c      	cmp	r4, r3
 80010f2:	bf8c      	ite	hi
 80010f4:	2301      	movhi	r3, #1
 80010f6:	2300      	movls	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x2e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 80010fe:	2300      	movs	r3, #0
 8001100:	e7ff      	b.n	8001102 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x2e>
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }*/
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bd90      	pop	{r4, r7, pc}

0800110a <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 800110a:	b590      	push	{r4, r7, lr}
 800110c:	b089      	sub	sp, #36	; 0x24
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	70fb      	strb	r3, [r7, #3]
  size_t pos = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  while (pos < len) {
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	d233      	bcs.n	800118c <_ZN18Adafruit_I2CDevice4readEPhjb+0x82>
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	1ad4      	subs	r4, r2, r3
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f7ff ff79 	bl	8001022 <_ZN18Adafruit_I2CDevice13maxBufferSizeEv>
 8001130:	4603      	mov	r3, r0
 8001132:	429c      	cmp	r4, r3
 8001134:	d904      	bls.n	8001140 <_ZN18Adafruit_I2CDevice4readEPhjb+0x36>
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff ff73 	bl	8001022 <_ZN18Adafruit_I2CDevice13maxBufferSizeEv>
 800113c:	4603      	mov	r3, r0
 800113e:	e002      	b.n	8001146 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	61bb      	str	r3, [r7, #24]
    bool read_stop = (pos < (len - read_len)) ? false : stop;
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	429a      	cmp	r2, r3
 8001152:	d304      	bcc.n	800115e <_ZN18Adafruit_I2CDevice4readEPhjb+0x54>
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <_ZN18Adafruit_I2CDevice4readEPhjb+0x54>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <_ZN18Adafruit_I2CDevice4readEPhjb+0x56>
 800115e:	2300      	movs	r3, #0
 8001160:	75fb      	strb	r3, [r7, #23]
    if (!_read(buffer + pos, read_len, read_stop))
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	18d1      	adds	r1, r2, r3
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 f812 	bl	8001196 <_ZN18Adafruit_I2CDevice5_readEPhjb>
 8001172:	4603      	mov	r3, r0
 8001174:	f083 0301 	eor.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <_ZN18Adafruit_I2CDevice4readEPhjb+0x78>
      return false;
 800117e:	2300      	movs	r3, #0
 8001180:	e005      	b.n	800118e <_ZN18Adafruit_I2CDevice4readEPhjb+0x84>
    pos += read_len;
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	4413      	add	r3, r2
 8001188:	61fb      	str	r3, [r7, #28]
  while (pos < len) {
 800118a:	e7c7      	b.n	800111c <_ZN18Adafruit_I2CDevice4readEPhjb+0x12>
  }
  return true;
 800118c:	2301      	movs	r3, #1
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd90      	pop	{r4, r7, pc}

08001196 <_ZN18Adafruit_I2CDevice5_readEPhjb>:

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
 8001196:	b480      	push	{r7}
 8001198:	b085      	sub	sp, #20
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	70fb      	strb	r3, [r7, #3]
    // Not enough data available to fulfill our obligation!
#ifdef DEBUG_SERIAL
    //DEBUG_SERIAL.print(F("\tI2CDevice did not receive enough data: "));
    //DEBUG_SERIAL.println(recv);
#endif
    return false;
 80011a4:	2300      	movs	r3, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af02      	add	r7, sp, #8
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	603b      	str	r3, [r7, #0]
  if (!write(write_buffer, write_len, stop)) {
 80011c0:	7f3b      	ldrb	r3, [r7, #28]
 80011c2:	2200      	movs	r2, #0
 80011c4:	9201      	str	r2, [sp, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	9200      	str	r2, [sp, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f7ff ff80 	bl	80010d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f083 0301 	eor.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x32>
    return false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e007      	b.n	80011f4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x42>
  }

  return read(read_buffer, read_len);
 80011e4:	2301      	movs	r3, #1
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	6839      	ldr	r1, [r7, #0]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff ff8d 	bl	800110a <_ZN18Adafruit_I2CDevice4readEPhjb>
 80011f0:	4603      	mov	r3, r0
 80011f2:	bf00      	nop
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_ZN17Adafruit_ICM20948C1Ev>:

/*!
 *    @brief  Instantiates a new ICM20948 class!
 */

Adafruit_ICM20948::Adafruit_ICM20948(void) {}
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 faca 	bl	80017a0 <_ZN15Adafruit_ICM20XC1Ev>
 800120c:	4a03      	ldr	r2, [pc, #12]	; (800121c <_ZN17Adafruit_ICM20948C1Ev+0x20>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	08007260 	.word	0x08007260

08001220 <_ZN17Adafruit_ICM209489begin_I2CEhl>:
  }

  return init_success;
}*/

bool Adafruit_ICM20948::begin_I2C(uint8_t i2c_address, int32_t sensor_id) {
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	460b      	mov	r3, r1
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	72fb      	strb	r3, [r7, #11]

  if (i2c_dev) {
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <_ZN17Adafruit_ICM209489begin_I2CEhl+0x26>
    delete i2c_dev; // remove old interface
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <_ZN17Adafruit_ICM209489begin_I2CEhl+0x26>
 800123e:	2108      	movs	r1, #8
 8001240:	4618      	mov	r0, r3
 8001242:	f005 fe3f 	bl	8006ec4 <_ZdlPvj>
  }

  //i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
  i2c_dev = new Adafruit_I2CDevice(i2c_address);
 8001246:	2008      	movs	r0, #8
 8001248:	f005 fe3e 	bl	8006ec8 <_Znwj>
 800124c:	4603      	mov	r3, r0
 800124e:	461c      	mov	r4, r3
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	4619      	mov	r1, r3
 8001254:	4620      	mov	r0, r4
 8001256:	f7ff fef0 	bl	800103a <_ZN18Adafruit_I2CDeviceC1Eh>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	62dc      	str	r4, [r3, #44]	; 0x2c

  if (!i2c_dev->begin()) {
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	2101      	movs	r1, #1
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fefe 	bl	8001066 <_ZN18Adafruit_I2CDevice5beginEb>
 800126a:	4603      	mov	r3, r0
 800126c:	f083 0301 	eor.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <_ZN17Adafruit_ICM209489begin_I2CEhl+0x5a>
    //Serial.println("I2C begin Failed");
    return false;
 8001276:	2300      	movs	r3, #0
 8001278:	e012      	b.n	80012a0 <_ZN17Adafruit_ICM209489begin_I2CEhl+0x80>
  }
  bool init_success = _init(sensor_id);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fb3d 	bl	80018fe <_ZN15Adafruit_ICM20X5_initEl>
 8001284:	4603      	mov	r3, r0
 8001286:	75fb      	strb	r3, [r7, #23]
  if (!setupMag()) {
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f000 f843 	bl	8001314 <_ZN17Adafruit_ICM209488setupMagEv>
 800128e:	4603      	mov	r3, r0
 8001290:	f083 0301 	eor.w	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <_ZN17Adafruit_ICM209489begin_I2CEhl+0x7e>
    //Serial.println("failed to setup mag");
    return false;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <_ZN17Adafruit_ICM209489begin_I2CEhl+0x80>
  }

  return init_success;
 800129e:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}

080012a8 <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv>:

// A million thanks to the SparkFun folks for their library that I pillaged to
// write this method! See their Arduino library here:
// https://github.com/sparkfun/SparkFun_ICM-20948_ArduinoLibrary
bool Adafruit_ICM20948::auxI2CBusSetupFailed(void) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  // check aux I2C bus connection by reading the magnetometer chip ID
  bool aux_i2c_setup_failed = true;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < I2C_MASTER_RESETS_BEFORE_FAIL; i++) {
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	dc16      	bgt.n	80012ec <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv+0x44>
    if (getMagId() != ICM20948_MAG_ID) {
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f819 	bl	80012f6 <_ZN17Adafruit_ICM209488getMagIdEv>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b09      	cmp	r3, #9
 80012c8:	bf14      	ite	ne
 80012ca:	2301      	movne	r3, #1
 80012cc:	2300      	moveq	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv+0x36>
      resetI2CMaster();
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 ffa5 	bl	8002226 <_ZN15Adafruit_ICM20X14resetI2CMasterEv>
 80012dc:	e002      	b.n	80012e4 <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv+0x3c>
    } else {
      aux_i2c_setup_failed = false;
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]
      break;
 80012e2:	e003      	b.n	80012ec <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv+0x44>
  for (int i = 0; i < I2C_MASTER_RESETS_BEFORE_FAIL; i++) {
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	3301      	adds	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	e7e5      	b.n	80012b8 <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv+0x10>
    }
  }
  return aux_i2c_setup_failed;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_ZN17Adafruit_ICM209488getMagIdEv>:

uint8_t Adafruit_ICM20948::getMagId(void) {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  // verify the magnetometer id
  return readExternalRegister(0x8C, 0x01);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	218c      	movs	r1, #140	; 0x8c
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fe6d 	bl	8001fe4 <_ZN15Adafruit_ICM20X20readExternalRegisterEhh>
 800130a:	4603      	mov	r3, r0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_ZN17Adafruit_ICM209488setupMagEv>:

bool Adafruit_ICM20948::setupMag(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af02      	add	r7, sp, #8
 800131a:	6078      	str	r0, [r7, #4]
  uint8_t buffer[2];

  setI2CBypass(false);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f000 fde6 	bl	8001ef2 <_ZN15Adafruit_ICM20X12setI2CBypassEb>

  configureI2CMaster();
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fe39 	bl	8001fa0 <_ZN15Adafruit_ICM20X18configureI2CMasterEv>

  enableI2CMaster(true);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2101      	movs	r1, #1
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fe08 	bl	8001f48 <_ZN15Adafruit_ICM20X15enableI2CMasterEb>

  if (auxI2CBusSetupFailed()) {
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ffb5 	bl	80012a8 <_ZN17Adafruit_ICM2094820auxI2CBusSetupFailedEv>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <_ZN17Adafruit_ICM209488setupMagEv+0x34>
    return false;
 8001344:	2300      	movs	r3, #0
 8001346:	e059      	b.n	80013fc <_ZN17Adafruit_ICM209488setupMagEv+0xe8>
  }

  // set mag data rate
  if (!setMagDataRate(AK09916_MAG_DATARATE_100_HZ)) {
 8001348:	2108      	movs	r1, #8
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f950 	bl	80015f0 <_ZN17Adafruit_ICM2094814setMagDataRateE19ak09916_data_rate_t>
 8001350:	4603      	mov	r3, r0
 8001352:	f083 0301 	eor.w	r3, r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <_ZN17Adafruit_ICM209488setupMagEv+0x4c>
    //Serial.println("Error setting magnetometer data rate on external bus");
    return false;
 800135c:	2300      	movs	r3, #0
 800135e:	e04d      	b.n	80013fc <_ZN17Adafruit_ICM209488setupMagEv+0xe8>
  }

  // TODO: extract method
  // Set up Slave0 to proxy Mag readings
  _setBank(3);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2103      	movs	r1, #3
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fcee 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>
  // set up slave0 to proxy reads to mag
  buffer[0] = ICM20X_B3_I2C_SLV0_ADDR;
 800136a:	2303      	movs	r3, #3
 800136c:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0x8C;
 800136e:	238c      	movs	r3, #140	; 0x8c
 8001370:	737b      	strb	r3, [r7, #13]
  if (!i2c_dev->write(buffer, 2)) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001376:	f107 010c 	add.w	r1, r7, #12
 800137a:	2300      	movs	r3, #0
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	2300      	movs	r3, #0
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	2202      	movs	r2, #2
 8001386:	f7ff fea5 	bl	80010d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 800138a:	4603      	mov	r3, r0
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <_ZN17Adafruit_ICM209488setupMagEv+0x86>
    return false;
 8001396:	2300      	movs	r3, #0
 8001398:	e030      	b.n	80013fc <_ZN17Adafruit_ICM209488setupMagEv+0xe8>
  }

  buffer[0] = ICM20X_B3_I2C_SLV0_REG;
 800139a:	2304      	movs	r3, #4
 800139c:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0x10;
 800139e:	2310      	movs	r3, #16
 80013a0:	737b      	strb	r3, [r7, #13]
  if (!i2c_dev->write(buffer, 2)) {
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80013a6:	f107 010c 	add.w	r1, r7, #12
 80013aa:	2300      	movs	r3, #0
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	2202      	movs	r2, #2
 80013b6:	f7ff fe8d 	bl	80010d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f083 0301 	eor.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <_ZN17Adafruit_ICM209488setupMagEv+0xb6>
    return false;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e018      	b.n	80013fc <_ZN17Adafruit_ICM209488setupMagEv+0xe8>
  }

  buffer[0] = ICM20X_B3_I2C_SLV0_CTRL;
 80013ca:	2305      	movs	r3, #5
 80013cc:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0x89; // enable, read 9 bytes
 80013ce:	2389      	movs	r3, #137	; 0x89
 80013d0:	737b      	strb	r3, [r7, #13]
  if (!i2c_dev->write(buffer, 2)) {
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80013d6:	f107 010c 	add.w	r1, r7, #12
 80013da:	2300      	movs	r3, #0
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	2300      	movs	r3, #0
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2301      	movs	r3, #1
 80013e4:	2202      	movs	r2, #2
 80013e6:	f7ff fe75 	bl	80010d4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f083 0301 	eor.w	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <_ZN17Adafruit_ICM209488setupMagEv+0xe6>
    return false;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <_ZN17Adafruit_ICM209488setupMagEv+0xe8>
  }

  return true;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZN17Adafruit_ICM2094816writeMagRegisterEhh>:
 */
uint8_t Adafruit_ICM20948::readMagRegister(uint8_t mag_reg_addr) {
  return readExternalRegister(0x8C, mag_reg_addr);
}

bool Adafruit_ICM20948::writeMagRegister(uint8_t mag_reg_addr, uint8_t value) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
 8001410:	4613      	mov	r3, r2
 8001412:	70bb      	strb	r3, [r7, #2]
  return writeExternalRegister(0x0C, mag_reg_addr, value);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	78bb      	ldrb	r3, [r7, #2]
 8001418:	78fa      	ldrb	r2, [r7, #3]
 800141a:	210c      	movs	r1, #12
 800141c:	f000 fdf7 	bl	800200e <_ZN15Adafruit_ICM20X21writeExternalRegisterEhhh>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	0000      	movs	r0, r0
 800142c:	0000      	movs	r0, r0
	...

08001430 <_ZN17Adafruit_ICM2094811scaleValuesEv>:

void Adafruit_ICM20948::scaleValues(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  icm20948_gyro_range_t gyro_range = (icm20948_gyro_range_t)current_gyro_range;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800143e:	73fb      	strb	r3, [r7, #15]
  icm20948_accel_range_t accel_range =
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001446:	73bb      	strb	r3, [r7, #14]
      (icm20948_accel_range_t)current_accel_range;

  float accel_scale = 1.0;
 8001448:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800144c:	617b      	str	r3, [r7, #20]
  float gyro_scale = 1.0;
 800144e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001452:	613b      	str	r3, [r7, #16]

  if (gyro_range == ICM20948_GYRO_RANGE_250_DPS)
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <_ZN17Adafruit_ICM2094811scaleValuesEv+0x2e>
    gyro_scale = 131.0;
 800145a:	4b61      	ldr	r3, [pc, #388]	; (80015e0 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1b0>)
 800145c:	613b      	str	r3, [r7, #16]
  if (gyro_range == ICM20948_GYRO_RANGE_500_DPS)
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x38>
    gyro_scale = 65.5;
 8001464:	4b5f      	ldr	r3, [pc, #380]	; (80015e4 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1b4>)
 8001466:	613b      	str	r3, [r7, #16]
  if (gyro_range == ICM20948_GYRO_RANGE_1000_DPS)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d101      	bne.n	8001472 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x42>
    gyro_scale = 32.8;
 800146e:	4b5e      	ldr	r3, [pc, #376]	; (80015e8 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1b8>)
 8001470:	613b      	str	r3, [r7, #16]
  if (gyro_range == ICM20948_GYRO_RANGE_2000_DPS)
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d101      	bne.n	800147c <_ZN17Adafruit_ICM2094811scaleValuesEv+0x4c>
    gyro_scale = 16.4;
 8001478:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1bc>)
 800147a:	613b      	str	r3, [r7, #16]

  if (accel_range == ICM20948_ACCEL_RANGE_2_G)
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x58>
    accel_scale = 16384.0;
 8001482:	f04f 438d 	mov.w	r3, #1182793728	; 0x46800000
 8001486:	617b      	str	r3, [r7, #20]
  if (accel_range == ICM20948_ACCEL_RANGE_4_G)
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d102      	bne.n	8001494 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x64>
    accel_scale = 8192.0;
 800148e:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8001492:	617b      	str	r3, [r7, #20]
  if (accel_range == ICM20948_ACCEL_RANGE_8_G)
 8001494:	7bbb      	ldrb	r3, [r7, #14]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d102      	bne.n	80014a0 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x70>
    accel_scale = 4096.0;
 800149a:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800149e:	617b      	str	r3, [r7, #20]
  if (accel_range == ICM20948_ACCEL_RANGE_16_G)
 80014a0:	7bbb      	ldrb	r3, [r7, #14]
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d102      	bne.n	80014ac <_ZN17Adafruit_ICM2094811scaleValuesEv+0x7c>
    accel_scale = 2048.0;
 80014a6:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80014aa:	617b      	str	r3, [r7, #20]

  gyroX = rawGyroX / gyro_scale;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80014be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	edc3 7a05 	vstr	s15, [r3, #20]
  gyroY = rawGyroY / gyro_scale;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80014da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	edc3 7a06 	vstr	s15, [r3, #24]
  gyroZ = rawGyroZ / gyro_scale;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80014ea:	ee07 3a90 	vmov	s15, r3
 80014ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80014f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edc3 7a07 	vstr	s15, [r3, #28]

  accX = rawAccX / accel_scale;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800150e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	edc3 7a02 	vstr	s15, [r3, #8]
  accY = rawAccY / accel_scale;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800152a:	ed97 7a05 	vldr	s14, [r7, #20]
 800152e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	edc3 7a03 	vstr	s15, [r3, #12]
  accZ = rawAccZ / accel_scale;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800153e:	ee07 3a90 	vmov	s15, r3
 8001542:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001546:	ed97 7a05 	vldr	s14, [r7, #20]
 800154a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	edc3 7a04 	vstr	s15, [r3, #16]

  magX = rawMagX * ICM20948_UT_PER_LSB;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ff8e 	bl	800047c <__aeabi_i2d>
 8001560:	a31d      	add	r3, pc, #116	; (adr r3, 80015d8 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1a8>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7fe fff3 	bl	8000550 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff f9ff 	bl	8000974 <__aeabi_d2f>
 8001576:	4602      	mov	r2, r0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	621a      	str	r2, [r3, #32]
  magY = rawMagY * ICM20948_UT_PER_LSB;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ff7a 	bl	800047c <__aeabi_i2d>
 8001588:	a313      	add	r3, pc, #76	; (adr r3, 80015d8 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1a8>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7fe ffdf 	bl	8000550 <__aeabi_dmul>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff f9eb 	bl	8000974 <__aeabi_d2f>
 800159e:	4602      	mov	r2, r0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24
  magZ = rawMagZ * ICM20948_UT_PER_LSB;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff66 	bl	800047c <__aeabi_i2d>
 80015b0:	a309      	add	r3, pc, #36	; (adr r3, 80015d8 <_ZN17Adafruit_ICM2094811scaleValuesEv+0x1a8>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7fe ffcb 	bl	8000550 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff f9d7 	bl	8000974 <__aeabi_d2f>
 80015c6:	4602      	mov	r2, r0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	f3af 8000 	nop.w
 80015d8:	33333333 	.word	0x33333333
 80015dc:	3fc33333 	.word	0x3fc33333
 80015e0:	43030000 	.word	0x43030000
 80015e4:	42830000 	.word	0x42830000
 80015e8:	42033333 	.word	0x42033333
 80015ec:	41833333 	.word	0x41833333

080015f0 <_ZN17Adafruit_ICM2094814setMagDataRateE19ak09916_data_rate_t>:
 *
 * @param rate The rate to set.
 *
 * @return true: success false: failure
 */
bool Adafruit_ICM20948::setMagDataRate(ak09916_data_rate_t rate) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
   * See page 9 of https://www.y-ic.es/datasheet/78/SMDSW.020-2OZ.pdf
   */

  // don't need to read/mask because there's nothing else in the register and
  // it's right justified
  bool success = writeMagRegister(AK09916_CNTL2, AK09916_MAG_DATARATE_SHUTDOWN);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2131      	movs	r1, #49	; 0x31
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff feff 	bl	8001404 <_ZN17Adafruit_ICM2094816writeMagRegisterEhh>
 8001606:	4603      	mov	r3, r0
 8001608:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(1);
 800160a:	2001      	movs	r0, #1
 800160c:	f001 ff3a 	bl	8003484 <HAL_Delay>
  return writeMagRegister(AK09916_CNTL2, rate) && success;
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	461a      	mov	r2, r3
 8001614:	2131      	movs	r1, #49	; 0x31
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fef4 	bl	8001404 <_ZN17Adafruit_ICM2094816writeMagRegisterEhh>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <_ZN17Adafruit_ICM2094814setMagDataRateE19ak09916_data_rate_t+0x3c>
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <_ZN17Adafruit_ICM2094814setMagDataRateE19ak09916_data_rate_t+0x3c>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <_ZN17Adafruit_ICM2094814setMagDataRateE19ak09916_data_rate_t+0x3e>
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <_ZN15Adafruit_SensorC1Ev>:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
public:
  // Constructor(s)
  Adafruit_Sensor() {}
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <_ZN15Adafruit_SensorC1Ev+0x1c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	080072f0 	.word	0x080072f0

08001658 <_ZN15Adafruit_SensorD1Ev>:
  virtual ~Adafruit_Sensor() {}
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <_ZN15Adafruit_SensorD1Ev+0x1c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	080072f0 	.word	0x080072f0

08001678 <_ZN15Adafruit_SensorD0Ev>:
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ffe9 	bl	8001658 <_ZN15Adafruit_SensorD1Ev>
 8001686:	2104      	movs	r1, #4
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f005 fc1b 	bl	8006ec4 <_ZdlPvj>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // These must be defined by the subclass

  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	70fb      	strb	r3, [r7, #3]
    (void)enabled; /* suppress unused warning */
  };
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_ZN29Adafruit_ICM20X_AccelerometerC1EP15Adafruit_ICM20X>:
class Adafruit_ICM20X_Accelerometer : public Adafruit_Sensor {
public:
  /** @brief Create an Adafruit_Sensor compatible object for the accelerometer
     sensor
      @param parent A pointer to the ICM20X class */
  Adafruit_ICM20X_Accelerometer(Adafruit_ICM20X *parent) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ffbb 	bl	8001638 <_ZN15Adafruit_SensorC1Ev>
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <_ZN29Adafruit_ICM20X_AccelerometerC1EP15Adafruit_ICM20X+0x38>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f240 220a 	movw	r2, #522	; 0x20a
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
    _theICM20X = parent;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	609a      	str	r2, [r3, #8]
  }
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	080072d4 	.word	0x080072d4

080016ec <_ZN20Adafruit_ICM20X_GyroC1EP15Adafruit_ICM20X>:
/** Adafruit Unified Sensor interface for gyro component of ICM20X */
class Adafruit_ICM20X_Gyro : public Adafruit_Sensor {
public:
  /** @brief Create an Adafruit_Sensor compatible object for the gyro sensor
      @param parent A pointer to the ICM20X class */
  Adafruit_ICM20X_Gyro(Adafruit_ICM20X *parent) { _theICM20X = parent; }
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff9d 	bl	8001638 <_ZN15Adafruit_SensorC1Ev>
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <_ZN20Adafruit_ICM20X_GyroC1EP15Adafruit_ICM20X+0x38>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f240 220b 	movw	r2, #523	; 0x20b
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	080072b8 	.word	0x080072b8

08001728 <_ZN28Adafruit_ICM20X_MagnetometerC1EP15Adafruit_ICM20X>:
class Adafruit_ICM20X_Magnetometer : public Adafruit_Sensor {
public:
  /** @brief Create an Adafruit_Sensor compatible object for the magnetometer
     sensor
      @param parent A pointer to the ICM20X class */
  Adafruit_ICM20X_Magnetometer(Adafruit_ICM20X *parent) { _theICM20X = parent; }
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff7f 	bl	8001638 <_ZN15Adafruit_SensorC1Ev>
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <_ZN28Adafruit_ICM20X_MagnetometerC1EP15Adafruit_ICM20X+0x38>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	0800729c 	.word	0x0800729c

08001764 <_ZN20Adafruit_ICM20X_TempC1EP15Adafruit_ICM20X>:
/** Adafruit Unified Sensor interface for temperature component of ICM20X */
class Adafruit_ICM20X_Temp : public Adafruit_Sensor {
public:
  /** @brief Create an Adafruit_Sensor compatible object for the temp sensor
      @param parent A pointer to the ICM20X class */
  Adafruit_ICM20X_Temp(Adafruit_ICM20X *parent) { _theICM20X = parent; }
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff61 	bl	8001638 <_ZN15Adafruit_SensorC1Ev>
 8001776:	4a09      	ldr	r2, [pc, #36]	; (800179c <_ZN20Adafruit_ICM20X_TempC1EP15Adafruit_ICM20X+0x38>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f240 220d 	movw	r2, #525	; 0x20d
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	08007280 	.word	0x08007280

080017a0 <_ZN15Adafruit_ICM20XC1Ev>:
#include "ICM20948\Adafruit_ICM20X.h"

/*!
 *    @brief  Instantiates a new ICM20X class!
 */
Adafruit_ICM20X::Adafruit_ICM20X(void) {}
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <_ZN15Adafruit_ICM20XC1Ev+0x3c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	635a      	str	r2, [r3, #52]	; 0x34
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	639a      	str	r2, [r3, #56]	; 0x38
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	08007270 	.word	0x08007270

080017e0 <_ZN15Adafruit_ICM20XD1Ev>:

/*!
 *    @brief  Cleans up the ICM20X
 */
Adafruit_ICM20X::~Adafruit_ICM20X(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <_ZN15Adafruit_ICM20XD1Ev+0x80>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	601a      	str	r2, [r3, #0]
  if (accel_sensor)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <_ZN15Adafruit_ICM20XD1Ev+0x28>
    delete accel_sensor;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <_ZN15Adafruit_ICM20XD1Ev+0x28>
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	3204      	adds	r2, #4
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	4790      	blx	r2
  if (gyro_sensor)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <_ZN15Adafruit_ICM20XD1Ev+0x42>
    delete gyro_sensor;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <_ZN15Adafruit_ICM20XD1Ev+0x42>
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	3204      	adds	r2, #4
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	4790      	blx	r2
  if (mag_sensor)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001826:	2b00      	cmp	r3, #0
 8001828:	d008      	beq.n	800183c <_ZN15Adafruit_ICM20XD1Ev+0x5c>
    delete mag_sensor;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <_ZN15Adafruit_ICM20XD1Ev+0x5c>
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	3204      	adds	r2, #4
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	4790      	blx	r2
  if (temp_sensor)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <_ZN15Adafruit_ICM20XD1Ev+0x76>
    delete temp_sensor;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001848:	2b00      	cmp	r3, #0
 800184a:	d004      	beq.n	8001856 <_ZN15Adafruit_ICM20XD1Ev+0x76>
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	3204      	adds	r2, #4
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	4790      	blx	r2
}
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	08007270 	.word	0x08007270

08001864 <_ZN15Adafruit_ICM20X9begin_I2CEhl>:
  (void)i2c_address;
  (void)wire;
  (void)sensor_id;
  return false;
}*/
bool Adafruit_ICM20X::begin_I2C(uint8_t i2c_address, int32_t sensor_id) {
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	460b      	mov	r3, r1
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	72fb      	strb	r3, [r7, #11]
  (void)i2c_address;
  (void)sensor_id;
  return false;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_ZN15Adafruit_ICM20X5resetEv>:

/*!
 * @brief Reset the internal registers and restores the default settings
 *
 */
void Adafruit_ICM20X::reset(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b08e      	sub	sp, #56	; 0x38
 8001884:	af04      	add	r7, sp, #16
 8001886:	6078      	str	r0, [r7, #4]
  _setBank(0);
 8001888:	2100      	movs	r1, #0
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fa5b 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register pwr_mgmt1 = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_PWR_MGMT_1, 1);

  Adafruit_BusIO_Register pwr_mgmt1 = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_PWR_MGMT_1, 1);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001894:	f107 0014 	add.w	r0, r7, #20
 8001898:	2301      	movs	r3, #1
 800189a:	9302      	str	r3, [sp, #8]
 800189c:	2300      	movs	r3, #0
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	2301      	movs	r3, #1
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2306      	movs	r3, #6
 80018a6:	2200      	movs	r2, #0
 80018a8:	f7ff fa36 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits reset_bit =
      Adafruit_BusIO_RegisterBits(&pwr_mgmt1, 1, 7);
 80018ac:	f107 0114 	add.w	r1, r7, #20
 80018b0:	f107 000c 	add.w	r0, r7, #12
 80018b4:	2307      	movs	r3, #7
 80018b6:	2201      	movs	r2, #1
 80018b8:	f7ff fb34 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  reset_bit.write(1);
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2101      	movs	r1, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb66 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  HAL_Delay(20);
 80018c8:	2014      	movs	r0, #20
 80018ca:	f001 fddb 	bl	8003484 <HAL_Delay>

  while (reset_bit.read()) {
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fb41 	bl	8000f5a <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	bf14      	ite	ne
 80018de:	2301      	movne	r3, #1
 80018e0:	2300      	moveq	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <_ZN15Adafruit_ICM20X5resetEv+0x70>
    HAL_Delay(10);
 80018e8:	200a      	movs	r0, #10
 80018ea:	f001 fdcb 	bl	8003484 <HAL_Delay>
  while (reset_bit.read()) {
 80018ee:	e7ee      	b.n	80018ce <_ZN15Adafruit_ICM20X5resetEv+0x4e>
  };
  HAL_Delay(50);
 80018f0:	2032      	movs	r0, #50	; 0x32
 80018f2:	f001 fdc7 	bl	8003484 <HAL_Delay>
}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_ZN15Adafruit_ICM20X5_initEl>:

/*!  @brief Initilizes the sensor
 *   @param sensor_id Optional unique ID for the sensor set
 *   @returns True if chip identified and initialized
 */
bool Adafruit_ICM20X::_init(int32_t sensor_id) {
 80018fe:	b590      	push	{r4, r7, lr}
 8001900:	b095      	sub	sp, #84	; 0x54
 8001902:	af04      	add	r7, sp, #16
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]

	  //Adafruit_BusIO_Register chip_id = Adafruit_BusIO_Register(
	  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_WHOAMI);

  Adafruit_BusIO_Register chip_id = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_WHOAMI);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800190c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001910:	2301      	movs	r3, #1
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	2300      	movs	r3, #0
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	2301      	movs	r3, #1
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2300      	movs	r3, #0
 800191e:	2200      	movs	r2, #0
 8001920:	f7ff f9fa 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  _setBank(0);
 8001924:	2100      	movs	r1, #0
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fa0d 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>
  uint8_t chip_id_ = chip_id.read();
 800192c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fa85 	bl	8000e40 <_ZN23Adafruit_BusIO_Register4readEv>
 8001936:	4603      	mov	r3, r0
 8001938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  // This returns true when using a 649 lib with a 948
  if ((chip_id_ != ICM20649_CHIP_ID) && (chip_id_ != ICM20948_CHIP_ID)) {
 800193c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001940:	2be1      	cmp	r3, #225	; 0xe1
 8001942:	d005      	beq.n	8001950 <_ZN15Adafruit_ICM20X5_initEl+0x52>
 8001944:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001948:	2bea      	cmp	r3, #234	; 0xea
 800194a:	d001      	beq.n	8001950 <_ZN15Adafruit_ICM20X5_initEl+0x52>
    return false;
 800194c:	2300      	movs	r3, #0
 800194e:	e078      	b.n	8001a42 <_ZN15Adafruit_ICM20X5_initEl+0x144>
  }

  _sensorid_accel = sensor_id;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b29a      	uxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  _sensorid_gyro = sensor_id + 1;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	3301      	adds	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  _sensorid_mag = sensor_id + 2;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	3302      	adds	r3, #2
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  _sensorid_temp = sensor_id + 3;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b29b      	uxth	r3, r3
 800197a:	3303      	adds	r3, #3
 800197c:	b29a      	uxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  reset();
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff7b 	bl	8001880 <_ZN15Adafruit_ICM20X5resetEv>

  //Adafruit_BusIO_Register pwr_mgmt_1 = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_PWR_MGMT_1);

  Adafruit_BusIO_Register pwr_mgmt_1 = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_PWR_MGMT_1);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800198e:	f107 0014 	add.w	r0, r7, #20
 8001992:	2301      	movs	r3, #1
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	2300      	movs	r3, #0
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	2301      	movs	r3, #1
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2306      	movs	r3, #6
 80019a0:	2200      	movs	r2, #0
 80019a2:	f7ff f9b9 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits sleep =
      Adafruit_BusIO_RegisterBits(&pwr_mgmt_1, 1, 6);
 80019a6:	f107 0114 	add.w	r1, r7, #20
 80019aa:	f107 000c 	add.w	r0, r7, #12
 80019ae:	2306      	movs	r3, #6
 80019b0:	2201      	movs	r2, #1
 80019b2:	f7ff fab7 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  sleep.write(false); // take out of default sleep state
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fae9 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

  // 3 will be the largest range for either sensor
  writeGyroRange(3);
 80019c2:	2103      	movs	r1, #3
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 fa13 	bl	8001df0 <_ZN15Adafruit_ICM20X14writeGyroRangeEh>
  writeAccelRange(3);
 80019ca:	2103      	movs	r1, #3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f9dc 	bl	8001d8a <_ZN15Adafruit_ICM20X15writeAccelRangeEh>

  // 1100Hz/(1+10) = 100Hz
  setGyroRateDivisor(10);
 80019d2:	210a      	movs	r1, #10
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 fa65 	bl	8001ea4 <_ZN15Adafruit_ICM20X18setGyroRateDivisorEh>

  // # 1125Hz/(1+20) = 53.57Hz
  setAccelRateDivisor(20);
 80019da:	2114      	movs	r1, #20
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fa3a 	bl	8001e56 <_ZN15Adafruit_ICM20X19setAccelRateDivisorEt>

  temp_sensor = new Adafruit_ICM20X_Temp(this);
 80019e2:	200c      	movs	r0, #12
 80019e4:	f005 fa70 	bl	8006ec8 <_Znwj>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461c      	mov	r4, r3
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4620      	mov	r0, r4
 80019f0:	f7ff feb8 	bl	8001764 <_ZN20Adafruit_ICM20X_TempC1EP15Adafruit_ICM20X>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	63dc      	str	r4, [r3, #60]	; 0x3c
  accel_sensor = new Adafruit_ICM20X_Accelerometer(this);
 80019f8:	200c      	movs	r0, #12
 80019fa:	f005 fa65 	bl	8006ec8 <_Znwj>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461c      	mov	r4, r3
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff fe53 	bl	80016b0 <_ZN29Adafruit_ICM20X_AccelerometerC1EP15Adafruit_ICM20X>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	631c      	str	r4, [r3, #48]	; 0x30
  gyro_sensor = new Adafruit_ICM20X_Gyro(this);
 8001a0e:	200c      	movs	r0, #12
 8001a10:	f005 fa5a 	bl	8006ec8 <_Znwj>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461c      	mov	r4, r3
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f7ff fe66 	bl	80016ec <_ZN20Adafruit_ICM20X_GyroC1EP15Adafruit_ICM20X>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	635c      	str	r4, [r3, #52]	; 0x34
  mag_sensor = new Adafruit_ICM20X_Magnetometer(this);
 8001a24:	200c      	movs	r0, #12
 8001a26:	f005 fa4f 	bl	8006ec8 <_Znwj>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4620      	mov	r0, r4
 8001a32:	f7ff fe79 	bl	8001728 <_ZN28Adafruit_ICM20X_MagnetometerC1EP15Adafruit_ICM20X>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	639c      	str	r4, [r3, #56]	; 0x38
  HAL_Delay(20);
 8001a3a:	2014      	movs	r0, #20
 8001a3c:	f001 fd22 	bl	8003484 <HAL_Delay>

  return true;
 8001a40:	2301      	movs	r3, #1
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3744      	adds	r7, #68	; 0x44
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}
	...

08001a4c <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm>:

  return true;
}

void Adafruit_ICM20X::fillAccelEvent(sensors_event_t *accel,
                                     uint32_t timestamp) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  //memset(accel, 0, sizeof(sensors_event_t));
  accel->version = 1;
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
  accel->sensor_id = _sensorid_accel;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a64:	461a      	mov	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	605a      	str	r2, [r3, #4]
  accel->type = SENSOR_TYPE_ACCELEROMETER;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	609a      	str	r2, [r3, #8]
  accel->timestamp = timestamp;
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	611a      	str	r2, [r3, #16]

  accel->acceleration.x = accX * SENSORS_GRAVITY_EARTH;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a7c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001ac0 <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm+0x74>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	edc3 7a05 	vstr	s15, [r3, #20]
  accel->acceleration.y = accY * SENSORS_GRAVITY_EARTH;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a90:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001ac0 <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm+0x74>
 8001a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	edc3 7a06 	vstr	s15, [r3, #24]
  accel->acceleration.z = accZ * SENSORS_GRAVITY_EARTH;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aa4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ac0 <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm+0x74>
 8001aa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	411ce80a 	.word	0x411ce80a

08001ac4 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm>:

void Adafruit_ICM20X::fillGyroEvent(sensors_event_t *gyro, uint32_t timestamp) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  //memset(gyro, 0, sizeof(sensors_event_t));
  gyro->version = 1;
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
  gyro->sensor_id = _sensorid_gyro;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001adc:	461a      	mov	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	605a      	str	r2, [r3, #4]
  gyro->type = SENSOR_TYPE_GYROSCOPE;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	609a      	str	r2, [r3, #8]
  gyro->timestamp = timestamp;
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	611a      	str	r2, [r3, #16]
  gyro->gyro.x = gyroX * SENSORS_DPS_TO_RADS;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001af4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001b38 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm+0x74>
 8001af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	edc3 7a05 	vstr	s15, [r3, #20]
  gyro->gyro.y = gyroY * SENSORS_DPS_TO_RADS;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b08:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001b38 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm+0x74>
 8001b0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	edc3 7a06 	vstr	s15, [r3, #24]
  gyro->gyro.z = gyroZ * SENSORS_DPS_TO_RADS;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b1c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001b38 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm+0x74>
 8001b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	3c8efa35 	.word	0x3c8efa35

08001b3c <_ZN15Adafruit_ICM20X12fillMagEventEP15sensors_event_tm>:

void Adafruit_ICM20X::fillMagEvent(sensors_event_t *mag, uint32_t timestamp) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  //memset(mag, 0, sizeof(sensors_event_t));
  mag->version = 1;
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
  mag->sensor_id = _sensorid_mag;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b54:	461a      	mov	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	605a      	str	r2, [r3, #4]
  mag->type = SENSOR_TYPE_MAGNETIC_FIELD;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	609a      	str	r2, [r3, #8]
  mag->timestamp = timestamp;
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	611a      	str	r2, [r3, #16]
  mag->magnetic.x = magX; // magic number!
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a1a      	ldr	r2, [r3, #32]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	615a      	str	r2, [r3, #20]
  mag->magnetic.y = magY;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	619a      	str	r2, [r3, #24]
  mag->magnetic.z = magZ;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	61da      	str	r2, [r3, #28]
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	0000      	movs	r0, r0
 8001b8c:	0000      	movs	r0, r0
	...

08001b90 <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm>:

void Adafruit_ICM20X::fillTempEvent(sensors_event_t *temp, uint32_t timestamp) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]

  //memset(temp, 0, sizeof(sensors_event_t));
  temp->version = sizeof(sensors_event_t);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2224      	movs	r2, #36	; 0x24
 8001ba0:	601a      	str	r2, [r3, #0]
  temp->sensor_id = _sensorid_temp;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	605a      	str	r2, [r3, #4]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	220d      	movs	r2, #13
 8001bb2:	609a      	str	r2, [r3, #8]
  temp->timestamp = timestamp;
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	611a      	str	r2, [r3, #16]
  temp->temperature = (temperature / 333.87) + 21.0;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc6e 	bl	80004a0 <__aeabi_f2d>
 8001bc4:	a30f      	add	r3, pc, #60	; (adr r3, 8001c04 <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm+0x74>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fdeb 	bl	80007a4 <__aeabi_ddiv>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm+0x70>)
 8001bdc:	f7fe fb02 	bl	80001e4 <__adddf3>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe fec4 	bl	8000974 <__aeabi_d2f>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	615a      	str	r2, [r3, #20]
}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	f3af 8000 	nop.w
 8001c00:	40350000 	.word	0x40350000
 8001c04:	851eb852 	.word	0x851eb852
 8001c08:	4074ddeb 	.word	0x4074ddeb

08001c0c <_ZN15Adafruit_ICM20X5_readEv>:
/******************* Adafruit_Sensor functions *****************/
/*!
 *     @brief  Updates the measurement data for all sensors simultaneously
 */
/**************************************************************************/
void Adafruit_ICM20X::_read(void) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b092      	sub	sp, #72	; 0x48
 8001c10:	af04      	add	r7, sp, #16
 8001c12:	6078      	str	r0, [r7, #4]

  _setBank(0);
 8001c14:	2100      	movs	r1, #0
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f895 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>

  // reading 9 bytes of mag data to fetch the register that tells the mag we've
  // read all the data
  const uint8_t numbytes = 14 + 9; // Read Accel, gyro, temp, and 9 bytes of mag
 8001c1c:	2317      	movs	r3, #23
 8001c1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  //Adafruit_BusIO_Register data_reg = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_ACCEL_XOUT_H, numbytes);

  Adafruit_BusIO_Register data_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_ACCEL_XOUT_H, numbytes);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c26:	f107 0020 	add.w	r0, r7, #32
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	2317      	movs	r3, #23
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	232d      	movs	r3, #45	; 0x2d
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f7ff f86d 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  uint8_t buffer[numbytes];
  data_reg.read(buffer, numbytes);
 8001c3e:	f107 0108 	add.w	r1, r7, #8
 8001c42:	f107 0320 	add.w	r3, r7, #32
 8001c46:	2217      	movs	r2, #23
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff f940 	bl	8000ece <_ZN23Adafruit_BusIO_Register4readEPhh>

  rawAccX = buffer[0] << 8 | buffer[1];
 8001c4e:	7a3b      	ldrb	r3, [r7, #8]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	b21a      	sxth	r2, r3
 8001c54:	7a7b      	ldrb	r3, [r7, #9]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  rawAccY = buffer[2] << 8 | buffer[3];
 8001c62:	7abb      	ldrb	r3, [r7, #10]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	b21a      	sxth	r2, r3
 8001c68:	7afb      	ldrb	r3, [r7, #11]
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  rawAccZ = buffer[4] << 8 | buffer[5];
 8001c76:	7b3b      	ldrb	r3, [r7, #12]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	7b7b      	ldrb	r3, [r7, #13]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  rawGyroX = buffer[6] << 8 | buffer[7];
 8001c8a:	7bbb      	ldrb	r3, [r7, #14]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  rawGyroY = buffer[8] << 8 | buffer[9];
 8001c9e:	7c3b      	ldrb	r3, [r7, #16]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	7c7b      	ldrb	r3, [r7, #17]
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  rawGyroZ = buffer[10] << 8 | buffer[11];
 8001cb2:	7cbb      	ldrb	r3, [r7, #18]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	b21a      	sxth	r2, r3
 8001cb8:	7cfb      	ldrb	r3, [r7, #19]
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  temperature = buffer[12] << 8 | buffer[13];
 8001cc6:	7d3b      	ldrb	r3, [r7, #20]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	7d7a      	ldrb	r2, [r7, #21]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	ee07 3a90 	vmov	s15, r3
 8001cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	edc3 7a01 	vstr	s15, [r3, #4]

  rawMagX = ((buffer[16] << 8) |
 8001cdc:	7e3b      	ldrb	r3, [r7, #24]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21a      	sxth	r2, r3
             (buffer[15] & 0xFF)); // Mag data is read little endian
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	b21b      	sxth	r3, r3
  rawMagX = ((buffer[16] << 8) |
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b21a      	sxth	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  rawMagY = ((buffer[18] << 8) | (buffer[17] & 0xFF));
 8001cf0:	7ebb      	ldrb	r3, [r7, #26]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	7e7b      	ldrb	r3, [r7, #25]
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21a      	sxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  rawMagZ = ((buffer[20] << 8) | (buffer[19] & 0xFF));
 8001d04:	7f3b      	ldrb	r3, [r7, #28]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	7efb      	ldrb	r3, [r7, #27]
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  scaleValues();
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
  _setBank(0);
 8001d22:	2100      	movs	r1, #0
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f80e 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8001d2a:	bf00      	nop
 8001d2c:	3738      	adds	r7, #56	; 0x38
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_ZN15Adafruit_ICM20X11scaleValuesEv>:
/*!
 * @brief Scales the raw variables based on the current measurement range
 *
 */
void Adafruit_ICM20X::scaleValues(void) {}
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_ZN15Adafruit_ICM20X8_setBankEh>:
/*!
    @brief Sets register bank.
    @param  bank_number
          The bank to set to active
*/
void Adafruit_ICM20X::_setBank(uint8_t bank_number) {
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b08c      	sub	sp, #48	; 0x30
 8001d4a:	af04      	add	r7, sp, #16
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	70fb      	strb	r3, [r7, #3]

	  //Adafruit_BusIO_Register reg_bank_sel = Adafruit_BusIO_Register(
	  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_REG_BANK_SEL);

  Adafruit_BusIO_Register reg_bank_sel = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_REG_BANK_SEL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d56:	f107 000c 	add.w	r0, r7, #12
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	9302      	str	r3, [sp, #8]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	2301      	movs	r3, #1
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	237f      	movs	r3, #127	; 0x7f
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f7fe ffd5 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  reg_bank_sel.write((bank_number & 0b11) << 4);
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	f003 0130 	and.w	r1, r3, #48	; 0x30
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f819 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
 8001d82:	bf00      	nop
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <_ZN15Adafruit_ICM20X15writeAccelRangeEh>:
    @brief Sets the accelerometer's measurement range.
    @param  new_accel_range
            Measurement range to be set. Must be an
            `icm20x_accel_range_t`.
*/
void Adafruit_ICM20X::writeAccelRange(uint8_t new_accel_range) {
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b08e      	sub	sp, #56	; 0x38
 8001d8e:	af04      	add	r7, sp, #16
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	70fb      	strb	r3, [r7, #3]
  _setBank(2);
 8001d96:	2102      	movs	r1, #2
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ffd4 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register accel_config_1 = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_ACCEL_CONFIG_1);

  Adafruit_BusIO_Register accel_config_1 = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_ACCEL_CONFIG_1);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da2:	f107 0014 	add.w	r0, r7, #20
 8001da6:	2301      	movs	r3, #1
 8001da8:	9302      	str	r3, [sp, #8]
 8001daa:	2300      	movs	r3, #0
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	2301      	movs	r3, #1
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2314      	movs	r3, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	f7fe ffaf 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits accel_range =
      Adafruit_BusIO_RegisterBits(&accel_config_1, 2, 1);
 8001dba:	f107 0114 	add.w	r1, r7, #20
 8001dbe:	f107 000c 	add.w	r0, r7, #12
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f7ff f8ad 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  accel_range.write(new_accel_range);
 8001dca:	78fa      	ldrb	r2, [r7, #3]
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f8de 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  current_accel_range = new_accel_range;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  _setBank(0);
 8001de0:	2100      	movs	r1, #0
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffaf 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	; 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_ZN15Adafruit_ICM20X14writeGyroRangeEh>:
    @brief Sets the gyro's measurement range.
    @param  new_gyro_range
            Measurement range to be set. Must be an
            `icm20x_gyro_range_t`.
*/
void Adafruit_ICM20X::writeGyroRange(uint8_t new_gyro_range) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08e      	sub	sp, #56	; 0x38
 8001df4:	af04      	add	r7, sp, #16
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
  _setBank(2);
 8001dfc:	2102      	movs	r1, #2
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffa1 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register gyro_config_1 = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_GYRO_CONFIG_1);

  Adafruit_BusIO_Register gyro_config_1 = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_GYRO_CONFIG_1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e08:	f107 0014 	add.w	r0, r7, #20
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	9302      	str	r3, [sp, #8]
 8001e10:	2300      	movs	r3, #0
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	2301      	movs	r3, #1
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f7fe ff7c 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits gyro_range =
      Adafruit_BusIO_RegisterBits(&gyro_config_1, 2, 1);
 8001e20:	f107 0114 	add.w	r1, r7, #20
 8001e24:	f107 000c 	add.w	r0, r7, #12
 8001e28:	2301      	movs	r3, #1
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f7ff f87a 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  gyro_range.write(new_gyro_range);
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f8ab 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  current_gyro_range = new_gyro_range;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  _setBank(0);
 8001e46:	2100      	movs	r1, #0
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff7c 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8001e4e:	bf00      	nop
 8001e50:	3728      	adds	r7, #40	; 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_ZN15Adafruit_ICM20X19setAccelRateDivisorEt>:
    @brief Sets the accelerometer's data rate divisor.
    @param  new_accel_divisor
            The accelerometer's data rate divisor (`uint16_t`). This 12-bit
   value must be <= 4095
*/
void Adafruit_ICM20X::setAccelRateDivisor(uint16_t new_accel_divisor) {
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b08c      	sub	sp, #48	; 0x30
 8001e5a:	af04      	add	r7, sp, #16
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	807b      	strh	r3, [r7, #2]
  _setBank(2);
 8001e62:	2102      	movs	r1, #2
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff6e 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>
  //    Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
  //                            ICM20X_B2_ACCEL_SMPLRT_DIV_1, 2, MSBFIRST);

  Adafruit_BusIO_Register accel_rate_divisor =
      Adafruit_BusIO_Register(i2c_dev, ADDRBIT8_HIGH_TOREAD,
                              ICM20X_B2_ACCEL_SMPLRT_DIV_1, 2, MSBFIRST);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e6e:	f107 000c 	add.w	r0, r7, #12
 8001e72:	2301      	movs	r3, #1
 8001e74:	9302      	str	r3, [sp, #8]
 8001e76:	2301      	movs	r3, #1
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2310      	movs	r3, #16
 8001e80:	2200      	movs	r2, #0
 8001e82:	f7fe ff49 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  accel_rate_divisor.write(new_accel_divisor);
 8001e86:	8879      	ldrh	r1, [r7, #2]
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe ff90 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
  _setBank(0);
 8001e94:	2100      	movs	r1, #0
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ff55 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8001e9c:	bf00      	nop
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_ZN15Adafruit_ICM20X18setGyroRateDivisorEh>:

    @brief Sets the gyro's data rate divisor.
    @param  new_gyro_divisor
            The gyro's data rate divisor (`uint8_t`).
*/
void Adafruit_ICM20X::setGyroRateDivisor(uint8_t new_gyro_divisor) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	; 0x30
 8001ea8:	af04      	add	r7, sp, #16
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  _setBank(2);
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ff47 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register gyro_rate_divisor = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_GYRO_SMPLRT_DIV, 1);

  Adafruit_BusIO_Register gyro_rate_divisor = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B2_GYRO_SMPLRT_DIV, 1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ebc:	f107 000c 	add.w	r0, r7, #12
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f7fe ff22 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  gyro_rate_divisor.write(new_gyro_divisor);
 8001ed4:	78f9      	ldrb	r1, [r7, #3]
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	2200      	movs	r2, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe ff69 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
  _setBank(0);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff2e 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>
}
 8001eea:	bf00      	nop
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <_ZN15Adafruit_ICM20X12setI2CBypassEb>:
 *
 * @param bypass_i2c Set to true to bypass the internal I2C master circuitry,
 * connecting the external I2C bus to the main I2C bus. Set to false to
 * re-connect
 */
void Adafruit_ICM20X::setI2CBypass(bool bypass_i2c) {
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b08e      	sub	sp, #56	; 0x38
 8001ef6:	af04      	add	r7, sp, #16
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	460b      	mov	r3, r1
 8001efc:	70fb      	strb	r3, [r7, #3]
  _setBank(0);
 8001efe:	2100      	movs	r1, #0
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff20 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register int_enable_1 = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_REG_INT_PIN_CFG);

  Adafruit_BusIO_Register int_enable_1 = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_REG_INT_PIN_CFG);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f0a:	f107 0014 	add.w	r0, r7, #20
 8001f0e:	2301      	movs	r3, #1
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	2300      	movs	r3, #0
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	2301      	movs	r3, #1
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	230f      	movs	r3, #15
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f7fe fefb 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits i2c_bypass_enable =
      Adafruit_BusIO_RegisterBits(&int_enable_1, 1, 1);
 8001f22:	f107 0114 	add.w	r1, r7, #20
 8001f26:	f107 000c 	add.w	r0, r7, #12
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f7fe fff9 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  i2c_bypass_enable.write(bypass_i2c);
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f82a 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_ZN15Adafruit_ICM20X15enableI2CMasterEb>:
 *
 * @param enable_i2c_master true: enable false: disable
 *
 * @return true: success false: error
 */
bool Adafruit_ICM20X::enableI2CMaster(bool enable_i2c_master) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af04      	add	r7, sp, #16
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
  _setBank(0);
 8001f54:	2100      	movs	r1, #0
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fef5 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register user_ctrl_reg = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_USER_CTRL);

  Adafruit_BusIO_Register user_ctrl_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_USER_CTRL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f60:	f107 0014 	add.w	r0, r7, #20
 8001f64:	2301      	movs	r3, #1
 8001f66:	9302      	str	r3, [sp, #8]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2303      	movs	r3, #3
 8001f72:	2200      	movs	r2, #0
 8001f74:	f7fe fed0 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits i2c_master_enable_bit =
      Adafruit_BusIO_RegisterBits(&user_ctrl_reg, 1, 5);
 8001f78:	f107 0114 	add.w	r1, r7, #20
 8001f7c:	f107 000c 	add.w	r0, r7, #12
 8001f80:	2305      	movs	r3, #5
 8001f82:	2201      	movs	r2, #1
 8001f84:	f7fe ffce 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  return i2c_master_enable_bit.write(enable_i2c_master);
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	4611      	mov	r1, r2
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe ffff 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
 8001f96:	4603      	mov	r3, r0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <_ZN15Adafruit_ICM20X18configureI2CMasterEv>:
 * @brief Set the I2C clock rate for the auxillary I2C bus to 345.60kHz and
 * disable repeated start
 *
 * @return true: success false: failure
 */
bool Adafruit_ICM20X::configureI2CMaster(void) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af04      	add	r7, sp, #16
 8001fa6:	6078      	str	r0, [r7, #4]

  _setBank(3);
 8001fa8:	2103      	movs	r1, #3
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fecb 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register i2c_master_ctrl_reg = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_MST_CTRL);

  Adafruit_BusIO_Register i2c_master_ctrl_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_MST_CTRL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb4:	f107 000c 	add.w	r0, r7, #12
 8001fb8:	2301      	movs	r3, #1
 8001fba:	9302      	str	r3, [sp, #8]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f7fe fea6 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  return i2c_master_ctrl_reg.write(0x17);
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2117      	movs	r1, #23
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe feed 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
 8001fda:	4603      	mov	r3, r0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_ZN15Adafruit_ICM20X20readExternalRegisterEhh>:
 * @param slv_addr the 7-bit I2C address of the slave device
 * @param reg_addr the register address to read from
 * @return the requested register value
 */
uint8_t Adafruit_ICM20X::readExternalRegister(uint8_t slv_addr,
                                              uint8_t reg_addr) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	70fb      	strb	r3, [r7, #3]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	70bb      	strb	r3, [r7, #2]

  return auxillaryRegisterTransaction(true, slv_addr, reg_addr);
 8001ff4:	78bb      	ldrb	r3, [r7, #2]
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	21ff      	movs	r1, #255	; 0xff
 8001ffa:	9100      	str	r1, [sp, #0]
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f825 	bl	800204e <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh>
 8002004:	4603      	mov	r3, r0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_ZN15Adafruit_ICM20X21writeExternalRegisterEhhh>:
 * @param value the value to write
 * @return true
 * @return false
 */
bool Adafruit_ICM20X::writeExternalRegister(uint8_t slv_addr, uint8_t reg_addr,
                                            uint8_t value) {
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af02      	add	r7, sp, #8
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	4608      	mov	r0, r1
 8002018:	4611      	mov	r1, r2
 800201a:	461a      	mov	r2, r3
 800201c:	4603      	mov	r3, r0
 800201e:	70fb      	strb	r3, [r7, #3]
 8002020:	460b      	mov	r3, r1
 8002022:	70bb      	strb	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]

  return (bool)auxillaryRegisterTransaction(false, slv_addr, reg_addr, value);
 8002028:	78b9      	ldrb	r1, [r7, #2]
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	460b      	mov	r3, r1
 8002032:	2100      	movs	r1, #0
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f80a 	bl	800204e <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh>:
 * @return false
 */
uint8_t Adafruit_ICM20X::auxillaryRegisterTransaction(bool read,
                                                      uint8_t slv_addr,
                                                      uint8_t reg_addr,
                                                      uint8_t value) {
 800204e:	b590      	push	{r4, r7, lr}
 8002050:	b0a1      	sub	sp, #132	; 0x84
 8002052:	af04      	add	r7, sp, #16
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	4608      	mov	r0, r1
 8002058:	4611      	mov	r1, r2
 800205a:	461a      	mov	r2, r3
 800205c:	4603      	mov	r3, r0
 800205e:	70fb      	strb	r3, [r7, #3]
 8002060:	460b      	mov	r3, r1
 8002062:	70bb      	strb	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	707b      	strb	r3, [r7, #1]

  _setBank(3);
 8002068:	2103      	movs	r1, #3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fe6b 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>

  Adafruit_BusIO_Register i2c_master_status_reg = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_I2C_MST_STATUS);*/

  Adafruit_BusIO_Register slv4_addr_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_ADDR);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002074:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002078:	2301      	movs	r3, #1
 800207a:	9302      	str	r3, [sp, #8]
 800207c:	2300      	movs	r3, #0
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2301      	movs	r3, #1
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2313      	movs	r3, #19
 8002086:	2200      	movs	r2, #0
 8002088:	f7fe fe46 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_Register slv4_reg_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_REG);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002090:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002094:	2301      	movs	r3, #1
 8002096:	9302      	str	r3, [sp, #8]
 8002098:	2300      	movs	r3, #0
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	2301      	movs	r3, #1
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2314      	movs	r3, #20
 80020a2:	2200      	movs	r2, #0
 80020a4:	f7fe fe38 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_Register slv4_ctrl_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_CTRL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ac:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80020b0:	2301      	movs	r3, #1
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	2300      	movs	r3, #0
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	2301      	movs	r3, #1
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2315      	movs	r3, #21
 80020be:	2200      	movs	r2, #0
 80020c0:	f7fe fe2a 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_Register i2c_master_status_reg = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_I2C_MST_STATUS);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020c8:	f107 0014 	add.w	r0, r7, #20
 80020cc:	2301      	movs	r3, #1
 80020ce:	9302      	str	r3, [sp, #8]
 80020d0:	2300      	movs	r3, #0
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	2301      	movs	r3, #1
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	2317      	movs	r3, #23
 80020da:	2200      	movs	r2, #0
 80020dc:	f7fe fe1c 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits slave_finished_bit =
      Adafruit_BusIO_RegisterBits(&i2c_master_status_reg, 1, 6);
 80020e0:	f107 0114 	add.w	r1, r7, #20
 80020e4:	f107 000c 	add.w	r0, r7, #12
 80020e8:	2306      	movs	r3, #6
 80020ea:	2201      	movs	r2, #1
 80020ec:	f7fe ff1a 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  if (read) {
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d017      	beq.n	8002126 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0xd8>
    slv_addr |= 0x80; // set high bit for read, presumably for multi-byte reads
 80020f6:	78bb      	ldrb	r3, [r7, #2]
 80020f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020fc:	70bb      	strb	r3, [r7, #2]

    //slv4_di_reg = new Adafruit_BusIO_Register(
    //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_DI);

    slv4_di_reg = new Adafruit_BusIO_Register(
        i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_DI);
 80020fe:	2014      	movs	r0, #20
 8002100:	f004 fee2 	bl	8006ec8 <_Znwj>
 8002104:	4603      	mov	r3, r0
 8002106:	461c      	mov	r4, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800210c:	2301      	movs	r3, #1
 800210e:	9302      	str	r3, [sp, #8]
 8002110:	2300      	movs	r3, #0
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	2301      	movs	r3, #1
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2317      	movs	r3, #23
 800211a:	2200      	movs	r2, #0
 800211c:	4620      	mov	r0, r4
 800211e:	f7fe fdfb 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>
    slv4_di_reg = new Adafruit_BusIO_Register(
 8002122:	66fc      	str	r4, [r7, #108]	; 0x6c
 8002124:	e021      	b.n	800216a <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x11c>

	    //slv4_do_reg = new Adafruit_BusIO_Register(
	    //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_DO);

    slv4_do_reg = new Adafruit_BusIO_Register(
        i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B3_I2C_SLV4_DO);
 8002126:	2014      	movs	r0, #20
 8002128:	f004 fece 	bl	8006ec8 <_Znwj>
 800212c:	4603      	mov	r3, r0
 800212e:	461c      	mov	r4, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002134:	2301      	movs	r3, #1
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	2300      	movs	r3, #0
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2301      	movs	r3, #1
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2316      	movs	r3, #22
 8002142:	2200      	movs	r2, #0
 8002144:	4620      	mov	r0, r4
 8002146:	f7fe fde7 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>
    slv4_do_reg = new Adafruit_BusIO_Register(
 800214a:	667c      	str	r4, [r7, #100]	; 0x64

    if (!slv4_do_reg->write(value)) {
 800214c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002150:	2200      	movs	r2, #0
 8002152:	4619      	mov	r1, r3
 8002154:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002156:	f7fe fe2d 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
 800215a:	4603      	mov	r3, r0
 800215c:	f083 0301 	eor.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x11c>
      return (uint8_t) false;
 8002166:	2300      	movs	r3, #0
 8002168:	e059      	b.n	800221e <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1d0>
    }
  }

  if (!slv4_addr_reg.write(slv_addr)) {
 800216a:	78b9      	ldrb	r1, [r7, #2]
 800216c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002170:	2200      	movs	r2, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fe1e 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
 8002178:	4603      	mov	r3, r0
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x13a>
    return (uint8_t) false;
 8002184:	2300      	movs	r3, #0
 8002186:	e04a      	b.n	800221e <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1d0>
  }
  if (!slv4_reg_reg.write(reg_addr)) {
 8002188:	7879      	ldrb	r1, [r7, #1]
 800218a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800218e:	2200      	movs	r2, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fe0f 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
 8002196:	4603      	mov	r3, r0
 8002198:	f083 0301 	eor.w	r3, r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x158>
    return (uint8_t) false;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e03b      	b.n	800221e <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1d0>
  }

  if (!slv4_ctrl_reg.write(0x80)) {
 80021a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021aa:	2200      	movs	r2, #0
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fe00 	bl	8000db4 <_ZN23Adafruit_BusIO_Register5writeEmh>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f083 0301 	eor.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x176>
    return (uint8_t) false;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e02c      	b.n	800221e <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1d0>
  }

  _setBank(0);
 80021c4:	2100      	movs	r1, #0
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff fdbd 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>
  uint8_t tries = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  // wait until the operation is finished
  while (slave_finished_bit.read() != true) {
 80021d2:	f107 030c 	add.w	r3, r7, #12
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe febf 	bl	8000f5a <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b01      	cmp	r3, #1
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1b4>
    tries++;
 80021ec:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80021f0:	3301      	adds	r3, #1
 80021f2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    if (tries >= NUM_FINISHED_CHECKS) {
 80021f6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80021fa:	2b63      	cmp	r3, #99	; 0x63
 80021fc:	d9e9      	bls.n	80021d2 <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x184>
      return (uint8_t) false;
 80021fe:	2300      	movs	r3, #0
 8002200:	e00d      	b.n	800221e <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1d0>
    }
  }
  if (read) {
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1ce>
    _setBank(3);
 8002208:	2103      	movs	r1, #3
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff fd9b 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>
    return slv4_di_reg->read();
 8002210:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002212:	f7fe fe15 	bl	8000e40 <_ZN23Adafruit_BusIO_Register4readEv>
 8002216:	4603      	mov	r3, r0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	e000      	b.n	800221e <_ZN15Adafruit_ICM20X28auxillaryRegisterTransactionEbhhh+0x1d0>
  }
  return (uint8_t) true;
 800221c:	2301      	movs	r3, #1
}
 800221e:	4618      	mov	r0, r3
 8002220:	3774      	adds	r7, #116	; 0x74
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}

08002226 <_ZN15Adafruit_ICM20X14resetI2CMasterEv>:
/**************************************************************************/
/*!
 * @brief Reset the I2C master
 *
 */
void Adafruit_ICM20X::resetI2CMaster(void) {
 8002226:	b580      	push	{r7, lr}
 8002228:	b08e      	sub	sp, #56	; 0x38
 800222a:	af04      	add	r7, sp, #16
 800222c:	6078      	str	r0, [r7, #4]

  _setBank(0);
 800222e:	2100      	movs	r1, #0
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff fd88 	bl	8001d46 <_ZN15Adafruit_ICM20X8_setBankEh>

  //Adafruit_BusIO_Register user_ctrl = Adafruit_BusIO_Register(
  //    i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_USER_CTRL);

  Adafruit_BusIO_Register user_ctrl = Adafruit_BusIO_Register(
      i2c_dev, ADDRBIT8_HIGH_TOREAD, ICM20X_B0_USER_CTRL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800223a:	f107 0014 	add.w	r0, r7, #20
 800223e:	2301      	movs	r3, #1
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	2300      	movs	r3, #0
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	2301      	movs	r3, #1
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2303      	movs	r3, #3
 800224c:	2200      	movs	r2, #0
 800224e:	f7fe fd63 	bl	8000d18 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevice26_Adafruit_BusIO_SPIRegTypethhh>

  Adafruit_BusIO_RegisterBits i2c_master_reset_bit =
      Adafruit_BusIO_RegisterBits(&user_ctrl, 1, 1);
 8002252:	f107 0114 	add.w	r1, r7, #20
 8002256:	f107 000c 	add.w	r0, r7, #12
 800225a:	2301      	movs	r3, #1
 800225c:	2201      	movs	r2, #1
 800225e:	f7fe fe61 	bl	8000f24 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  i2c_master_reset_bit.write(true);
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	2101      	movs	r1, #1
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fe93 	bl	8000f94 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  while (i2c_master_reset_bit.read()) {
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fe71 	bl	8000f5a <_ZN27Adafruit_BusIO_RegisterBits4readEv>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	bf14      	ite	ne
 800227e:	2301      	movne	r3, #1
 8002280:	2300      	moveq	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <_ZN15Adafruit_ICM20X14resetI2CMasterEv+0x6a>
    HAL_Delay(10);
 8002288:	200a      	movs	r0, #10
 800228a:	f001 f8fb 	bl	8003484 <HAL_Delay>
  while (i2c_master_reset_bit.read()) {
 800228e:	e7ee      	b.n	800226e <_ZN15Adafruit_ICM20X14resetI2CMasterEv+0x48>
  }
  HAL_Delay(100);
 8002290:	2064      	movs	r0, #100	; 0x64
 8002292:	f001 f8f7 	bl	8003484 <HAL_Delay>
}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	; 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the ICM20X's accelerometer
*/
/**************************************************************************/
void Adafruit_ICM20X_Accelerometer::getSensor(sensor_t *sensor) {
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  //memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  //strncpy(sensor->name, "ICM20X_A", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2200      	movs	r2, #0
 80022ae:	72da      	strb	r2, [r3, #11]
  sensor->version = 1;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2201      	movs	r2, #1
 80022b4:	60da      	str	r2, [r3, #12]
  sensor->sensor_id = _sensorID;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	611a      	str	r2, [r3, #16]
  sensor->type = SENSOR_TYPE_ACCELEROMETER;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	615a      	str	r2, [r3, #20]
  sensor->min_delay = 0;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2200      	movs	r2, #0
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->min_value = -294.1995F; /*  -30g = 294.1995 m/s^2  */
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t+0x48>)
 80022ce:	61da      	str	r2, [r3, #28]
  sensor->max_value = 294.1995F;  /* 30g = 294.1995 m/s^2  */
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4a06      	ldr	r2, [pc, #24]	; (80022ec <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t+0x4c>)
 80022d4:	619a      	str	r2, [r3, #24]
  sensor->resolution =
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <_ZN29Adafruit_ICM20X_Accelerometer9getSensorEP8sensor_t+0x50>)
 80022da:	621a      	str	r2, [r3, #32]
      0.122; /* 8192LSB/1000 mG -> 8.192 LSB/ mG => 0.122 mG/LSB at +-4g */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	c3931989 	.word	0xc3931989
 80022ec:	43931989 	.word	0x43931989
 80022f0:	3df9db23 	.word	0x3df9db23

080022f4 <_ZN29Adafruit_ICM20X_Accelerometer8getEventEP15sensors_event_t>:
    @brief  Gets the accelerometer as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_ICM20X_Accelerometer::getEvent(sensors_event_t *event) {
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  _theICM20X->_read();
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fc82 	bl	8001c0c <_ZN15Adafruit_ICM20X5_readEv>
  _theICM20X->fillAccelEvent(event, HAL_GetTick());
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689c      	ldr	r4, [r3, #8]
 800230c:	f001 f8ae 	bl	800346c <HAL_GetTick>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	6839      	ldr	r1, [r7, #0]
 8002316:	4620      	mov	r0, r4
 8002318:	f7ff fb98 	bl	8001a4c <_ZN15Adafruit_ICM20X14fillAccelEventEP15sensors_event_tm>

  return true;
 800231c:	2301      	movs	r3, #1
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}
	...

08002328 <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the ICM20X's gyroscope sensor
*/
/**************************************************************************/
void Adafruit_ICM20X_Gyro::getSensor(sensor_t *sensor) {
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  //memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  //strncpy(sensor->name, "ICM20X_G", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name) - 1] = 0;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2200      	movs	r2, #0
 8002336:	72da      	strb	r2, [r3, #11]
  sensor->version = 1;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	60da      	str	r2, [r3, #12]
  sensor->sensor_id = _sensorID;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	611a      	str	r2, [r3, #16]
  sensor->type = SENSOR_TYPE_GYROSCOPE;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2204      	movs	r2, #4
 800234a:	615a      	str	r2, [r3, #20]
  sensor->min_delay = 0;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2200      	movs	r2, #0
 8002350:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->min_value = -69.81; /* -4000 dps -> rad/s (radians per second) */
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	4a06      	ldr	r2, [pc, #24]	; (8002370 <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t+0x48>)
 8002356:	61da      	str	r2, [r3, #28]
  sensor->max_value = +69.81;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4a06      	ldr	r2, [pc, #24]	; (8002374 <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t+0x4c>)
 800235c:	619a      	str	r2, [r3, #24]
  sensor->resolution = 2.665e-7; /* 65.5 LSB/DPS */
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	4a05      	ldr	r2, [pc, #20]	; (8002378 <_ZN20Adafruit_ICM20X_Gyro9getSensorEP8sensor_t+0x50>)
 8002362:	621a      	str	r2, [r3, #32]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	c28b9eb8 	.word	0xc28b9eb8
 8002374:	428b9eb8 	.word	0x428b9eb8
 8002378:	348f137b 	.word	0x348f137b

0800237c <_ZN20Adafruit_ICM20X_Gyro8getEventEP15sensors_event_t>:
    @brief  Gets the gyroscope as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_ICM20X_Gyro::getEvent(sensors_event_t *event) {
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  _theICM20X->_read();
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fc3e 	bl	8001c0c <_ZN15Adafruit_ICM20X5_readEv>

  //_theICM20X->fillGyroEvent(event, millis());
  _theICM20X->fillGyroEvent(event, HAL_GetTick());
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689c      	ldr	r4, [r3, #8]
 8002394:	f001 f86a 	bl	800346c <HAL_GetTick>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	6839      	ldr	r1, [r7, #0]
 800239e:	4620      	mov	r0, r4
 80023a0:	f7ff fb90 	bl	8001ac4 <_ZN15Adafruit_ICM20X13fillGyroEventEP15sensors_event_tm>

  return true;
 80023a4:	2301      	movs	r3, #1
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd90      	pop	{r4, r7, pc}
	...

080023b0 <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the ICM20X's magnetometer sensor
*/
/**************************************************************************/
void Adafruit_ICM20X_Magnetometer::getSensor(sensor_t *sensor) {
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  //memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  //strncpy(sensor->name, "ICM20X_M", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name) - 1] = 0;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2200      	movs	r2, #0
 80023be:	72da      	strb	r2, [r3, #11]
  sensor->version = 1;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2201      	movs	r2, #1
 80023c4:	60da      	str	r2, [r3, #12]
  sensor->sensor_id = _sensorID;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	611a      	str	r2, [r3, #16]
  sensor->type = SENSOR_TYPE_MAGNETIC_FIELD;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2202      	movs	r2, #2
 80023d2:	615a      	str	r2, [r3, #20]
  sensor->min_delay = 0;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->min_value = -4900;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t+0x48>)
 80023de:	61da      	str	r2, [r3, #28]
  sensor->max_value = 4900;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4a06      	ldr	r2, [pc, #24]	; (80023fc <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t+0x4c>)
 80023e4:	619a      	str	r2, [r3, #24]
  sensor->resolution = 0.6667;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	4a05      	ldr	r2, [pc, #20]	; (8002400 <_ZN28Adafruit_ICM20X_Magnetometer9getSensorEP8sensor_t+0x50>)
 80023ea:	621a      	str	r2, [r3, #32]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	c5992000 	.word	0xc5992000
 80023fc:	45992000 	.word	0x45992000
 8002400:	3f2aacda 	.word	0x3f2aacda

08002404 <_ZN28Adafruit_ICM20X_Magnetometer8getEventEP15sensors_event_t>:
    @brief  Gets the magnetometer as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_ICM20X_Magnetometer::getEvent(sensors_event_t *event) {
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  _theICM20X->_read();
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fbfa 	bl	8001c0c <_ZN15Adafruit_ICM20X5_readEv>
  //_theICM20X->fillMagEvent(event, millis());
  _theICM20X->fillMagEvent(event, HAL_GetTick());
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689c      	ldr	r4, [r3, #8]
 800241c:	f001 f826 	bl	800346c <HAL_GetTick>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	6839      	ldr	r1, [r7, #0]
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff fb88 	bl	8001b3c <_ZN15Adafruit_ICM20X12fillMagEventEP15sensors_event_tm>

  return true;
 800242c:	2301      	movs	r3, #1
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bd90      	pop	{r4, r7, pc}
	...

08002438 <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the ICM20X's tenperature
*/
/**************************************************************************/
void Adafruit_ICM20X_Temp::getSensor(sensor_t *sensor) {
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  /* Clear the sensor_t object */
  //memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  //strncpy(sensor->name, "ICM20X_T", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name) - 1] = 0;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2200      	movs	r2, #0
 8002446:	72da      	strb	r2, [r3, #11]
  sensor->version = 1;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2201      	movs	r2, #1
 800244c:	60da      	str	r2, [r3, #12]
  sensor->sensor_id = _sensorID;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	611a      	str	r2, [r3, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	220d      	movs	r2, #13
 800245a:	615a      	str	r2, [r3, #20]
  sensor->min_delay = 0;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2200      	movs	r2, #0
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->min_value = -40;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	4a06      	ldr	r2, [pc, #24]	; (8002480 <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t+0x48>)
 8002466:	61da      	str	r2, [r3, #28]
  sensor->max_value = 85;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4a06      	ldr	r2, [pc, #24]	; (8002484 <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t+0x4c>)
 800246c:	619a      	str	r2, [r3, #24]
  sensor->resolution = 0.0029952; /* 333.87 LSB/C => 1/333.87 C/LSB */
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	4a05      	ldr	r2, [pc, #20]	; (8002488 <_ZN20Adafruit_ICM20X_Temp9getSensorEP8sensor_t+0x50>)
 8002472:	621a      	str	r2, [r3, #32]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	c2200000 	.word	0xc2200000
 8002484:	42aa0000 	.word	0x42aa0000
 8002488:	3b444b1e 	.word	0x3b444b1e

0800248c <_ZN20Adafruit_ICM20X_Temp8getEventEP15sensors_event_t>:
    @brief  Gets the temperature as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_ICM20X_Temp::getEvent(sensors_event_t *event) {
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  _theICM20X->_read();
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fbb6 	bl	8001c0c <_ZN15Adafruit_ICM20X5_readEv>
  //_theICM20X->fillTempEvent(event, millis());
  _theICM20X->fillTempEvent(event, HAL_GetTick());
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689c      	ldr	r4, [r3, #8]
 80024a4:	f000 ffe2 	bl	800346c <HAL_GetTick>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	6839      	ldr	r1, [r7, #0]
 80024ae:	4620      	mov	r0, r4
 80024b0:	f7ff fb6e 	bl	8001b90 <_ZN15Adafruit_ICM20X13fillTempEventEP15sensors_event_tm>

  return true;
 80024b4:	2301      	movs	r3, #1
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}
	...

080024c0 <_ZN20Adafruit_ICM20X_TempD1Ev>:
class Adafruit_ICM20X_Temp : public Adafruit_Sensor {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <_ZN20Adafruit_ICM20X_TempD1Ev+0x20>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f8c1 	bl	8001658 <_ZN15Adafruit_SensorD1Ev>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	08007280 	.word	0x08007280

080024e4 <_ZN20Adafruit_ICM20X_TempD0Ev>:
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ffe7 	bl	80024c0 <_ZN20Adafruit_ICM20X_TempD1Ev>
 80024f2:	210c      	movs	r1, #12
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f004 fce5 	bl	8006ec4 <_ZdlPvj>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_ZN28Adafruit_ICM20X_MagnetometerD1Ev>:
class Adafruit_ICM20X_Magnetometer : public Adafruit_Sensor {
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	4a05      	ldr	r2, [pc, #20]	; (8002524 <_ZN28Adafruit_ICM20X_MagnetometerD1Ev+0x20>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff f89f 	bl	8001658 <_ZN15Adafruit_SensorD1Ev>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	0800729c 	.word	0x0800729c

08002528 <_ZN28Adafruit_ICM20X_MagnetometerD0Ev>:
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ffe7 	bl	8002504 <_ZN28Adafruit_ICM20X_MagnetometerD1Ev>
 8002536:	210c      	movs	r1, #12
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f004 fcc3 	bl	8006ec4 <_ZdlPvj>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <_ZN20Adafruit_ICM20X_GyroD1Ev>:
class Adafruit_ICM20X_Gyro : public Adafruit_Sensor {
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	4a05      	ldr	r2, [pc, #20]	; (8002568 <_ZN20Adafruit_ICM20X_GyroD1Ev+0x20>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff f87d 	bl	8001658 <_ZN15Adafruit_SensorD1Ev>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	080072b8 	.word	0x080072b8

0800256c <_ZN20Adafruit_ICM20X_GyroD0Ev>:
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ffe7 	bl	8002548 <_ZN20Adafruit_ICM20X_GyroD1Ev>
 800257a:	210c      	movs	r1, #12
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f004 fca1 	bl	8006ec4 <_ZdlPvj>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <_ZN29Adafruit_ICM20X_AccelerometerD1Ev>:
class Adafruit_ICM20X_Accelerometer : public Adafruit_Sensor {
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	4a05      	ldr	r2, [pc, #20]	; (80025ac <_ZN29Adafruit_ICM20X_AccelerometerD1Ev+0x20>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f85b 	bl	8001658 <_ZN15Adafruit_SensorD1Ev>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	080072d4 	.word	0x080072d4

080025b0 <_ZN29Adafruit_ICM20X_AccelerometerD0Ev>:
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ffe7 	bl	800258c <_ZN29Adafruit_ICM20X_AccelerometerD1Ev>
 80025be:	210c      	movs	r1, #12
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f004 fc7f 	bl	8006ec4 <_ZdlPvj>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_ZN17Adafruit_ICM20948D1Ev>:
 *            the ST ICM2948 9-DoF Accelerometer, gyro, and magnetometer
 */
class Adafruit_ICM20948 : public Adafruit_ICM20X {
public:
  Adafruit_ICM20948();
  ~Adafruit_ICM20948(){};
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <_ZN17Adafruit_ICM20948D1Ev+0x20>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff f8fd 	bl	80017e0 <_ZN15Adafruit_ICM20XD1Ev>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	08007260 	.word	0x08007260

080025f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f8:	b090      	sub	sp, #64	; 0x40
 80025fa:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025fc:	f000 fed0 	bl	80033a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t rcvBufferSize = 23U;
 8002600:	2317      	movs	r3, #23
 8002602:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t txBufferSize = 23U;
 8002606:	2317      	movs	r3, #23
 8002608:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  uint8_t rcvBuffer[rcvBufferSize] = {0};
 800260c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002610:	1e59      	subs	r1, r3, #1
 8002612:	6339      	str	r1, [r7, #48]	; 0x30
 8002614:	460b      	mov	r3, r1
 8002616:	3301      	adds	r3, #1
 8002618:	2200      	movs	r2, #0
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	00c3      	lsls	r3, r0, #3
 800262a:	6838      	ldr	r0, [r7, #0]
 800262c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002630:	6838      	ldr	r0, [r7, #0]
 8002632:	00c2      	lsls	r2, r0, #3
 8002634:	460b      	mov	r3, r1
 8002636:	3301      	adds	r3, #1
 8002638:	2200      	movs	r2, #0
 800263a:	469a      	mov	sl, r3
 800263c:	4693      	mov	fp, r2
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800264a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800264e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002652:	460b      	mov	r3, r1
 8002654:	3301      	adds	r3, #1
 8002656:	3307      	adds	r3, #7
 8002658:	08db      	lsrs	r3, r3, #3
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	ebad 0d03 	sub.w	sp, sp, r3
 8002660:	ab02      	add	r3, sp, #8
 8002662:	3300      	adds	r3, #0
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	1e4b      	subs	r3, r1, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	db04      	blt.n	800267e <main+0x8a>
 8002674:	2100      	movs	r1, #0
 8002676:	7011      	strb	r1, [r2, #0]
 8002678:	3201      	adds	r2, #1
 800267a:	3b01      	subs	r3, #1
 800267c:	e7f8      	b.n	8002670 <main+0x7c>
  uint8_t txBuffer[txBufferSize] = {0};
 800267e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002682:	1e59      	subs	r1, r3, #1
 8002684:	62b9      	str	r1, [r7, #40]	; 0x28
 8002686:	460b      	mov	r3, r1
 8002688:	3301      	adds	r3, #1
 800268a:	2200      	movs	r2, #0
 800268c:	4698      	mov	r8, r3
 800268e:	4691      	mov	r9, r2
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800269c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026a4:	460b      	mov	r3, r1
 80026a6:	3301      	adds	r3, #1
 80026a8:	2200      	movs	r2, #0
 80026aa:	461c      	mov	r4, r3
 80026ac:	4615      	mov	r5, r2
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	00eb      	lsls	r3, r5, #3
 80026b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026bc:	00e2      	lsls	r2, r4, #3
 80026be:	460b      	mov	r3, r1
 80026c0:	3301      	adds	r3, #1
 80026c2:	3307      	adds	r3, #7
 80026c4:	08db      	lsrs	r3, r3, #3
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	ebad 0d03 	sub.w	sp, sp, r3
 80026cc:	ab02      	add	r3, sp, #8
 80026ce:	3300      	adds	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	1e4b      	subs	r3, r1, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	db04      	blt.n	80026ea <main+0xf6>
 80026e0:	2100      	movs	r1, #0
 80026e2:	7011      	strb	r1, [r2, #0]
 80026e4:	3201      	adds	r2, #1
 80026e6:	3b01      	subs	r3, #1
 80026e8:	e7f8      	b.n	80026dc <main+0xe8>
        rawMagZ;     ///< temp variables

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026ea:	f000 f88f 	bl	800280c <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80026ee:	f000 f8ff 	bl	80028f0 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026f2:	f000 fa59 	bl	8002ba8 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80026f6:	f000 f921 	bl	800293c <_ZL12MX_I2C1_Initv>
  MX_I2S2_Init();
 80026fa:	f000 f987 	bl	8002a0c <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 80026fe:	f000 f9b9 	bl	8002a74 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8002702:	f000 f9eb 	bl	8002adc <_ZL12MX_SPI1_Initv>
  //MX_USB_HOST_Init();
  MX_USART2_UART_Init();
 8002706:	f000 fa21 	bl	8002b4c <_ZL19MX_USART2_UART_Initv>
  MX_I2C3_Init();
 800270a:	f000 f94b 	bl	80029a4 <_ZL12MX_I2C3_Initv>
  SensorAPI_I2Cx_Read(0x1F, pressure_data, 3, &bmp388_address);

  uint8_t config_settings[] = {0x10, 0x20, 0x30}; // Example settings
  SensorAPI_I2Cx_Write(0x1E, config_settings, sizeof(config_settings), &bmp388_address);*/

  icm.begin_I2C();
 800270e:	2200      	movs	r2, #0
 8002710:	2169      	movs	r1, #105	; 0x69
 8002712:	483c      	ldr	r0, [pc, #240]	; (8002804 <main+0x210>)
 8002714:	f7fe fd84 	bl	8001220 <_ZN17Adafruit_ICM209489begin_I2CEhl>
    sensors_event_t temp;
    icm.getEvent(&accel, &gyro, &temp, &mag);
    int x = accel.acceleration.x;
    int y = accel.acceleration.y;
    int z = accel.acceleration.z;*/
	HAL_I2C_Master_Transmit(&hi2c3, 0x69, txBuffer, txBufferSize, 200);
 8002718:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800271c:	b29b      	uxth	r3, r3
 800271e:	22c8      	movs	r2, #200	; 0xc8
 8002720:	9200      	str	r2, [sp, #0]
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	2169      	movs	r1, #105	; 0x69
 8002726:	4838      	ldr	r0, [pc, #224]	; (8002808 <main+0x214>)
 8002728:	f001 fb56 	bl	8003dd8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c3, 0x69, rcvBuffer, rcvBufferSize, 200);
 800272c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002730:	b29b      	uxth	r3, r3
 8002732:	22c8      	movs	r2, #200	; 0xc8
 8002734:	9200      	str	r2, [sp, #0]
 8002736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002738:	2169      	movs	r1, #105	; 0x69
 800273a:	4833      	ldr	r0, [pc, #204]	; (8002808 <main+0x214>)
 800273c:	f001 fc4a 	bl	8003fd4 <HAL_I2C_Master_Receive>

    rawAccX = rcvBuffer[0] << 8 | rcvBuffer[1];
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	b21a      	sxth	r2, r3
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	b21b      	sxth	r3, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	847b      	strh	r3, [r7, #34]	; 0x22
    rawAccY = rcvBuffer[2] << 8 | rcvBuffer[3];
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	789b      	ldrb	r3, [r3, #2]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	b21a      	sxth	r2, r3
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	78db      	ldrb	r3, [r3, #3]
 800275e:	b21b      	sxth	r3, r3
 8002760:	4313      	orrs	r3, r2
 8002762:	843b      	strh	r3, [r7, #32]
    rawAccZ = rcvBuffer[4] << 8 | rcvBuffer[5];
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	791b      	ldrb	r3, [r3, #4]
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	b21a      	sxth	r2, r3
 800276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276e:	795b      	ldrb	r3, [r3, #5]
 8002770:	b21b      	sxth	r3, r3
 8002772:	4313      	orrs	r3, r2
 8002774:	83fb      	strh	r3, [r7, #30]

    rawGyroX = rcvBuffer[6] << 8 | rcvBuffer[7];
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	799b      	ldrb	r3, [r3, #6]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	b21a      	sxth	r2, r3
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	79db      	ldrb	r3, [r3, #7]
 8002782:	b21b      	sxth	r3, r3
 8002784:	4313      	orrs	r3, r2
 8002786:	83bb      	strh	r3, [r7, #28]
    rawGyroY = rcvBuffer[8] << 8 | rcvBuffer[9];
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278a:	7a1b      	ldrb	r3, [r3, #8]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	b21a      	sxth	r2, r3
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002792:	7a5b      	ldrb	r3, [r3, #9]
 8002794:	b21b      	sxth	r3, r3
 8002796:	4313      	orrs	r3, r2
 8002798:	837b      	strh	r3, [r7, #26]
    rawGyroZ = rcvBuffer[10] << 8 | rcvBuffer[11];
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	7a9b      	ldrb	r3, [r3, #10]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	7adb      	ldrb	r3, [r3, #11]
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	833b      	strh	r3, [r7, #24]

    temperature = rcvBuffer[12] << 8 | rcvBuffer[13];
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	7b1b      	ldrb	r3, [r3, #12]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b4:	7b52      	ldrb	r2, [r2, #13]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027c0:	edc7 7a05 	vstr	s15, [r7, #20]

    rawMagX = ((rcvBuffer[16] << 8) |
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	7c1b      	ldrb	r3, [r3, #16]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	b21a      	sxth	r2, r3
                 (rcvBuffer[15] & 0xFF)); // Mag data is read little endian
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	7bdb      	ldrb	r3, [r3, #15]
 80027d0:	b21b      	sxth	r3, r3
    rawMagX = ((rcvBuffer[16] << 8) |
 80027d2:	4313      	orrs	r3, r2
 80027d4:	827b      	strh	r3, [r7, #18]
    rawMagY = ((rcvBuffer[18] << 8) | (rcvBuffer[17] & 0xFF));
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	7c9b      	ldrb	r3, [r3, #18]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	b21a      	sxth	r2, r3
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	7c5b      	ldrb	r3, [r3, #17]
 80027e2:	b21b      	sxth	r3, r3
 80027e4:	4313      	orrs	r3, r2
 80027e6:	823b      	strh	r3, [r7, #16]
    rawMagZ = ((rcvBuffer[20] << 8) | (rcvBuffer[19] & 0xFF));
 80027e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ea:	7d1b      	ldrb	r3, [r3, #20]
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	b21a      	sxth	r2, r3
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	7cdb      	ldrb	r3, [r3, #19]
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	81fb      	strh	r3, [r7, #14]

    HAL_Delay(100);
 80027fa:	2064      	movs	r0, #100	; 0x64
 80027fc:	f000 fe42 	bl	8003484 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c3, 0x69, txBuffer, txBufferSize, 200);
 8002800:	e78a      	b.n	8002718 <main+0x124>
 8002802:	bf00      	nop
 8002804:	20000264 	.word	0x20000264
 8002808:	200000e4 	.word	0x200000e4

0800280c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b094      	sub	sp, #80	; 0x50
 8002810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002812:	f107 0320 	add.w	r3, r7, #32
 8002816:	2230      	movs	r2, #48	; 0x30
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fbc6 	bl	8006fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <_Z18SystemClock_Configv+0xdc>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	4a2b      	ldr	r2, [pc, #172]	; (80028e8 <_Z18SystemClock_Configv+0xdc>)
 800283a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283e:	6413      	str	r3, [r2, #64]	; 0x40
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <_Z18SystemClock_Configv+0xdc>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800284c:	2300      	movs	r3, #0
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	4b26      	ldr	r3, [pc, #152]	; (80028ec <_Z18SystemClock_Configv+0xe0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a25      	ldr	r2, [pc, #148]	; (80028ec <_Z18SystemClock_Configv+0xe0>)
 8002856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b23      	ldr	r3, [pc, #140]	; (80028ec <_Z18SystemClock_Configv+0xe0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002868:	2301      	movs	r3, #1
 800286a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800286c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002872:	2302      	movs	r3, #2
 8002874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800287a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800287c:	2304      	movs	r3, #4
 800287e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002880:	23c0      	movs	r3, #192	; 0xc0
 8002882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002884:	2304      	movs	r3, #4
 8002886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002888:	2308      	movs	r3, #8
 800288a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288c:	f107 0320 	add.w	r3, r7, #32
 8002890:	4618      	mov	r0, r3
 8002892:	f002 fd93 	bl	80053bc <HAL_RCC_OscConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf14      	ite	ne
 800289c:	2301      	movne	r3, #1
 800289e:	2300      	moveq	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80028a6:	f000 fa4d 	bl	8002d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028aa:	230f      	movs	r3, #15
 80028ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ae:	2302      	movs	r3, #2
 80028b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80028c0:	f107 030c 	add.w	r3, r7, #12
 80028c4:	2103      	movs	r1, #3
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 fff0 	bl	80058ac <HAL_RCC_ClockConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	bf14      	ite	ne
 80028d2:	2301      	movne	r3, #1
 80028d4:	2300      	moveq	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80028dc:	f000 fa32 	bl	8002d44 <Error_Handler>
  }
}
 80028e0:	bf00      	nop
 80028e2:	3750      	adds	r7, #80	; 0x50
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40007000 	.word	0x40007000

080028f0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028f6:	463b      	mov	r3, r7
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
 8002904:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002906:	2301      	movs	r3, #1
 8002908:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800290a:	23c8      	movs	r3, #200	; 0xc8
 800290c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800290e:	2305      	movs	r3, #5
 8002910:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002912:	2302      	movs	r3, #2
 8002914:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002916:	463b      	mov	r3, r7
 8002918:	4618      	mov	r0, r3
 800291a:	f003 f9e7 	bl	8005cec <HAL_RCCEx_PeriphCLKConfig>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 800292e:	f000 fa09 	bl	8002d44 <Error_Handler>
  }
}
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002940:	4b15      	ldr	r3, [pc, #84]	; (8002998 <_ZL12MX_I2C1_Initv+0x5c>)
 8002942:	4a16      	ldr	r2, [pc, #88]	; (800299c <_ZL12MX_I2C1_Initv+0x60>)
 8002944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <_ZL12MX_I2C1_Initv+0x5c>)
 8002948:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <_ZL12MX_I2C1_Initv+0x64>)
 800294a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <_ZL12MX_I2C1_Initv+0x5c>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <_ZL12MX_I2C1_Initv+0x5c>)
 8002954:	2200      	movs	r2, #0
 8002956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <_ZL12MX_I2C1_Initv+0x5c>)
 800295a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800295e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002960:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <_ZL12MX_I2C1_Initv+0x5c>)
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <_ZL12MX_I2C1_Initv+0x5c>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <_ZL12MX_I2C1_Initv+0x5c>)
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <_ZL12MX_I2C1_Initv+0x5c>)
 8002974:	2200      	movs	r2, #0
 8002976:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002978:	4807      	ldr	r0, [pc, #28]	; (8002998 <_ZL12MX_I2C1_Initv+0x5c>)
 800297a:	f001 f8e9 	bl	8003b50 <HAL_I2C_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800298e:	f000 f9d9 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000090 	.word	0x20000090
 800299c:	40005400 	.word	0x40005400
 80029a0:	000186a0 	.word	0x000186a0

080029a4 <_ZL12MX_I2C3_Initv>:

static void MX_I2C3_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80029a8:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <_ZL12MX_I2C3_Initv+0x5c>)
 80029aa:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <_ZL12MX_I2C3_Initv+0x60>)
 80029ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <_ZL12MX_I2C3_Initv+0x5c>)
 80029b0:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <_ZL12MX_I2C3_Initv+0x64>)
 80029b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <_ZL12MX_I2C3_Initv+0x5c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <_ZL12MX_I2C3_Initv+0x5c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <_ZL12MX_I2C3_Initv+0x5c>)
 80029c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029c6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <_ZL12MX_I2C3_Initv+0x5c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <_ZL12MX_I2C3_Initv+0x5c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <_ZL12MX_I2C3_Initv+0x5c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <_ZL12MX_I2C3_Initv+0x5c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80029e0:	4807      	ldr	r0, [pc, #28]	; (8002a00 <_ZL12MX_I2C3_Initv+0x5c>)
 80029e2:	f001 f8b5 	bl	8003b50 <HAL_I2C_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 80029f6:	f000 f9a5 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200000e4 	.word	0x200000e4
 8002a04:	40005c00 	.word	0x40005c00
 8002a08:	000186a0 	.word	0x000186a0

08002a0c <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <_ZL12MX_I2S2_Initv+0x5c>)
 8002a12:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <_ZL12MX_I2S2_Initv+0x60>)
 8002a14:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <_ZL12MX_I2S2_Initv+0x5c>)
 8002a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <_ZL12MX_I2S2_Initv+0x5c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <_ZL12MX_I2S2_Initv+0x5c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <_ZL12MX_I2S2_Initv+0x5c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <_ZL12MX_I2S2_Initv+0x5c>)
 8002a32:	4a0f      	ldr	r2, [pc, #60]	; (8002a70 <_ZL12MX_I2S2_Initv+0x64>)
 8002a34:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <_ZL12MX_I2S2_Initv+0x5c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <_ZL12MX_I2S2_Initv+0x5c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <_ZL12MX_I2S2_Initv+0x5c>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002a48:	4807      	ldr	r0, [pc, #28]	; (8002a68 <_ZL12MX_I2S2_Initv+0x5c>)
 8002a4a:	f002 f817 	bl	8004a7c <HAL_I2S_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <_ZL12MX_I2S2_Initv+0x56>
  {
    Error_Handler();
 8002a5e:	f000 f971 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000138 	.word	0x20000138
 8002a6c:	40003800 	.word	0x40003800
 8002a70:	00017700 	.word	0x00017700

08002a74 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002a7a:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <_ZL12MX_I2S3_Initv+0x60>)
 8002a7c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a84:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002a8c:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002a92:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a98:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002a9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <_ZL12MX_I2S3_Initv+0x64>)
 8002a9e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002ab2:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <_ZL12MX_I2S3_Initv+0x5c>)
 8002ab4:	f001 ffe2 	bl	8004a7c <HAL_I2S_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8002ac8:	f000 f93c 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000180 	.word	0x20000180
 8002ad4:	40003c00 	.word	0x40003c00
 8002ad8:	00017700 	.word	0x00017700

08002adc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <_ZL12MX_SPI1_Initv+0x68>)
 8002ae2:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <_ZL12MX_SPI1_Initv+0x6c>)
 8002ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <_ZL12MX_SPI1_Initv+0x68>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <_ZL12MX_SPI1_Initv+0x68>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <_ZL12MX_SPI1_Initv+0x68>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <_ZL12MX_SPI1_Initv+0x68>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <_ZL12MX_SPI1_Initv+0x68>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b04:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <_ZL12MX_SPI1_Initv+0x68>)
 8002b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <_ZL12MX_SPI1_Initv+0x68>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <_ZL12MX_SPI1_Initv+0x68>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <_ZL12MX_SPI1_Initv+0x68>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <_ZL12MX_SPI1_Initv+0x68>)
 8002b20:	220a      	movs	r2, #10
 8002b22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b24:	4807      	ldr	r0, [pc, #28]	; (8002b44 <_ZL12MX_SPI1_Initv+0x68>)
 8002b26:	f003 fa31 	bl	8005f8c <HAL_SPI_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	bf14      	ite	ne
 8002b30:	2301      	movne	r3, #1
 8002b32:	2300      	moveq	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <_ZL12MX_SPI1_Initv+0x62>
  {
    Error_Handler();
 8002b3a:	f000 f903 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200001c8 	.word	0x200001c8
 8002b48:	40013000 	.word	0x40013000

08002b4c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b52:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b72:	220c      	movs	r2, #12
 8002b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b82:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002b84:	f003 fa8b 	bl	800609e <HAL_UART_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002b98:	f000 f8d4 	bl	8002d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000220 	.word	0x20000220
 8002ba4:	40004400 	.word	0x40004400

08002ba8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	; 0x30
 8002bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bae:	f107 031c 	add.w	r3, r7, #28
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
 8002bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a5a      	ldr	r2, [pc, #360]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002bc8:	f043 0310 	orr.w	r3, r3, #16
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a53      	ldr	r2, [pc, #332]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b51      	ldr	r3, [pc, #324]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	4b4d      	ldr	r3, [pc, #308]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a4c      	ldr	r2, [pc, #304]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b4a      	ldr	r3, [pc, #296]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a45      	ldr	r2, [pc, #276]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	4b3f      	ldr	r3, [pc, #252]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a3e      	ldr	r2, [pc, #248]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b3c      	ldr	r3, [pc, #240]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a37      	ldr	r2, [pc, #220]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002c54:	f043 0308 	orr.w	r3, r3, #8
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <_ZL12MX_GPIO_Initv+0x188>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002c66:	2200      	movs	r2, #0
 8002c68:	2108      	movs	r1, #8
 8002c6a:	4832      	ldr	r0, [pc, #200]	; (8002d34 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c6c:	f000 ff56 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002c70:	2201      	movs	r2, #1
 8002c72:	2101      	movs	r1, #1
 8002c74:	4830      	ldr	r0, [pc, #192]	; (8002d38 <_ZL12MX_GPIO_Initv+0x190>)
 8002c76:	f000 ff51 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002c80:	482e      	ldr	r0, [pc, #184]	; (8002d3c <_ZL12MX_GPIO_Initv+0x194>)
 8002c82:	f000 ff4b 	bl	8003b1c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8002c86:	2304      	movs	r3, #4
 8002c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8002c92:	f107 031c 	add.w	r3, r7, #28
 8002c96:	4619      	mov	r1, r3
 8002c98:	4826      	ldr	r0, [pc, #152]	; (8002d34 <_ZL12MX_GPIO_Initv+0x18c>)
 8002c9a:	f000 fdbb 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002cae:	f107 031c 	add.w	r3, r7, #28
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	481f      	ldr	r0, [pc, #124]	; (8002d34 <_ZL12MX_GPIO_Initv+0x18c>)
 8002cb6:	f000 fdad 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8002cba:	2332      	movs	r3, #50	; 0x32
 8002cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002cbe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cc8:	f107 031c 	add.w	r3, r7, #28
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4819      	ldr	r0, [pc, #100]	; (8002d34 <_ZL12MX_GPIO_Initv+0x18c>)
 8002cd0:	f000 fda0 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002ce4:	f107 031c 	add.w	r3, r7, #28
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4813      	ldr	r0, [pc, #76]	; (8002d38 <_ZL12MX_GPIO_Initv+0x190>)
 8002cec:	f000 fd92 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002cf4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfe:	f107 031c 	add.w	r3, r7, #28
 8002d02:	4619      	mov	r1, r3
 8002d04:	480e      	ldr	r0, [pc, #56]	; (8002d40 <_ZL12MX_GPIO_Initv+0x198>)
 8002d06:	f000 fd85 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002d0a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002d0e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d10:	2301      	movs	r3, #1
 8002d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d1c:	f107 031c 	add.w	r3, r7, #28
 8002d20:	4619      	mov	r1, r3
 8002d22:	4806      	ldr	r0, [pc, #24]	; (8002d3c <_ZL12MX_GPIO_Initv+0x194>)
 8002d24:	f000 fd76 	bl	8003814 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d28:	bf00      	nop
 8002d2a:	3730      	adds	r7, #48	; 0x30
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40020800 	.word	0x40020800
 8002d3c:	40020c00 	.word	0x40020c00
 8002d40:	40020000 	.word	0x40020000

08002d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d48:	b672      	cpsid	i
}
 8002d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <Error_Handler+0x8>
	...

08002d50 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d102      	bne.n	8002d70 <_Z41__static_initialization_and_destruction_0ii+0x20>
Adafruit_ICM20948 icm;
 8002d6a:	4809      	ldr	r0, [pc, #36]	; (8002d90 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002d6c:	f7fe fa46 	bl	80011fc <_ZN17Adafruit_ICM20948C1Ev>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d107      	bne.n	8002d86 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d102      	bne.n	8002d86 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002d80:	4803      	ldr	r0, [pc, #12]	; (8002d90 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002d82:	f7ff fc25 	bl	80025d0 <_ZN17Adafruit_ICM20948D1Ev>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000264 	.word	0x20000264

08002d94 <_GLOBAL__sub_I_hi2c1>:
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7ff ffd7 	bl	8002d50 <_Z41__static_initialization_and_destruction_0ii>
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_GLOBAL__sub_D_hi2c1>:
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7ff ffcf 	bl	8002d50 <_Z41__static_initialization_and_destruction_0ii>
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_MspInit+0x4c>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4a0f      	ldr	r2, [pc, #60]	; (8002e00 <HAL_MspInit+0x4c>)
 8002dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <HAL_MspInit+0x4c>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_MspInit+0x4c>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <HAL_MspInit+0x4c>)
 8002de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_MspInit+0x4c>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002df2:	2007      	movs	r0, #7
 8002df4:	f000 fc3a 	bl	800366c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800

08002e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	; 0x30
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 031c 	add.w	r3, r7, #28
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a42      	ldr	r2, [pc, #264]	; (8002f2c <HAL_I2C_MspInit+0x128>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d12d      	bne.n	8002e82 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a40      	ldr	r2, [pc, #256]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b3e      	ldr	r3, [pc, #248]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002e42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e48:	2312      	movs	r3, #18
 8002e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e50:	2300      	movs	r3, #0
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e54:	2304      	movs	r3, #4
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4835      	ldr	r0, [pc, #212]	; (8002f34 <HAL_I2C_MspInit+0x130>)
 8002e60:	f000 fcd8 	bl	8003814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	4a30      	ldr	r2, [pc, #192]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002e6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e72:	6413      	str	r3, [r2, #64]	; 0x40
 8002e74:	4b2e      	ldr	r3, [pc, #184]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e80:	e050      	b.n	8002f24 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2c      	ldr	r2, [pc, #176]	; (8002f38 <HAL_I2C_MspInit+0x134>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d14b      	bne.n	8002f24 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	4a26      	ldr	r2, [pc, #152]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9c:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	4a1f      	ldr	r2, [pc, #124]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eca:	2312      	movs	r3, #18
 8002ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eda:	f107 031c 	add.w	r3, r7, #28
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4816      	ldr	r0, [pc, #88]	; (8002f3c <HAL_I2C_MspInit+0x138>)
 8002ee2:	f000 fc97 	bl	8003814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eec:	2312      	movs	r3, #18
 8002eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ef8:	2304      	movs	r3, #4
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efc:	f107 031c 	add.w	r3, r7, #28
 8002f00:	4619      	mov	r1, r3
 8002f02:	480f      	ldr	r0, [pc, #60]	; (8002f40 <HAL_I2C_MspInit+0x13c>)
 8002f04:	f000 fc86 	bl	8003814 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	4a07      	ldr	r2, [pc, #28]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002f12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f16:	6413      	str	r3, [r2, #64]	; 0x40
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_I2C_MspInit+0x12c>)
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68bb      	ldr	r3, [r7, #8]
}
 8002f24:	bf00      	nop
 8002f26:	3730      	adds	r7, #48	; 0x30
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40005400 	.word	0x40005400
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020400 	.word	0x40020400
 8002f38:	40005c00 	.word	0x40005c00
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020000 	.word	0x40020000

08002f44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08e      	sub	sp, #56	; 0x38
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a59      	ldr	r2, [pc, #356]	; (80030c8 <HAL_I2S_MspInit+0x184>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d15b      	bne.n	800301e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	623b      	str	r3, [r7, #32]
 8002f6a:	4b58      	ldr	r3, [pc, #352]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a57      	ldr	r2, [pc, #348]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8002f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	4b55      	ldr	r3, [pc, #340]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	4b51      	ldr	r3, [pc, #324]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4a50      	ldr	r2, [pc, #320]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8002f8c:	f043 0304 	orr.w	r3, r3, #4
 8002f90:	6313      	str	r3, [r2, #48]	; 0x30
 8002f92:	4b4e      	ldr	r3, [pc, #312]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a49      	ldr	r2, [pc, #292]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fba:	2304      	movs	r3, #4
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8002fca:	2306      	movs	r3, #6
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	483e      	ldr	r0, [pc, #248]	; (80030d0 <HAL_I2S_MspInit+0x18c>)
 8002fd6:	f000 fc1d 	bl	8003814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002fda:	2308      	movs	r3, #8
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fea:	2305      	movs	r3, #5
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4836      	ldr	r0, [pc, #216]	; (80030d0 <HAL_I2S_MspInit+0x18c>)
 8002ff6:	f000 fc0d 	bl	8003814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8002ffa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003008:	2300      	movs	r3, #0
 800300a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800300c:	2305      	movs	r3, #5
 800300e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003014:	4619      	mov	r1, r3
 8003016:	482f      	ldr	r0, [pc, #188]	; (80030d4 <HAL_I2S_MspInit+0x190>)
 8003018:	f000 fbfc 	bl	8003814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800301c:	e04f      	b.n	80030be <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2d      	ldr	r2, [pc, #180]	; (80030d8 <HAL_I2S_MspInit+0x194>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d14a      	bne.n	80030be <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_I2S_MspInit+0x188>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	4a26      	ldr	r2, [pc, #152]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8003032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003036:	6413      	str	r3, [r2, #64]	; 0x40
 8003038:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_I2S_MspInit+0x188>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_I2S_MspInit+0x188>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	4a1f      	ldr	r2, [pc, #124]	; (80030cc <HAL_I2S_MspInit+0x188>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6313      	str	r3, [r2, #48]	; 0x30
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	4a18      	ldr	r2, [pc, #96]	; (80030cc <HAL_I2S_MspInit+0x188>)
 800306a:	f043 0304 	orr.w	r3, r3, #4
 800306e:	6313      	str	r3, [r2, #48]	; 0x30
 8003070:	4b16      	ldr	r3, [pc, #88]	; (80030cc <HAL_I2S_MspInit+0x188>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800307c:	2310      	movs	r3, #16
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003088:	2300      	movs	r3, #0
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800308c:	2306      	movs	r3, #6
 800308e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003094:	4619      	mov	r1, r3
 8003096:	4811      	ldr	r0, [pc, #68]	; (80030dc <HAL_I2S_MspInit+0x198>)
 8003098:	f000 fbbc 	bl	8003814 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800309c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030ae:	2306      	movs	r3, #6
 80030b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b6:	4619      	mov	r1, r3
 80030b8:	4805      	ldr	r0, [pc, #20]	; (80030d0 <HAL_I2S_MspInit+0x18c>)
 80030ba:	f000 fbab 	bl	8003814 <HAL_GPIO_Init>
}
 80030be:	bf00      	nop
 80030c0:	3738      	adds	r7, #56	; 0x38
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40003800 	.word	0x40003800
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40020800 	.word	0x40020800
 80030d4:	40020400 	.word	0x40020400
 80030d8:	40003c00 	.word	0x40003c00
 80030dc:	40020000 	.word	0x40020000

080030e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a19      	ldr	r2, [pc, #100]	; (8003164 <HAL_SPI_MspInit+0x84>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d12b      	bne.n	800315a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_SPI_MspInit+0x88>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	4a17      	ldr	r2, [pc, #92]	; (8003168 <HAL_SPI_MspInit+0x88>)
 800310c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003110:	6453      	str	r3, [r2, #68]	; 0x44
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_SPI_MspInit+0x88>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_SPI_MspInit+0x88>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <HAL_SPI_MspInit+0x88>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_SPI_MspInit+0x88>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800313a:	23e0      	movs	r3, #224	; 0xe0
 800313c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313e:	2302      	movs	r3, #2
 8003140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003146:	2303      	movs	r3, #3
 8003148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800314a:	2305      	movs	r3, #5
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	4619      	mov	r1, r3
 8003154:	4805      	ldr	r0, [pc, #20]	; (800316c <HAL_SPI_MspInit+0x8c>)
 8003156:	f000 fb5d 	bl	8003814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800315a:	bf00      	nop
 800315c:	3728      	adds	r7, #40	; 0x28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40013000 	.word	0x40013000
 8003168:	40023800 	.word	0x40023800
 800316c:	40020000 	.word	0x40020000

08003170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <HAL_UART_MspInit+0x94>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d133      	bne.n	80031fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <HAL_UART_MspInit+0x98>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <HAL_UART_MspInit+0x98>)
 800319c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_UART_MspInit+0x98>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <HAL_UART_MspInit+0x98>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a14      	ldr	r2, [pc, #80]	; (8003208 <HAL_UART_MspInit+0x98>)
 80031b8:	f043 0308 	orr.w	r3, r3, #8
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_UART_MspInit+0x98>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80031ca:	2360      	movs	r3, #96	; 0x60
 80031cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d6:	2303      	movs	r3, #3
 80031d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031da:	2307      	movs	r3, #7
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031de:	f107 0314 	add.w	r3, r7, #20
 80031e2:	4619      	mov	r1, r3
 80031e4:	4809      	ldr	r0, [pc, #36]	; (800320c <HAL_UART_MspInit+0x9c>)
 80031e6:	f000 fb15 	bl	8003814 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	2026      	movs	r0, #38	; 0x26
 80031f0:	f000 fa47 	bl	8003682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031f4:	2026      	movs	r0, #38	; 0x26
 80031f6:	f000 fa60 	bl	80036ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031fa:	bf00      	nop
 80031fc:	3728      	adds	r7, #40	; 0x28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40004400 	.word	0x40004400
 8003208:	40023800 	.word	0x40023800
 800320c:	40020c00 	.word	0x40020c00

08003210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003214:	e7fe      	b.n	8003214 <NMI_Handler+0x4>

08003216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800321a:	e7fe      	b.n	800321a <HardFault_Handler+0x4>

0800321c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003220:	e7fe      	b.n	8003220 <MemManage_Handler+0x4>

08003222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003226:	e7fe      	b.n	8003226 <BusFault_Handler+0x4>

08003228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800322c:	e7fe      	b.n	800322c <UsageFault_Handler+0x4>

0800322e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800325c:	f000 f8f2 	bl	8003444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}

08003264 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003268:	4802      	ldr	r0, [pc, #8]	; (8003274 <USART2_IRQHandler+0x10>)
 800326a:	f002 ff65 	bl	8006138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000220 	.word	0x20000220

08003278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return 1;
 800327c:	2301      	movs	r3, #1
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <_kill>:

int _kill(int pid, int sig)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003292:	f003 fe51 	bl	8006f38 <__errno>
 8003296:	4603      	mov	r3, r0
 8003298:	2216      	movs	r2, #22
 800329a:	601a      	str	r2, [r3, #0]
  return -1;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <_exit>:

void _exit (int status)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032b0:	f04f 31ff 	mov.w	r1, #4294967295
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ffe7 	bl	8003288 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032ba:	e7fe      	b.n	80032ba <_exit+0x12>

080032bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <_sbrk+0x5c>)
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <_sbrk+0x60>)
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <_sbrk+0x64>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <_sbrk+0x64>)
 80032da:	4a12      	ldr	r2, [pc, #72]	; (8003324 <_sbrk+0x68>)
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <_sbrk+0x64>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d207      	bcs.n	80032fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032ec:	f003 fe24 	bl	8006f38 <__errno>
 80032f0:	4603      	mov	r3, r0
 80032f2:	220c      	movs	r2, #12
 80032f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	e009      	b.n	8003310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <_sbrk+0x64>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <_sbrk+0x64>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	4a05      	ldr	r2, [pc, #20]	; (8003320 <_sbrk+0x64>)
 800330c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800330e:	68fb      	ldr	r3, [r7, #12]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20020000 	.word	0x20020000
 800331c:	00000400 	.word	0x00000400
 8003320:	200002c4 	.word	0x200002c4
 8003324:	200002e0 	.word	0x200002e0

08003328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <SystemInit+0x20>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	4a05      	ldr	r2, [pc, #20]	; (8003348 <SystemInit+0x20>)
 8003334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800334c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003384 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003350:	480d      	ldr	r0, [pc, #52]	; (8003388 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003352:	490e      	ldr	r1, [pc, #56]	; (800338c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003354:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003358:	e002      	b.n	8003360 <LoopCopyDataInit>

0800335a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800335a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800335c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800335e:	3304      	adds	r3, #4

08003360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003364:	d3f9      	bcc.n	800335a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003366:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003368:	4c0b      	ldr	r4, [pc, #44]	; (8003398 <LoopFillZerobss+0x26>)
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800336c:	e001      	b.n	8003372 <LoopFillZerobss>

0800336e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800336e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003370:	3204      	adds	r2, #4

08003372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003374:	d3fb      	bcc.n	800336e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003376:	f7ff ffd7 	bl	8003328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800337a:	f003 fde3 	bl	8006f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800337e:	f7ff f939 	bl	80025f4 <main>
  bx  lr    
 8003382:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800338c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003390:	08007334 	.word	0x08007334
  ldr r2, =_sbss
 8003394:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003398:	200002e0 	.word	0x200002e0

0800339c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800339c:	e7fe      	b.n	800339c <ADC_IRQHandler>
	...

080033a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_Init+0x40>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0d      	ldr	r2, [pc, #52]	; (80033e0 <HAL_Init+0x40>)
 80033aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_Init+0x40>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <HAL_Init+0x40>)
 80033b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_Init+0x40>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a07      	ldr	r2, [pc, #28]	; (80033e0 <HAL_Init+0x40>)
 80033c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c8:	2003      	movs	r0, #3
 80033ca:	f000 f94f 	bl	800366c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ce:	2000      	movs	r0, #0
 80033d0:	f000 f808 	bl	80033e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033d4:	f7ff fcee 	bl	8002db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023c00 	.word	0x40023c00

080033e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_InitTick+0x54>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <HAL_InitTick+0x58>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	4619      	mov	r1, r3
 80033f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f967 	bl	80036d6 <HAL_SYSTICK_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e00e      	b.n	8003430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b0f      	cmp	r3, #15
 8003416:	d80a      	bhi.n	800342e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003418:	2200      	movs	r2, #0
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	f04f 30ff 	mov.w	r0, #4294967295
 8003420:	f000 f92f 	bl	8003682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003424:	4a06      	ldr	r2, [pc, #24]	; (8003440 <HAL_InitTick+0x5c>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000000 	.word	0x20000000
 800343c:	20000008 	.word	0x20000008
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_IncTick+0x20>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_IncTick+0x24>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4413      	add	r3, r2
 8003454:	4a04      	ldr	r2, [pc, #16]	; (8003468 <HAL_IncTick+0x24>)
 8003456:	6013      	str	r3, [r2, #0]
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000008 	.word	0x20000008
 8003468:	200002c8 	.word	0x200002c8

0800346c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return uwTick;
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <HAL_GetTick+0x14>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	200002c8 	.word	0x200002c8

08003484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff ffee 	bl	800346c <HAL_GetTick>
 8003490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d005      	beq.n	80034aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_Delay+0x44>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034aa:	bf00      	nop
 80034ac:	f7ff ffde 	bl	800346c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d8f7      	bhi.n	80034ac <HAL_Delay+0x28>
  {
  }
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000008 	.word	0x20000008

080034cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <__NVIC_SetPriorityGrouping+0x44>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034e8:	4013      	ands	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034fe:	4a04      	ldr	r2, [pc, #16]	; (8003510 <__NVIC_SetPriorityGrouping+0x44>)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	60d3      	str	r3, [r2, #12]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <__NVIC_GetPriorityGrouping+0x18>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	0a1b      	lsrs	r3, r3, #8
 800351e:	f003 0307 	and.w	r3, r3, #7
}
 8003522:	4618      	mov	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	2b00      	cmp	r3, #0
 8003540:	db0b      	blt.n	800355a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	f003 021f 	and.w	r2, r3, #31
 8003548:	4907      	ldr	r1, [pc, #28]	; (8003568 <__NVIC_EnableIRQ+0x38>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2001      	movs	r0, #1
 8003552:	fa00 f202 	lsl.w	r2, r0, r2
 8003556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	e000e100 	.word	0xe000e100

0800356c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	6039      	str	r1, [r7, #0]
 8003576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	2b00      	cmp	r3, #0
 800357e:	db0a      	blt.n	8003596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	490c      	ldr	r1, [pc, #48]	; (80035b8 <__NVIC_SetPriority+0x4c>)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	0112      	lsls	r2, r2, #4
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	440b      	add	r3, r1
 8003590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003594:	e00a      	b.n	80035ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	4908      	ldr	r1, [pc, #32]	; (80035bc <__NVIC_SetPriority+0x50>)
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	3b04      	subs	r3, #4
 80035a4:	0112      	lsls	r2, r2, #4
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	440b      	add	r3, r1
 80035aa:	761a      	strb	r2, [r3, #24]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	e000e100 	.word	0xe000e100
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b089      	sub	sp, #36	; 0x24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f1c3 0307 	rsb	r3, r3, #7
 80035da:	2b04      	cmp	r3, #4
 80035dc:	bf28      	it	cs
 80035de:	2304      	movcs	r3, #4
 80035e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3304      	adds	r3, #4
 80035e6:	2b06      	cmp	r3, #6
 80035e8:	d902      	bls.n	80035f0 <NVIC_EncodePriority+0x30>
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3b03      	subs	r3, #3
 80035ee:	e000      	b.n	80035f2 <NVIC_EncodePriority+0x32>
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	f04f 32ff 	mov.w	r2, #4294967295
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43da      	mvns	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	401a      	ands	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003608:	f04f 31ff 	mov.w	r1, #4294967295
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	43d9      	mvns	r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003618:	4313      	orrs	r3, r2
         );
}
 800361a:	4618      	mov	r0, r3
 800361c:	3724      	adds	r7, #36	; 0x24
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003638:	d301      	bcc.n	800363e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800363a:	2301      	movs	r3, #1
 800363c:	e00f      	b.n	800365e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <SysTick_Config+0x40>)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3b01      	subs	r3, #1
 8003644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003646:	210f      	movs	r1, #15
 8003648:	f04f 30ff 	mov.w	r0, #4294967295
 800364c:	f7ff ff8e 	bl	800356c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <SysTick_Config+0x40>)
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003656:	4b04      	ldr	r3, [pc, #16]	; (8003668 <SysTick_Config+0x40>)
 8003658:	2207      	movs	r2, #7
 800365a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	e000e010 	.word	0xe000e010

0800366c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ff29 	bl	80034cc <__NVIC_SetPriorityGrouping>
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003682:	b580      	push	{r7, lr}
 8003684:	b086      	sub	sp, #24
 8003686:	af00      	add	r7, sp, #0
 8003688:	4603      	mov	r3, r0
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003694:	f7ff ff3e 	bl	8003514 <__NVIC_GetPriorityGrouping>
 8003698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	6978      	ldr	r0, [r7, #20]
 80036a0:	f7ff ff8e 	bl	80035c0 <NVIC_EncodePriority>
 80036a4:	4602      	mov	r2, r0
 80036a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036aa:	4611      	mov	r1, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ff5d 	bl	800356c <__NVIC_SetPriority>
}
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ff31 	bl	8003530 <__NVIC_EnableIRQ>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ffa2 	bl	8003628 <SysTick_Config>
 80036e4:	4603      	mov	r3, r0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036fc:	f7ff feb6 	bl	800346c <HAL_GetTick>
 8003700:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d008      	beq.n	8003720 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e052      	b.n	80037c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0216 	bic.w	r2, r2, #22
 800372e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800373e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d103      	bne.n	8003750 <HAL_DMA_Abort+0x62>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0208 	bic.w	r2, r2, #8
 800375e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003770:	e013      	b.n	800379a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003772:	f7ff fe7b 	bl	800346c <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b05      	cmp	r3, #5
 800377e:	d90c      	bls.n	800379a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2203      	movs	r2, #3
 800378a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e015      	b.n	80037c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e4      	bne.n	8003772 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	223f      	movs	r2, #63	; 0x3f
 80037ae:	409a      	lsls	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d004      	beq.n	80037ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e00c      	b.n	8003806 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2205      	movs	r2, #5
 80037f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003814:	b480      	push	{r7}
 8003816:	b089      	sub	sp, #36	; 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	e159      	b.n	8003ae4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003830:	2201      	movs	r2, #1
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4013      	ands	r3, r2
 8003842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	429a      	cmp	r2, r3
 800384a:	f040 8148 	bne.w	8003ade <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d005      	beq.n	8003866 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003862:	2b02      	cmp	r3, #2
 8003864:	d130      	bne.n	80038c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	2203      	movs	r2, #3
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800389c:	2201      	movs	r2, #1
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 0201 	and.w	r2, r3, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d017      	beq.n	8003904 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	2203      	movs	r2, #3
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d123      	bne.n	8003958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	08da      	lsrs	r2, r3, #3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3208      	adds	r2, #8
 8003918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	220f      	movs	r2, #15
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	08da      	lsrs	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3208      	adds	r2, #8
 8003952:	69b9      	ldr	r1, [r7, #24]
 8003954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	2203      	movs	r2, #3
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 0203 	and.w	r2, r3, #3
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a2 	beq.w	8003ade <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	4b57      	ldr	r3, [pc, #348]	; (8003afc <HAL_GPIO_Init+0x2e8>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	4a56      	ldr	r2, [pc, #344]	; (8003afc <HAL_GPIO_Init+0x2e8>)
 80039a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039a8:	6453      	str	r3, [r2, #68]	; 0x44
 80039aa:	4b54      	ldr	r3, [pc, #336]	; (8003afc <HAL_GPIO_Init+0x2e8>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039b6:	4a52      	ldr	r2, [pc, #328]	; (8003b00 <HAL_GPIO_Init+0x2ec>)
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	089b      	lsrs	r3, r3, #2
 80039bc:	3302      	adds	r3, #2
 80039be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	220f      	movs	r2, #15
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4013      	ands	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a49      	ldr	r2, [pc, #292]	; (8003b04 <HAL_GPIO_Init+0x2f0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d019      	beq.n	8003a16 <HAL_GPIO_Init+0x202>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a48      	ldr	r2, [pc, #288]	; (8003b08 <HAL_GPIO_Init+0x2f4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_GPIO_Init+0x1fe>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a47      	ldr	r2, [pc, #284]	; (8003b0c <HAL_GPIO_Init+0x2f8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00d      	beq.n	8003a0e <HAL_GPIO_Init+0x1fa>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a46      	ldr	r2, [pc, #280]	; (8003b10 <HAL_GPIO_Init+0x2fc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <HAL_GPIO_Init+0x1f6>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a45      	ldr	r2, [pc, #276]	; (8003b14 <HAL_GPIO_Init+0x300>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <HAL_GPIO_Init+0x1f2>
 8003a02:	2304      	movs	r3, #4
 8003a04:	e008      	b.n	8003a18 <HAL_GPIO_Init+0x204>
 8003a06:	2307      	movs	r3, #7
 8003a08:	e006      	b.n	8003a18 <HAL_GPIO_Init+0x204>
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e004      	b.n	8003a18 <HAL_GPIO_Init+0x204>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e002      	b.n	8003a18 <HAL_GPIO_Init+0x204>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <HAL_GPIO_Init+0x204>
 8003a16:	2300      	movs	r3, #0
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	f002 0203 	and.w	r2, r2, #3
 8003a1e:	0092      	lsls	r2, r2, #2
 8003a20:	4093      	lsls	r3, r2
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a28:	4935      	ldr	r1, [pc, #212]	; (8003b00 <HAL_GPIO_Init+0x2ec>)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	3302      	adds	r3, #2
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a36:	4b38      	ldr	r3, [pc, #224]	; (8003b18 <HAL_GPIO_Init+0x304>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4013      	ands	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a5a:	4a2f      	ldr	r2, [pc, #188]	; (8003b18 <HAL_GPIO_Init+0x304>)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a60:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <HAL_GPIO_Init+0x304>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a84:	4a24      	ldr	r2, [pc, #144]	; (8003b18 <HAL_GPIO_Init+0x304>)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a8a:	4b23      	ldr	r3, [pc, #140]	; (8003b18 <HAL_GPIO_Init+0x304>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	43db      	mvns	r3, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4013      	ands	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aae:	4a1a      	ldr	r2, [pc, #104]	; (8003b18 <HAL_GPIO_Init+0x304>)
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ab4:	4b18      	ldr	r3, [pc, #96]	; (8003b18 <HAL_GPIO_Init+0x304>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ad8:	4a0f      	ldr	r2, [pc, #60]	; (8003b18 <HAL_GPIO_Init+0x304>)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	2b0f      	cmp	r3, #15
 8003ae8:	f67f aea2 	bls.w	8003830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
 8003af0:	3724      	adds	r7, #36	; 0x24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40013800 	.word	0x40013800
 8003b04:	40020000 	.word	0x40020000
 8003b08:	40020400 	.word	0x40020400
 8003b0c:	40020800 	.word	0x40020800
 8003b10:	40020c00 	.word	0x40020c00
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40013c00 	.word	0x40013c00

08003b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b2c:	787b      	ldrb	r3, [r7, #1]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b38:	e003      	b.n	8003b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	041a      	lsls	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	619a      	str	r2, [r3, #24]
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e12b      	b.n	8003dba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff f944 	bl	8002e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ba2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f002 f872 	bl	8005c9c <HAL_RCC_GetPCLK1Freq>
 8003bb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4a81      	ldr	r2, [pc, #516]	; (8003dc4 <HAL_I2C_Init+0x274>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d807      	bhi.n	8003bd4 <HAL_I2C_Init+0x84>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a80      	ldr	r2, [pc, #512]	; (8003dc8 <HAL_I2C_Init+0x278>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bf94      	ite	ls
 8003bcc:	2301      	movls	r3, #1
 8003bce:	2300      	movhi	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e006      	b.n	8003be2 <HAL_I2C_Init+0x92>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4a7d      	ldr	r2, [pc, #500]	; (8003dcc <HAL_I2C_Init+0x27c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	bf94      	ite	ls
 8003bdc:	2301      	movls	r3, #1
 8003bde:	2300      	movhi	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0e7      	b.n	8003dba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a78      	ldr	r2, [pc, #480]	; (8003dd0 <HAL_I2C_Init+0x280>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0c9b      	lsrs	r3, r3, #18
 8003bf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a6a      	ldr	r2, [pc, #424]	; (8003dc4 <HAL_I2C_Init+0x274>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d802      	bhi.n	8003c24 <HAL_I2C_Init+0xd4>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3301      	adds	r3, #1
 8003c22:	e009      	b.n	8003c38 <HAL_I2C_Init+0xe8>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	4a69      	ldr	r2, [pc, #420]	; (8003dd4 <HAL_I2C_Init+0x284>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	3301      	adds	r3, #1
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	495c      	ldr	r1, [pc, #368]	; (8003dc4 <HAL_I2C_Init+0x274>)
 8003c54:	428b      	cmp	r3, r1
 8003c56:	d819      	bhi.n	8003c8c <HAL_I2C_Init+0x13c>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e59      	subs	r1, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c66:	1c59      	adds	r1, r3, #1
 8003c68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c6c:	400b      	ands	r3, r1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_I2C_Init+0x138>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1e59      	subs	r1, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c86:	e051      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	e04f      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d111      	bne.n	8003cb8 <HAL_I2C_Init+0x168>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e58      	subs	r0, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	440b      	add	r3, r1
 8003ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e012      	b.n	8003cde <HAL_I2C_Init+0x18e>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1e58      	subs	r0, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	0099      	lsls	r1, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_I2C_Init+0x196>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e022      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10e      	bne.n	8003d0c <HAL_I2C_Init+0x1bc>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1e58      	subs	r0, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	440b      	add	r3, r1
 8003cfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0a:	e00f      	b.n	8003d2c <HAL_I2C_Init+0x1dc>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1e58      	subs	r0, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	0099      	lsls	r1, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d22:	3301      	adds	r3, #1
 8003d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	6809      	ldr	r1, [r1, #0]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6911      	ldr	r1, [r2, #16]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68d2      	ldr	r2, [r2, #12]
 8003d66:	4311      	orrs	r1, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0201 	orr.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	000186a0 	.word	0x000186a0
 8003dc8:	001e847f 	.word	0x001e847f
 8003dcc:	003d08ff 	.word	0x003d08ff
 8003dd0:	431bde83 	.word	0x431bde83
 8003dd4:	10624dd3 	.word	0x10624dd3

08003dd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	461a      	mov	r2, r3
 8003de4:	460b      	mov	r3, r1
 8003de6:	817b      	strh	r3, [r7, #10]
 8003de8:	4613      	mov	r3, r2
 8003dea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7ff fb3e 	bl	800346c <HAL_GetTick>
 8003df0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	f040 80e0 	bne.w	8003fc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	2319      	movs	r3, #25
 8003e06:	2201      	movs	r2, #1
 8003e08:	4970      	ldr	r1, [pc, #448]	; (8003fcc <HAL_I2C_Master_Transmit+0x1f4>)
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fc58 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
 8003e18:	e0d3      	b.n	8003fc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_I2C_Master_Transmit+0x50>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e0cc      	b.n	8003fc2 <HAL_I2C_Master_Transmit+0x1ea>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d007      	beq.n	8003e4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0201 	orr.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2221      	movs	r2, #33	; 0x21
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	893a      	ldrh	r2, [r7, #8]
 8003e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a50      	ldr	r2, [pc, #320]	; (8003fd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e90:	8979      	ldrh	r1, [r7, #10]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fac2 	bl	8004420 <I2C_MasterRequestWrite>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e08d      	b.n	8003fc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ebc:	e066      	b.n	8003f8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	6a39      	ldr	r1, [r7, #32]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fcd2 	bl	800486c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00d      	beq.n	8003eea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d107      	bne.n	8003ee6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e06b      	b.n	8003fc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d11b      	bne.n	8003f60 <HAL_I2C_Master_Transmit+0x188>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d017      	beq.n	8003f60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	6a39      	ldr	r1, [r7, #32]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fcc2 	bl	80048ee <I2C_WaitOnBTFFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00d      	beq.n	8003f8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d107      	bne.n	8003f88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e01a      	b.n	8003fc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d194      	bne.n	8003ebe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e000      	b.n	8003fc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fc0:	2302      	movs	r3, #2
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	00100002 	.word	0x00100002
 8003fd0:	ffff0000 	.word	0xffff0000

08003fd4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08c      	sub	sp, #48	; 0x30
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	817b      	strh	r3, [r7, #10]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fe8:	f7ff fa40 	bl	800346c <HAL_GetTick>
 8003fec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	f040 820b 	bne.w	8004412 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	2319      	movs	r3, #25
 8004002:	2201      	movs	r2, #1
 8004004:	497c      	ldr	r1, [pc, #496]	; (80041f8 <HAL_I2C_Master_Receive+0x224>)
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fb5a 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004012:	2302      	movs	r3, #2
 8004014:	e1fe      	b.n	8004414 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_I2C_Master_Receive+0x50>
 8004020:	2302      	movs	r3, #2
 8004022:	e1f7      	b.n	8004414 <HAL_I2C_Master_Receive+0x440>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b01      	cmp	r3, #1
 8004038:	d007      	beq.n	800404a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0201 	orr.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004058:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2222      	movs	r2, #34	; 0x22
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2210      	movs	r2, #16
 8004066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	893a      	ldrh	r2, [r7, #8]
 800407a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4a5c      	ldr	r2, [pc, #368]	; (80041fc <HAL_I2C_Master_Receive+0x228>)
 800408a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800408c:	8979      	ldrh	r1, [r7, #10]
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 fa46 	bl	8004524 <I2C_MasterRequestRead>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e1b8      	b.n	8004414 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d113      	bne.n	80040d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040aa:	2300      	movs	r3, #0
 80040ac:	623b      	str	r3, [r7, #32]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	623b      	str	r3, [r7, #32]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	e18c      	b.n	80043ec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d11b      	bne.n	8004112 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	e16c      	b.n	80043ec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004116:	2b02      	cmp	r3, #2
 8004118:	d11b      	bne.n	8004152 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004128:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004138:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413a:	2300      	movs	r3, #0
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	e14c      	b.n	80043ec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004160:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004178:	e138      	b.n	80043ec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417e:	2b03      	cmp	r3, #3
 8004180:	f200 80f1 	bhi.w	8004366 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	2b01      	cmp	r3, #1
 800418a:	d123      	bne.n	80041d4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800418c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 fbed 	bl	8004970 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e139      	b.n	8004414 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041d2:	e10b      	b.n	80043ec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d14e      	bne.n	800427a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	2200      	movs	r2, #0
 80041e4:	4906      	ldr	r1, [pc, #24]	; (8004200 <HAL_I2C_Master_Receive+0x22c>)
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fa6a 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e10e      	b.n	8004414 <HAL_I2C_Master_Receive+0x440>
 80041f6:	bf00      	nop
 80041f8:	00100002 	.word	0x00100002
 80041fc:	ffff0000 	.word	0xffff0000
 8004200:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004212:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004278:	e0b8      	b.n	80043ec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	2200      	movs	r2, #0
 8004282:	4966      	ldr	r1, [pc, #408]	; (800441c <HAL_I2C_Master_Receive+0x448>)
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fa1b 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e0bf      	b.n	8004414 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	2200      	movs	r2, #0
 80042de:	494f      	ldr	r1, [pc, #316]	; (800441c <HAL_I2C_Master_Receive+0x448>)
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f9ed 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e091      	b.n	8004414 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004364:	e042      	b.n	80043ec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fb00 	bl	8004970 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e04c      	b.n	8004414 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d118      	bne.n	80043ec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f47f aec2 	bne.w	800417a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	e000      	b.n	8004414 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004412:	2302      	movs	r3, #2
  }
}
 8004414:	4618      	mov	r0, r3
 8004416:	3728      	adds	r7, #40	; 0x28
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	00010004 	.word	0x00010004

08004420 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	460b      	mov	r3, r1
 800442e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d006      	beq.n	800444a <I2C_MasterRequestWrite+0x2a>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d003      	beq.n	800444a <I2C_MasterRequestWrite+0x2a>
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004448:	d108      	bne.n	800445c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e00b      	b.n	8004474 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	2b12      	cmp	r3, #18
 8004462:	d107      	bne.n	8004474 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004472:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f91d 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00d      	beq.n	80044a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449a:	d103      	bne.n	80044a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e035      	b.n	8004514 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b0:	d108      	bne.n	80044c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044b2:	897b      	ldrh	r3, [r7, #10]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	461a      	mov	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044c0:	611a      	str	r2, [r3, #16]
 80044c2:	e01b      	b.n	80044fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044c4:	897b      	ldrh	r3, [r7, #10]
 80044c6:	11db      	asrs	r3, r3, #7
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f003 0306 	and.w	r3, r3, #6
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f063 030f 	orn	r3, r3, #15
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	490e      	ldr	r1, [pc, #56]	; (800451c <I2C_MasterRequestWrite+0xfc>)
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f943 	bl	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e010      	b.n	8004514 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044f2:	897b      	ldrh	r3, [r7, #10]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4907      	ldr	r1, [pc, #28]	; (8004520 <I2C_MasterRequestWrite+0x100>)
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f933 	bl	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	00010008 	.word	0x00010008
 8004520:	00010002 	.word	0x00010002

08004524 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	460b      	mov	r3, r1
 8004532:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004548:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b08      	cmp	r3, #8
 800454e:	d006      	beq.n	800455e <I2C_MasterRequestRead+0x3a>
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d003      	beq.n	800455e <I2C_MasterRequestRead+0x3a>
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800455c:	d108      	bne.n	8004570 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	e00b      	b.n	8004588 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	2b11      	cmp	r3, #17
 8004576:	d107      	bne.n	8004588 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004586:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f893 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00d      	beq.n	80045bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ae:	d103      	bne.n	80045b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e079      	b.n	80046b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045c4:	d108      	bne.n	80045d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045c6:	897b      	ldrh	r3, [r7, #10]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	611a      	str	r2, [r3, #16]
 80045d6:	e05f      	b.n	8004698 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045d8:	897b      	ldrh	r3, [r7, #10]
 80045da:	11db      	asrs	r3, r3, #7
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f003 0306 	and.w	r3, r3, #6
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f063 030f 	orn	r3, r3, #15
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4930      	ldr	r1, [pc, #192]	; (80046b8 <I2C_MasterRequestRead+0x194>)
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f8b9 	bl	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e054      	b.n	80046b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004606:	897b      	ldrh	r3, [r7, #10]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	4929      	ldr	r1, [pc, #164]	; (80046bc <I2C_MasterRequestRead+0x198>)
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f8a9 	bl	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e044      	b.n	80046b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800464a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f831 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004672:	d103      	bne.n	800467c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e017      	b.n	80046b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004680:	897b      	ldrh	r3, [r7, #10]
 8004682:	11db      	asrs	r3, r3, #7
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f003 0306 	and.w	r3, r3, #6
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f063 030e 	orn	r3, r3, #14
 8004690:	b2da      	uxtb	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	4907      	ldr	r1, [pc, #28]	; (80046bc <I2C_MasterRequestRead+0x198>)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f865 	bl	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	00010008 	.word	0x00010008
 80046bc:	00010002 	.word	0x00010002

080046c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d0:	e025      	b.n	800471e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d021      	beq.n	800471e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046da:	f7fe fec7 	bl	800346c <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d116      	bne.n	800471e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f043 0220 	orr.w	r2, r3, #32
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e023      	b.n	8004766 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	0c1b      	lsrs	r3, r3, #16
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d10d      	bne.n	8004744 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	43da      	mvns	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4013      	ands	r3, r2
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf0c      	ite	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	2300      	movne	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	e00c      	b.n	800475e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	43da      	mvns	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4013      	ands	r3, r2
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	bf0c      	ite	eq
 8004756:	2301      	moveq	r3, #1
 8004758:	2300      	movne	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	429a      	cmp	r2, r3
 8004762:	d0b6      	beq.n	80046d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800477c:	e051      	b.n	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478c:	d123      	bne.n	80047d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f043 0204 	orr.w	r2, r3, #4
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e046      	b.n	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d021      	beq.n	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047de:	f7fe fe45 	bl	800346c <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d302      	bcc.n	80047f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d116      	bne.n	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f043 0220 	orr.w	r2, r3, #32
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e020      	b.n	8004864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10c      	bne.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	43da      	mvns	r2, r3
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4013      	ands	r3, r2
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	bf14      	ite	ne
 800483e:	2301      	movne	r3, #1
 8004840:	2300      	moveq	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	e00b      	b.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	43da      	mvns	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4013      	ands	r3, r2
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	bf14      	ite	ne
 8004858:	2301      	movne	r3, #1
 800485a:	2300      	moveq	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d18d      	bne.n	800477e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004878:	e02d      	b.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f8ce 	bl	8004a1c <I2C_IsAcknowledgeFailed>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e02d      	b.n	80048e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d021      	beq.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fe fdeb 	bl	800346c <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d116      	bne.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f043 0220 	orr.w	r2, r3, #32
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e007      	b.n	80048e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d1ca      	bne.n	800487a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048fa:	e02d      	b.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f88d 	bl	8004a1c <I2C_IsAcknowledgeFailed>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e02d      	b.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004912:	d021      	beq.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004914:	f7fe fdaa 	bl	800346c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	429a      	cmp	r2, r3
 8004922:	d302      	bcc.n	800492a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d116      	bne.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e007      	b.n	8004968 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b04      	cmp	r3, #4
 8004964:	d1ca      	bne.n	80048fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800497c:	e042      	b.n	8004a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	2b10      	cmp	r3, #16
 800498a:	d119      	bne.n	80049c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0210 	mvn.w	r2, #16
 8004994:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e029      	b.n	8004a14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c0:	f7fe fd54 	bl	800346c <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d302      	bcc.n	80049d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d116      	bne.n	8004a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e007      	b.n	8004a14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d1b5      	bne.n	800497e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a32:	d11b      	bne.n	8004a6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	f043 0204 	orr.w	r2, r3, #4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e128      	b.n	8004ce0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a90      	ldr	r2, [pc, #576]	; (8004ce8 <HAL_I2S_Init+0x26c>)
 8004aa6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fe fa4b 	bl	8002f44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ac4:	f023 030f 	bic.w	r3, r3, #15
 8004ac8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d060      	beq.n	8004b9c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d102      	bne.n	8004ae8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004ae2:	2310      	movs	r3, #16
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e001      	b.n	8004aec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ae8:	2320      	movs	r3, #32
 8004aea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d802      	bhi.n	8004afa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004afa:	2001      	movs	r0, #1
 8004afc:	f001 f9e6 	bl	8005ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8004b00:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b0a:	d125      	bne.n	8004b58 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d010      	beq.n	8004b36 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	461a      	mov	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	3305      	adds	r3, #5
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	e01f      	b.n	8004b76 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	461a      	mov	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	3305      	adds	r3, #5
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e00e      	b.n	8004b76 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	461a      	mov	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b72:	3305      	adds	r3, #5
 8004b74:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4a5c      	ldr	r2, [pc, #368]	; (8004cec <HAL_I2S_Init+0x270>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	08db      	lsrs	r3, r3, #3
 8004b80:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	021b      	lsls	r3, r3, #8
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	e003      	b.n	8004ba4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d902      	bls.n	8004bb0 <HAL_I2S_Init+0x134>
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2bff      	cmp	r3, #255	; 0xff
 8004bae:	d907      	bls.n	8004bc0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	f043 0210 	orr.w	r2, r3, #16
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e08f      	b.n	8004ce0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	ea42 0103 	orr.w	r1, r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004bde:	f023 030f 	bic.w	r3, r3, #15
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6851      	ldr	r1, [r2, #4]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6892      	ldr	r2, [r2, #8]
 8004bea:	4311      	orrs	r1, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68d2      	ldr	r2, [r2, #12]
 8004bf0:	4311      	orrs	r1, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6992      	ldr	r2, [r2, #24]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c02:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d161      	bne.n	8004cd0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a38      	ldr	r2, [pc, #224]	; (8004cf0 <HAL_I2S_Init+0x274>)
 8004c10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a37      	ldr	r2, [pc, #220]	; (8004cf4 <HAL_I2S_Init+0x278>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d101      	bne.n	8004c20 <HAL_I2S_Init+0x1a4>
 8004c1c:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <HAL_I2S_Init+0x27c>)
 8004c1e:	e001      	b.n	8004c24 <HAL_I2S_Init+0x1a8>
 8004c20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	4932      	ldr	r1, [pc, #200]	; (8004cf4 <HAL_I2S_Init+0x278>)
 8004c2c:	428a      	cmp	r2, r1
 8004c2e:	d101      	bne.n	8004c34 <HAL_I2S_Init+0x1b8>
 8004c30:	4a31      	ldr	r2, [pc, #196]	; (8004cf8 <HAL_I2S_Init+0x27c>)
 8004c32:	e001      	b.n	8004c38 <HAL_I2S_Init+0x1bc>
 8004c34:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004c38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c3c:	f023 030f 	bic.w	r3, r3, #15
 8004c40:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a2b      	ldr	r2, [pc, #172]	; (8004cf4 <HAL_I2S_Init+0x278>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d101      	bne.n	8004c50 <HAL_I2S_Init+0x1d4>
 8004c4c:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <HAL_I2S_Init+0x27c>)
 8004c4e:	e001      	b.n	8004c54 <HAL_I2S_Init+0x1d8>
 8004c50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c54:	2202      	movs	r2, #2
 8004c56:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <HAL_I2S_Init+0x278>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_I2S_Init+0x1ea>
 8004c62:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <HAL_I2S_Init+0x27c>)
 8004c64:	e001      	b.n	8004c6a <HAL_I2S_Init+0x1ee>
 8004c66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c76:	d003      	beq.n	8004c80 <HAL_I2S_Init+0x204>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d103      	bne.n	8004c88 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	e001      	b.n	8004c8c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c96:	4313      	orrs	r3, r2
 8004c98:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004caa:	4313      	orrs	r3, r2
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	897b      	ldrh	r3, [r7, #10]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004cb8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <HAL_I2S_Init+0x278>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d101      	bne.n	8004cc8 <HAL_I2S_Init+0x24c>
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <HAL_I2S_Init+0x27c>)
 8004cc6:	e001      	b.n	8004ccc <HAL_I2S_Init+0x250>
 8004cc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ccc:	897a      	ldrh	r2, [r7, #10]
 8004cce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3720      	adds	r7, #32
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	08004df3 	.word	0x08004df3
 8004cec:	cccccccd 	.word	0xcccccccd
 8004cf0:	08004f09 	.word	0x08004f09
 8004cf4:	40003800 	.word	0x40003800
 8004cf8:	40003400 	.word	0x40003400

08004cfc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	881a      	ldrh	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	1c9a      	adds	r2, r3, #2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10e      	bne.n	8004d8c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d7c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff ffb8 	bl	8004cfc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	b292      	uxth	r2, r2
 8004da8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	1c9a      	adds	r2, r3, #2
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10e      	bne.n	8004dea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dda:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff ff93 	bl	8004d10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004dea:	bf00      	nop
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b086      	sub	sp, #24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d13a      	bne.n	8004e84 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d109      	bne.n	8004e2c <I2S_IRQHandler+0x3a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d102      	bne.n	8004e2c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff ffb4 	bl	8004d94 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d126      	bne.n	8004e84 <I2S_IRQHandler+0x92>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d11f      	bne.n	8004e84 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e54:	2300      	movs	r3, #0
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e76:	f043 0202 	orr.w	r2, r3, #2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff ff50 	bl	8004d24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d136      	bne.n	8004efe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d109      	bne.n	8004eae <I2S_IRQHandler+0xbc>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea4:	2b80      	cmp	r3, #128	; 0x80
 8004ea6:	d102      	bne.n	8004eae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ff45 	bl	8004d38 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d122      	bne.n	8004efe <I2S_IRQHandler+0x10c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d11b      	bne.n	8004efe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ed4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef0:	f043 0204 	orr.w	r2, r3, #4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff ff13 	bl	8004d24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004efe:	bf00      	nop
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a92      	ldr	r2, [pc, #584]	; (8005168 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004f22:	4b92      	ldr	r3, [pc, #584]	; (800516c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f24:	e001      	b.n	8004f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004f26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a8b      	ldr	r2, [pc, #556]	; (8005168 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f40:	4b8a      	ldr	r3, [pc, #552]	; (800516c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f42:	e001      	b.n	8004f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f54:	d004      	beq.n	8004f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f040 8099 	bne.w	8005092 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d107      	bne.n	8004f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f925 	bl	80051c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d107      	bne.n	8004f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f9c8 	bl	8005324 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9a:	2b40      	cmp	r3, #64	; 0x40
 8004f9c:	d13a      	bne.n	8005014 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d035      	beq.n	8005014 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a6e      	ldr	r2, [pc, #440]	; (8005168 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004fb2:	4b6e      	ldr	r3, [pc, #440]	; (800516c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fb4:	e001      	b.n	8004fba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004fb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4969      	ldr	r1, [pc, #420]	; (8005168 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fc2:	428b      	cmp	r3, r1
 8004fc4:	d101      	bne.n	8004fca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004fc6:	4b69      	ldr	r3, [pc, #420]	; (800516c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fc8:	e001      	b.n	8004fce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fd2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fe2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	f043 0202 	orr.w	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff fe88 	bl	8004d24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b08      	cmp	r3, #8
 800501c:	f040 80c3 	bne.w	80051a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 80bd 	beq.w	80051a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800503a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a49      	ldr	r2, [pc, #292]	; (8005168 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d101      	bne.n	800504a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005046:	4b49      	ldr	r3, [pc, #292]	; (800516c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005048:	e001      	b.n	800504e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800504a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4944      	ldr	r1, [pc, #272]	; (8005168 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005056:	428b      	cmp	r3, r1
 8005058:	d101      	bne.n	800505e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800505a:	4b44      	ldr	r3, [pc, #272]	; (800516c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800505c:	e001      	b.n	8005062 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800505e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005062:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005066:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005068:	2300      	movs	r3, #0
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005082:	f043 0204 	orr.w	r2, r3, #4
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff fe4a 	bl	8004d24 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005090:	e089      	b.n	80051a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b02      	cmp	r3, #2
 800509a:	d107      	bne.n	80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f8be 	bl	8005228 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d107      	bne.n	80050c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f8fd 	bl	80052c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	d12f      	bne.n	8005130 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d02a      	beq.n	8005130 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1e      	ldr	r2, [pc, #120]	; (8005168 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d101      	bne.n	80050f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80050f4:	4b1d      	ldr	r3, [pc, #116]	; (800516c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050f6:	e001      	b.n	80050fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80050f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4919      	ldr	r1, [pc, #100]	; (8005168 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005104:	428b      	cmp	r3, r1
 8005106:	d101      	bne.n	800510c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005108:	4b18      	ldr	r3, [pc, #96]	; (800516c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800510a:	e001      	b.n	8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800510c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005110:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005114:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005122:	f043 0202 	orr.w	r2, r3, #2
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff fdfa 	bl	8004d24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b08      	cmp	r3, #8
 8005138:	d136      	bne.n	80051a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d031      	beq.n	80051a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a07      	ldr	r2, [pc, #28]	; (8005168 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d101      	bne.n	8005152 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005150:	e001      	b.n	8005156 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4902      	ldr	r1, [pc, #8]	; (8005168 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800515e:	428b      	cmp	r3, r1
 8005160:	d106      	bne.n	8005170 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005162:	4b02      	ldr	r3, [pc, #8]	; (800516c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005164:	e006      	b.n	8005174 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005166:	bf00      	nop
 8005168:	40003800 	.word	0x40003800
 800516c:	40003400 	.word	0x40003400
 8005170:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005174:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005178:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005188:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	f043 0204 	orr.w	r2, r3, #4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff fdc0 	bl	8004d24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051a4:	e000      	b.n	80051a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051a6:	bf00      	nop
}
 80051a8:	bf00      	nop
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	1c99      	adds	r1, r3, #2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6251      	str	r1, [r2, #36]	; 0x24
 80051d6:	881a      	ldrh	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d113      	bne.n	800521e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005204:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d106      	bne.n	800521e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff ffc9 	bl	80051b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	1c99      	adds	r1, r3, #2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6251      	str	r1, [r2, #36]	; 0x24
 800523a:	8819      	ldrh	r1, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <I2SEx_TxISR_I2SExt+0x90>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d101      	bne.n	800524a <I2SEx_TxISR_I2SExt+0x22>
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <I2SEx_TxISR_I2SExt+0x94>)
 8005248:	e001      	b.n	800524e <I2SEx_TxISR_I2SExt+0x26>
 800524a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800524e:	460a      	mov	r2, r1
 8005250:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d121      	bne.n	80052ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <I2SEx_TxISR_I2SExt+0x90>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d101      	bne.n	8005278 <I2SEx_TxISR_I2SExt+0x50>
 8005274:	4b11      	ldr	r3, [pc, #68]	; (80052bc <I2SEx_TxISR_I2SExt+0x94>)
 8005276:	e001      	b.n	800527c <I2SEx_TxISR_I2SExt+0x54>
 8005278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	490d      	ldr	r1, [pc, #52]	; (80052b8 <I2SEx_TxISR_I2SExt+0x90>)
 8005284:	428b      	cmp	r3, r1
 8005286:	d101      	bne.n	800528c <I2SEx_TxISR_I2SExt+0x64>
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <I2SEx_TxISR_I2SExt+0x94>)
 800528a:	e001      	b.n	8005290 <I2SEx_TxISR_I2SExt+0x68>
 800528c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005290:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005294:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff ff81 	bl	80051b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40003800 	.word	0x40003800
 80052bc:	40003400 	.word	0x40003400

080052c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68d8      	ldr	r0, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	1c99      	adds	r1, r3, #2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80052d8:	b282      	uxth	r2, r0
 80052da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d113      	bne.n	800531c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005302:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff ff4a 	bl	80051b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800531c:	bf00      	nop
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a20      	ldr	r2, [pc, #128]	; (80053b4 <I2SEx_RxISR_I2SExt+0x90>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d101      	bne.n	800533a <I2SEx_RxISR_I2SExt+0x16>
 8005336:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <I2SEx_RxISR_I2SExt+0x94>)
 8005338:	e001      	b.n	800533e <I2SEx_RxISR_I2SExt+0x1a>
 800533a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800533e:	68d8      	ldr	r0, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	1c99      	adds	r1, r3, #2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	62d1      	str	r1, [r2, #44]	; 0x2c
 800534a:	b282      	uxth	r2, r0
 800534c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d121      	bne.n	80053aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a12      	ldr	r2, [pc, #72]	; (80053b4 <I2SEx_RxISR_I2SExt+0x90>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d101      	bne.n	8005374 <I2SEx_RxISR_I2SExt+0x50>
 8005370:	4b11      	ldr	r3, [pc, #68]	; (80053b8 <I2SEx_RxISR_I2SExt+0x94>)
 8005372:	e001      	b.n	8005378 <I2SEx_RxISR_I2SExt+0x54>
 8005374:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	490d      	ldr	r1, [pc, #52]	; (80053b4 <I2SEx_RxISR_I2SExt+0x90>)
 8005380:	428b      	cmp	r3, r1
 8005382:	d101      	bne.n	8005388 <I2SEx_RxISR_I2SExt+0x64>
 8005384:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <I2SEx_RxISR_I2SExt+0x94>)
 8005386:	e001      	b.n	800538c <I2SEx_RxISR_I2SExt+0x68>
 8005388:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800538c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005390:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff ff03 	bl	80051b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053aa:	bf00      	nop
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40003800 	.word	0x40003800
 80053b8:	40003400 	.word	0x40003400

080053bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e267      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d075      	beq.n	80054c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053da:	4b88      	ldr	r3, [pc, #544]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d00c      	beq.n	8005400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e6:	4b85      	ldr	r3, [pc, #532]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d112      	bne.n	8005418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053f2:	4b82      	ldr	r3, [pc, #520]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053fe:	d10b      	bne.n	8005418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005400:	4b7e      	ldr	r3, [pc, #504]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d05b      	beq.n	80054c4 <HAL_RCC_OscConfig+0x108>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d157      	bne.n	80054c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e242      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005420:	d106      	bne.n	8005430 <HAL_RCC_OscConfig+0x74>
 8005422:	4b76      	ldr	r3, [pc, #472]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a75      	ldr	r2, [pc, #468]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e01d      	b.n	800546c <HAL_RCC_OscConfig+0xb0>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0x98>
 800543a:	4b70      	ldr	r3, [pc, #448]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a6f      	ldr	r2, [pc, #444]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b6d      	ldr	r3, [pc, #436]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a6c      	ldr	r2, [pc, #432]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e00b      	b.n	800546c <HAL_RCC_OscConfig+0xb0>
 8005454:	4b69      	ldr	r3, [pc, #420]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a68      	ldr	r2, [pc, #416]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800545a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	4b66      	ldr	r3, [pc, #408]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a65      	ldr	r2, [pc, #404]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d013      	beq.n	800549c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fd fffa 	bl	800346c <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800547c:	f7fd fff6 	bl	800346c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	; 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e207      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548e:	4b5b      	ldr	r3, [pc, #364]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0xc0>
 800549a:	e014      	b.n	80054c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fd ffe6 	bl	800346c <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fd ffe2 	bl	800346c <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e1f3      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b6:	4b51      	ldr	r3, [pc, #324]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0xe8>
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d063      	beq.n	800559a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054d2:	4b4a      	ldr	r3, [pc, #296]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00b      	beq.n	80054f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054de:	4b47      	ldr	r3, [pc, #284]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d11c      	bne.n	8005524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ea:	4b44      	ldr	r3, [pc, #272]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d116      	bne.n	8005524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f6:	4b41      	ldr	r3, [pc, #260]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <HAL_RCC_OscConfig+0x152>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d001      	beq.n	800550e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e1c7      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550e:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4937      	ldr	r1, [pc, #220]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800551e:	4313      	orrs	r3, r2
 8005520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005522:	e03a      	b.n	800559a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d020      	beq.n	800556e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800552c:	4b34      	ldr	r3, [pc, #208]	; (8005600 <HAL_RCC_OscConfig+0x244>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005532:	f7fd ff9b 	bl	800346c <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800553a:	f7fd ff97 	bl	800346c <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e1a8      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800554c:	4b2b      	ldr	r3, [pc, #172]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005558:	4b28      	ldr	r3, [pc, #160]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4925      	ldr	r1, [pc, #148]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005568:	4313      	orrs	r3, r2
 800556a:	600b      	str	r3, [r1, #0]
 800556c:	e015      	b.n	800559a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800556e:	4b24      	ldr	r3, [pc, #144]	; (8005600 <HAL_RCC_OscConfig+0x244>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005574:	f7fd ff7a 	bl	800346c <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800557c:	f7fd ff76 	bl	800346c <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e187      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558e:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d036      	beq.n	8005614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ae:	4b15      	ldr	r3, [pc, #84]	; (8005604 <HAL_RCC_OscConfig+0x248>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fd ff5a 	bl	800346c <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055bc:	f7fd ff56 	bl	800346c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e167      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ce:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_RCC_OscConfig+0x240>)
 80055d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0x200>
 80055da:	e01b      	b.n	8005614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <HAL_RCC_OscConfig+0x248>)
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e2:	f7fd ff43 	bl	800346c <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e8:	e00e      	b.n	8005608 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ea:	f7fd ff3f 	bl	800346c <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d907      	bls.n	8005608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e150      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
 80055fc:	40023800 	.word	0x40023800
 8005600:	42470000 	.word	0x42470000
 8005604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005608:	4b88      	ldr	r3, [pc, #544]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800560a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1ea      	bne.n	80055ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8097 	beq.w	8005750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005622:	2300      	movs	r3, #0
 8005624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005626:	4b81      	ldr	r3, [pc, #516]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10f      	bne.n	8005652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	4b7d      	ldr	r3, [pc, #500]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	4a7c      	ldr	r2, [pc, #496]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	6413      	str	r3, [r2, #64]	; 0x40
 8005642:	4b7a      	ldr	r3, [pc, #488]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800564e:	2301      	movs	r3, #1
 8005650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005652:	4b77      	ldr	r3, [pc, #476]	; (8005830 <HAL_RCC_OscConfig+0x474>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d118      	bne.n	8005690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800565e:	4b74      	ldr	r3, [pc, #464]	; (8005830 <HAL_RCC_OscConfig+0x474>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a73      	ldr	r2, [pc, #460]	; (8005830 <HAL_RCC_OscConfig+0x474>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566a:	f7fd feff 	bl	800346c <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005672:	f7fd fefb 	bl	800346c <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e10c      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005684:	4b6a      	ldr	r3, [pc, #424]	; (8005830 <HAL_RCC_OscConfig+0x474>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d106      	bne.n	80056a6 <HAL_RCC_OscConfig+0x2ea>
 8005698:	4b64      	ldr	r3, [pc, #400]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	4a63      	ldr	r2, [pc, #396]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70
 80056a4:	e01c      	b.n	80056e0 <HAL_RCC_OscConfig+0x324>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	2b05      	cmp	r3, #5
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x30c>
 80056ae:	4b5f      	ldr	r3, [pc, #380]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	4a5e      	ldr	r2, [pc, #376]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056b4:	f043 0304 	orr.w	r3, r3, #4
 80056b8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ba:	4b5c      	ldr	r3, [pc, #368]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	4a5b      	ldr	r2, [pc, #364]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	6713      	str	r3, [r2, #112]	; 0x70
 80056c6:	e00b      	b.n	80056e0 <HAL_RCC_OscConfig+0x324>
 80056c8:	4b58      	ldr	r3, [pc, #352]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056cc:	4a57      	ldr	r2, [pc, #348]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	6713      	str	r3, [r2, #112]	; 0x70
 80056d4:	4b55      	ldr	r3, [pc, #340]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	4a54      	ldr	r2, [pc, #336]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80056da:	f023 0304 	bic.w	r3, r3, #4
 80056de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d015      	beq.n	8005714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e8:	f7fd fec0 	bl	800346c <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f0:	f7fd febc 	bl	800346c <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e0cb      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005706:	4b49      	ldr	r3, [pc, #292]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0ee      	beq.n	80056f0 <HAL_RCC_OscConfig+0x334>
 8005712:	e014      	b.n	800573e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005714:	f7fd feaa 	bl	800346c <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571a:	e00a      	b.n	8005732 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800571c:	f7fd fea6 	bl	800346c <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f241 3288 	movw	r2, #5000	; 0x1388
 800572a:	4293      	cmp	r3, r2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e0b5      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005732:	4b3e      	ldr	r3, [pc, #248]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1ee      	bne.n	800571c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800573e:	7dfb      	ldrb	r3, [r7, #23]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d105      	bne.n	8005750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005744:	4b39      	ldr	r3, [pc, #228]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	4a38      	ldr	r2, [pc, #224]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800574a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80a1 	beq.w	800589c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800575a:	4b34      	ldr	r3, [pc, #208]	; (800582c <HAL_RCC_OscConfig+0x470>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 030c 	and.w	r3, r3, #12
 8005762:	2b08      	cmp	r3, #8
 8005764:	d05c      	beq.n	8005820 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2b02      	cmp	r3, #2
 800576c:	d141      	bne.n	80057f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800576e:	4b31      	ldr	r3, [pc, #196]	; (8005834 <HAL_RCC_OscConfig+0x478>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005774:	f7fd fe7a 	bl	800346c <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800577c:	f7fd fe76 	bl	800346c <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e087      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800578e:	4b27      	ldr	r3, [pc, #156]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69da      	ldr	r2, [r3, #28]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	019b      	lsls	r3, r3, #6
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	3b01      	subs	r3, #1
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	061b      	lsls	r3, r3, #24
 80057be:	491b      	ldr	r1, [pc, #108]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c4:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <HAL_RCC_OscConfig+0x478>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ca:	f7fd fe4f 	bl	800346c <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d2:	f7fd fe4b 	bl	800346c <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e05c      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e4:	4b11      	ldr	r3, [pc, #68]	; (800582c <HAL_RCC_OscConfig+0x470>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0f0      	beq.n	80057d2 <HAL_RCC_OscConfig+0x416>
 80057f0:	e054      	b.n	800589c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f2:	4b10      	ldr	r3, [pc, #64]	; (8005834 <HAL_RCC_OscConfig+0x478>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f8:	f7fd fe38 	bl	800346c <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005800:	f7fd fe34 	bl	800346c <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e045      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005812:	4b06      	ldr	r3, [pc, #24]	; (800582c <HAL_RCC_OscConfig+0x470>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0x444>
 800581e:	e03d      	b.n	800589c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d107      	bne.n	8005838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e038      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
 800582c:	40023800 	.word	0x40023800
 8005830:	40007000 	.word	0x40007000
 8005834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005838:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <HAL_RCC_OscConfig+0x4ec>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d028      	beq.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005850:	429a      	cmp	r2, r3
 8005852:	d121      	bne.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800585e:	429a      	cmp	r2, r3
 8005860:	d11a      	bne.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005868:	4013      	ands	r3, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800586e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005870:	4293      	cmp	r3, r2
 8005872:	d111      	bne.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	3b01      	subs	r3, #1
 8005882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d107      	bne.n	8005898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40023800 	.word	0x40023800

080058ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0cc      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058c0:	4b68      	ldr	r3, [pc, #416]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d90c      	bls.n	80058e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ce:	4b65      	ldr	r3, [pc, #404]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d6:	4b63      	ldr	r3, [pc, #396]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d001      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0b8      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d020      	beq.n	8005936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005900:	4b59      	ldr	r3, [pc, #356]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4a58      	ldr	r2, [pc, #352]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800590a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005918:	4b53      	ldr	r3, [pc, #332]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4a52      	ldr	r2, [pc, #328]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005924:	4b50      	ldr	r3, [pc, #320]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	494d      	ldr	r1, [pc, #308]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d044      	beq.n	80059cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d107      	bne.n	800595a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594a:	4b47      	ldr	r3, [pc, #284]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d119      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e07f      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d003      	beq.n	800596a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005966:	2b03      	cmp	r3, #3
 8005968:	d107      	bne.n	800597a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596a:	4b3f      	ldr	r3, [pc, #252]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e06f      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597a:	4b3b      	ldr	r3, [pc, #236]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e067      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800598a:	4b37      	ldr	r3, [pc, #220]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f023 0203 	bic.w	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	4934      	ldr	r1, [pc, #208]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005998:	4313      	orrs	r3, r2
 800599a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800599c:	f7fd fd66 	bl	800346c <HAL_GetTick>
 80059a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a2:	e00a      	b.n	80059ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a4:	f7fd fd62 	bl	800346c <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e04f      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ba:	4b2b      	ldr	r3, [pc, #172]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 020c 	and.w	r2, r3, #12
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d1eb      	bne.n	80059a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059cc:	4b25      	ldr	r3, [pc, #148]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d20c      	bcs.n	80059f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e2:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <HAL_RCC_ClockConfig+0x1b8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e032      	b.n	8005a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a00:	4b19      	ldr	r3, [pc, #100]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4916      	ldr	r1, [pc, #88]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d009      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a1e:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	490e      	ldr	r1, [pc, #56]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a32:	f000 f821 	bl	8005a78 <HAL_RCC_GetSysClockFreq>
 8005a36:	4602      	mov	r2, r0
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	091b      	lsrs	r3, r3, #4
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	490a      	ldr	r1, [pc, #40]	; (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 8005a44:	5ccb      	ldrb	r3, [r1, r3]
 8005a46:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4a:	4a09      	ldr	r2, [pc, #36]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a4e:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fd fcc6 	bl	80033e4 <HAL_InitTick>

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	40023c00 	.word	0x40023c00
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	08007304 	.word	0x08007304
 8005a70:	20000000 	.word	0x20000000
 8005a74:	20000004 	.word	0x20000004

08005a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a7c:	b094      	sub	sp, #80	; 0x50
 8005a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	647b      	str	r3, [r7, #68]	; 0x44
 8005a84:	2300      	movs	r3, #0
 8005a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a88:	2300      	movs	r3, #0
 8005a8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a90:	4b79      	ldr	r3, [pc, #484]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 030c 	and.w	r3, r3, #12
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d00d      	beq.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	f200 80e1 	bhi.w	8005c64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_RCC_GetSysClockFreq+0x34>
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d003      	beq.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aaa:	e0db      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005aac:	4b73      	ldr	r3, [pc, #460]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005aae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ab0:	e0db      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ab2:	4b73      	ldr	r3, [pc, #460]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ab4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ab6:	e0d8      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ab8:	4b6f      	ldr	r3, [pc, #444]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ac2:	4b6d      	ldr	r3, [pc, #436]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d063      	beq.n	8005b96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ace:	4b6a      	ldr	r3, [pc, #424]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	099b      	lsrs	r3, r3, #6
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005aea:	4622      	mov	r2, r4
 8005aec:	462b      	mov	r3, r5
 8005aee:	f04f 0000 	mov.w	r0, #0
 8005af2:	f04f 0100 	mov.w	r1, #0
 8005af6:	0159      	lsls	r1, r3, #5
 8005af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005afc:	0150      	lsls	r0, r2, #5
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4621      	mov	r1, r4
 8005b04:	1a51      	subs	r1, r2, r1
 8005b06:	6139      	str	r1, [r7, #16]
 8005b08:	4629      	mov	r1, r5
 8005b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	f04f 0300 	mov.w	r3, #0
 8005b18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	018b      	lsls	r3, r1, #6
 8005b20:	4651      	mov	r1, sl
 8005b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b26:	4651      	mov	r1, sl
 8005b28:	018a      	lsls	r2, r1, #6
 8005b2a:	4651      	mov	r1, sl
 8005b2c:	ebb2 0801 	subs.w	r8, r2, r1
 8005b30:	4659      	mov	r1, fp
 8005b32:	eb63 0901 	sbc.w	r9, r3, r1
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b4a:	4690      	mov	r8, r2
 8005b4c:	4699      	mov	r9, r3
 8005b4e:	4623      	mov	r3, r4
 8005b50:	eb18 0303 	adds.w	r3, r8, r3
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	462b      	mov	r3, r5
 8005b58:	eb49 0303 	adc.w	r3, r9, r3
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	024b      	lsls	r3, r1, #9
 8005b6e:	4621      	mov	r1, r4
 8005b70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b74:	4621      	mov	r1, r4
 8005b76:	024a      	lsls	r2, r1, #9
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b7e:	2200      	movs	r2, #0
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b88:	f7fa ff44 	bl	8000a14 <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4613      	mov	r3, r2
 8005b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b94:	e058      	b.n	8005c48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b96:	4b38      	ldr	r3, [pc, #224]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	099b      	lsrs	r3, r3, #6
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
 8005bac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bb0:	4642      	mov	r2, r8
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	f04f 0000 	mov.w	r0, #0
 8005bb8:	f04f 0100 	mov.w	r1, #0
 8005bbc:	0159      	lsls	r1, r3, #5
 8005bbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bc2:	0150      	lsls	r0, r2, #5
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4641      	mov	r1, r8
 8005bca:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bce:	4649      	mov	r1, r9
 8005bd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005be0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005be4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005be8:	ebb2 040a 	subs.w	r4, r2, sl
 8005bec:	eb63 050b 	sbc.w	r5, r3, fp
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	00eb      	lsls	r3, r5, #3
 8005bfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bfe:	00e2      	lsls	r2, r4, #3
 8005c00:	4614      	mov	r4, r2
 8005c02:	461d      	mov	r5, r3
 8005c04:	4643      	mov	r3, r8
 8005c06:	18e3      	adds	r3, r4, r3
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	eb45 0303 	adc.w	r3, r5, r3
 8005c10:	607b      	str	r3, [r7, #4]
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	f04f 0300 	mov.w	r3, #0
 8005c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c1e:	4629      	mov	r1, r5
 8005c20:	028b      	lsls	r3, r1, #10
 8005c22:	4621      	mov	r1, r4
 8005c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c28:	4621      	mov	r1, r4
 8005c2a:	028a      	lsls	r2, r1, #10
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c32:	2200      	movs	r2, #0
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	61fa      	str	r2, [r7, #28]
 8005c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c3c:	f7fa feea 	bl	8000a14 <__aeabi_uldivmod>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4613      	mov	r3, r2
 8005c46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	3301      	adds	r3, #1
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c62:	e002      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3750      	adds	r7, #80	; 0x50
 8005c70:	46bd      	mov	sp, r7
 8005c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c76:	bf00      	nop
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	00f42400 	.word	0x00f42400
 8005c80:	007a1200 	.word	0x007a1200

08005c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000000 	.word	0x20000000

08005c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ca0:	f7ff fff0 	bl	8005c84 <HAL_RCC_GetHCLKFreq>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	0a9b      	lsrs	r3, r3, #10
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	4903      	ldr	r1, [pc, #12]	; (8005cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cb2:	5ccb      	ldrb	r3, [r1, r3]
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	08007314 	.word	0x08007314

08005cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cc8:	f7ff ffdc 	bl	8005c84 <HAL_RCC_GetHCLKFreq>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	0b5b      	lsrs	r3, r3, #13
 8005cd4:	f003 0307 	and.w	r3, r3, #7
 8005cd8:	4903      	ldr	r1, [pc, #12]	; (8005ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cda:	5ccb      	ldrb	r3, [r1, r3]
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	08007314 	.word	0x08007314

08005cec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d038      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d14:	4b68      	ldr	r3, [pc, #416]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d1a:	f7fd fba7 	bl	800346c <HAL_GetTick>
 8005d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d20:	e008      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d22:	f7fd fba3 	bl	800346c <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e0bd      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d34:	4b61      	ldr	r3, [pc, #388]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1f0      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	019b      	lsls	r3, r3, #6
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	071b      	lsls	r3, r3, #28
 8005d52:	495a      	ldr	r1, [pc, #360]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d5a:	4b57      	ldr	r3, [pc, #348]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d60:	f7fd fb84 	bl	800346c <HAL_GetTick>
 8005d64:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d68:	f7fd fb80 	bl	800346c <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e09a      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d7a:	4b50      	ldr	r3, [pc, #320]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f0      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 8083 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	4b48      	ldr	r3, [pc, #288]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	4a47      	ldr	r2, [pc, #284]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da2:	6413      	str	r3, [r2, #64]	; 0x40
 8005da4:	4b45      	ldr	r3, [pc, #276]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005db0:	4b43      	ldr	r3, [pc, #268]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a42      	ldr	r2, [pc, #264]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dba:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dbc:	f7fd fb56 	bl	800346c <HAL_GetTick>
 8005dc0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005dc4:	f7fd fb52 	bl	800346c <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e06c      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005dd6:	4b3a      	ldr	r3, [pc, #232]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005de2:	4b36      	ldr	r3, [pc, #216]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dea:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02f      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d028      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e00:	4b2e      	ldr	r3, [pc, #184]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e08:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e0a:	4b2e      	ldr	r3, [pc, #184]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e10:	4b2c      	ldr	r3, [pc, #176]	; (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e16:	4a29      	ldr	r2, [pc, #164]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e1c:	4b27      	ldr	r3, [pc, #156]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d114      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e28:	f7fd fb20 	bl	800346c <HAL_GetTick>
 8005e2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e2e:	e00a      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e30:	f7fd fb1c 	bl	800346c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e034      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e46:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0ee      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e5e:	d10d      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005e60:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e74:	4911      	ldr	r1, [pc, #68]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	608b      	str	r3, [r1, #8]
 8005e7a:	e005      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e86:	6093      	str	r3, [r2, #8]
 8005e88:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e94:	4909      	ldr	r1, [pc, #36]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	7d1a      	ldrb	r2, [r3, #20]
 8005eaa:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005eac:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	42470068 	.word	0x42470068
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	40007000 	.word	0x40007000
 8005ec4:	42470e40 	.word	0x42470e40
 8005ec8:	424711e0 	.word	0x424711e0

08005ecc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d140      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005eea:	4b24      	ldr	r3, [pc, #144]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d131      	bne.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f00:	4b1f      	ldr	r3, [pc, #124]	; (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f02:	617b      	str	r3, [r7, #20]
          break;
 8005f04:	e031      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f06:	4b1d      	ldr	r3, [pc, #116]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f12:	d109      	bne.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f14:	4b19      	ldr	r3, [pc, #100]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f1e:	4a19      	ldr	r2, [pc, #100]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	e008      	b.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f28:	4b14      	ldr	r3, [pc, #80]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f32:	4a15      	ldr	r2, [pc, #84]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f38:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005f3a:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f40:	099b      	lsrs	r3, r3, #6
 8005f42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	fb02 f303 	mul.w	r3, r2, r3
 8005f4c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f54:	0f1b      	lsrs	r3, r3, #28
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	617b      	str	r3, [r7, #20]
          break;
 8005f62:	e002      	b.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]
          break;
 8005f68:	bf00      	nop
        }
      }
      break;
 8005f6a:	bf00      	nop
    }
  }
  return frequency;
 8005f6c:	697b      	ldr	r3, [r7, #20]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	00bb8000 	.word	0x00bb8000
 8005f84:	007a1200 	.word	0x007a1200
 8005f88:	00f42400 	.word	0x00f42400

08005f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e07b      	b.n	8006096 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d108      	bne.n	8005fb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fae:	d009      	beq.n	8005fc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	61da      	str	r2, [r3, #28]
 8005fb6:	e005      	b.n	8005fc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fd f87e 	bl	80030e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ffa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006048:	ea42 0103 	orr.w	r1, r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006050:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	0c1b      	lsrs	r3, r3, #16
 8006062:	f003 0104 	and.w	r1, r3, #4
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	f003 0210 	and.w	r2, r3, #16
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006084:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e03f      	b.n	8006130 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7fd f853 	bl	8003170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2224      	movs	r2, #36	; 0x24
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fc7a 	bl	80069dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695a      	ldr	r2, [r3, #20]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006106:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006116:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b0ba      	sub	sp, #232	; 0xe8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800615e:	2300      	movs	r3, #0
 8006160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006164:	2300      	movs	r3, #0
 8006166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800616a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10f      	bne.n	800619e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800617e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	d009      	beq.n	800619e <HAL_UART_IRQHandler+0x66>
 800618a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fb65 	bl	8006866 <UART_Receive_IT>
      return;
 800619c:	e256      	b.n	800664c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800619e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 80de 	beq.w	8006364 <HAL_UART_IRQHandler+0x22c>
 80061a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d106      	bne.n	80061c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80d1 	beq.w	8006364 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <HAL_UART_IRQHandler+0xae>
 80061ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f043 0201 	orr.w	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00b      	beq.n	800620a <HAL_UART_IRQHandler+0xd2>
 80061f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f043 0202 	orr.w	r2, r3, #2
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800620a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00b      	beq.n	800622e <HAL_UART_IRQHandler+0xf6>
 8006216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f043 0204 	orr.w	r2, r3, #4
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800622e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d011      	beq.n	800625e <HAL_UART_IRQHandler+0x126>
 800623a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b00      	cmp	r3, #0
 8006244:	d105      	bne.n	8006252 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f043 0208 	orr.w	r2, r3, #8
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 81ed 	beq.w	8006642 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_UART_IRQHandler+0x14e>
 8006274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 faf0 	bl	8006866 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	bf0c      	ite	eq
 8006294:	2301      	moveq	r3, #1
 8006296:	2300      	movne	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <HAL_UART_IRQHandler+0x17a>
 80062aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d04f      	beq.n	8006352 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f9f8 	bl	80066a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	d141      	bne.n	800634a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3314      	adds	r3, #20
 80062ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800630a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1d9      	bne.n	80062c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	2b00      	cmp	r3, #0
 8006318:	d013      	beq.n	8006342 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	4a7d      	ldr	r2, [pc, #500]	; (8006514 <HAL_UART_IRQHandler+0x3dc>)
 8006320:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	4618      	mov	r0, r3
 8006328:	f7fd fa51 	bl	80037ce <HAL_DMA_Abort_IT>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d016      	beq.n	8006360 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800633c:	4610      	mov	r0, r2
 800633e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	e00e      	b.n	8006360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f99a 	bl	800667c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006348:	e00a      	b.n	8006360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f996 	bl	800667c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006350:	e006      	b.n	8006360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f992 	bl	800667c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800635e:	e170      	b.n	8006642 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006360:	bf00      	nop
    return;
 8006362:	e16e      	b.n	8006642 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006368:	2b01      	cmp	r3, #1
 800636a:	f040 814a 	bne.w	8006602 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800636e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8143 	beq.w	8006602 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800637c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 813c 	beq.w	8006602 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063aa:	2b40      	cmp	r3, #64	; 0x40
 80063ac:	f040 80b4 	bne.w	8006518 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8140 	beq.w	8006646 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ce:	429a      	cmp	r2, r3
 80063d0:	f080 8139 	bcs.w	8006646 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e6:	f000 8088 	beq.w	80064fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006416:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800641a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006422:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800642e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1d9      	bne.n	80063ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3314      	adds	r3, #20
 800643c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006448:	f023 0301 	bic.w	r3, r3, #1
 800644c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3314      	adds	r3, #20
 8006456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800645a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800645e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006462:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800646c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e1      	bne.n	8006436 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3314      	adds	r3, #20
 8006478:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3314      	adds	r3, #20
 8006492:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006496:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006498:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800649c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e3      	bne.n	8006472 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ca:	f023 0310 	bic.w	r3, r3, #16
 80064ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80064de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e3      	bne.n	80064b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fd f8fa 	bl	80036ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006502:	b29b      	uxth	r3, r3
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	b29b      	uxth	r3, r3
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f8c0 	bl	8006690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006510:	e099      	b.n	8006646 <HAL_UART_IRQHandler+0x50e>
 8006512:	bf00      	nop
 8006514:	0800676f 	.word	0x0800676f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006520:	b29b      	uxth	r3, r3
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 808b 	beq.w	800664a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8086 	beq.w	800664a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	330c      	adds	r3, #12
 8006544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800654e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330c      	adds	r3, #12
 800655e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006562:	647a      	str	r2, [r7, #68]	; 0x44
 8006564:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e3      	bne.n	800653e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3314      	adds	r3, #20
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	623b      	str	r3, [r7, #32]
   return(result);
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800659a:	633a      	str	r2, [r7, #48]	; 0x30
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e3      	bne.n	8006576 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0310 	bic.w	r3, r3, #16
 80065d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065e0:	61fa      	str	r2, [r7, #28]
 80065e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	69b9      	ldr	r1, [r7, #24]
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	617b      	str	r3, [r7, #20]
   return(result);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e3      	bne.n	80065bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f848 	bl	8006690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006600:	e023      	b.n	800664a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <HAL_UART_IRQHandler+0x4ea>
 800660e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f8bb 	bl	8006796 <UART_Transmit_IT>
    return;
 8006620:	e014      	b.n	800664c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <HAL_UART_IRQHandler+0x514>
 800662e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d008      	beq.n	800664c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f8fb 	bl	8006836 <UART_EndTransmit_IT>
    return;
 8006640:	e004      	b.n	800664c <HAL_UART_IRQHandler+0x514>
    return;
 8006642:	bf00      	nop
 8006644:	e002      	b.n	800664c <HAL_UART_IRQHandler+0x514>
      return;
 8006646:	bf00      	nop
 8006648:	e000      	b.n	800664c <HAL_UART_IRQHandler+0x514>
      return;
 800664a:	bf00      	nop
  }
}
 800664c:	37e8      	adds	r7, #232	; 0xe8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop

08006654 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b095      	sub	sp, #84	; 0x54
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	330c      	adds	r3, #12
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	330c      	adds	r3, #12
 80066ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066d0:	643a      	str	r2, [r7, #64]	; 0x40
 80066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e5      	bne.n	80066b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3314      	adds	r3, #20
 80066ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3314      	adds	r3, #20
 8006702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006704:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800670a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e5      	bne.n	80066e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	2b01      	cmp	r3, #1
 800671e:	d119      	bne.n	8006754 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	330c      	adds	r3, #12
 8006726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f023 0310 	bic.w	r3, r3, #16
 8006736:	647b      	str	r3, [r7, #68]	; 0x44
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	330c      	adds	r3, #12
 800673e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006740:	61ba      	str	r2, [r7, #24]
 8006742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6979      	ldr	r1, [r7, #20]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	613b      	str	r3, [r7, #16]
   return(result);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e5      	bne.n	8006720 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006762:	bf00      	nop
 8006764:	3754      	adds	r7, #84	; 0x54
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff ff77 	bl	800667c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800678e:	bf00      	nop
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b21      	cmp	r3, #33	; 0x21
 80067a8:	d13e      	bne.n	8006828 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b2:	d114      	bne.n	80067de <UART_Transmit_IT+0x48>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d110      	bne.n	80067de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	1c9a      	adds	r2, r3, #2
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	621a      	str	r2, [r3, #32]
 80067dc:	e008      	b.n	80067f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	1c59      	adds	r1, r3, #1
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6211      	str	r1, [r2, #32]
 80067e8:	781a      	ldrb	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	4619      	mov	r1, r3
 80067fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10f      	bne.n	8006824 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006812:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006822:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	e000      	b.n	800682a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006828:	2302      	movs	r3, #2
  }
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800684c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff fefc 	bl	8006654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b08c      	sub	sp, #48	; 0x30
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b22      	cmp	r3, #34	; 0x22
 8006878:	f040 80ab 	bne.w	80069d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006884:	d117      	bne.n	80068b6 <UART_Receive_IT+0x50>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d113      	bne.n	80068b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	1c9a      	adds	r2, r3, #2
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28
 80068b4:	e026      	b.n	8006904 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c8:	d007      	beq.n	80068da <UART_Receive_IT+0x74>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10a      	bne.n	80068e8 <UART_Receive_IT+0x82>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	e008      	b.n	80068fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b29b      	uxth	r3, r3
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	4619      	mov	r1, r3
 8006912:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006914:	2b00      	cmp	r3, #0
 8006916:	d15a      	bne.n	80069ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0220 	bic.w	r2, r2, #32
 8006926:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695a      	ldr	r2, [r3, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0201 	bic.w	r2, r2, #1
 8006946:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006954:	2b01      	cmp	r3, #1
 8006956:	d135      	bne.n	80069c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	330c      	adds	r3, #12
 8006964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	613b      	str	r3, [r7, #16]
   return(result);
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f023 0310 	bic.w	r3, r3, #16
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697e:	623a      	str	r2, [r7, #32]
 8006980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	69f9      	ldr	r1, [r7, #28]
 8006984:	6a3a      	ldr	r2, [r7, #32]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	61bb      	str	r3, [r7, #24]
   return(result);
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e5      	bne.n	800695e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b10      	cmp	r3, #16
 800699e:	d10a      	bne.n	80069b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff fe67 	bl	8006690 <HAL_UARTEx_RxEventCallback>
 80069c2:	e002      	b.n	80069ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff fe4f 	bl	8006668 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	e002      	b.n	80069d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	e000      	b.n	80069d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80069d2:	2302      	movs	r3, #2
  }
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3730      	adds	r7, #48	; 0x30
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069e0:	b0c0      	sub	sp, #256	; 0x100
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f8:	68d9      	ldr	r1, [r3, #12]
 80069fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	ea40 0301 	orr.w	r3, r0, r1
 8006a04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a34:	f021 010c 	bic.w	r1, r1, #12
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a42:	430b      	orrs	r3, r1
 8006a44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a56:	6999      	ldr	r1, [r3, #24]
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	ea40 0301 	orr.w	r3, r0, r1
 8006a62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	4b8f      	ldr	r3, [pc, #572]	; (8006ca8 <UART_SetConfig+0x2cc>)
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d005      	beq.n	8006a7c <UART_SetConfig+0xa0>
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b8d      	ldr	r3, [pc, #564]	; (8006cac <UART_SetConfig+0x2d0>)
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d104      	bne.n	8006a86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a7c:	f7ff f922 	bl	8005cc4 <HAL_RCC_GetPCLK2Freq>
 8006a80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a84:	e003      	b.n	8006a8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a86:	f7ff f909 	bl	8005c9c <HAL_RCC_GetPCLK1Freq>
 8006a8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a98:	f040 810c 	bne.w	8006cb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006aa6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006aaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006aae:	4622      	mov	r2, r4
 8006ab0:	462b      	mov	r3, r5
 8006ab2:	1891      	adds	r1, r2, r2
 8006ab4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ab6:	415b      	adcs	r3, r3
 8006ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006abe:	4621      	mov	r1, r4
 8006ac0:	eb12 0801 	adds.w	r8, r2, r1
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	eb43 0901 	adc.w	r9, r3, r1
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ade:	4690      	mov	r8, r2
 8006ae0:	4699      	mov	r9, r3
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	eb18 0303 	adds.w	r3, r8, r3
 8006ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006aec:	462b      	mov	r3, r5
 8006aee:	eb49 0303 	adc.w	r3, r9, r3
 8006af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	18db      	adds	r3, r3, r3
 8006b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b10:	4613      	mov	r3, r2
 8006b12:	eb42 0303 	adc.w	r3, r2, r3
 8006b16:	657b      	str	r3, [r7, #84]	; 0x54
 8006b18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b20:	f7f9 ff78 	bl	8000a14 <__aeabi_uldivmod>
 8006b24:	4602      	mov	r2, r0
 8006b26:	460b      	mov	r3, r1
 8006b28:	4b61      	ldr	r3, [pc, #388]	; (8006cb0 <UART_SetConfig+0x2d4>)
 8006b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	011c      	lsls	r4, r3, #4
 8006b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b44:	4642      	mov	r2, r8
 8006b46:	464b      	mov	r3, r9
 8006b48:	1891      	adds	r1, r2, r2
 8006b4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b4c:	415b      	adcs	r3, r3
 8006b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b54:	4641      	mov	r1, r8
 8006b56:	eb12 0a01 	adds.w	sl, r2, r1
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	eb43 0b01 	adc.w	fp, r3, r1
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b74:	4692      	mov	sl, r2
 8006b76:	469b      	mov	fp, r3
 8006b78:	4643      	mov	r3, r8
 8006b7a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b82:	464b      	mov	r3, r9
 8006b84:	eb4b 0303 	adc.w	r3, fp, r3
 8006b88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	18db      	adds	r3, r3, r3
 8006ba4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	eb42 0303 	adc.w	r3, r2, r3
 8006bac:	647b      	str	r3, [r7, #68]	; 0x44
 8006bae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006bb6:	f7f9 ff2d 	bl	8000a14 <__aeabi_uldivmod>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	4b3b      	ldr	r3, [pc, #236]	; (8006cb0 <UART_SetConfig+0x2d4>)
 8006bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	2264      	movs	r2, #100	; 0x64
 8006bca:	fb02 f303 	mul.w	r3, r2, r3
 8006bce:	1acb      	subs	r3, r1, r3
 8006bd0:	00db      	lsls	r3, r3, #3
 8006bd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bd6:	4b36      	ldr	r3, [pc, #216]	; (8006cb0 <UART_SetConfig+0x2d4>)
 8006bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8006bdc:	095b      	lsrs	r3, r3, #5
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006be4:	441c      	add	r4, r3
 8006be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bf8:	4642      	mov	r2, r8
 8006bfa:	464b      	mov	r3, r9
 8006bfc:	1891      	adds	r1, r2, r2
 8006bfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c00:	415b      	adcs	r3, r3
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c08:	4641      	mov	r1, r8
 8006c0a:	1851      	adds	r1, r2, r1
 8006c0c:	6339      	str	r1, [r7, #48]	; 0x30
 8006c0e:	4649      	mov	r1, r9
 8006c10:	414b      	adcs	r3, r1
 8006c12:	637b      	str	r3, [r7, #52]	; 0x34
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	f04f 0300 	mov.w	r3, #0
 8006c1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c20:	4659      	mov	r1, fp
 8006c22:	00cb      	lsls	r3, r1, #3
 8006c24:	4651      	mov	r1, sl
 8006c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c2a:	4651      	mov	r1, sl
 8006c2c:	00ca      	lsls	r2, r1, #3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	4619      	mov	r1, r3
 8006c32:	4603      	mov	r3, r0
 8006c34:	4642      	mov	r2, r8
 8006c36:	189b      	adds	r3, r3, r2
 8006c38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	460a      	mov	r2, r1
 8006c40:	eb42 0303 	adc.w	r3, r2, r3
 8006c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	18db      	adds	r3, r3, r3
 8006c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c62:	4613      	mov	r3, r2
 8006c64:	eb42 0303 	adc.w	r3, r2, r3
 8006c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c72:	f7f9 fecf 	bl	8000a14 <__aeabi_uldivmod>
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <UART_SetConfig+0x2d4>)
 8006c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c80:	095b      	lsrs	r3, r3, #5
 8006c82:	2164      	movs	r1, #100	; 0x64
 8006c84:	fb01 f303 	mul.w	r3, r1, r3
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	3332      	adds	r3, #50	; 0x32
 8006c8e:	4a08      	ldr	r2, [pc, #32]	; (8006cb0 <UART_SetConfig+0x2d4>)
 8006c90:	fba2 2303 	umull	r2, r3, r2, r3
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	f003 0207 	and.w	r2, r3, #7
 8006c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4422      	add	r2, r4
 8006ca2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ca4:	e105      	b.n	8006eb2 <UART_SetConfig+0x4d6>
 8006ca6:	bf00      	nop
 8006ca8:	40011000 	.word	0x40011000
 8006cac:	40011400 	.word	0x40011400
 8006cb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006cc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	464b      	mov	r3, r9
 8006cca:	1891      	adds	r1, r2, r2
 8006ccc:	6239      	str	r1, [r7, #32]
 8006cce:	415b      	adcs	r3, r3
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cd6:	4641      	mov	r1, r8
 8006cd8:	1854      	adds	r4, r2, r1
 8006cda:	4649      	mov	r1, r9
 8006cdc:	eb43 0501 	adc.w	r5, r3, r1
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	f04f 0300 	mov.w	r3, #0
 8006ce8:	00eb      	lsls	r3, r5, #3
 8006cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cee:	00e2      	lsls	r2, r4, #3
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	461d      	mov	r5, r3
 8006cf4:	4643      	mov	r3, r8
 8006cf6:	18e3      	adds	r3, r4, r3
 8006cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	eb45 0303 	adc.w	r3, r5, r3
 8006d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d22:	4629      	mov	r1, r5
 8006d24:	008b      	lsls	r3, r1, #2
 8006d26:	4621      	mov	r1, r4
 8006d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	008a      	lsls	r2, r1, #2
 8006d30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d34:	f7f9 fe6e 	bl	8000a14 <__aeabi_uldivmod>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4b60      	ldr	r3, [pc, #384]	; (8006ec0 <UART_SetConfig+0x4e4>)
 8006d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	011c      	lsls	r4, r3, #4
 8006d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d58:	4642      	mov	r2, r8
 8006d5a:	464b      	mov	r3, r9
 8006d5c:	1891      	adds	r1, r2, r2
 8006d5e:	61b9      	str	r1, [r7, #24]
 8006d60:	415b      	adcs	r3, r3
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d68:	4641      	mov	r1, r8
 8006d6a:	1851      	adds	r1, r2, r1
 8006d6c:	6139      	str	r1, [r7, #16]
 8006d6e:	4649      	mov	r1, r9
 8006d70:	414b      	adcs	r3, r1
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	f04f 0200 	mov.w	r2, #0
 8006d78:	f04f 0300 	mov.w	r3, #0
 8006d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d80:	4659      	mov	r1, fp
 8006d82:	00cb      	lsls	r3, r1, #3
 8006d84:	4651      	mov	r1, sl
 8006d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d8a:	4651      	mov	r1, sl
 8006d8c:	00ca      	lsls	r2, r1, #3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	4619      	mov	r1, r3
 8006d92:	4603      	mov	r3, r0
 8006d94:	4642      	mov	r2, r8
 8006d96:	189b      	adds	r3, r3, r2
 8006d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d9c:	464b      	mov	r3, r9
 8006d9e:	460a      	mov	r2, r1
 8006da0:	eb42 0303 	adc.w	r3, r2, r3
 8006da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006db2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006db4:	f04f 0200 	mov.w	r2, #0
 8006db8:	f04f 0300 	mov.w	r3, #0
 8006dbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	008b      	lsls	r3, r1, #2
 8006dc4:	4641      	mov	r1, r8
 8006dc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dca:	4641      	mov	r1, r8
 8006dcc:	008a      	lsls	r2, r1, #2
 8006dce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006dd2:	f7f9 fe1f 	bl	8000a14 <__aeabi_uldivmod>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4b39      	ldr	r3, [pc, #228]	; (8006ec0 <UART_SetConfig+0x4e4>)
 8006ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8006de0:	095b      	lsrs	r3, r3, #5
 8006de2:	2164      	movs	r1, #100	; 0x64
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	3332      	adds	r3, #50	; 0x32
 8006dee:	4a34      	ldr	r2, [pc, #208]	; (8006ec0 <UART_SetConfig+0x4e4>)
 8006df0:	fba2 2303 	umull	r2, r3, r2, r3
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dfa:	441c      	add	r4, r3
 8006dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e00:	2200      	movs	r2, #0
 8006e02:	673b      	str	r3, [r7, #112]	; 0x70
 8006e04:	677a      	str	r2, [r7, #116]	; 0x74
 8006e06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e0a:	4642      	mov	r2, r8
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	1891      	adds	r1, r2, r2
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	415b      	adcs	r3, r3
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	1851      	adds	r1, r2, r1
 8006e1e:	6039      	str	r1, [r7, #0]
 8006e20:	4649      	mov	r1, r9
 8006e22:	414b      	adcs	r3, r1
 8006e24:	607b      	str	r3, [r7, #4]
 8006e26:	f04f 0200 	mov.w	r2, #0
 8006e2a:	f04f 0300 	mov.w	r3, #0
 8006e2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e32:	4659      	mov	r1, fp
 8006e34:	00cb      	lsls	r3, r1, #3
 8006e36:	4651      	mov	r1, sl
 8006e38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e3c:	4651      	mov	r1, sl
 8006e3e:	00ca      	lsls	r2, r1, #3
 8006e40:	4610      	mov	r0, r2
 8006e42:	4619      	mov	r1, r3
 8006e44:	4603      	mov	r3, r0
 8006e46:	4642      	mov	r2, r8
 8006e48:	189b      	adds	r3, r3, r2
 8006e4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	460a      	mov	r2, r1
 8006e50:	eb42 0303 	adc.w	r3, r2, r3
 8006e54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	663b      	str	r3, [r7, #96]	; 0x60
 8006e60:	667a      	str	r2, [r7, #100]	; 0x64
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e6e:	4649      	mov	r1, r9
 8006e70:	008b      	lsls	r3, r1, #2
 8006e72:	4641      	mov	r1, r8
 8006e74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e78:	4641      	mov	r1, r8
 8006e7a:	008a      	lsls	r2, r1, #2
 8006e7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e80:	f7f9 fdc8 	bl	8000a14 <__aeabi_uldivmod>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <UART_SetConfig+0x4e4>)
 8006e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	2164      	movs	r1, #100	; 0x64
 8006e92:	fb01 f303 	mul.w	r3, r1, r3
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	3332      	adds	r3, #50	; 0x32
 8006e9c:	4a08      	ldr	r2, [pc, #32]	; (8006ec0 <UART_SetConfig+0x4e4>)
 8006e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	f003 020f 	and.w	r2, r3, #15
 8006ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4422      	add	r2, r4
 8006eb0:	609a      	str	r2, [r3, #8]
}
 8006eb2:	bf00      	nop
 8006eb4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ebe:	bf00      	nop
 8006ec0:	51eb851f 	.word	0x51eb851f

08006ec4 <_ZdlPvj>:
 8006ec4:	f000 b814 	b.w	8006ef0 <_ZdlPv>

08006ec8 <_Znwj>:
 8006ec8:	2801      	cmp	r0, #1
 8006eca:	bf38      	it	cc
 8006ecc:	2001      	movcc	r0, #1
 8006ece:	b510      	push	{r4, lr}
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 f85a 	bl	8006f8c <malloc>
 8006ed8:	b930      	cbnz	r0, 8006ee8 <_Znwj+0x20>
 8006eda:	f000 f81d 	bl	8006f18 <_ZSt15get_new_handlerv>
 8006ede:	b908      	cbnz	r0, 8006ee4 <_Znwj+0x1c>
 8006ee0:	f000 f822 	bl	8006f28 <abort>
 8006ee4:	4780      	blx	r0
 8006ee6:	e7f4      	b.n	8006ed2 <_Znwj+0xa>
 8006ee8:	bd10      	pop	{r4, pc}

08006eea <__cxa_pure_virtual>:
 8006eea:	b508      	push	{r3, lr}
 8006eec:	f000 f80e 	bl	8006f0c <_ZSt9terminatev>

08006ef0 <_ZdlPv>:
 8006ef0:	f000 b854 	b.w	8006f9c <free>

08006ef4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006ef4:	b508      	push	{r3, lr}
 8006ef6:	4780      	blx	r0
 8006ef8:	f000 f816 	bl	8006f28 <abort>

08006efc <_ZSt13get_terminatev>:
 8006efc:	4b02      	ldr	r3, [pc, #8]	; (8006f08 <_ZSt13get_terminatev+0xc>)
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	f3bf 8f5b 	dmb	ish
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	2000000c 	.word	0x2000000c

08006f0c <_ZSt9terminatev>:
 8006f0c:	b508      	push	{r3, lr}
 8006f0e:	f7ff fff5 	bl	8006efc <_ZSt13get_terminatev>
 8006f12:	f7ff ffef 	bl	8006ef4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08006f18 <_ZSt15get_new_handlerv>:
 8006f18:	4b02      	ldr	r3, [pc, #8]	; (8006f24 <_ZSt15get_new_handlerv+0xc>)
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	f3bf 8f5b 	dmb	ish
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	200002cc 	.word	0x200002cc

08006f28 <abort>:
 8006f28:	b508      	push	{r3, lr}
 8006f2a:	2006      	movs	r0, #6
 8006f2c:	f000 f95e 	bl	80071ec <raise>
 8006f30:	2001      	movs	r0, #1
 8006f32:	f7fc f9b9 	bl	80032a8 <_exit>
	...

08006f38 <__errno>:
 8006f38:	4b01      	ldr	r3, [pc, #4]	; (8006f40 <__errno+0x8>)
 8006f3a:	6818      	ldr	r0, [r3, #0]
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20000010 	.word	0x20000010

08006f44 <__libc_init_array>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	4d0d      	ldr	r5, [pc, #52]	; (8006f7c <__libc_init_array+0x38>)
 8006f48:	4c0d      	ldr	r4, [pc, #52]	; (8006f80 <__libc_init_array+0x3c>)
 8006f4a:	1b64      	subs	r4, r4, r5
 8006f4c:	10a4      	asrs	r4, r4, #2
 8006f4e:	2600      	movs	r6, #0
 8006f50:	42a6      	cmp	r6, r4
 8006f52:	d109      	bne.n	8006f68 <__libc_init_array+0x24>
 8006f54:	4d0b      	ldr	r5, [pc, #44]	; (8006f84 <__libc_init_array+0x40>)
 8006f56:	4c0c      	ldr	r4, [pc, #48]	; (8006f88 <__libc_init_array+0x44>)
 8006f58:	f000 f972 	bl	8007240 <_init>
 8006f5c:	1b64      	subs	r4, r4, r5
 8006f5e:	10a4      	asrs	r4, r4, #2
 8006f60:	2600      	movs	r6, #0
 8006f62:	42a6      	cmp	r6, r4
 8006f64:	d105      	bne.n	8006f72 <__libc_init_array+0x2e>
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6c:	4798      	blx	r3
 8006f6e:	3601      	adds	r6, #1
 8006f70:	e7ee      	b.n	8006f50 <__libc_init_array+0xc>
 8006f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f76:	4798      	blx	r3
 8006f78:	3601      	adds	r6, #1
 8006f7a:	e7f2      	b.n	8006f62 <__libc_init_array+0x1e>
 8006f7c:	08007324 	.word	0x08007324
 8006f80:	08007324 	.word	0x08007324
 8006f84:	08007324 	.word	0x08007324
 8006f88:	0800732c 	.word	0x0800732c

08006f8c <malloc>:
 8006f8c:	4b02      	ldr	r3, [pc, #8]	; (8006f98 <malloc+0xc>)
 8006f8e:	4601      	mov	r1, r0
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	f000 b87f 	b.w	8007094 <_malloc_r>
 8006f96:	bf00      	nop
 8006f98:	20000010 	.word	0x20000010

08006f9c <free>:
 8006f9c:	4b02      	ldr	r3, [pc, #8]	; (8006fa8 <free+0xc>)
 8006f9e:	4601      	mov	r1, r0
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	f000 b80b 	b.w	8006fbc <_free_r>
 8006fa6:	bf00      	nop
 8006fa8:	20000010 	.word	0x20000010

08006fac <memset>:
 8006fac:	4402      	add	r2, r0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d100      	bne.n	8006fb6 <memset+0xa>
 8006fb4:	4770      	bx	lr
 8006fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fba:	e7f9      	b.n	8006fb0 <memset+0x4>

08006fbc <_free_r>:
 8006fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fbe:	2900      	cmp	r1, #0
 8006fc0:	d044      	beq.n	800704c <_free_r+0x90>
 8006fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fc6:	9001      	str	r0, [sp, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f1a1 0404 	sub.w	r4, r1, #4
 8006fce:	bfb8      	it	lt
 8006fd0:	18e4      	addlt	r4, r4, r3
 8006fd2:	f000 f927 	bl	8007224 <__malloc_lock>
 8006fd6:	4a1e      	ldr	r2, [pc, #120]	; (8007050 <_free_r+0x94>)
 8006fd8:	9801      	ldr	r0, [sp, #4]
 8006fda:	6813      	ldr	r3, [r2, #0]
 8006fdc:	b933      	cbnz	r3, 8006fec <_free_r+0x30>
 8006fde:	6063      	str	r3, [r4, #4]
 8006fe0:	6014      	str	r4, [r2, #0]
 8006fe2:	b003      	add	sp, #12
 8006fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fe8:	f000 b922 	b.w	8007230 <__malloc_unlock>
 8006fec:	42a3      	cmp	r3, r4
 8006fee:	d908      	bls.n	8007002 <_free_r+0x46>
 8006ff0:	6825      	ldr	r5, [r4, #0]
 8006ff2:	1961      	adds	r1, r4, r5
 8006ff4:	428b      	cmp	r3, r1
 8006ff6:	bf01      	itttt	eq
 8006ff8:	6819      	ldreq	r1, [r3, #0]
 8006ffa:	685b      	ldreq	r3, [r3, #4]
 8006ffc:	1949      	addeq	r1, r1, r5
 8006ffe:	6021      	streq	r1, [r4, #0]
 8007000:	e7ed      	b.n	8006fde <_free_r+0x22>
 8007002:	461a      	mov	r2, r3
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	b10b      	cbz	r3, 800700c <_free_r+0x50>
 8007008:	42a3      	cmp	r3, r4
 800700a:	d9fa      	bls.n	8007002 <_free_r+0x46>
 800700c:	6811      	ldr	r1, [r2, #0]
 800700e:	1855      	adds	r5, r2, r1
 8007010:	42a5      	cmp	r5, r4
 8007012:	d10b      	bne.n	800702c <_free_r+0x70>
 8007014:	6824      	ldr	r4, [r4, #0]
 8007016:	4421      	add	r1, r4
 8007018:	1854      	adds	r4, r2, r1
 800701a:	42a3      	cmp	r3, r4
 800701c:	6011      	str	r1, [r2, #0]
 800701e:	d1e0      	bne.n	8006fe2 <_free_r+0x26>
 8007020:	681c      	ldr	r4, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	6053      	str	r3, [r2, #4]
 8007026:	4421      	add	r1, r4
 8007028:	6011      	str	r1, [r2, #0]
 800702a:	e7da      	b.n	8006fe2 <_free_r+0x26>
 800702c:	d902      	bls.n	8007034 <_free_r+0x78>
 800702e:	230c      	movs	r3, #12
 8007030:	6003      	str	r3, [r0, #0]
 8007032:	e7d6      	b.n	8006fe2 <_free_r+0x26>
 8007034:	6825      	ldr	r5, [r4, #0]
 8007036:	1961      	adds	r1, r4, r5
 8007038:	428b      	cmp	r3, r1
 800703a:	bf04      	itt	eq
 800703c:	6819      	ldreq	r1, [r3, #0]
 800703e:	685b      	ldreq	r3, [r3, #4]
 8007040:	6063      	str	r3, [r4, #4]
 8007042:	bf04      	itt	eq
 8007044:	1949      	addeq	r1, r1, r5
 8007046:	6021      	streq	r1, [r4, #0]
 8007048:	6054      	str	r4, [r2, #4]
 800704a:	e7ca      	b.n	8006fe2 <_free_r+0x26>
 800704c:	b003      	add	sp, #12
 800704e:	bd30      	pop	{r4, r5, pc}
 8007050:	200002d0 	.word	0x200002d0

08007054 <sbrk_aligned>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	4e0e      	ldr	r6, [pc, #56]	; (8007090 <sbrk_aligned+0x3c>)
 8007058:	460c      	mov	r4, r1
 800705a:	6831      	ldr	r1, [r6, #0]
 800705c:	4605      	mov	r5, r0
 800705e:	b911      	cbnz	r1, 8007066 <sbrk_aligned+0x12>
 8007060:	f000 f88c 	bl	800717c <_sbrk_r>
 8007064:	6030      	str	r0, [r6, #0]
 8007066:	4621      	mov	r1, r4
 8007068:	4628      	mov	r0, r5
 800706a:	f000 f887 	bl	800717c <_sbrk_r>
 800706e:	1c43      	adds	r3, r0, #1
 8007070:	d00a      	beq.n	8007088 <sbrk_aligned+0x34>
 8007072:	1cc4      	adds	r4, r0, #3
 8007074:	f024 0403 	bic.w	r4, r4, #3
 8007078:	42a0      	cmp	r0, r4
 800707a:	d007      	beq.n	800708c <sbrk_aligned+0x38>
 800707c:	1a21      	subs	r1, r4, r0
 800707e:	4628      	mov	r0, r5
 8007080:	f000 f87c 	bl	800717c <_sbrk_r>
 8007084:	3001      	adds	r0, #1
 8007086:	d101      	bne.n	800708c <sbrk_aligned+0x38>
 8007088:	f04f 34ff 	mov.w	r4, #4294967295
 800708c:	4620      	mov	r0, r4
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	200002d4 	.word	0x200002d4

08007094 <_malloc_r>:
 8007094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007098:	1ccd      	adds	r5, r1, #3
 800709a:	f025 0503 	bic.w	r5, r5, #3
 800709e:	3508      	adds	r5, #8
 80070a0:	2d0c      	cmp	r5, #12
 80070a2:	bf38      	it	cc
 80070a4:	250c      	movcc	r5, #12
 80070a6:	2d00      	cmp	r5, #0
 80070a8:	4607      	mov	r7, r0
 80070aa:	db01      	blt.n	80070b0 <_malloc_r+0x1c>
 80070ac:	42a9      	cmp	r1, r5
 80070ae:	d905      	bls.n	80070bc <_malloc_r+0x28>
 80070b0:	230c      	movs	r3, #12
 80070b2:	603b      	str	r3, [r7, #0]
 80070b4:	2600      	movs	r6, #0
 80070b6:	4630      	mov	r0, r6
 80070b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070bc:	4e2e      	ldr	r6, [pc, #184]	; (8007178 <_malloc_r+0xe4>)
 80070be:	f000 f8b1 	bl	8007224 <__malloc_lock>
 80070c2:	6833      	ldr	r3, [r6, #0]
 80070c4:	461c      	mov	r4, r3
 80070c6:	bb34      	cbnz	r4, 8007116 <_malloc_r+0x82>
 80070c8:	4629      	mov	r1, r5
 80070ca:	4638      	mov	r0, r7
 80070cc:	f7ff ffc2 	bl	8007054 <sbrk_aligned>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	4604      	mov	r4, r0
 80070d4:	d14d      	bne.n	8007172 <_malloc_r+0xde>
 80070d6:	6834      	ldr	r4, [r6, #0]
 80070d8:	4626      	mov	r6, r4
 80070da:	2e00      	cmp	r6, #0
 80070dc:	d140      	bne.n	8007160 <_malloc_r+0xcc>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	4631      	mov	r1, r6
 80070e2:	4638      	mov	r0, r7
 80070e4:	eb04 0803 	add.w	r8, r4, r3
 80070e8:	f000 f848 	bl	800717c <_sbrk_r>
 80070ec:	4580      	cmp	r8, r0
 80070ee:	d13a      	bne.n	8007166 <_malloc_r+0xd2>
 80070f0:	6821      	ldr	r1, [r4, #0]
 80070f2:	3503      	adds	r5, #3
 80070f4:	1a6d      	subs	r5, r5, r1
 80070f6:	f025 0503 	bic.w	r5, r5, #3
 80070fa:	3508      	adds	r5, #8
 80070fc:	2d0c      	cmp	r5, #12
 80070fe:	bf38      	it	cc
 8007100:	250c      	movcc	r5, #12
 8007102:	4629      	mov	r1, r5
 8007104:	4638      	mov	r0, r7
 8007106:	f7ff ffa5 	bl	8007054 <sbrk_aligned>
 800710a:	3001      	adds	r0, #1
 800710c:	d02b      	beq.n	8007166 <_malloc_r+0xd2>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	442b      	add	r3, r5
 8007112:	6023      	str	r3, [r4, #0]
 8007114:	e00e      	b.n	8007134 <_malloc_r+0xa0>
 8007116:	6822      	ldr	r2, [r4, #0]
 8007118:	1b52      	subs	r2, r2, r5
 800711a:	d41e      	bmi.n	800715a <_malloc_r+0xc6>
 800711c:	2a0b      	cmp	r2, #11
 800711e:	d916      	bls.n	800714e <_malloc_r+0xba>
 8007120:	1961      	adds	r1, r4, r5
 8007122:	42a3      	cmp	r3, r4
 8007124:	6025      	str	r5, [r4, #0]
 8007126:	bf18      	it	ne
 8007128:	6059      	strne	r1, [r3, #4]
 800712a:	6863      	ldr	r3, [r4, #4]
 800712c:	bf08      	it	eq
 800712e:	6031      	streq	r1, [r6, #0]
 8007130:	5162      	str	r2, [r4, r5]
 8007132:	604b      	str	r3, [r1, #4]
 8007134:	4638      	mov	r0, r7
 8007136:	f104 060b 	add.w	r6, r4, #11
 800713a:	f000 f879 	bl	8007230 <__malloc_unlock>
 800713e:	f026 0607 	bic.w	r6, r6, #7
 8007142:	1d23      	adds	r3, r4, #4
 8007144:	1af2      	subs	r2, r6, r3
 8007146:	d0b6      	beq.n	80070b6 <_malloc_r+0x22>
 8007148:	1b9b      	subs	r3, r3, r6
 800714a:	50a3      	str	r3, [r4, r2]
 800714c:	e7b3      	b.n	80070b6 <_malloc_r+0x22>
 800714e:	6862      	ldr	r2, [r4, #4]
 8007150:	42a3      	cmp	r3, r4
 8007152:	bf0c      	ite	eq
 8007154:	6032      	streq	r2, [r6, #0]
 8007156:	605a      	strne	r2, [r3, #4]
 8007158:	e7ec      	b.n	8007134 <_malloc_r+0xa0>
 800715a:	4623      	mov	r3, r4
 800715c:	6864      	ldr	r4, [r4, #4]
 800715e:	e7b2      	b.n	80070c6 <_malloc_r+0x32>
 8007160:	4634      	mov	r4, r6
 8007162:	6876      	ldr	r6, [r6, #4]
 8007164:	e7b9      	b.n	80070da <_malloc_r+0x46>
 8007166:	230c      	movs	r3, #12
 8007168:	603b      	str	r3, [r7, #0]
 800716a:	4638      	mov	r0, r7
 800716c:	f000 f860 	bl	8007230 <__malloc_unlock>
 8007170:	e7a1      	b.n	80070b6 <_malloc_r+0x22>
 8007172:	6025      	str	r5, [r4, #0]
 8007174:	e7de      	b.n	8007134 <_malloc_r+0xa0>
 8007176:	bf00      	nop
 8007178:	200002d0 	.word	0x200002d0

0800717c <_sbrk_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4d06      	ldr	r5, [pc, #24]	; (8007198 <_sbrk_r+0x1c>)
 8007180:	2300      	movs	r3, #0
 8007182:	4604      	mov	r4, r0
 8007184:	4608      	mov	r0, r1
 8007186:	602b      	str	r3, [r5, #0]
 8007188:	f7fc f898 	bl	80032bc <_sbrk>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d102      	bne.n	8007196 <_sbrk_r+0x1a>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	b103      	cbz	r3, 8007196 <_sbrk_r+0x1a>
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	200002d8 	.word	0x200002d8

0800719c <_raise_r>:
 800719c:	291f      	cmp	r1, #31
 800719e:	b538      	push	{r3, r4, r5, lr}
 80071a0:	4604      	mov	r4, r0
 80071a2:	460d      	mov	r5, r1
 80071a4:	d904      	bls.n	80071b0 <_raise_r+0x14>
 80071a6:	2316      	movs	r3, #22
 80071a8:	6003      	str	r3, [r0, #0]
 80071aa:	f04f 30ff 	mov.w	r0, #4294967295
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071b2:	b112      	cbz	r2, 80071ba <_raise_r+0x1e>
 80071b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071b8:	b94b      	cbnz	r3, 80071ce <_raise_r+0x32>
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 f830 	bl	8007220 <_getpid_r>
 80071c0:	462a      	mov	r2, r5
 80071c2:	4601      	mov	r1, r0
 80071c4:	4620      	mov	r0, r4
 80071c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ca:	f000 b817 	b.w	80071fc <_kill_r>
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d00a      	beq.n	80071e8 <_raise_r+0x4c>
 80071d2:	1c59      	adds	r1, r3, #1
 80071d4:	d103      	bne.n	80071de <_raise_r+0x42>
 80071d6:	2316      	movs	r3, #22
 80071d8:	6003      	str	r3, [r0, #0]
 80071da:	2001      	movs	r0, #1
 80071dc:	e7e7      	b.n	80071ae <_raise_r+0x12>
 80071de:	2400      	movs	r4, #0
 80071e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071e4:	4628      	mov	r0, r5
 80071e6:	4798      	blx	r3
 80071e8:	2000      	movs	r0, #0
 80071ea:	e7e0      	b.n	80071ae <_raise_r+0x12>

080071ec <raise>:
 80071ec:	4b02      	ldr	r3, [pc, #8]	; (80071f8 <raise+0xc>)
 80071ee:	4601      	mov	r1, r0
 80071f0:	6818      	ldr	r0, [r3, #0]
 80071f2:	f7ff bfd3 	b.w	800719c <_raise_r>
 80071f6:	bf00      	nop
 80071f8:	20000010 	.word	0x20000010

080071fc <_kill_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d07      	ldr	r5, [pc, #28]	; (800721c <_kill_r+0x20>)
 8007200:	2300      	movs	r3, #0
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	4611      	mov	r1, r2
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	f7fc f83d 	bl	8003288 <_kill>
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	d102      	bne.n	8007218 <_kill_r+0x1c>
 8007212:	682b      	ldr	r3, [r5, #0]
 8007214:	b103      	cbz	r3, 8007218 <_kill_r+0x1c>
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	bd38      	pop	{r3, r4, r5, pc}
 800721a:	bf00      	nop
 800721c:	200002d8 	.word	0x200002d8

08007220 <_getpid_r>:
 8007220:	f7fc b82a 	b.w	8003278 <_getpid>

08007224 <__malloc_lock>:
 8007224:	4801      	ldr	r0, [pc, #4]	; (800722c <__malloc_lock+0x8>)
 8007226:	f000 b809 	b.w	800723c <__retarget_lock_acquire_recursive>
 800722a:	bf00      	nop
 800722c:	200002dc 	.word	0x200002dc

08007230 <__malloc_unlock>:
 8007230:	4801      	ldr	r0, [pc, #4]	; (8007238 <__malloc_unlock+0x8>)
 8007232:	f000 b804 	b.w	800723e <__retarget_lock_release_recursive>
 8007236:	bf00      	nop
 8007238:	200002dc 	.word	0x200002dc

0800723c <__retarget_lock_acquire_recursive>:
 800723c:	4770      	bx	lr

0800723e <__retarget_lock_release_recursive>:
 800723e:	4770      	bx	lr

08007240 <_init>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	bf00      	nop
 8007244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007246:	bc08      	pop	{r3}
 8007248:	469e      	mov	lr, r3
 800724a:	4770      	bx	lr

0800724c <_fini>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr
