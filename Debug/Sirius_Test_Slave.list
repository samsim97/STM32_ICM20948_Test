
Sirius_Test_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000906c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08009204  08009204  00019204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009238  08009238  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009238  08009238  00019238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009240  08009240  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009240  08009240  00019240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009244  08009244  00019244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  2000007c  080092c4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a48  080092c4  00020a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ecc  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e95  00000000  00000000  00038fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  0003ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f54  00000000  00000000  0003e230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bcb1  00000000  00000000  0003f184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bcd7  00000000  00000000  0005ae35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092c5f  00000000  00000000  00076b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005674  00000000  00000000  0010976c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080091ec 	.word	0x080091ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	080091ec 	.word	0x080091ec

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b5b0      	push	{r4, r5, r7, lr}
 80004e6:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fd68 	bl	8000fc0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f864 	bl	80005bc <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004f4:	f000 f8d4 	bl	80006a0 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f9fa 	bl	80008f0 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 80004fc:	f000 f8f6 	bl	80006ec <_ZL12MX_I2C1_Initv>
  MX_I2S2_Init();
 8000500:	f000 f928 	bl	8000754 <_ZL12MX_I2S2_Initv>
  MX_I2S3_Init();
 8000504:	f000 f95a 	bl	80007bc <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 8000508:	f000 f98c 	bl	8000824 <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 800050c:	f008 fa1a 	bl	8008944 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f9c0 	bl	8000894 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  // For how to setup the command, see: https://www.sparkfun.com/datasheets/GPS/NMEA%20Reference%20Manual-Rev2.1-Dec07.pdf
//										http://files.banggood.com/2016/11/BN-220%20GPS+Antenna%20datasheet.pdf
  char command[] = "$PSRF103,01,00,05,00*25";
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <main+0xd0>)
 8000516:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 800051a:	461d      	mov	r5, r3
 800051c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000524:	e884 0003 	stmia.w	r4, {r0, r1}
  char buffer[1024];
  uint8_t rxBuffer[256];
  memset(buffer, 0, sizeof(buffer));
 8000528:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800052c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f008 fdca 	bl	80090cc <memset>
  memset(rxBuffer, 0, sizeof(rxBuffer));
 8000538:	463b      	mov	r3, r7
 800053a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f008 fdc3 	bl	80090cc <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	int transmitCode = HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), 5000);
 8000546:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe44 	bl	80001d8 <strlen>
 8000550:	4603      	mov	r3, r0
 8000552:	b29a      	uxth	r2, r3
 8000554:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8000558:	f241 3388 	movw	r3, #5000	; 0x1388
 800055c:	4816      	ldr	r0, [pc, #88]	; (80005b8 <main+0xd4>)
 800055e:	f004 f9b3 	bl	80048c8 <HAL_UART_Transmit>
 8000562:	4603      	mov	r3, r0
 8000564:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
	int returnCode = HAL_UART_Receive(&huart2, (uint8_t*)buffer, sizeof(buffer) - 1, 5000);
 8000568:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800056c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000570:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000574:	4810      	ldr	r0, [pc, #64]	; (80005b8 <main+0xd4>)
 8000576:	f004 fa39 	bl	80049ec <HAL_UART_Receive>
 800057a:	4603      	mov	r3, r0
 800057c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
	if (HAL_UART_Receive(&huart2, (uint8_t*)buffer, sizeof(buffer) - 1, 10000) == HAL_OK) {
 8000580:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8000584:	f242 7310 	movw	r3, #10000	; 0x2710
 8000588:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800058c:	480a      	ldr	r0, [pc, #40]	; (80005b8 <main+0xd4>)
 800058e:	f004 fa2d 	bl	80049ec <HAL_UART_Receive>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	bf0c      	ite	eq
 8000598:	2301      	moveq	r3, #1
 800059a:	2300      	movne	r3, #0
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d000      	beq.n	80005a4 <main+0xc0>
	  __NOP();
 80005a2:	bf00      	nop
	}
    /* USER CODE END WHILE */
	MX_USB_HOST_Process();
 80005a4:	f008 f9f4 	bl	8008990 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

	HAL_Delay(5000);
 80005a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80005ac:	f000 fd7a 	bl	80010a4 <HAL_Delay>

    // HAL_SPI_Receive(&hspi1, RX_Data, sizeof(RX_Data), 5000);
    // HAL_UART_Receive(&huart2, RX_Data, sizeof(RX_Data), 1000);
    // HAL_Delay(2000);
  }
 80005b0:	e7c9      	b.n	8000546 <main+0x62>
 80005b2:	bf00      	nop
 80005b4:	08009204 	.word	0x08009204
 80005b8:	200001d4 	.word	0x200001d4

080005bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f008 fd7e 	bl	80090cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <_Z18SystemClock_Configv+0xdc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <_Z18SystemClock_Configv+0xdc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <_Z18SystemClock_Configv+0xdc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <_Z18SystemClock_Configv+0xe0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a25      	ldr	r2, [pc, #148]	; (800069c <_Z18SystemClock_Configv+0xe0>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <_Z18SystemClock_Configv+0xe0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000630:	23c0      	movs	r3, #192	; 0xc0
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000634:	2304      	movs	r3, #4
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000638:	2308      	movs	r3, #8
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fa83 	bl	8003b4c <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000656:	f000 fa27 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000666:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2103      	movs	r1, #3
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fce0 	bl	800403c <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	bf14      	ite	ne
 8000682:	2301      	movne	r3, #1
 8000684:	2300      	moveq	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800068c:	f000 fa0c 	bl	8000aa8 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	; 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006b6:	2301      	movs	r3, #1
 80006b8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006ba:	23c8      	movs	r3, #200	; 0xc8
 80006bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006be:	2305      	movs	r3, #5
 80006c0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 fed7 	bl	800447c <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 80006de:	f000 f9e3 	bl	8000aa8 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 80006f2:	4a16      	ldr	r2, [pc, #88]	; (800074c <_ZL12MX_I2C1_Initv+0x60>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 80006f8:	4a15      	ldr	r2, [pc, #84]	; (8000750 <_ZL12MX_I2C1_Initv+0x64>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4807      	ldr	r0, [pc, #28]	; (8000748 <_ZL12MX_I2C1_Initv+0x5c>)
 800072a:	f002 fc2b 	bl	8002f84 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	bf14      	ite	ne
 8000734:	2301      	movne	r3, #1
 8000736:	2300      	moveq	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800073e:	f000 f9b3 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000098 	.word	0x20000098
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <_ZL12MX_I2S2_Initv>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 800075a:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <_ZL12MX_I2S2_Initv+0x60>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <_ZL12MX_I2S2_Initv+0x64>)
 800077c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 800078c:	2201      	movs	r2, #1
 800078e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000790:	4807      	ldr	r0, [pc, #28]	; (80007b0 <_ZL12MX_I2S2_Initv+0x5c>)
 8000792:	f002 fd3b 	bl	800320c <HAL_I2S_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	bf14      	ite	ne
 800079c:	2301      	movne	r3, #1
 800079e:	2300      	moveq	r3, #0
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <_ZL12MX_I2S2_Initv+0x56>
  {
    Error_Handler();
 80007a6:	f000 f97f 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000ec 	.word	0x200000ec
 80007b4:	40003800 	.word	0x40003800
 80007b8:	00017700 	.word	0x00017700

080007bc <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <_ZL12MX_I2S3_Initv+0x60>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007e4:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <_ZL12MX_I2S3_Initv+0x64>)
 80007e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <_ZL12MX_I2S3_Initv+0x5c>)
 80007fc:	f002 fd06 	bl	800320c <HAL_I2S_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	bf14      	ite	ne
 8000806:	2301      	movne	r3, #1
 8000808:	2300      	moveq	r3, #0
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8000810:	f000 f94a 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000134 	.word	0x20000134
 800081c:	40003c00 	.word	0x40003c00
 8000820:	00017700 	.word	0x00017700

08000824 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 800082a:	4a19      	ldr	r2, [pc, #100]	; (8000890 <_ZL12MX_SPI1_Initv+0x6c>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 800084e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000852:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000862:	2200      	movs	r2, #0
 8000864:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 8000868:	220a      	movs	r2, #10
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <_ZL12MX_SPI1_Initv+0x68>)
 800086e:	f003 ff55 	bl	800471c <HAL_SPI_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2300      	moveq	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <_ZL12MX_SPI1_Initv+0x62>
  {
    Error_Handler();
 8000882:	f000 f911 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000017c 	.word	0x2000017c
 8000890:	40013000 	.word	0x40013000

08000894 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <_ZL19MX_USART2_UART_Initv+0x58>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80008cc:	f003 ffaf 	bl	800482e <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	bf14      	ite	ne
 80008d6:	2301      	movne	r3, #1
 80008d8:	2300      	moveq	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80008e0:	f000 f8e2 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200001d4 	.word	0x200001d4
 80008ec:	40004400 	.word	0x40004400

080008f0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	4b62      	ldr	r3, [pc, #392]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a61      	ldr	r2, [pc, #388]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	4b5b      	ldr	r3, [pc, #364]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a5a      	ldr	r2, [pc, #360]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b58      	ldr	r3, [pc, #352]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b54      	ldr	r3, [pc, #336]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a53      	ldr	r2, [pc, #332]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b51      	ldr	r3, [pc, #324]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b4d      	ldr	r3, [pc, #308]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a4c      	ldr	r2, [pc, #304]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b46      	ldr	r3, [pc, #280]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a45      	ldr	r2, [pc, #276]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b43      	ldr	r3, [pc, #268]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a3e      	ldr	r2, [pc, #248]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b3c      	ldr	r3, [pc, #240]	; (8000a94 <_ZL12MX_GPIO_Initv+0x1a4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2108      	movs	r1, #8
 80009b2:	4839      	ldr	r0, [pc, #228]	; (8000a98 <_ZL12MX_GPIO_Initv+0x1a8>)
 80009b4:	f000 fec2 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2101      	movs	r1, #1
 80009bc:	4837      	ldr	r0, [pc, #220]	; (8000a9c <_ZL12MX_GPIO_Initv+0x1ac>)
 80009be:	f000 febd 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c2:	2200      	movs	r2, #0
 80009c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009c8:	4835      	ldr	r0, [pc, #212]	; (8000aa0 <_ZL12MX_GPIO_Initv+0x1b0>)
 80009ca:	f000 feb7 	bl	800173c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009ce:	2304      	movs	r3, #4
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	482d      	ldr	r0, [pc, #180]	; (8000a98 <_ZL12MX_GPIO_Initv+0x1a8>)
 80009e2:	f000 fd27 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009e6:	2308      	movs	r3, #8
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4826      	ldr	r0, [pc, #152]	; (8000a98 <_ZL12MX_GPIO_Initv+0x1a8>)
 80009fe:	f000 fd19 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000a02:	2332      	movs	r3, #50	; 0x32
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a06:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <_ZL12MX_GPIO_Initv+0x1a8>)
 8000a18:	f000 fd0c 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	481a      	ldr	r0, [pc, #104]	; (8000a9c <_ZL12MX_GPIO_Initv+0x1ac>)
 8000a34:	f000 fcfe 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4815      	ldr	r0, [pc, #84]	; (8000aa4 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000a4e:	f000 fcf1 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a52:	2308      	movs	r3, #8
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000a6a:	f000 fce3 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a6e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a72:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000a88:	f000 fcd4 	bl	8001434 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3730      	adds	r7, #48	; 0x30
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af2:	2007      	movs	r0, #7
 8000af4:	f000 fbca 	bl	800128c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_I2C_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12c      	bne.n	8000b80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b42:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b48:	2312      	movs	r3, #18
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b54:	2304      	movs	r3, #4
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <HAL_I2C_MspInit+0x8c>)
 8000b60:	f000 fc68 	bl	8001434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	; 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400

08000b94 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a59      	ldr	r2, [pc, #356]	; (8000d18 <HAL_I2S_MspInit+0x184>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d15b      	bne.n	8000c6e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
 8000bba:	4b58      	ldr	r3, [pc, #352]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a57      	ldr	r2, [pc, #348]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b55      	ldr	r3, [pc, #340]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	623b      	str	r3, [r7, #32]
 8000bd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	4b51      	ldr	r3, [pc, #324]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a50      	ldr	r2, [pc, #320]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b4e      	ldr	r3, [pc, #312]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	4b4a      	ldr	r3, [pc, #296]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a49      	ldr	r2, [pc, #292]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c1a:	2306      	movs	r3, #6
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	483e      	ldr	r0, [pc, #248]	; (8000d20 <HAL_I2S_MspInit+0x18c>)
 8000c26:	f000 fc05 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c2a:	2308      	movs	r3, #8
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4836      	ldr	r0, [pc, #216]	; (8000d20 <HAL_I2S_MspInit+0x18c>)
 8000c46:	f000 fbf5 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c5c:	2305      	movs	r3, #5
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	482f      	ldr	r0, [pc, #188]	; (8000d24 <HAL_I2S_MspInit+0x190>)
 8000c68:	f000 fbe4 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c6c:	e04f      	b.n	8000d0e <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a2d      	ldr	r2, [pc, #180]	; (8000d28 <HAL_I2S_MspInit+0x194>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d14a      	bne.n	8000d0e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a26      	ldr	r2, [pc, #152]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	4a1f      	ldr	r2, [pc, #124]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_I2S_MspInit+0x188>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cdc:	2306      	movs	r3, #6
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4811      	ldr	r0, [pc, #68]	; (8000d2c <HAL_I2S_MspInit+0x198>)
 8000ce8:	f000 fba4 	bl	8001434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cec:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cfe:	2306      	movs	r3, #6
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <HAL_I2S_MspInit+0x18c>)
 8000d0a:	f000 fb93 	bl	8001434 <HAL_GPIO_Init>
}
 8000d0e:	bf00      	nop
 8000d10:	3738      	adds	r7, #56	; 0x38
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40003800 	.word	0x40003800
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40003c00 	.word	0x40003c00
 8000d2c:	40020000 	.word	0x40020000

08000d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <HAL_SPI_MspInit+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d12b      	bne.n	8000daa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d8a:	23e0      	movs	r3, #224	; 0xe0
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_SPI_MspInit+0x8c>)
 8000da6:	f000 fb45 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40013000 	.word	0x40013000
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_UART_MspInit+0x94>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d133      	bne.n	8000e4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e1a:	2360      	movs	r3, #96	; 0x60
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_UART_MspInit+0x9c>)
 8000e36:	f000 fafd 	bl	8001434 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2026      	movs	r0, #38	; 0x26
 8000e40:	f000 fa2f 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e44:	2026      	movs	r0, #38	; 0x26
 8000e46:	f000 fa48 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020c00 	.word	0x40020c00

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f8da 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <USART2_IRQHandler+0x10>)
 8000eba:	f003 fe39 	bl	8004b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200001d4 	.word	0x200001d4

08000ec8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <OTG_FS_IRQHandler+0x10>)
 8000ece:	f000 feb9 	bl	8001c44 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200005fc 	.word	0x200005fc

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f008 f8f6 	bl	80090fc <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20020000 	.word	0x20020000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	20000218 	.word	0x20000218
 8000f44:	20000a48 	.word	0x20000a48

08000f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f88:	4c0b      	ldr	r4, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f96:	f7ff ffd7 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f008 f8b5 	bl	8009108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff faa1 	bl	80004e4 <main>
  bx  lr    
 8000fa2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fb0:	08009248 	.word	0x08009248
  ldr r2, =_sbss
 8000fb4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fb8:	20000a48 	.word	0x20000a48

08000fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <HAL_Init+0x40>)
 8000fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_Init+0x40>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_Init+0x40>)
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f94f 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f808 	bl	8001004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff4:	f7ff fd5e 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023c00 	.word	0x40023c00

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0x54>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x58>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	fbb3 f3f1 	udiv	r3, r3, r1
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f967 	bl	80012f6 <HAL_SYSTICK_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e00e      	b.n	8001050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d80a      	bhi.n	800104e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 f92f 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <HAL_InitTick+0x5c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	20000008 	.word	0x20000008
 8001060:	20000004 	.word	0x20000004

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008
 8001088:	2000021c 	.word	0x2000021c

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	2000021c 	.word	0x2000021c

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_Delay+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	; (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff29 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff3e 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff31 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff feb6 	bl	800108c <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d008      	beq.n	8001340 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e052      	b.n	80013e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0216 	bic.w	r2, r2, #22
 800134e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800135e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <HAL_DMA_Abort+0x62>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0208 	bic.w	r2, r2, #8
 800137e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001390:	e013      	b.n	80013ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001392:	f7ff fe7b 	bl	800108c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b05      	cmp	r3, #5
 800139e:	d90c      	bls.n	80013ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2220      	movs	r2, #32
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e015      	b.n	80013e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e4      	bne.n	8001392 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	223f      	movs	r2, #63	; 0x3f
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d004      	beq.n	800140c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e00c      	b.n	8001426 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2205      	movs	r2, #5
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	e159      	b.n	8001704 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8148 	bne.w	80016fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d005      	beq.n	8001486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	2b02      	cmp	r3, #2
 8001484:	d130      	bne.n	80014e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 0201 	and.w	r2, r3, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d017      	beq.n	8001524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d123      	bne.n	8001578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	69b9      	ldr	r1, [r7, #24]
 8001574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0203 	and.w	r2, r3, #3
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80a2 	beq.w	80016fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b57      	ldr	r3, [pc, #348]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b54      	ldr	r3, [pc, #336]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d6:	4a52      	ldr	r2, [pc, #328]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a49      	ldr	r2, [pc, #292]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d019      	beq.n	8001636 <HAL_GPIO_Init+0x202>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a48      	ldr	r2, [pc, #288]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_GPIO_Init+0x1fe>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a47      	ldr	r2, [pc, #284]	; (800172c <HAL_GPIO_Init+0x2f8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00d      	beq.n	800162e <HAL_GPIO_Init+0x1fa>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a46      	ldr	r2, [pc, #280]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d007      	beq.n	800162a <HAL_GPIO_Init+0x1f6>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a45      	ldr	r2, [pc, #276]	; (8001734 <HAL_GPIO_Init+0x300>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d101      	bne.n	8001626 <HAL_GPIO_Init+0x1f2>
 8001622:	2304      	movs	r3, #4
 8001624:	e008      	b.n	8001638 <HAL_GPIO_Init+0x204>
 8001626:	2307      	movs	r3, #7
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x204>
 800162a:	2303      	movs	r3, #3
 800162c:	e004      	b.n	8001638 <HAL_GPIO_Init+0x204>
 800162e:	2302      	movs	r3, #2
 8001630:	e002      	b.n	8001638 <HAL_GPIO_Init+0x204>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x204>
 8001636:	2300      	movs	r3, #0
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	f002 0203 	and.w	r2, r2, #3
 800163e:	0092      	lsls	r2, r2, #2
 8001640:	4093      	lsls	r3, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001648:	4935      	ldr	r1, [pc, #212]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <HAL_GPIO_Init+0x304>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800167a:	4a2f      	ldr	r2, [pc, #188]	; (8001738 <HAL_GPIO_Init+0x304>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001680:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <HAL_GPIO_Init+0x304>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a4:	4a24      	ldr	r2, [pc, #144]	; (8001738 <HAL_GPIO_Init+0x304>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <HAL_GPIO_Init+0x304>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ce:	4a1a      	ldr	r2, [pc, #104]	; (8001738 <HAL_GPIO_Init+0x304>)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_GPIO_Init+0x304>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016f8:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <HAL_GPIO_Init+0x304>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b0f      	cmp	r3, #15
 8001708:	f67f aea2 	bls.w	8001450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40013800 	.word	0x40013800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40021000 	.word	0x40021000
 8001738:	40013c00 	.word	0x40013c00

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001758:	e003      	b.n	8001762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	041a      	lsls	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	619a      	str	r2, [r3, #24]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800176e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001770:	b08f      	sub	sp, #60	; 0x3c
 8001772:	af0a      	add	r7, sp, #40	; 0x28
 8001774:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e054      	b.n	800182a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d106      	bne.n	80017a0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f007 f930 	bl	8008a00 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2203      	movs	r2, #3
 80017a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 f95c 	bl	8005a7c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	687e      	ldr	r6, [r7, #4]
 80017cc:	466d      	mov	r5, sp
 80017ce:	f106 0410 	add.w	r4, r6, #16
 80017d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017de:	e885 0003 	stmia.w	r5, {r0, r1}
 80017e2:	1d33      	adds	r3, r6, #4
 80017e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	f004 f8d6 	bl	8005998 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2101      	movs	r1, #1
 80017f2:	4618      	mov	r0, r3
 80017f4:	f004 f953 	bl	8005a9e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	687e      	ldr	r6, [r7, #4]
 8001800:	466d      	mov	r5, sp
 8001802:	f106 0410 	add.w	r4, r6, #16
 8001806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001812:	e885 0003 	stmia.w	r5, {r0, r1}
 8001816:	1d33      	adds	r3, r6, #4
 8001818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800181a:	6838      	ldr	r0, [r7, #0]
 800181c:	f004 fadc 	bl	8005dd8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001832 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001832:	b590      	push	{r4, r7, lr}
 8001834:	b089      	sub	sp, #36	; 0x24
 8001836:	af04      	add	r7, sp, #16
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	4608      	mov	r0, r1
 800183c:	4611      	mov	r1, r2
 800183e:	461a      	mov	r2, r3
 8001840:	4603      	mov	r3, r0
 8001842:	70fb      	strb	r3, [r7, #3]
 8001844:	460b      	mov	r3, r1
 8001846:	70bb      	strb	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_HCD_HC_Init+0x28>
 8001856:	2302      	movs	r3, #2
 8001858:	e076      	b.n	8001948 <HAL_HCD_HC_Init+0x116>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	212c      	movs	r1, #44	; 0x2c
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	4413      	add	r3, r2
 800186e:	333d      	adds	r3, #61	; 0x3d
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	212c      	movs	r1, #44	; 0x2c
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	3338      	adds	r3, #56	; 0x38
 8001882:	787a      	ldrb	r2, [r7, #1]
 8001884:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	212c      	movs	r1, #44	; 0x2c
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	4413      	add	r3, r2
 8001892:	3340      	adds	r3, #64	; 0x40
 8001894:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001896:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	212c      	movs	r1, #44	; 0x2c
 800189e:	fb01 f303 	mul.w	r3, r1, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	3339      	adds	r3, #57	; 0x39
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	333f      	adds	r3, #63	; 0x3f
 80018b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	78ba      	ldrb	r2, [r7, #2]
 80018c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018c6:	b2d0      	uxtb	r0, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	333a      	adds	r3, #58	; 0x3a
 80018d4:	4602      	mov	r2, r0
 80018d6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	da09      	bge.n	80018f4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	333b      	adds	r3, #59	; 0x3b
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e008      	b.n	8001906 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	212c      	movs	r1, #44	; 0x2c
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	333b      	adds	r3, #59	; 0x3b
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	212c      	movs	r1, #44	; 0x2c
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	4413      	add	r3, r2
 8001912:	333c      	adds	r3, #60	; 0x3c
 8001914:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001918:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	787c      	ldrb	r4, [r7, #1]
 8001920:	78ba      	ldrb	r2, [r7, #2]
 8001922:	78f9      	ldrb	r1, [r7, #3]
 8001924:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	4623      	mov	r3, r4
 8001936:	f004 fbd5 	bl	80060e4 <USB_HC_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}

08001950 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_HCD_HC_Halt+0x1e>
 800196a:	2302      	movs	r3, #2
 800196c:	e00f      	b.n	800198e <HAL_HCD_HC_Halt+0x3e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f004 fe25 	bl	80065ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	4608      	mov	r0, r1
 80019a2:	4611      	mov	r1, r2
 80019a4:	461a      	mov	r2, r3
 80019a6:	4603      	mov	r3, r0
 80019a8:	70fb      	strb	r3, [r7, #3]
 80019aa:	460b      	mov	r3, r1
 80019ac:	70bb      	strb	r3, [r7, #2]
 80019ae:	4613      	mov	r3, r2
 80019b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	333b      	adds	r3, #59	; 0x3b
 80019c0:	78ba      	ldrb	r2, [r7, #2]
 80019c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	212c      	movs	r1, #44	; 0x2c
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	333f      	adds	r3, #63	; 0x3f
 80019d2:	787a      	ldrb	r2, [r7, #1]
 80019d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019d6:	7c3b      	ldrb	r3, [r7, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d112      	bne.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	212c      	movs	r1, #44	; 0x2c
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	3342      	adds	r3, #66	; 0x42
 80019ea:	2203      	movs	r2, #3
 80019ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	212c      	movs	r1, #44	; 0x2c
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	333d      	adds	r3, #61	; 0x3d
 80019fc:	7f3a      	ldrb	r2, [r7, #28]
 80019fe:	701a      	strb	r2, [r3, #0]
 8001a00:	e008      	b.n	8001a14 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3342      	adds	r3, #66	; 0x42
 8001a10:	2202      	movs	r2, #2
 8001a12:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	f200 80c6 	bhi.w	8001ba8 <HAL_HCD_HC_SubmitRequest+0x210>
 8001a1c:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a22:	bf00      	nop
 8001a24:	08001a35 	.word	0x08001a35
 8001a28:	08001b95 	.word	0x08001b95
 8001a2c:	08001a99 	.word	0x08001a99
 8001a30:	08001b17 	.word	0x08001b17
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a34:	7c3b      	ldrb	r3, [r7, #16]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	f040 80b8 	bne.w	8001bac <HAL_HCD_HC_SubmitRequest+0x214>
 8001a3c:	78bb      	ldrb	r3, [r7, #2]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 80b4 	bne.w	8001bac <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a44:	8b3b      	ldrh	r3, [r7, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3355      	adds	r3, #85	; 0x55
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3355      	adds	r3, #85	; 0x55
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	212c      	movs	r1, #44	; 0x2c
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3342      	adds	r3, #66	; 0x42
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a82:	e093      	b.n	8001bac <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	212c      	movs	r1, #44	; 0x2c
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	3342      	adds	r3, #66	; 0x42
 8001a92:	2202      	movs	r2, #2
 8001a94:	701a      	strb	r2, [r3, #0]
      break;
 8001a96:	e089      	b.n	8001bac <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a98:	78bb      	ldrb	r3, [r7, #2]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d11d      	bne.n	8001ada <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	212c      	movs	r1, #44	; 0x2c
 8001aa4:	fb01 f303 	mul.w	r3, r1, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3355      	adds	r3, #85	; 0x55
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	212c      	movs	r1, #44	; 0x2c
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3342      	adds	r3, #66	; 0x42
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ac4:	e073      	b.n	8001bae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	212c      	movs	r1, #44	; 0x2c
 8001acc:	fb01 f303 	mul.w	r3, r1, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3342      	adds	r3, #66	; 0x42
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	701a      	strb	r2, [r3, #0]
      break;
 8001ad8:	e069      	b.n	8001bae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	212c      	movs	r1, #44	; 0x2c
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3354      	adds	r3, #84	; 0x54
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	212c      	movs	r1, #44	; 0x2c
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	3342      	adds	r3, #66	; 0x42
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
      break;
 8001b00:	e055      	b.n	8001bae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	212c      	movs	r1, #44	; 0x2c
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3342      	adds	r3, #66	; 0x42
 8001b10:	2202      	movs	r2, #2
 8001b12:	701a      	strb	r2, [r3, #0]
      break;
 8001b14:	e04b      	b.n	8001bae <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b16:	78bb      	ldrb	r3, [r7, #2]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d11d      	bne.n	8001b58 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	212c      	movs	r1, #44	; 0x2c
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	3355      	adds	r3, #85	; 0x55
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d109      	bne.n	8001b44 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	212c      	movs	r1, #44	; 0x2c
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3342      	adds	r3, #66	; 0x42
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b42:	e034      	b.n	8001bae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	212c      	movs	r1, #44	; 0x2c
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3342      	adds	r3, #66	; 0x42
 8001b52:	2202      	movs	r2, #2
 8001b54:	701a      	strb	r2, [r3, #0]
      break;
 8001b56:	e02a      	b.n	8001bae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	212c      	movs	r1, #44	; 0x2c
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	3354      	adds	r3, #84	; 0x54
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	212c      	movs	r1, #44	; 0x2c
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	3342      	adds	r3, #66	; 0x42
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
      break;
 8001b7e:	e016      	b.n	8001bae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	212c      	movs	r1, #44	; 0x2c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3342      	adds	r3, #66	; 0x42
 8001b8e:	2202      	movs	r2, #2
 8001b90:	701a      	strb	r2, [r3, #0]
      break;
 8001b92:	e00c      	b.n	8001bae <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	212c      	movs	r1, #44	; 0x2c
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3342      	adds	r3, #66	; 0x42
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
      break;
 8001ba6:	e002      	b.n	8001bae <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001ba8:	bf00      	nop
 8001baa:	e000      	b.n	8001bae <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001bac:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	212c      	movs	r1, #44	; 0x2c
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	3344      	adds	r3, #68	; 0x44
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	8b3a      	ldrh	r2, [r7, #24]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	202c      	movs	r0, #44	; 0x2c
 8001bc8:	fb00 f303 	mul.w	r3, r0, r3
 8001bcc:	440b      	add	r3, r1
 8001bce:	334c      	adds	r3, #76	; 0x4c
 8001bd0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3360      	adds	r3, #96	; 0x60
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	212c      	movs	r1, #44	; 0x2c
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	3350      	adds	r3, #80	; 0x50
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3339      	adds	r3, #57	; 0x39
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	212c      	movs	r1, #44	; 0x2c
 8001c0e:	fb01 f303 	mul.w	r3, r1, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	3361      	adds	r3, #97	; 0x61
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	222c      	movs	r2, #44	; 0x2c
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	3338      	adds	r3, #56	; 0x38
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	18d1      	adds	r1, r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	f004 fb78 	bl	8006328 <USB_HC_StartXfer>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop

08001c44 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 f879 	bl	8005d52 <USB_GetMode>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	f040 80f6 	bne.w	8001e54 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f004 f85d 	bl	8005d2c <USB_ReadInterrupts>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80ec 	beq.w	8001e52 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 f854 	bl	8005d2c <USB_ReadInterrupts>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c8e:	d104      	bne.n	8001c9a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 f844 	bl	8005d2c <USB_ReadInterrupts>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cae:	d104      	bne.n	8001cba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 f834 	bl	8005d2c <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cce:	d104      	bne.n	8001cda <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cd8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 f824 	bl	8005d2c <USB_ReadInterrupts>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d103      	bne.n	8001cf6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 f816 	bl	8005d2c <USB_ReadInterrupts>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d0a:	d11c      	bne.n	8001d46 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d14:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10f      	bne.n	8001d46 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d26:	2110      	movs	r1, #16
 8001d28:	6938      	ldr	r0, [r7, #16]
 8001d2a:	f003 ff05 	bl	8005b38 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d2e:	6938      	ldr	r0, [r7, #16]
 8001d30:	f003 ff36 	bl	8005ba0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 f90c 	bl	8005f58 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f006 fedb 	bl	8008afc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 ffee 	bl	8005d2c <USB_ReadInterrupts>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d5a:	d102      	bne.n	8001d62 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f001 f89e 	bl	8002e9e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 ffe0 	bl	8005d2c <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d106      	bne.n	8001d84 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f006 fea4 	bl	8008ac4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2208      	movs	r2, #8
 8001d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 ffcf 	bl	8005d2c <USB_ReadInterrupts>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d101      	bne.n	8001d9c <HAL_HCD_IRQHandler+0x158>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_HCD_IRQHandler+0x15a>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d012      	beq.n	8001dc8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0210 	bic.w	r2, r2, #16
 8001db0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 ffa1 	bl	8002cfa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0210 	orr.w	r2, r2, #16
 8001dc6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 ffad 	bl	8005d2c <USB_ReadInterrupts>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ddc:	d13a      	bne.n	8001e54 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f004 fbe2 	bl	80065ac <USB_HC_ReadInterrupt>
 8001de8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e025      	b.n	8001e3c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d018      	beq.n	8001e36 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e1a:	d106      	bne.n	8001e2a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	4619      	mov	r1, r3
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8ab 	bl	8001f7e <HCD_HC_IN_IRQHandler>
 8001e28:	e005      	b.n	8001e36 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4619      	mov	r1, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fbf9 	bl	8002628 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d3d4      	bcc.n	8001df0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4e:	615a      	str	r2, [r3, #20]
 8001e50:	e000      	b.n	8001e54 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e52:	bf00      	nop
    }
  }
}
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_HCD_Start+0x16>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e013      	b.n	8001e98 <HAL_HCD_Start+0x3e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f004 f8ce 	bl	8006020 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 fde6 	bl	8005a5a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_HCD_Stop+0x16>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e00d      	b.n	8001ed2 <HAL_HCD_Stop+0x32>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 fcbc 	bl	8006840 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 f870 	bl	8005fcc <USB_ResetPort>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3360      	adds	r3, #96	; 0x60
 8001f10:	781b      	ldrb	r3, [r3, #0]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	212c      	movs	r1, #44	; 0x2c
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	4413      	add	r3, r2
 8001f36:	3350      	adds	r3, #80	; 0x50
 8001f38:	681b      	ldr	r3, [r3, #0]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 f8b4 	bl	80060c0 <USB_GetCurrentFrame>
 8001f58:	4603      	mov	r3, r0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f004 f88f 	bl	8006092 <USB_GetHostSpeed>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d11a      	bne.n	8001fe4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3361      	adds	r3, #97	; 0x61
 8001fce:	2206      	movs	r2, #6
 8001fd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f004 faf6 	bl	80065ce <USB_HC_Halt>
 8001fe2:	e0af      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ffa:	d11b      	bne.n	8002034 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	015a      	lsls	r2, r3, #5
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4413      	add	r3, r2
 8002004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002008:	461a      	mov	r2, r3
 800200a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800200e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3361      	adds	r3, #97	; 0x61
 800201e:	2207      	movs	r2, #7
 8002020:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f004 face 	bl	80065ce <USB_HC_Halt>
 8002032:	e087      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b20      	cmp	r3, #32
 8002048:	d109      	bne.n	800205e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4413      	add	r3, r2
 8002052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002056:	461a      	mov	r2, r3
 8002058:	2320      	movs	r3, #32
 800205a:	6093      	str	r3, [r2, #8]
 800205c:	e072      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b08      	cmp	r3, #8
 8002072:	d11a      	bne.n	80020aa <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	461a      	mov	r2, r3
 8002082:	2308      	movs	r3, #8
 8002084:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	212c      	movs	r1, #44	; 0x2c
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	4413      	add	r3, r2
 8002092:	3361      	adds	r3, #97	; 0x61
 8002094:	2205      	movs	r2, #5
 8002096:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 fa93 	bl	80065ce <USB_HC_Halt>
 80020a8:	e04c      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c0:	d11b      	bne.n	80020fa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ce:	461a      	mov	r2, r3
 80020d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3361      	adds	r3, #97	; 0x61
 80020e4:	2208      	movs	r2, #8
 80020e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 fa6b 	bl	80065ce <USB_HC_Halt>
 80020f8:	e024      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4413      	add	r3, r2
 8002102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d119      	bne.n	8002144 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211c:	461a      	mov	r2, r3
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3361      	adds	r3, #97	; 0x61
 8002130:	2206      	movs	r2, #6
 8002132:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f004 fa45 	bl	80065ce <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215a:	d112      	bne.n	8002182 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f004 fa31 	bl	80065ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002178:	461a      	mov	r2, r3
 800217a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002180:	e24e      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	015a      	lsls	r2, r3, #5
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	f040 80df 	bne.w	8002358 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d019      	beq.n	80021d6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3348      	adds	r3, #72	; 0x48
 80021b0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	0159      	lsls	r1, r3, #5
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021c4:	1ad2      	subs	r2, r2, r3
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	202c      	movs	r0, #44	; 0x2c
 80021cc:	fb00 f303 	mul.w	r3, r0, r3
 80021d0:	440b      	add	r3, r1
 80021d2:	3350      	adds	r3, #80	; 0x50
 80021d4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3361      	adds	r3, #97	; 0x61
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	335c      	adds	r3, #92	; 0x5c
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002206:	461a      	mov	r2, r3
 8002208:	2301      	movs	r3, #1
 800220a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	333f      	adds	r3, #63	; 0x3f
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d009      	beq.n	8002234 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	333f      	adds	r3, #63	; 0x3f
 800222e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002230:	2b02      	cmp	r3, #2
 8002232:	d111      	bne.n	8002258 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f004 f9c5 	bl	80065ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	461a      	mov	r2, r3
 8002252:	2310      	movs	r3, #16
 8002254:	6093      	str	r3, [r2, #8]
 8002256:	e03a      	b.n	80022ce <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	333f      	adds	r3, #63	; 0x3f
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d009      	beq.n	8002280 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	333f      	adds	r3, #63	; 0x3f
 800227a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800227c:	2b01      	cmp	r3, #1
 800227e:	d126      	bne.n	80022ce <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	0151      	lsls	r1, r2, #5
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	440a      	add	r2, r1
 8002296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800229a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800229e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3360      	adds	r3, #96	; 0x60
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	b2d9      	uxtb	r1, r3
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	202c      	movs	r0, #44	; 0x2c
 80022bc:	fb00 f303 	mul.w	r3, r0, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	3360      	adds	r3, #96	; 0x60
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f006 fc25 	bl	8008b18 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d12b      	bne.n	800232e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	3348      	adds	r3, #72	; 0x48
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	202c      	movs	r0, #44	; 0x2c
 80022ec:	fb00 f202 	mul.w	r2, r0, r2
 80022f0:	440a      	add	r2, r1
 80022f2:	3240      	adds	r2, #64	; 0x40
 80022f4:	8812      	ldrh	r2, [r2, #0]
 80022f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 818e 	beq.w	8002620 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	3354      	adds	r3, #84	; 0x54
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f083 0301 	eor.w	r3, r3, #1
 8002318:	b2d8      	uxtb	r0, r3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3354      	adds	r3, #84	; 0x54
 8002328:	4602      	mov	r2, r0
 800232a:	701a      	strb	r2, [r3, #0]
}
 800232c:	e178      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3354      	adds	r3, #84	; 0x54
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2d8      	uxtb	r0, r3
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3354      	adds	r3, #84	; 0x54
 8002352:	4602      	mov	r2, r0
 8002354:	701a      	strb	r2, [r3, #0]
}
 8002356:	e163      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4413      	add	r3, r2
 8002360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	f040 80f6 	bne.w	800255c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	3361      	adds	r3, #97	; 0x61
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d109      	bne.n	8002398 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	3360      	adds	r3, #96	; 0x60
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	e0c9      	b.n	800252c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	212c      	movs	r1, #44	; 0x2c
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	3361      	adds	r3, #97	; 0x61
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d109      	bne.n	80023c0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3360      	adds	r3, #96	; 0x60
 80023ba:	2205      	movs	r2, #5
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	e0b5      	b.n	800252c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3361      	adds	r3, #97	; 0x61
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b06      	cmp	r3, #6
 80023d2:	d009      	beq.n	80023e8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3361      	adds	r3, #97	; 0x61
 80023e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d150      	bne.n	800248a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	335c      	adds	r3, #92	; 0x5c
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	202c      	movs	r0, #44	; 0x2c
 8002400:	fb00 f303 	mul.w	r3, r0, r3
 8002404:	440b      	add	r3, r1
 8002406:	335c      	adds	r3, #92	; 0x5c
 8002408:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	335c      	adds	r3, #92	; 0x5c
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d912      	bls.n	8002444 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	335c      	adds	r3, #92	; 0x5c
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3360      	adds	r3, #96	; 0x60
 800243e:	2204      	movs	r2, #4
 8002440:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002442:	e073      	b.n	800252c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	3360      	adds	r3, #96	; 0x60
 8002452:	2202      	movs	r2, #2
 8002454:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800246c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002474:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	461a      	mov	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002488:	e050      	b.n	800252c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	3361      	adds	r3, #97	; 0x61
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d122      	bne.n	80024e4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	3360      	adds	r3, #96	; 0x60
 80024ac:	2202      	movs	r2, #2
 80024ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e023      	b.n	800252c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	3361      	adds	r3, #97	; 0x61
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b07      	cmp	r3, #7
 80024f6:	d119      	bne.n	800252c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	335c      	adds	r3, #92	; 0x5c
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	202c      	movs	r0, #44	; 0x2c
 8002510:	fb00 f303 	mul.w	r3, r0, r3
 8002514:	440b      	add	r3, r1
 8002516:	335c      	adds	r3, #92	; 0x5c
 8002518:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	3360      	adds	r3, #96	; 0x60
 8002528:	2204      	movs	r2, #4
 800252a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	461a      	mov	r2, r3
 800253a:	2302      	movs	r3, #2
 800253c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	b2d9      	uxtb	r1, r3
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	202c      	movs	r0, #44	; 0x2c
 8002548:	fb00 f303 	mul.w	r3, r0, r3
 800254c:	4413      	add	r3, r2
 800254e:	3360      	adds	r3, #96	; 0x60
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f006 fadf 	bl	8008b18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800255a:	e061      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	2b10      	cmp	r3, #16
 8002570:	d156      	bne.n	8002620 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	333f      	adds	r3, #63	; 0x3f
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d111      	bne.n	80025aa <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	335c      	adds	r3, #92	; 0x5c
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f004 f813 	bl	80065ce <USB_HC_Halt>
 80025a8:	e031      	b.n	800260e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	212c      	movs	r1, #44	; 0x2c
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	333f      	adds	r3, #63	; 0x3f
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	333f      	adds	r3, #63	; 0x3f
 80025cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d11d      	bne.n	800260e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	335c      	adds	r3, #92	; 0x5c
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d110      	bne.n	800260e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	3361      	adds	r3, #97	; 0x61
 80025fa:	2203      	movs	r2, #3
 80025fc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f003 ffe0 	bl	80065ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	461a      	mov	r2, r3
 800261c:	2310      	movs	r3, #16
 800261e:	6093      	str	r3, [r2, #8]
}
 8002620:	bf00      	nop
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b04      	cmp	r3, #4
 8002656:	d11a      	bne.n	800268e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	461a      	mov	r2, r3
 8002666:	2304      	movs	r3, #4
 8002668:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3361      	adds	r3, #97	; 0x61
 8002678:	2206      	movs	r2, #6
 800267a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f003 ffa1 	bl	80065ce <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800268c:	e331      	b.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d12e      	bne.n	8002702 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	461a      	mov	r2, r3
 80026b2:	2320      	movs	r3, #32
 80026b4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	333d      	adds	r3, #61	; 0x3d
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	f040 8313 	bne.w	8002cf2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	333d      	adds	r3, #61	; 0x3d
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	3360      	adds	r3, #96	; 0x60
 80026ec:	2202      	movs	r2, #2
 80026ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f003 ff67 	bl	80065ce <USB_HC_Halt>
}
 8002700:	e2f7      	b.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002718:	d112      	bne.n	8002740 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002726:	461a      	mov	r2, r3
 8002728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800272c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f003 ff48 	bl	80065ce <USB_HC_Halt>
}
 800273e:	e2d8      	b.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d140      	bne.n	80027d8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	335c      	adds	r3, #92	; 0x5c
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	d111      	bne.n	80027a2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	333d      	adds	r3, #61	; 0x3d
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	461a      	mov	r2, r3
 800279e:	2340      	movs	r3, #64	; 0x40
 80027a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ae:	461a      	mov	r2, r3
 80027b0:	2301      	movs	r3, #1
 80027b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3361      	adds	r3, #97	; 0x61
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 fefc 	bl	80065ce <USB_HC_Halt>
}
 80027d6:	e28c      	b.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d12c      	bne.n	8002848 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	3361      	adds	r3, #97	; 0x61
 80027fc:	2204      	movs	r2, #4
 80027fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	333d      	adds	r3, #61	; 0x3d
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	335c      	adds	r3, #92	; 0x5c
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fecd 	bl	80065ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	461a      	mov	r2, r3
 8002842:	2340      	movs	r3, #64	; 0x40
 8002844:	6093      	str	r3, [r2, #8]
}
 8002846:	e254      	b.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b08      	cmp	r3, #8
 800285c:	d11a      	bne.n	8002894 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	461a      	mov	r2, r3
 800286c:	2308      	movs	r3, #8
 800286e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	3361      	adds	r3, #97	; 0x61
 800287e:	2205      	movs	r2, #5
 8002880:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f003 fe9e 	bl	80065ce <USB_HC_Halt>
}
 8002892:	e22e      	b.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d140      	bne.n	800292c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	335c      	adds	r3, #92	; 0x5c
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3361      	adds	r3, #97	; 0x61
 80028ca:	2203      	movs	r2, #3
 80028cc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	333d      	adds	r3, #61	; 0x3d
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d112      	bne.n	8002908 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	333c      	adds	r3, #60	; 0x3c
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	333d      	adds	r3, #61	; 0x3d
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f003 fe5b 	bl	80065ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	461a      	mov	r2, r3
 8002926:	2310      	movs	r3, #16
 8002928:	6093      	str	r3, [r2, #8]
}
 800292a:	e1e2      	b.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	2b80      	cmp	r3, #128	; 0x80
 8002940:	d164      	bne.n	8002a0c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d111      	bne.n	800296e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3361      	adds	r3, #97	; 0x61
 8002958:	2206      	movs	r2, #6
 800295a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f003 fe31 	bl	80065ce <USB_HC_Halt>
 800296c:	e044      	b.n	80029f8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	335c      	adds	r3, #92	; 0x5c
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	202c      	movs	r0, #44	; 0x2c
 8002986:	fb00 f303 	mul.w	r3, r0, r3
 800298a:	440b      	add	r3, r1
 800298c:	335c      	adds	r3, #92	; 0x5c
 800298e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	335c      	adds	r3, #92	; 0x5c
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d920      	bls.n	80029e6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	335c      	adds	r3, #92	; 0x5c
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	3360      	adds	r3, #96	; 0x60
 80029c4:	2204      	movs	r2, #4
 80029c6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	b2d9      	uxtb	r1, r3
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	202c      	movs	r0, #44	; 0x2c
 80029d2:	fb00 f303 	mul.w	r3, r0, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3360      	adds	r3, #96	; 0x60
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f006 f89a 	bl	8008b18 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029e4:	e008      	b.n	80029f8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3360      	adds	r3, #96	; 0x60
 80029f4:	2202      	movs	r2, #2
 80029f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	461a      	mov	r2, r3
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	6093      	str	r3, [r2, #8]
}
 8002a0a:	e172      	b.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a22:	d11b      	bne.n	8002a5c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3361      	adds	r3, #97	; 0x61
 8002a32:	2208      	movs	r2, #8
 8002a34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f003 fdc4 	bl	80065ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	461a      	mov	r2, r3
 8002a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a58:	6093      	str	r3, [r2, #8]
}
 8002a5a:	e14a      	b.n	8002cf2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	f040 813f 	bne.w	8002cf2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3361      	adds	r3, #97	; 0x61
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d17d      	bne.n	8002b84 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3360      	adds	r3, #96	; 0x60
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	333f      	adds	r3, #63	; 0x3f
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d00a      	beq.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	333f      	adds	r3, #63	; 0x3f
 8002abc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	f040 8100 	bne.w	8002cc4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d113      	bne.n	8002af4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3355      	adds	r3, #85	; 0x55
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	f083 0301 	eor.w	r3, r3, #1
 8002ae0:	b2d8      	uxtb	r0, r3
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3355      	adds	r3, #85	; 0x55
 8002af0:	4602      	mov	r2, r0
 8002af2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f040 80e3 	bne.w	8002cc4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	334c      	adds	r3, #76	; 0x4c
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80d8 	beq.w	8002cc4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	334c      	adds	r3, #76	; 0x4c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	202c      	movs	r0, #44	; 0x2c
 8002b2a:	fb00 f202 	mul.w	r2, r0, r2
 8002b2e:	440a      	add	r2, r1
 8002b30:	3240      	adds	r2, #64	; 0x40
 8002b32:	8812      	ldrh	r2, [r2, #0]
 8002b34:	4413      	add	r3, r2
 8002b36:	3b01      	subs	r3, #1
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	202c      	movs	r0, #44	; 0x2c
 8002b3e:	fb00 f202 	mul.w	r2, r0, r2
 8002b42:	440a      	add	r2, r1
 8002b44:	3240      	adds	r2, #64	; 0x40
 8002b46:	8812      	ldrh	r2, [r2, #0]
 8002b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80b5 	beq.w	8002cc4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3355      	adds	r3, #85	; 0x55
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	f083 0301 	eor.w	r3, r3, #1
 8002b6e:	b2d8      	uxtb	r0, r3
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3355      	adds	r3, #85	; 0x55
 8002b7e:	4602      	mov	r2, r0
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e09f      	b.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3361      	adds	r3, #97	; 0x61
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d109      	bne.n	8002bac <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3360      	adds	r3, #96	; 0x60
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	701a      	strb	r2, [r3, #0]
 8002baa:	e08b      	b.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3361      	adds	r3, #97	; 0x61
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d109      	bne.n	8002bd4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3360      	adds	r3, #96	; 0x60
 8002bce:	2202      	movs	r2, #2
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e077      	b.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3361      	adds	r3, #97	; 0x61
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d109      	bne.n	8002bfc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3360      	adds	r3, #96	; 0x60
 8002bf6:	2205      	movs	r2, #5
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e063      	b.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3361      	adds	r3, #97	; 0x61
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b06      	cmp	r3, #6
 8002c0e:	d009      	beq.n	8002c24 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3361      	adds	r3, #97	; 0x61
 8002c1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d14f      	bne.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	335c      	adds	r3, #92	; 0x5c
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	202c      	movs	r0, #44	; 0x2c
 8002c3c:	fb00 f303 	mul.w	r3, r0, r3
 8002c40:	440b      	add	r3, r1
 8002c42:	335c      	adds	r3, #92	; 0x5c
 8002c44:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	335c      	adds	r3, #92	; 0x5c
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d912      	bls.n	8002c80 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	335c      	adds	r3, #92	; 0x5c
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3360      	adds	r3, #96	; 0x60
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e021      	b.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3360      	adds	r3, #96	; 0x60
 8002c8e:	2202      	movs	r2, #2
 8002c90:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ca8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cb0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	b2d9      	uxtb	r1, r3
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	202c      	movs	r0, #44	; 0x2c
 8002ce0:	fb00 f303 	mul.w	r3, r0, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3360      	adds	r3, #96	; 0x60
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f005 ff13 	bl	8008b18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cf2:	bf00      	nop
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b08a      	sub	sp, #40	; 0x28
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	0c5b      	lsrs	r3, r3, #17
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d2e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d004      	beq.n	8002d40 <HCD_RXQLVL_IRQHandler+0x46>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	f000 80a9 	beq.w	8002e90 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d3e:	e0aa      	b.n	8002e96 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80a6 	beq.w	8002e94 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	3344      	adds	r3, #68	; 0x44
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 809b 	beq.w	8002e94 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	212c      	movs	r1, #44	; 0x2c
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3350      	adds	r3, #80	; 0x50
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	441a      	add	r2, r3
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	202c      	movs	r0, #44	; 0x2c
 8002d78:	fb00 f303 	mul.w	r3, r0, r3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	334c      	adds	r3, #76	; 0x4c
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d87a      	bhi.n	8002e7c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3344      	adds	r3, #68	; 0x44
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	b292      	uxth	r2, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f002 ff6c 	bl	8005c7c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	3344      	adds	r3, #68	; 0x44
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	441a      	add	r2, r3
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	202c      	movs	r0, #44	; 0x2c
 8002dbe:	fb00 f303 	mul.w	r3, r0, r3
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3344      	adds	r3, #68	; 0x44
 8002dc6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3350      	adds	r3, #80	; 0x50
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	441a      	add	r2, r3
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	202c      	movs	r0, #44	; 0x2c
 8002de2:	fb00 f303 	mul.w	r3, r0, r3
 8002de6:	440b      	add	r3, r1
 8002de8:	3350      	adds	r3, #80	; 0x50
 8002dea:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	0cdb      	lsrs	r3, r3, #19
 8002dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e00:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3340      	adds	r3, #64	; 0x40
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d13c      	bne.n	8002e94 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d039      	beq.n	8002e94 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e36:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e3e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3354      	adds	r3, #84	; 0x54
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	f083 0301 	eor.w	r3, r3, #1
 8002e66:	b2d8      	uxtb	r0, r3
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3354      	adds	r3, #84	; 0x54
 8002e76:	4602      	mov	r2, r0
 8002e78:	701a      	strb	r2, [r3, #0]
      break;
 8002e7a:	e00b      	b.n	8002e94 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3360      	adds	r3, #96	; 0x60
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	701a      	strb	r2, [r3, #0]
      break;
 8002e8e:	e001      	b.n	8002e94 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e90:	bf00      	nop
 8002e92:	e000      	b.n	8002e96 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e94:	bf00      	nop
  }
}
 8002e96:	bf00      	nop
 8002e98:	3728      	adds	r7, #40	; 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002eca:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d10b      	bne.n	8002eee <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d102      	bne.n	8002ee6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f005 fdfd 	bl	8008ae0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d132      	bne.n	8002f5e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f043 0308 	orr.w	r3, r3, #8
 8002efe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d126      	bne.n	8002f58 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d113      	bne.n	8002f3a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f1c:	d106      	bne.n	8002f2c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2102      	movs	r1, #2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 f817 	bl	8005f58 <USB_InitFSLSPClkSel>
 8002f2a:	e011      	b.n	8002f50 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 f810 	bl	8005f58 <USB_InitFSLSPClkSel>
 8002f38:	e00a      	b.n	8002f50 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d106      	bne.n	8002f50 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f4e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f005 fdef 	bl	8008b34 <HAL_HCD_PortEnabled_Callback>
 8002f56:	e002      	b.n	8002f5e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f005 fdf9 	bl	8008b50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d103      	bne.n	8002f70 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f043 0320 	orr.w	r3, r3, #32
 8002f6e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	6013      	str	r3, [r2, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e12b      	b.n	80031ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fdaa 	bl	8000b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fe8:	f001 fa20 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8002fec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4a81      	ldr	r2, [pc, #516]	; (80031f8 <HAL_I2C_Init+0x274>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d807      	bhi.n	8003008 <HAL_I2C_Init+0x84>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4a80      	ldr	r2, [pc, #512]	; (80031fc <HAL_I2C_Init+0x278>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	bf94      	ite	ls
 8003000:	2301      	movls	r3, #1
 8003002:	2300      	movhi	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e006      	b.n	8003016 <HAL_I2C_Init+0x92>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4a7d      	ldr	r2, [pc, #500]	; (8003200 <HAL_I2C_Init+0x27c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	bf94      	ite	ls
 8003010:	2301      	movls	r3, #1
 8003012:	2300      	movhi	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e0e7      	b.n	80031ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4a78      	ldr	r2, [pc, #480]	; (8003204 <HAL_I2C_Init+0x280>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	0c9b      	lsrs	r3, r3, #18
 8003028:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a6a      	ldr	r2, [pc, #424]	; (80031f8 <HAL_I2C_Init+0x274>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d802      	bhi.n	8003058 <HAL_I2C_Init+0xd4>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	3301      	adds	r3, #1
 8003056:	e009      	b.n	800306c <HAL_I2C_Init+0xe8>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	4a69      	ldr	r2, [pc, #420]	; (8003208 <HAL_I2C_Init+0x284>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	099b      	lsrs	r3, r3, #6
 800306a:	3301      	adds	r3, #1
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	430b      	orrs	r3, r1
 8003072:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800307e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	495c      	ldr	r1, [pc, #368]	; (80031f8 <HAL_I2C_Init+0x274>)
 8003088:	428b      	cmp	r3, r1
 800308a:	d819      	bhi.n	80030c0 <HAL_I2C_Init+0x13c>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e59      	subs	r1, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	fbb1 f3f3 	udiv	r3, r1, r3
 800309a:	1c59      	adds	r1, r3, #1
 800309c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030a0:	400b      	ands	r3, r1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_I2C_Init+0x138>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1e59      	subs	r1, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b4:	3301      	adds	r3, #1
 80030b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ba:	e051      	b.n	8003160 <HAL_I2C_Init+0x1dc>
 80030bc:	2304      	movs	r3, #4
 80030be:	e04f      	b.n	8003160 <HAL_I2C_Init+0x1dc>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d111      	bne.n	80030ec <HAL_I2C_Init+0x168>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e58      	subs	r0, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	440b      	add	r3, r1
 80030d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e012      	b.n	8003112 <HAL_I2C_Init+0x18e>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1e58      	subs	r0, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	0099      	lsls	r1, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003102:	3301      	adds	r3, #1
 8003104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Init+0x196>
 8003116:	2301      	movs	r3, #1
 8003118:	e022      	b.n	8003160 <HAL_I2C_Init+0x1dc>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10e      	bne.n	8003140 <HAL_I2C_Init+0x1bc>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1e58      	subs	r0, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6859      	ldr	r1, [r3, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	440b      	add	r3, r1
 8003130:	fbb0 f3f3 	udiv	r3, r0, r3
 8003134:	3301      	adds	r3, #1
 8003136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800313e:	e00f      	b.n	8003160 <HAL_I2C_Init+0x1dc>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1e58      	subs	r0, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	0099      	lsls	r1, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	fbb0 f3f3 	udiv	r3, r0, r3
 8003156:	3301      	adds	r3, #1
 8003158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	6809      	ldr	r1, [r1, #0]
 8003164:	4313      	orrs	r3, r2
 8003166:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69da      	ldr	r2, [r3, #28]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800318e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6911      	ldr	r1, [r2, #16]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68d2      	ldr	r2, [r2, #12]
 800319a:	4311      	orrs	r1, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	000186a0 	.word	0x000186a0
 80031fc:	001e847f 	.word	0x001e847f
 8003200:	003d08ff 	.word	0x003d08ff
 8003204:	431bde83 	.word	0x431bde83
 8003208:	10624dd3 	.word	0x10624dd3

0800320c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e128      	b.n	8003470 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a90      	ldr	r2, [pc, #576]	; (8003478 <HAL_I2S_Init+0x26c>)
 8003236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fd fcab 	bl	8000b94 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003254:	f023 030f 	bic.w	r3, r3, #15
 8003258:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2202      	movs	r2, #2
 8003260:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d060      	beq.n	800332c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d102      	bne.n	8003278 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003272:	2310      	movs	r3, #16
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e001      	b.n	800327c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b20      	cmp	r3, #32
 8003282:	d802      	bhi.n	800328a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800328a:	2001      	movs	r0, #1
 800328c:	f001 f9e6 	bl	800465c <HAL_RCCEx_GetPeriphCLKFreq>
 8003290:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329a:	d125      	bne.n	80032e8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	461a      	mov	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c0:	3305      	adds	r3, #5
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	e01f      	b.n	8003306 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	461a      	mov	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e2:	3305      	adds	r3, #5
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	e00e      	b.n	8003306 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	461a      	mov	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003302:	3305      	adds	r3, #5
 8003304:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4a5c      	ldr	r2, [pc, #368]	; (800347c <HAL_I2S_Init+0x270>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	08db      	lsrs	r3, r3, #3
 8003310:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	e003      	b.n	8003334 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800332c:	2302      	movs	r3, #2
 800332e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d902      	bls.n	8003340 <HAL_I2S_Init+0x134>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2bff      	cmp	r3, #255	; 0xff
 800333e:	d907      	bls.n	8003350 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	f043 0210 	orr.w	r2, r3, #16
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e08f      	b.n	8003470 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	ea42 0103 	orr.w	r1, r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	430a      	orrs	r2, r1
 8003362:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800336e:	f023 030f 	bic.w	r3, r3, #15
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6851      	ldr	r1, [r2, #4]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6892      	ldr	r2, [r2, #8]
 800337a:	4311      	orrs	r1, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	68d2      	ldr	r2, [r2, #12]
 8003380:	4311      	orrs	r1, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6992      	ldr	r2, [r2, #24]
 8003386:	430a      	orrs	r2, r1
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003392:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d161      	bne.n	8003460 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a38      	ldr	r2, [pc, #224]	; (8003480 <HAL_I2S_Init+0x274>)
 80033a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a37      	ldr	r2, [pc, #220]	; (8003484 <HAL_I2S_Init+0x278>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_I2S_Init+0x1a4>
 80033ac:	4b36      	ldr	r3, [pc, #216]	; (8003488 <HAL_I2S_Init+0x27c>)
 80033ae:	e001      	b.n	80033b4 <HAL_I2S_Init+0x1a8>
 80033b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	4932      	ldr	r1, [pc, #200]	; (8003484 <HAL_I2S_Init+0x278>)
 80033bc:	428a      	cmp	r2, r1
 80033be:	d101      	bne.n	80033c4 <HAL_I2S_Init+0x1b8>
 80033c0:	4a31      	ldr	r2, [pc, #196]	; (8003488 <HAL_I2S_Init+0x27c>)
 80033c2:	e001      	b.n	80033c8 <HAL_I2S_Init+0x1bc>
 80033c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033cc:	f023 030f 	bic.w	r3, r3, #15
 80033d0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <HAL_I2S_Init+0x278>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d101      	bne.n	80033e0 <HAL_I2S_Init+0x1d4>
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <HAL_I2S_Init+0x27c>)
 80033de:	e001      	b.n	80033e4 <HAL_I2S_Init+0x1d8>
 80033e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e4:	2202      	movs	r2, #2
 80033e6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a25      	ldr	r2, [pc, #148]	; (8003484 <HAL_I2S_Init+0x278>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_I2S_Init+0x1ea>
 80033f2:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_I2S_Init+0x27c>)
 80033f4:	e001      	b.n	80033fa <HAL_I2S_Init+0x1ee>
 80033f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003406:	d003      	beq.n	8003410 <HAL_I2S_Init+0x204>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d103      	bne.n	8003418 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	e001      	b.n	800341c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003418:	2300      	movs	r3, #0
 800341a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003426:	4313      	orrs	r3, r2
 8003428:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003430:	4313      	orrs	r3, r2
 8003432:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800343a:	4313      	orrs	r3, r2
 800343c:	b29a      	uxth	r2, r3
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	4313      	orrs	r3, r2
 8003442:	b29b      	uxth	r3, r3
 8003444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003448:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a0d      	ldr	r2, [pc, #52]	; (8003484 <HAL_I2S_Init+0x278>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_I2S_Init+0x24c>
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <HAL_I2S_Init+0x27c>)
 8003456:	e001      	b.n	800345c <HAL_I2S_Init+0x250>
 8003458:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800345c:	897a      	ldrh	r2, [r7, #10]
 800345e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	08003583 	.word	0x08003583
 800347c:	cccccccd 	.word	0xcccccccd
 8003480:	08003699 	.word	0x08003699
 8003484:	40003800 	.word	0x40003800
 8003488:	40003400 	.word	0x40003400

0800348c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	881a      	ldrh	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c9a      	adds	r2, r3, #2
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10e      	bne.n	800351c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800350c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ffb8 	bl	800348c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	b292      	uxth	r2, r2
 8003538:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	1c9a      	adds	r2, r3, #2
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10e      	bne.n	800357a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800356a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff93 	bl	80034a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b04      	cmp	r3, #4
 800359c:	d13a      	bne.n	8003614 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d109      	bne.n	80035bc <I2S_IRQHandler+0x3a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d102      	bne.n	80035bc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffb4 	bl	8003524 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d126      	bne.n	8003614 <I2S_IRQHandler+0x92>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d11f      	bne.n	8003614 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f043 0202 	orr.w	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ff50 	bl	80034b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b03      	cmp	r3, #3
 800361e:	d136      	bne.n	800368e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b02      	cmp	r3, #2
 8003628:	d109      	bne.n	800363e <I2S_IRQHandler+0xbc>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d102      	bne.n	800363e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff ff45 	bl	80034c8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b08      	cmp	r3, #8
 8003646:	d122      	bne.n	800368e <I2S_IRQHandler+0x10c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b20      	cmp	r3, #32
 8003654:	d11b      	bne.n	800368e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003664:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f043 0204 	orr.w	r2, r3, #4
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff13 	bl	80034b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800368e:	bf00      	nop
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a92      	ldr	r2, [pc, #584]	; (80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036b2:	4b92      	ldr	r3, [pc, #584]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036b4:	e001      	b.n	80036ba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a8b      	ldr	r2, [pc, #556]	; (80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d101      	bne.n	80036d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036d0:	4b8a      	ldr	r3, [pc, #552]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036d2:	e001      	b.n	80036d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e4:	d004      	beq.n	80036f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f040 8099 	bne.w	8003822 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d107      	bne.n	800370a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f925 	bl	8003954 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d107      	bne.n	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f9c8 	bl	8003ab4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372a:	2b40      	cmp	r3, #64	; 0x40
 800372c:	d13a      	bne.n	80037a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b00      	cmp	r3, #0
 8003736:	d035      	beq.n	80037a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a6e      	ldr	r2, [pc, #440]	; (80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003742:	4b6e      	ldr	r3, [pc, #440]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003744:	e001      	b.n	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003746:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4969      	ldr	r1, [pc, #420]	; (80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003752:	428b      	cmp	r3, r1
 8003754:	d101      	bne.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003756:	4b69      	ldr	r3, [pc, #420]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003758:	e001      	b.n	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800375a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003762:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003772:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f043 0202 	orr.w	r2, r3, #2
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff fe88 	bl	80034b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	f040 80c3 	bne.w	8003936 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80bd 	beq.w	8003936 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a49      	ldr	r2, [pc, #292]	; (80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037d6:	4b49      	ldr	r3, [pc, #292]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037d8:	e001      	b.n	80037de <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4944      	ldr	r1, [pc, #272]	; (80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037e6:	428b      	cmp	r3, r1
 80037e8:	d101      	bne.n	80037ee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037ea:	4b44      	ldr	r3, [pc, #272]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037ec:	e001      	b.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037f6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	f043 0204 	orr.w	r2, r3, #4
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff fe4a 	bl	80034b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003820:	e089      	b.n	8003936 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b02      	cmp	r3, #2
 800382a:	d107      	bne.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8be 	bl	80039b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b01      	cmp	r3, #1
 8003844:	d107      	bne.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f8fd 	bl	8003a50 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d12f      	bne.n	80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d02a      	beq.n	80038c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003878:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1e      	ldr	r2, [pc, #120]	; (80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d101      	bne.n	8003888 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003886:	e001      	b.n	800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003888:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4919      	ldr	r1, [pc, #100]	; (80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003894:	428b      	cmp	r3, r1
 8003896:	d101      	bne.n	800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003898:	4b18      	ldr	r3, [pc, #96]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800389a:	e001      	b.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800389c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f043 0202 	orr.w	r2, r3, #2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fdfa 	bl	80034b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d136      	bne.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d031      	beq.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038e0:	e001      	b.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4902      	ldr	r1, [pc, #8]	; (80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ee:	428b      	cmp	r3, r1
 80038f0:	d106      	bne.n	8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80038f2:	4b02      	ldr	r3, [pc, #8]	; (80038fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038f4:	e006      	b.n	8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80038f6:	bf00      	nop
 80038f8:	40003800 	.word	0x40003800
 80038fc:	40003400 	.word	0x40003400
 8003900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003904:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003908:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003918:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f043 0204 	orr.w	r2, r3, #4
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fdc0 	bl	80034b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003934:	e000      	b.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003936:	bf00      	nop
}
 8003938:	bf00      	nop
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	1c99      	adds	r1, r3, #2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6251      	str	r1, [r2, #36]	; 0x24
 8003966:	881a      	ldrh	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d113      	bne.n	80039ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003994:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ffc9 	bl	8003940 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c99      	adds	r1, r3, #2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6251      	str	r1, [r2, #36]	; 0x24
 80039ca:	8819      	ldrh	r1, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <I2SEx_TxISR_I2SExt+0x90>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <I2SEx_TxISR_I2SExt+0x22>
 80039d6:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <I2SEx_TxISR_I2SExt+0x94>)
 80039d8:	e001      	b.n	80039de <I2SEx_TxISR_I2SExt+0x26>
 80039da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039de:	460a      	mov	r2, r1
 80039e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d121      	bne.n	8003a3e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <I2SEx_TxISR_I2SExt+0x90>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d101      	bne.n	8003a08 <I2SEx_TxISR_I2SExt+0x50>
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <I2SEx_TxISR_I2SExt+0x94>)
 8003a06:	e001      	b.n	8003a0c <I2SEx_TxISR_I2SExt+0x54>
 8003a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	490d      	ldr	r1, [pc, #52]	; (8003a48 <I2SEx_TxISR_I2SExt+0x90>)
 8003a14:	428b      	cmp	r3, r1
 8003a16:	d101      	bne.n	8003a1c <I2SEx_TxISR_I2SExt+0x64>
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <I2SEx_TxISR_I2SExt+0x94>)
 8003a1a:	e001      	b.n	8003a20 <I2SEx_TxISR_I2SExt+0x68>
 8003a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff ff81 	bl	8003940 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40003800 	.word	0x40003800
 8003a4c:	40003400 	.word	0x40003400

08003a50 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68d8      	ldr	r0, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	1c99      	adds	r1, r3, #2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a68:	b282      	uxth	r2, r0
 8003a6a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d113      	bne.n	8003aac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a92:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ff4a 	bl	8003940 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a20      	ldr	r2, [pc, #128]	; (8003b44 <I2SEx_RxISR_I2SExt+0x90>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <I2SEx_RxISR_I2SExt+0x16>
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <I2SEx_RxISR_I2SExt+0x94>)
 8003ac8:	e001      	b.n	8003ace <I2SEx_RxISR_I2SExt+0x1a>
 8003aca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ace:	68d8      	ldr	r0, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	1c99      	adds	r1, r3, #2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ada:	b282      	uxth	r2, r0
 8003adc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d121      	bne.n	8003b3a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <I2SEx_RxISR_I2SExt+0x90>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d101      	bne.n	8003b04 <I2SEx_RxISR_I2SExt+0x50>
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <I2SEx_RxISR_I2SExt+0x94>)
 8003b02:	e001      	b.n	8003b08 <I2SEx_RxISR_I2SExt+0x54>
 8003b04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	490d      	ldr	r1, [pc, #52]	; (8003b44 <I2SEx_RxISR_I2SExt+0x90>)
 8003b10:	428b      	cmp	r3, r1
 8003b12:	d101      	bne.n	8003b18 <I2SEx_RxISR_I2SExt+0x64>
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <I2SEx_RxISR_I2SExt+0x94>)
 8003b16:	e001      	b.n	8003b1c <I2SEx_RxISR_I2SExt+0x68>
 8003b18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b20:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d106      	bne.n	8003b3a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ff03 	bl	8003940 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40003800 	.word	0x40003800
 8003b48:	40003400 	.word	0x40003400

08003b4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e267      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d075      	beq.n	8003c56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b6a:	4b88      	ldr	r3, [pc, #544]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d00c      	beq.n	8003b90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b76:	4b85      	ldr	r3, [pc, #532]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d112      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b82:	4b82      	ldr	r3, [pc, #520]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b8e:	d10b      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	4b7e      	ldr	r3, [pc, #504]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d05b      	beq.n	8003c54 <HAL_RCC_OscConfig+0x108>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d157      	bne.n	8003c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e242      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb0:	d106      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x74>
 8003bb2:	4b76      	ldr	r3, [pc, #472]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a75      	ldr	r2, [pc, #468]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e01d      	b.n	8003bfc <HAL_RCC_OscConfig+0xb0>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x98>
 8003bca:	4b70      	ldr	r3, [pc, #448]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6f      	ldr	r2, [pc, #444]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b6d      	ldr	r3, [pc, #436]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a6c      	ldr	r2, [pc, #432]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e00b      	b.n	8003bfc <HAL_RCC_OscConfig+0xb0>
 8003be4:	4b69      	ldr	r3, [pc, #420]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a68      	ldr	r2, [pc, #416]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4b66      	ldr	r3, [pc, #408]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a65      	ldr	r2, [pc, #404]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d013      	beq.n	8003c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7fd fa42 	bl	800108c <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fd fa3e 	bl	800108c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	; 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e207      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	4b5b      	ldr	r3, [pc, #364]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0xc0>
 8003c2a:	e014      	b.n	8003c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fa2e 	bl	800108c <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fd fa2a 	bl	800108c <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e1f3      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c46:	4b51      	ldr	r3, [pc, #324]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0xe8>
 8003c52:	e000      	b.n	8003c56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d063      	beq.n	8003d2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c62:	4b4a      	ldr	r3, [pc, #296]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6e:	4b47      	ldr	r3, [pc, #284]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d11c      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c7a:	4b44      	ldr	r3, [pc, #272]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d116      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c86:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <HAL_RCC_OscConfig+0x152>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d001      	beq.n	8003c9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e1c7      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9e:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4937      	ldr	r1, [pc, #220]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb2:	e03a      	b.n	8003d2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d020      	beq.n	8003cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cbc:	4b34      	ldr	r3, [pc, #208]	; (8003d90 <HAL_RCC_OscConfig+0x244>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc2:	f7fd f9e3 	bl	800108c <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cca:	f7fd f9df 	bl	800108c <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e1a8      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cdc:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce8:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4925      	ldr	r1, [pc, #148]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]
 8003cfc:	e015      	b.n	8003d2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfe:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <HAL_RCC_OscConfig+0x244>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fd f9c2 	bl	800108c <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0c:	f7fd f9be 	bl	800108c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e187      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1e:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d036      	beq.n	8003da4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d016      	beq.n	8003d6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3e:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_RCC_OscConfig+0x248>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7fd f9a2 	bl	800108c <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d4c:	f7fd f99e 	bl	800108c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e167      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCC_OscConfig+0x240>)
 8003d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x200>
 8003d6a:	e01b      	b.n	8003da4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_RCC_OscConfig+0x248>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d72:	f7fd f98b 	bl	800108c <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d78:	e00e      	b.n	8003d98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d7a:	f7fd f987 	bl	800108c <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d907      	bls.n	8003d98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e150      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	42470000 	.word	0x42470000
 8003d94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d98:	4b88      	ldr	r3, [pc, #544]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1ea      	bne.n	8003d7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8097 	beq.w	8003ee0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db2:	2300      	movs	r3, #0
 8003db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db6:	4b81      	ldr	r3, [pc, #516]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10f      	bne.n	8003de2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	4b7d      	ldr	r3, [pc, #500]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	4a7c      	ldr	r2, [pc, #496]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd2:	4b7a      	ldr	r3, [pc, #488]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de2:	4b77      	ldr	r3, [pc, #476]	; (8003fc0 <HAL_RCC_OscConfig+0x474>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d118      	bne.n	8003e20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dee:	4b74      	ldr	r3, [pc, #464]	; (8003fc0 <HAL_RCC_OscConfig+0x474>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a73      	ldr	r2, [pc, #460]	; (8003fc0 <HAL_RCC_OscConfig+0x474>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfa:	f7fd f947 	bl	800108c <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e02:	f7fd f943 	bl	800108c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e10c      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e14:	4b6a      	ldr	r3, [pc, #424]	; (8003fc0 <HAL_RCC_OscConfig+0x474>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d106      	bne.n	8003e36 <HAL_RCC_OscConfig+0x2ea>
 8003e28:	4b64      	ldr	r3, [pc, #400]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	4a63      	ldr	r2, [pc, #396]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	6713      	str	r3, [r2, #112]	; 0x70
 8003e34:	e01c      	b.n	8003e70 <HAL_RCC_OscConfig+0x324>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b05      	cmp	r3, #5
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x30c>
 8003e3e:	4b5f      	ldr	r3, [pc, #380]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	4a5e      	ldr	r2, [pc, #376]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4a:	4b5c      	ldr	r3, [pc, #368]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	4a5b      	ldr	r2, [pc, #364]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	6713      	str	r3, [r2, #112]	; 0x70
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0x324>
 8003e58:	4b58      	ldr	r3, [pc, #352]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a57      	ldr	r2, [pc, #348]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003e5e:	f023 0301 	bic.w	r3, r3, #1
 8003e62:	6713      	str	r3, [r2, #112]	; 0x70
 8003e64:	4b55      	ldr	r3, [pc, #340]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	4a54      	ldr	r2, [pc, #336]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003e6a:	f023 0304 	bic.w	r3, r3, #4
 8003e6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d015      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e78:	f7fd f908 	bl	800108c <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e80:	f7fd f904 	bl	800108c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e0cb      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e96:	4b49      	ldr	r3, [pc, #292]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0ee      	beq.n	8003e80 <HAL_RCC_OscConfig+0x334>
 8003ea2:	e014      	b.n	8003ece <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea4:	f7fd f8f2 	bl	800108c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eac:	f7fd f8ee 	bl	800108c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e0b5      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec2:	4b3e      	ldr	r3, [pc, #248]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1ee      	bne.n	8003eac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed4:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	4a38      	ldr	r2, [pc, #224]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ede:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80a1 	beq.w	800402c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eea:	4b34      	ldr	r3, [pc, #208]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d05c      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d141      	bne.n	8003f82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efe:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <HAL_RCC_OscConfig+0x478>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fd f8c2 	bl	800108c <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0c:	f7fd f8be 	bl	800108c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e087      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1e:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69da      	ldr	r2, [r3, #28]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	019b      	lsls	r3, r3, #6
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	085b      	lsrs	r3, r3, #1
 8003f42:	3b01      	subs	r3, #1
 8003f44:	041b      	lsls	r3, r3, #16
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	061b      	lsls	r3, r3, #24
 8003f4e:	491b      	ldr	r1, [pc, #108]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <HAL_RCC_OscConfig+0x478>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fd f897 	bl	800108c <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f62:	f7fd f893 	bl	800108c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e05c      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x416>
 8003f80:	e054      	b.n	800402c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <HAL_RCC_OscConfig+0x478>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fd f880 	bl	800108c <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fd f87c 	bl	800108c <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e045      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <HAL_RCC_OscConfig+0x470>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x444>
 8003fae:	e03d      	b.n	800402c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d107      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e038      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40007000 	.word	0x40007000
 8003fc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <HAL_RCC_OscConfig+0x4ec>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d028      	beq.n	8004028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d121      	bne.n	8004028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d11a      	bne.n	8004028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ffe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004000:	4293      	cmp	r3, r2
 8004002:	d111      	bne.n	8004028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	3b01      	subs	r3, #1
 8004012:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d107      	bne.n	8004028 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800

0800403c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0cc      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004050:	4b68      	ldr	r3, [pc, #416]	; (80041f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d90c      	bls.n	8004078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405e:	4b65      	ldr	r3, [pc, #404]	; (80041f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004066:	4b63      	ldr	r3, [pc, #396]	; (80041f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0b8      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d020      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004090:	4b59      	ldr	r3, [pc, #356]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4a58      	ldr	r2, [pc, #352]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800409a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040a8:	4b53      	ldr	r3, [pc, #332]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4a52      	ldr	r2, [pc, #328]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b4:	4b50      	ldr	r3, [pc, #320]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	494d      	ldr	r1, [pc, #308]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d044      	beq.n	800415c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d107      	bne.n	80040ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d119      	bne.n	800411a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e07f      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d003      	beq.n	80040fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fa:	4b3f      	ldr	r3, [pc, #252]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e06f      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410a:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e067      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800411a:	4b37      	ldr	r3, [pc, #220]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f023 0203 	bic.w	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4934      	ldr	r1, [pc, #208]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	4313      	orrs	r3, r2
 800412a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800412c:	f7fc ffae 	bl	800108c <HAL_GetTick>
 8004130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004132:	e00a      	b.n	800414a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004134:	f7fc ffaa 	bl	800108c <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e04f      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414a:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 020c 	and.w	r2, r3, #12
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	429a      	cmp	r2, r3
 800415a:	d1eb      	bne.n	8004134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800415c:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <HAL_RCC_ClockConfig+0x1b8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d20c      	bcs.n	8004184 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	4b22      	ldr	r3, [pc, #136]	; (80041f4 <HAL_RCC_ClockConfig+0x1b8>)
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004172:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d001      	beq.n	8004184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e032      	b.n	80041ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4916      	ldr	r1, [pc, #88]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ae:	4b12      	ldr	r3, [pc, #72]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	490e      	ldr	r1, [pc, #56]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041c2:	f000 f821 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80041c6:	4602      	mov	r2, r0
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	490a      	ldr	r1, [pc, #40]	; (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 80041d4:	5ccb      	ldrb	r3, [r1, r3]
 80041d6:	fa22 f303 	lsr.w	r3, r2, r3
 80041da:	4a09      	ldr	r2, [pc, #36]	; (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80041dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <HAL_RCC_ClockConfig+0x1c8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc ff0e 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023c00 	.word	0x40023c00
 80041f8:	40023800 	.word	0x40023800
 80041fc:	08009220 	.word	0x08009220
 8004200:	20000000 	.word	0x20000000
 8004204:	20000004 	.word	0x20000004

08004208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800420c:	b094      	sub	sp, #80	; 0x50
 800420e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	647b      	str	r3, [r7, #68]	; 0x44
 8004214:	2300      	movs	r3, #0
 8004216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004218:	2300      	movs	r3, #0
 800421a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004220:	4b79      	ldr	r3, [pc, #484]	; (8004408 <HAL_RCC_GetSysClockFreq+0x200>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	2b08      	cmp	r3, #8
 800422a:	d00d      	beq.n	8004248 <HAL_RCC_GetSysClockFreq+0x40>
 800422c:	2b08      	cmp	r3, #8
 800422e:	f200 80e1 	bhi.w	80043f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0x34>
 8004236:	2b04      	cmp	r3, #4
 8004238:	d003      	beq.n	8004242 <HAL_RCC_GetSysClockFreq+0x3a>
 800423a:	e0db      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800423c:	4b73      	ldr	r3, [pc, #460]	; (800440c <HAL_RCC_GetSysClockFreq+0x204>)
 800423e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004240:	e0db      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004242:	4b73      	ldr	r3, [pc, #460]	; (8004410 <HAL_RCC_GetSysClockFreq+0x208>)
 8004244:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004246:	e0d8      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004248:	4b6f      	ldr	r3, [pc, #444]	; (8004408 <HAL_RCC_GetSysClockFreq+0x200>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004250:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004252:	4b6d      	ldr	r3, [pc, #436]	; (8004408 <HAL_RCC_GetSysClockFreq+0x200>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d063      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425e:	4b6a      	ldr	r3, [pc, #424]	; (8004408 <HAL_RCC_GetSysClockFreq+0x200>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	099b      	lsrs	r3, r3, #6
 8004264:	2200      	movs	r2, #0
 8004266:	63bb      	str	r3, [r7, #56]	; 0x38
 8004268:	63fa      	str	r2, [r7, #60]	; 0x3c
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004270:	633b      	str	r3, [r7, #48]	; 0x30
 8004272:	2300      	movs	r3, #0
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
 8004276:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800427a:	4622      	mov	r2, r4
 800427c:	462b      	mov	r3, r5
 800427e:	f04f 0000 	mov.w	r0, #0
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	0159      	lsls	r1, r3, #5
 8004288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800428c:	0150      	lsls	r0, r2, #5
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4621      	mov	r1, r4
 8004294:	1a51      	subs	r1, r2, r1
 8004296:	6139      	str	r1, [r7, #16]
 8004298:	4629      	mov	r1, r5
 800429a:	eb63 0301 	sbc.w	r3, r3, r1
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042ac:	4659      	mov	r1, fp
 80042ae:	018b      	lsls	r3, r1, #6
 80042b0:	4651      	mov	r1, sl
 80042b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042b6:	4651      	mov	r1, sl
 80042b8:	018a      	lsls	r2, r1, #6
 80042ba:	4651      	mov	r1, sl
 80042bc:	ebb2 0801 	subs.w	r8, r2, r1
 80042c0:	4659      	mov	r1, fp
 80042c2:	eb63 0901 	sbc.w	r9, r3, r1
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042da:	4690      	mov	r8, r2
 80042dc:	4699      	mov	r9, r3
 80042de:	4623      	mov	r3, r4
 80042e0:	eb18 0303 	adds.w	r3, r8, r3
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	462b      	mov	r3, r5
 80042e8:	eb49 0303 	adc.w	r3, r9, r3
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042fa:	4629      	mov	r1, r5
 80042fc:	024b      	lsls	r3, r1, #9
 80042fe:	4621      	mov	r1, r4
 8004300:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004304:	4621      	mov	r1, r4
 8004306:	024a      	lsls	r2, r1, #9
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800430e:	2200      	movs	r2, #0
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
 8004312:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004314:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004318:	f7fb ff66 	bl	80001e8 <__aeabi_uldivmod>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4613      	mov	r3, r2
 8004322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004324:	e058      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004326:	4b38      	ldr	r3, [pc, #224]	; (8004408 <HAL_RCC_GetSysClockFreq+0x200>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	099b      	lsrs	r3, r3, #6
 800432c:	2200      	movs	r2, #0
 800432e:	4618      	mov	r0, r3
 8004330:	4611      	mov	r1, r2
 8004332:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	2300      	movs	r3, #0
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
 800433c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	f04f 0100 	mov.w	r1, #0
 800434c:	0159      	lsls	r1, r3, #5
 800434e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004352:	0150      	lsls	r0, r2, #5
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4641      	mov	r1, r8
 800435a:	ebb2 0a01 	subs.w	sl, r2, r1
 800435e:	4649      	mov	r1, r9
 8004360:	eb63 0b01 	sbc.w	fp, r3, r1
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004370:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004374:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004378:	ebb2 040a 	subs.w	r4, r2, sl
 800437c:	eb63 050b 	sbc.w	r5, r3, fp
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	00eb      	lsls	r3, r5, #3
 800438a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800438e:	00e2      	lsls	r2, r4, #3
 8004390:	4614      	mov	r4, r2
 8004392:	461d      	mov	r5, r3
 8004394:	4643      	mov	r3, r8
 8004396:	18e3      	adds	r3, r4, r3
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	464b      	mov	r3, r9
 800439c:	eb45 0303 	adc.w	r3, r5, r3
 80043a0:	607b      	str	r3, [r7, #4]
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043ae:	4629      	mov	r1, r5
 80043b0:	028b      	lsls	r3, r1, #10
 80043b2:	4621      	mov	r1, r4
 80043b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043b8:	4621      	mov	r1, r4
 80043ba:	028a      	lsls	r2, r1, #10
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043c2:	2200      	movs	r2, #0
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	61fa      	str	r2, [r7, #28]
 80043c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043cc:	f7fb ff0c 	bl	80001e8 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4613      	mov	r3, r2
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCC_GetSysClockFreq+0x200>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	3301      	adds	r3, #1
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043f2:	e002      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <HAL_RCC_GetSysClockFreq+0x204>)
 80043f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3750      	adds	r7, #80	; 0x50
 8004400:	46bd      	mov	sp, r7
 8004402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	00f42400 	.word	0x00f42400
 8004410:	007a1200 	.word	0x007a1200

08004414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004418:	4b03      	ldr	r3, [pc, #12]	; (8004428 <HAL_RCC_GetHCLKFreq+0x14>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000000 	.word	0x20000000

0800442c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004430:	f7ff fff0 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0a9b      	lsrs	r3, r3, #10
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4903      	ldr	r1, [pc, #12]	; (8004450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004448:	4618      	mov	r0, r3
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40023800 	.word	0x40023800
 8004450:	08009230 	.word	0x08009230

08004454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004458:	f7ff ffdc 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	0b5b      	lsrs	r3, r3, #13
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4903      	ldr	r1, [pc, #12]	; (8004478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40023800 	.word	0x40023800
 8004478:	08009230 	.word	0x08009230

0800447c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d038      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044a4:	4b68      	ldr	r3, [pc, #416]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044aa:	f7fc fdef 	bl	800108c <HAL_GetTick>
 80044ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044b2:	f7fc fdeb 	bl	800108c <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e0bd      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044c4:	4b61      	ldr	r3, [pc, #388]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f0      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	019b      	lsls	r3, r3, #6
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	071b      	lsls	r3, r3, #28
 80044e2:	495a      	ldr	r1, [pc, #360]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044ea:	4b57      	ldr	r3, [pc, #348]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044f0:	f7fc fdcc 	bl	800108c <HAL_GetTick>
 80044f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044f8:	f7fc fdc8 	bl	800108c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e09a      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800450a:	4b50      	ldr	r3, [pc, #320]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 8083 	beq.w	800462a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	4b48      	ldr	r3, [pc, #288]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	4a47      	ldr	r2, [pc, #284]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004532:	6413      	str	r3, [r2, #64]	; 0x40
 8004534:	4b45      	ldr	r3, [pc, #276]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004540:	4b43      	ldr	r3, [pc, #268]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a42      	ldr	r2, [pc, #264]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800454c:	f7fc fd9e 	bl	800108c <HAL_GetTick>
 8004550:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004554:	f7fc fd9a 	bl	800108c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e06c      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004566:	4b3a      	ldr	r3, [pc, #232]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004572:	4b36      	ldr	r3, [pc, #216]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d02f      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	429a      	cmp	r2, r3
 800458e:	d028      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004590:	4b2e      	ldr	r3, [pc, #184]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004598:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800459a:	4b2e      	ldr	r3, [pc, #184]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045a0:	4b2c      	ldr	r3, [pc, #176]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045a6:	4a29      	ldr	r2, [pc, #164]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045ac:	4b27      	ldr	r3, [pc, #156]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d114      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fc fd68 	bl	800108c <HAL_GetTick>
 80045bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045be:	e00a      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c0:	f7fc fd64 	bl	800108c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e034      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ee      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ee:	d10d      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x190>
 80045f0:	4b16      	ldr	r3, [pc, #88]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004604:	4911      	ldr	r1, [pc, #68]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
 800460a:	e005      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4a0e      	ldr	r2, [pc, #56]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004612:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004616:	6093      	str	r3, [r2, #8]
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004624:	4909      	ldr	r1, [pc, #36]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004626:	4313      	orrs	r3, r2
 8004628:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	7d1a      	ldrb	r2, [r3, #20]
 800463a:	4b07      	ldr	r3, [pc, #28]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800463c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	42470068 	.word	0x42470068
 800464c:	40023800 	.word	0x40023800
 8004650:	40007000 	.word	0x40007000
 8004654:	42470e40 	.word	0x42470e40
 8004658:	424711e0 	.word	0x424711e0

0800465c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d140      	bne.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800467a:	4b24      	ldr	r3, [pc, #144]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d131      	bne.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004690:	4b1f      	ldr	r3, [pc, #124]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004692:	617b      	str	r3, [r7, #20]
          break;
 8004694:	e031      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a2:	d109      	bne.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80046a4:	4b19      	ldr	r3, [pc, #100]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ae:	4a19      	ldr	r2, [pc, #100]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80046b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	e008      	b.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80046b8:	4b14      	ldr	r3, [pc, #80]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c2:	4a15      	ldr	r2, [pc, #84]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d0:	099b      	lsrs	r3, r3, #6
 80046d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	fb02 f303 	mul.w	r3, r2, r3
 80046dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e4:	0f1b      	lsrs	r3, r3, #28
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f0:	617b      	str	r3, [r7, #20]
          break;
 80046f2:	e002      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
          break;
 80046f8:	bf00      	nop
        }
      }
      break;
 80046fa:	bf00      	nop
    }
  }
  return frequency;
 80046fc:	697b      	ldr	r3, [r7, #20]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800
 8004710:	00bb8000 	.word	0x00bb8000
 8004714:	007a1200 	.word	0x007a1200
 8004718:	00f42400 	.word	0x00f42400

0800471c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e07b      	b.n	8004826 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d108      	bne.n	8004748 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800473e:	d009      	beq.n	8004754 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	61da      	str	r2, [r3, #28]
 8004746:	e005      	b.n	8004754 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fc fade 	bl	8000d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d8:	ea42 0103 	orr.w	r1, r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	f003 0104 	and.w	r1, r3, #4
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	f003 0210 	and.w	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004814:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e03f      	b.n	80048c0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fc fab3 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2224      	movs	r2, #36	; 0x24
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004870:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fe1c 	bl	80054b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004886:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695a      	ldr	r2, [r3, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004896:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d17c      	bne.n	80049e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_UART_Transmit+0x2c>
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e075      	b.n	80049e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_UART_Transmit+0x3e>
 8004902:	2302      	movs	r3, #2
 8004904:	e06e      	b.n	80049e4 <HAL_UART_Transmit+0x11c>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2221      	movs	r2, #33	; 0x21
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800491c:	f7fc fbb6 	bl	800108c <HAL_GetTick>
 8004920:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	88fa      	ldrh	r2, [r7, #6]
 8004926:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	88fa      	ldrh	r2, [r7, #6]
 800492c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004936:	d108      	bne.n	800494a <HAL_UART_Transmit+0x82>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d104      	bne.n	800494a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	e003      	b.n	8004952 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800495a:	e02a      	b.n	80049b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2200      	movs	r2, #0
 8004964:	2180      	movs	r1, #128	; 0x80
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fb9a 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e036      	b.n	80049e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800498a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	3302      	adds	r3, #2
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e007      	b.n	80049a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	781a      	ldrb	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3301      	adds	r3, #1
 80049a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1cf      	bne.n	800495c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2200      	movs	r2, #0
 80049c4:	2140      	movs	r1, #64	; 0x40
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fb6a 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e006      	b.n	80049e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e000      	b.n	80049e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
  }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08a      	sub	sp, #40	; 0x28
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	f040 808c 	bne.w	8004b26 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_UART_Receive+0x2e>
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e084      	b.n	8004b28 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_UART_Receive+0x40>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e07d      	b.n	8004b28 <HAL_UART_Receive+0x13c>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2222      	movs	r2, #34	; 0x22
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a48:	f7fc fb20 	bl	800108c <HAL_GetTick>
 8004a4c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	88fa      	ldrh	r2, [r7, #6]
 8004a52:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	88fa      	ldrh	r2, [r7, #6]
 8004a58:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a62:	d108      	bne.n	8004a76 <HAL_UART_Receive+0x8a>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d104      	bne.n	8004a76 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	e003      	b.n	8004a7e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004a86:	e043      	b.n	8004b10 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2120      	movs	r1, #32
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fb04 	bl	80050a0 <UART_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e042      	b.n	8004b28 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10c      	bne.n	8004ac2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	3302      	adds	r3, #2
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	e01f      	b.n	8004b02 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aca:	d007      	beq.n	8004adc <HAL_UART_Receive+0xf0>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <HAL_UART_Receive+0xfe>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	e008      	b.n	8004afc <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	3301      	adds	r3, #1
 8004b00:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1b6      	bne.n	8004a88 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e000      	b.n	8004b28 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
  }
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b0ba      	sub	sp, #232	; 0xe8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10f      	bne.n	8004b96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_UART_IRQHandler+0x66>
 8004b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fbd3 	bl	800533a <UART_Receive_IT>
      return;
 8004b94:	e256      	b.n	8005044 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 80de 	beq.w	8004d5c <HAL_UART_IRQHandler+0x22c>
 8004ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80d1 	beq.w	8004d5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00b      	beq.n	8004bde <HAL_UART_IRQHandler+0xae>
 8004bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	f043 0201 	orr.w	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_UART_IRQHandler+0xd2>
 8004bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f043 0202 	orr.w	r2, r3, #2
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <HAL_UART_IRQHandler+0xf6>
 8004c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f043 0204 	orr.w	r2, r3, #4
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d011      	beq.n	8004c56 <HAL_UART_IRQHandler+0x126>
 8004c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d105      	bne.n	8004c4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f043 0208 	orr.w	r2, r3, #8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 81ed 	beq.w	800503a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d008      	beq.n	8004c7e <HAL_UART_IRQHandler+0x14e>
 8004c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fb5e 	bl	800533a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2301      	moveq	r3, #1
 8004c8e:	2300      	movne	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <HAL_UART_IRQHandler+0x17a>
 8004ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d04f      	beq.n	8004d4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fa66 	bl	800517c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d141      	bne.n	8004d42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3314      	adds	r3, #20
 8004cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3314      	adds	r3, #20
 8004ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1d9      	bne.n	8004cbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d013      	beq.n	8004d3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	4a7d      	ldr	r2, [pc, #500]	; (8004f0c <HAL_UART_IRQHandler+0x3dc>)
 8004d18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fc fb65 	bl	80013ee <HAL_DMA_Abort_IT>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d016      	beq.n	8004d58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d34:	4610      	mov	r0, r2
 8004d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d38:	e00e      	b.n	8004d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f99a 	bl	8005074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d40:	e00a      	b.n	8004d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f996 	bl	8005074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d48:	e006      	b.n	8004d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f992 	bl	8005074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d56:	e170      	b.n	800503a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d58:	bf00      	nop
    return;
 8004d5a:	e16e      	b.n	800503a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	f040 814a 	bne.w	8004ffa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6a:	f003 0310 	and.w	r3, r3, #16
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 8143 	beq.w	8004ffa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 813c 	beq.w	8004ffa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	f040 80b4 	bne.w	8004f10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8140 	beq.w	800503e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	f080 8139 	bcs.w	800503e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dde:	f000 8088 	beq.w	8004ef2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004df0:	e853 3f00 	ldrex	r3, [r3]
 8004df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1d9      	bne.n	8004de2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3314      	adds	r3, #20
 8004e34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e40:	f023 0301 	bic.w	r3, r3, #1
 8004e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3314      	adds	r3, #20
 8004e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e1      	bne.n	8004e2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3314      	adds	r3, #20
 8004e70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3314      	adds	r3, #20
 8004e8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e3      	bne.n	8004e6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec2:	f023 0310 	bic.w	r3, r3, #16
 8004ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ed4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ed6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e3      	bne.n	8004eb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fc fa0e 	bl	800130e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	4619      	mov	r1, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f8c0 	bl	8005088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f08:	e099      	b.n	800503e <HAL_UART_IRQHandler+0x50e>
 8004f0a:	bf00      	nop
 8004f0c:	08005243 	.word	0x08005243
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 808b 	beq.w	8005042 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8086 	beq.w	8005042 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f5a:	647a      	str	r2, [r7, #68]	; 0x44
 8004f5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e3      	bne.n	8004f36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3314      	adds	r3, #20
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	f023 0301 	bic.w	r3, r3, #1
 8004f84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3314      	adds	r3, #20
 8004f8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f92:	633a      	str	r2, [r7, #48]	; 0x30
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e3      	bne.n	8004f6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0310 	bic.w	r3, r3, #16
 8004fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004fd8:	61fa      	str	r2, [r7, #28]
 8004fda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	69b9      	ldr	r1, [r7, #24]
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e3      	bne.n	8004fb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f848 	bl	8005088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ff8:	e023      	b.n	8005042 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	2b00      	cmp	r3, #0
 8005004:	d009      	beq.n	800501a <HAL_UART_IRQHandler+0x4ea>
 8005006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f929 	bl	800526a <UART_Transmit_IT>
    return;
 8005018:	e014      	b.n	8005044 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00e      	beq.n	8005044 <HAL_UART_IRQHandler+0x514>
 8005026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f969 	bl	800530a <UART_EndTransmit_IT>
    return;
 8005038:	e004      	b.n	8005044 <HAL_UART_IRQHandler+0x514>
    return;
 800503a:	bf00      	nop
 800503c:	e002      	b.n	8005044 <HAL_UART_IRQHandler+0x514>
      return;
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <HAL_UART_IRQHandler+0x514>
      return;
 8005042:	bf00      	nop
  }
}
 8005044:	37e8      	adds	r7, #232	; 0xe8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop

0800504c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b090      	sub	sp, #64	; 0x40
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b0:	e050      	b.n	8005154 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d04c      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80050c0:	f7fb ffe4 	bl	800108c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d241      	bcs.n	8005154 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050f0:	637a      	str	r2, [r7, #52]	; 0x34
 80050f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e5      	bne.n	80050d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3314      	adds	r3, #20
 800510a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	613b      	str	r3, [r7, #16]
   return(result);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	63bb      	str	r3, [r7, #56]	; 0x38
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3314      	adds	r3, #20
 8005122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005124:	623a      	str	r2, [r7, #32]
 8005126:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	69f9      	ldr	r1, [r7, #28]
 800512a:	6a3a      	ldr	r2, [r7, #32]
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	61bb      	str	r3, [r7, #24]
   return(result);
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e5      	bne.n	8005104 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e00f      	b.n	8005174 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4013      	ands	r3, r2
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	429a      	cmp	r2, r3
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	429a      	cmp	r2, r3
 8005170:	d09f      	beq.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3740      	adds	r7, #64	; 0x40
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b095      	sub	sp, #84	; 0x54
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051a4:	643a      	str	r2, [r7, #64]	; 0x40
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e5      	bne.n	8005184 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3314      	adds	r3, #20
 80051be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3314      	adds	r3, #20
 80051d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e5      	bne.n	80051b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d119      	bne.n	8005228 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	330c      	adds	r3, #12
 80051fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	e853 3f00 	ldrex	r3, [r3]
 8005202:	60bb      	str	r3, [r7, #8]
   return(result);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f023 0310 	bic.w	r3, r3, #16
 800520a:	647b      	str	r3, [r7, #68]	; 0x44
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005214:	61ba      	str	r2, [r7, #24]
 8005216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6979      	ldr	r1, [r7, #20]
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	613b      	str	r3, [r7, #16]
   return(result);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e5      	bne.n	80051f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005236:	bf00      	nop
 8005238:	3754      	adds	r7, #84	; 0x54
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff ff09 	bl	8005074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b21      	cmp	r3, #33	; 0x21
 800527c:	d13e      	bne.n	80052fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005286:	d114      	bne.n	80052b2 <UART_Transmit_IT+0x48>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d110      	bne.n	80052b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	1c9a      	adds	r2, r3, #2
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	621a      	str	r2, [r3, #32]
 80052b0:	e008      	b.n	80052c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	1c59      	adds	r1, r3, #1
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6211      	str	r1, [r2, #32]
 80052bc:	781a      	ldrb	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	4619      	mov	r1, r3
 80052d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10f      	bne.n	80052f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	e000      	b.n	80052fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052fc:	2302      	movs	r3, #2
  }
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005320:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff fe8e 	bl	800504c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b08c      	sub	sp, #48	; 0x30
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b22      	cmp	r3, #34	; 0x22
 800534c:	f040 80ab 	bne.w	80054a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005358:	d117      	bne.n	800538a <UART_Receive_IT+0x50>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d113      	bne.n	800538a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005362:	2300      	movs	r3, #0
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005378:	b29a      	uxth	r2, r3
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	1c9a      	adds	r2, r3, #2
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	629a      	str	r2, [r3, #40]	; 0x28
 8005388:	e026      	b.n	80053d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539c:	d007      	beq.n	80053ae <UART_Receive_IT+0x74>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <UART_Receive_IT+0x82>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e008      	b.n	80053ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4619      	mov	r1, r3
 80053e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d15a      	bne.n	80054a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0220 	bic.w	r2, r2, #32
 80053fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800540a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	2b01      	cmp	r3, #1
 800542a:	d135      	bne.n	8005498 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	613b      	str	r3, [r7, #16]
   return(result);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f023 0310 	bic.w	r3, r3, #16
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	330c      	adds	r3, #12
 8005450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005452:	623a      	str	r2, [r7, #32]
 8005454:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	69f9      	ldr	r1, [r7, #28]
 8005458:	6a3a      	ldr	r2, [r7, #32]
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e5      	bne.n	8005432 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	2b10      	cmp	r3, #16
 8005472:	d10a      	bne.n	800548a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff fdf9 	bl	8005088 <HAL_UARTEx_RxEventCallback>
 8005496:	e002      	b.n	800549e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fde1 	bl	8005060 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	e002      	b.n	80054a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e000      	b.n	80054a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80054a6:	2302      	movs	r3, #2
  }
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3730      	adds	r7, #48	; 0x30
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b4:	b0c0      	sub	sp, #256	; 0x100
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054cc:	68d9      	ldr	r1, [r3, #12]
 80054ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	ea40 0301 	orr.w	r3, r0, r1
 80054d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005508:	f021 010c 	bic.w	r1, r1, #12
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005516:	430b      	orrs	r3, r1
 8005518:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800551a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552a:	6999      	ldr	r1, [r3, #24]
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	ea40 0301 	orr.w	r3, r0, r1
 8005536:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4b8f      	ldr	r3, [pc, #572]	; (800577c <UART_SetConfig+0x2cc>)
 8005540:	429a      	cmp	r2, r3
 8005542:	d005      	beq.n	8005550 <UART_SetConfig+0xa0>
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b8d      	ldr	r3, [pc, #564]	; (8005780 <UART_SetConfig+0x2d0>)
 800554c:	429a      	cmp	r2, r3
 800554e:	d104      	bne.n	800555a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005550:	f7fe ff80 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8005554:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005558:	e003      	b.n	8005562 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800555a:	f7fe ff67 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 800555e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556c:	f040 810c 	bne.w	8005788 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005574:	2200      	movs	r2, #0
 8005576:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800557a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800557e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005582:	4622      	mov	r2, r4
 8005584:	462b      	mov	r3, r5
 8005586:	1891      	adds	r1, r2, r2
 8005588:	65b9      	str	r1, [r7, #88]	; 0x58
 800558a:	415b      	adcs	r3, r3
 800558c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800558e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005592:	4621      	mov	r1, r4
 8005594:	eb12 0801 	adds.w	r8, r2, r1
 8005598:	4629      	mov	r1, r5
 800559a:	eb43 0901 	adc.w	r9, r3, r1
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055b2:	4690      	mov	r8, r2
 80055b4:	4699      	mov	r9, r3
 80055b6:	4623      	mov	r3, r4
 80055b8:	eb18 0303 	adds.w	r3, r8, r3
 80055bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055c0:	462b      	mov	r3, r5
 80055c2:	eb49 0303 	adc.w	r3, r9, r3
 80055c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055de:	460b      	mov	r3, r1
 80055e0:	18db      	adds	r3, r3, r3
 80055e2:	653b      	str	r3, [r7, #80]	; 0x50
 80055e4:	4613      	mov	r3, r2
 80055e6:	eb42 0303 	adc.w	r3, r2, r3
 80055ea:	657b      	str	r3, [r7, #84]	; 0x54
 80055ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055f4:	f7fa fdf8 	bl	80001e8 <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4b61      	ldr	r3, [pc, #388]	; (8005784 <UART_SetConfig+0x2d4>)
 80055fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	011c      	lsls	r4, r3, #4
 8005606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800560a:	2200      	movs	r2, #0
 800560c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005610:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005614:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005618:	4642      	mov	r2, r8
 800561a:	464b      	mov	r3, r9
 800561c:	1891      	adds	r1, r2, r2
 800561e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005620:	415b      	adcs	r3, r3
 8005622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005624:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005628:	4641      	mov	r1, r8
 800562a:	eb12 0a01 	adds.w	sl, r2, r1
 800562e:	4649      	mov	r1, r9
 8005630:	eb43 0b01 	adc.w	fp, r3, r1
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005640:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005644:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005648:	4692      	mov	sl, r2
 800564a:	469b      	mov	fp, r3
 800564c:	4643      	mov	r3, r8
 800564e:	eb1a 0303 	adds.w	r3, sl, r3
 8005652:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005656:	464b      	mov	r3, r9
 8005658:	eb4b 0303 	adc.w	r3, fp, r3
 800565c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800566c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005670:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005674:	460b      	mov	r3, r1
 8005676:	18db      	adds	r3, r3, r3
 8005678:	643b      	str	r3, [r7, #64]	; 0x40
 800567a:	4613      	mov	r3, r2
 800567c:	eb42 0303 	adc.w	r3, r2, r3
 8005680:	647b      	str	r3, [r7, #68]	; 0x44
 8005682:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005686:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800568a:	f7fa fdad 	bl	80001e8 <__aeabi_uldivmod>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4611      	mov	r1, r2
 8005694:	4b3b      	ldr	r3, [pc, #236]	; (8005784 <UART_SetConfig+0x2d4>)
 8005696:	fba3 2301 	umull	r2, r3, r3, r1
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	2264      	movs	r2, #100	; 0x64
 800569e:	fb02 f303 	mul.w	r3, r2, r3
 80056a2:	1acb      	subs	r3, r1, r3
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056aa:	4b36      	ldr	r3, [pc, #216]	; (8005784 <UART_SetConfig+0x2d4>)
 80056ac:	fba3 2302 	umull	r2, r3, r3, r2
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056b8:	441c      	add	r4, r3
 80056ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056cc:	4642      	mov	r2, r8
 80056ce:	464b      	mov	r3, r9
 80056d0:	1891      	adds	r1, r2, r2
 80056d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80056d4:	415b      	adcs	r3, r3
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056dc:	4641      	mov	r1, r8
 80056de:	1851      	adds	r1, r2, r1
 80056e0:	6339      	str	r1, [r7, #48]	; 0x30
 80056e2:	4649      	mov	r1, r9
 80056e4:	414b      	adcs	r3, r1
 80056e6:	637b      	str	r3, [r7, #52]	; 0x34
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80056f4:	4659      	mov	r1, fp
 80056f6:	00cb      	lsls	r3, r1, #3
 80056f8:	4651      	mov	r1, sl
 80056fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056fe:	4651      	mov	r1, sl
 8005700:	00ca      	lsls	r2, r1, #3
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	4603      	mov	r3, r0
 8005708:	4642      	mov	r2, r8
 800570a:	189b      	adds	r3, r3, r2
 800570c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005710:	464b      	mov	r3, r9
 8005712:	460a      	mov	r2, r1
 8005714:	eb42 0303 	adc.w	r3, r2, r3
 8005718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005728:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800572c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005730:	460b      	mov	r3, r1
 8005732:	18db      	adds	r3, r3, r3
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
 8005736:	4613      	mov	r3, r2
 8005738:	eb42 0303 	adc.w	r3, r2, r3
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800573e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005742:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005746:	f7fa fd4f 	bl	80001e8 <__aeabi_uldivmod>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <UART_SetConfig+0x2d4>)
 8005750:	fba3 1302 	umull	r1, r3, r3, r2
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	2164      	movs	r1, #100	; 0x64
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	3332      	adds	r3, #50	; 0x32
 8005762:	4a08      	ldr	r2, [pc, #32]	; (8005784 <UART_SetConfig+0x2d4>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	f003 0207 	and.w	r2, r3, #7
 800576e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4422      	add	r2, r4
 8005776:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005778:	e106      	b.n	8005988 <UART_SetConfig+0x4d8>
 800577a:	bf00      	nop
 800577c:	40011000 	.word	0x40011000
 8005780:	40011400 	.word	0x40011400
 8005784:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800578c:	2200      	movs	r2, #0
 800578e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005792:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005796:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800579a:	4642      	mov	r2, r8
 800579c:	464b      	mov	r3, r9
 800579e:	1891      	adds	r1, r2, r2
 80057a0:	6239      	str	r1, [r7, #32]
 80057a2:	415b      	adcs	r3, r3
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
 80057a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057aa:	4641      	mov	r1, r8
 80057ac:	1854      	adds	r4, r2, r1
 80057ae:	4649      	mov	r1, r9
 80057b0:	eb43 0501 	adc.w	r5, r3, r1
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	00eb      	lsls	r3, r5, #3
 80057be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057c2:	00e2      	lsls	r2, r4, #3
 80057c4:	4614      	mov	r4, r2
 80057c6:	461d      	mov	r5, r3
 80057c8:	4643      	mov	r3, r8
 80057ca:	18e3      	adds	r3, r4, r3
 80057cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057d0:	464b      	mov	r3, r9
 80057d2:	eb45 0303 	adc.w	r3, r5, r3
 80057d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80057f6:	4629      	mov	r1, r5
 80057f8:	008b      	lsls	r3, r1, #2
 80057fa:	4621      	mov	r1, r4
 80057fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005800:	4621      	mov	r1, r4
 8005802:	008a      	lsls	r2, r1, #2
 8005804:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005808:	f7fa fcee 	bl	80001e8 <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4b60      	ldr	r3, [pc, #384]	; (8005994 <UART_SetConfig+0x4e4>)
 8005812:	fba3 2302 	umull	r2, r3, r3, r2
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	011c      	lsls	r4, r3, #4
 800581a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800581e:	2200      	movs	r2, #0
 8005820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005824:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005828:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800582c:	4642      	mov	r2, r8
 800582e:	464b      	mov	r3, r9
 8005830:	1891      	adds	r1, r2, r2
 8005832:	61b9      	str	r1, [r7, #24]
 8005834:	415b      	adcs	r3, r3
 8005836:	61fb      	str	r3, [r7, #28]
 8005838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800583c:	4641      	mov	r1, r8
 800583e:	1851      	adds	r1, r2, r1
 8005840:	6139      	str	r1, [r7, #16]
 8005842:	4649      	mov	r1, r9
 8005844:	414b      	adcs	r3, r1
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005854:	4659      	mov	r1, fp
 8005856:	00cb      	lsls	r3, r1, #3
 8005858:	4651      	mov	r1, sl
 800585a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800585e:	4651      	mov	r1, sl
 8005860:	00ca      	lsls	r2, r1, #3
 8005862:	4610      	mov	r0, r2
 8005864:	4619      	mov	r1, r3
 8005866:	4603      	mov	r3, r0
 8005868:	4642      	mov	r2, r8
 800586a:	189b      	adds	r3, r3, r2
 800586c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005870:	464b      	mov	r3, r9
 8005872:	460a      	mov	r2, r1
 8005874:	eb42 0303 	adc.w	r3, r2, r3
 8005878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	67bb      	str	r3, [r7, #120]	; 0x78
 8005886:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005894:	4649      	mov	r1, r9
 8005896:	008b      	lsls	r3, r1, #2
 8005898:	4641      	mov	r1, r8
 800589a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800589e:	4641      	mov	r1, r8
 80058a0:	008a      	lsls	r2, r1, #2
 80058a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058a6:	f7fa fc9f 	bl	80001e8 <__aeabi_uldivmod>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4611      	mov	r1, r2
 80058b0:	4b38      	ldr	r3, [pc, #224]	; (8005994 <UART_SetConfig+0x4e4>)
 80058b2:	fba3 2301 	umull	r2, r3, r3, r1
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	2264      	movs	r2, #100	; 0x64
 80058ba:	fb02 f303 	mul.w	r3, r2, r3
 80058be:	1acb      	subs	r3, r1, r3
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	3332      	adds	r3, #50	; 0x32
 80058c4:	4a33      	ldr	r2, [pc, #204]	; (8005994 <UART_SetConfig+0x4e4>)
 80058c6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058d0:	441c      	add	r4, r3
 80058d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d6:	2200      	movs	r2, #0
 80058d8:	673b      	str	r3, [r7, #112]	; 0x70
 80058da:	677a      	str	r2, [r7, #116]	; 0x74
 80058dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058e0:	4642      	mov	r2, r8
 80058e2:	464b      	mov	r3, r9
 80058e4:	1891      	adds	r1, r2, r2
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	415b      	adcs	r3, r3
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058f0:	4641      	mov	r1, r8
 80058f2:	1851      	adds	r1, r2, r1
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	4649      	mov	r1, r9
 80058f8:	414b      	adcs	r3, r1
 80058fa:	607b      	str	r3, [r7, #4]
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005908:	4659      	mov	r1, fp
 800590a:	00cb      	lsls	r3, r1, #3
 800590c:	4651      	mov	r1, sl
 800590e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005912:	4651      	mov	r1, sl
 8005914:	00ca      	lsls	r2, r1, #3
 8005916:	4610      	mov	r0, r2
 8005918:	4619      	mov	r1, r3
 800591a:	4603      	mov	r3, r0
 800591c:	4642      	mov	r2, r8
 800591e:	189b      	adds	r3, r3, r2
 8005920:	66bb      	str	r3, [r7, #104]	; 0x68
 8005922:	464b      	mov	r3, r9
 8005924:	460a      	mov	r2, r1
 8005926:	eb42 0303 	adc.w	r3, r2, r3
 800592a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	663b      	str	r3, [r7, #96]	; 0x60
 8005936:	667a      	str	r2, [r7, #100]	; 0x64
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005944:	4649      	mov	r1, r9
 8005946:	008b      	lsls	r3, r1, #2
 8005948:	4641      	mov	r1, r8
 800594a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800594e:	4641      	mov	r1, r8
 8005950:	008a      	lsls	r2, r1, #2
 8005952:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005956:	f7fa fc47 	bl	80001e8 <__aeabi_uldivmod>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <UART_SetConfig+0x4e4>)
 8005960:	fba3 1302 	umull	r1, r3, r3, r2
 8005964:	095b      	lsrs	r3, r3, #5
 8005966:	2164      	movs	r1, #100	; 0x64
 8005968:	fb01 f303 	mul.w	r3, r1, r3
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	3332      	adds	r3, #50	; 0x32
 8005972:	4a08      	ldr	r2, [pc, #32]	; (8005994 <UART_SetConfig+0x4e4>)
 8005974:	fba2 2303 	umull	r2, r3, r2, r3
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	f003 020f 	and.w	r2, r3, #15
 800597e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4422      	add	r2, r4
 8005986:	609a      	str	r2, [r3, #8]
}
 8005988:	bf00      	nop
 800598a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800598e:	46bd      	mov	sp, r7
 8005990:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005994:	51eb851f 	.word	0x51eb851f

08005998 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005998:	b084      	sub	sp, #16
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	f107 001c 	add.w	r0, r7, #28
 80059a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d122      	bne.n	80059f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80059c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d105      	bne.n	80059ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f9c0 	bl	8005d70 <USB_CoreReset>
 80059f0:	4603      	mov	r3, r0
 80059f2:	73fb      	strb	r3, [r7, #15]
 80059f4:	e01a      	b.n	8005a2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f9b4 	bl	8005d70 <USB_CoreReset>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8005a1e:	e005      	b.n	8005a2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d10b      	bne.n	8005a4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f043 0206 	orr.w	r2, r3, #6
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f043 0220 	orr.w	r2, r3, #32
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a56:	b004      	add	sp, #16
 8005a58:	4770      	bx	lr

08005a5a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f043 0201 	orr.w	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f023 0201 	bic.w	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d115      	bne.n	8005aec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005acc:	2001      	movs	r0, #1
 8005ace:	f7fb fae9 	bl	80010a4 <HAL_Delay>
      ms++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f93a 	bl	8005d52 <USB_GetMode>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d01e      	beq.n	8005b22 <USB_SetCurrentMode+0x84>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b31      	cmp	r3, #49	; 0x31
 8005ae8:	d9f0      	bls.n	8005acc <USB_SetCurrentMode+0x2e>
 8005aea:	e01a      	b.n	8005b22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d115      	bne.n	8005b1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005afe:	2001      	movs	r0, #1
 8005b00:	f7fb fad0 	bl	80010a4 <HAL_Delay>
      ms++;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3301      	adds	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f921 	bl	8005d52 <USB_GetMode>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d005      	beq.n	8005b22 <USB_SetCurrentMode+0x84>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b31      	cmp	r3, #49	; 0x31
 8005b1a:	d9f0      	bls.n	8005afe <USB_SetCurrentMode+0x60>
 8005b1c:	e001      	b.n	8005b22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e005      	b.n	8005b2e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b32      	cmp	r3, #50	; 0x32
 8005b26:	d101      	bne.n	8005b2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a13      	ldr	r2, [pc, #76]	; (8005b9c <USB_FlushTxFifo+0x64>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d901      	bls.n	8005b58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e01b      	b.n	8005b90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	daf2      	bge.n	8005b46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	019b      	lsls	r3, r3, #6
 8005b68:	f043 0220 	orr.w	r2, r3, #32
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4a08      	ldr	r2, [pc, #32]	; (8005b9c <USB_FlushTxFifo+0x64>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e006      	b.n	8005b90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b20      	cmp	r3, #32
 8005b8c:	d0f0      	beq.n	8005b70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	00030d40 	.word	0x00030d40

08005ba0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4a11      	ldr	r2, [pc, #68]	; (8005bfc <USB_FlushRxFifo+0x5c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e018      	b.n	8005bf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	daf2      	bge.n	8005bac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2210      	movs	r2, #16
 8005bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a08      	ldr	r2, [pc, #32]	; (8005bfc <USB_FlushRxFifo+0x5c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e006      	b.n	8005bf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b10      	cmp	r3, #16
 8005bec:	d0f0      	beq.n	8005bd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	00030d40 	.word	0x00030d40

08005c00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b089      	sub	sp, #36	; 0x24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	460b      	mov	r3, r1
 8005c10:	71fb      	strb	r3, [r7, #7]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d123      	bne.n	8005c6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c26:	88bb      	ldrh	r3, [r7, #4]
 8005c28:	3303      	adds	r3, #3
 8005c2a:	089b      	lsrs	r3, r3, #2
 8005c2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	e018      	b.n	8005c66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	031a      	lsls	r2, r3, #12
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c40:	461a      	mov	r2, r3
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	3301      	adds	r3, #1
 8005c52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	3301      	adds	r3, #1
 8005c58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	3301      	adds	r3, #1
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d3e2      	bcc.n	8005c34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3724      	adds	r7, #36	; 0x24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b08b      	sub	sp, #44	; 0x2c
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	089b      	lsrs	r3, r3, #2
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	f003 0303 	and.w	r3, r3, #3
 8005ca0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	623b      	str	r3, [r7, #32]
 8005ca6:	e014      	b.n	8005cd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	3301      	adds	r3, #1
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	623b      	str	r3, [r7, #32]
 8005cd2:	6a3a      	ldr	r2, [r7, #32]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d3e6      	bcc.n	8005ca8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cda:	8bfb      	ldrh	r3, [r7, #30]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01e      	beq.n	8005d1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cea:	461a      	mov	r2, r3
 8005cec:	f107 0310 	add.w	r3, r7, #16
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	701a      	strb	r2, [r3, #0]
      i++;
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	3301      	adds	r3, #1
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d12:	8bfb      	ldrh	r3, [r7, #30]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d18:	8bfb      	ldrh	r3, [r7, #30]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1ea      	bne.n	8005cf4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	372c      	adds	r7, #44	; 0x2c
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4013      	ands	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d44:	68fb      	ldr	r3, [r7, #12]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
	...

08005d70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	4a13      	ldr	r2, [pc, #76]	; (8005dd4 <USB_CoreReset+0x64>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d901      	bls.n	8005d8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e01b      	b.n	8005dc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	daf2      	bge.n	8005d7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f043 0201 	orr.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3301      	adds	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4a09      	ldr	r2, [pc, #36]	; (8005dd4 <USB_CoreReset+0x64>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d901      	bls.n	8005db8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e006      	b.n	8005dc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d0f0      	beq.n	8005da6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	00030d40 	.word	0x00030d40

08005dd8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dd8:	b084      	sub	sp, #16
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b086      	sub	sp, #24
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005df8:	461a      	mov	r2, r3
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d018      	beq.n	8005e60 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d10a      	bne.n	8005e4a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e42:	f043 0304 	orr.w	r3, r3, #4
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	e014      	b.n	8005e74 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e58:	f023 0304 	bic.w	r3, r3, #4
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	e009      	b.n	8005e74 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e6e:	f023 0304 	bic.w	r3, r3, #4
 8005e72:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e74:	2110      	movs	r1, #16
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fe5e 	bl	8005b38 <USB_FlushTxFifo>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff fe8a 	bl	8005ba0 <USB_FlushRxFifo>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	e015      	b.n	8005ec8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8005eae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d3e5      	bcc.n	8005e9c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8005edc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a13      	ldr	r2, [pc, #76]	; (8005f44 <USB_HostInit+0x16c>)
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a13      	ldr	r2, [pc, #76]	; (8005f48 <USB_HostInit+0x170>)
 8005efc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005f00:	e009      	b.n	8005f16 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2280      	movs	r2, #128	; 0x80
 8005f06:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a10      	ldr	r2, [pc, #64]	; (8005f4c <USB_HostInit+0x174>)
 8005f0c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a0f      	ldr	r2, [pc, #60]	; (8005f50 <USB_HostInit+0x178>)
 8005f12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d105      	bne.n	8005f28 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	f043 0210 	orr.w	r2, r3, #16
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699a      	ldr	r2, [r3, #24]
 8005f2c:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <USB_HostInit+0x17c>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f40:	b004      	add	sp, #16
 8005f42:	4770      	bx	lr
 8005f44:	01000200 	.word	0x01000200
 8005f48:	00e00300 	.word	0x00e00300
 8005f4c:	00600080 	.word	0x00600080
 8005f50:	004000e0 	.word	0x004000e0
 8005f54:	a3200008 	.word	0xa3200008

08005f58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	460b      	mov	r3, r1
 8005f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f90:	4313      	orrs	r3, r2
 8005f92:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d107      	bne.n	8005faa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005fa6:	6053      	str	r3, [r2, #4]
 8005fa8:	e009      	b.n	8005fbe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d106      	bne.n	8005fbe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f241 7370 	movw	r3, #6000	; 0x1770
 8005fbc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005fec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ffa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ffc:	2064      	movs	r0, #100	; 0x64
 8005ffe:	f7fb f851 	bl	80010a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800600a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800600e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006010:	200a      	movs	r0, #10
 8006012:	f7fb f847 	bl	80010a4 <HAL_Delay>

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006044:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d109      	bne.n	8006064 <USB_DriveVbus+0x44>
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d106      	bne.n	8006064 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800605e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006062:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800606a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606e:	d109      	bne.n	8006084 <USB_DriveVbus+0x64>
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800607e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006082:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	0c5b      	lsrs	r3, r3, #17
 80060b0:	f003 0303 	and.w	r3, r3, #3
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	b29b      	uxth	r3, r3
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	4608      	mov	r0, r1
 80060ee:	4611      	mov	r1, r2
 80060f0:	461a      	mov	r2, r3
 80060f2:	4603      	mov	r3, r0
 80060f4:	70fb      	strb	r3, [r7, #3]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70bb      	strb	r3, [r7, #2]
 80060fa:	4613      	mov	r3, r2
 80060fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006112:	461a      	mov	r2, r3
 8006114:	f04f 33ff 	mov.w	r3, #4294967295
 8006118:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800611a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800611e:	2b03      	cmp	r3, #3
 8006120:	d87e      	bhi.n	8006220 <USB_HC_Init+0x13c>
 8006122:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <USB_HC_Init+0x44>)
 8006124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006128:	08006139 	.word	0x08006139
 800612c:	080061e3 	.word	0x080061e3
 8006130:	08006139 	.word	0x08006139
 8006134:	080061a5 	.word	0x080061a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006144:	461a      	mov	r2, r3
 8006146:	f240 439d 	movw	r3, #1181	; 0x49d
 800614a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800614c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006150:	2b00      	cmp	r3, #0
 8006152:	da10      	bge.n	8006176 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	440a      	add	r2, r1
 800616a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800616e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006172:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006174:	e057      	b.n	8006226 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617e:	2b00      	cmp	r3, #0
 8006180:	d051      	beq.n	8006226 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	4413      	add	r3, r2
 800618a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	440a      	add	r2, r1
 8006198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800619c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80061a0:	60d3      	str	r3, [r2, #12]
      break;
 80061a2:	e040      	b.n	8006226 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b0:	461a      	mov	r2, r3
 80061b2:	f240 639d 	movw	r3, #1693	; 0x69d
 80061b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	da34      	bge.n	800622a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	78fa      	ldrb	r2, [r7, #3]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061de:	60d3      	str	r3, [r2, #12]
      }

      break;
 80061e0:	e023      	b.n	800622a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ee:	461a      	mov	r2, r3
 80061f0:	f240 2325 	movw	r3, #549	; 0x225
 80061f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	da17      	bge.n	800622e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	78fa      	ldrb	r2, [r7, #3]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	440a      	add	r2, r1
 8006214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006218:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800621c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800621e:	e006      	b.n	800622e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	77fb      	strb	r3, [r7, #31]
      break;
 8006224:	e004      	b.n	8006230 <USB_HC_Init+0x14c>
      break;
 8006226:	bf00      	nop
 8006228:	e002      	b.n	8006230 <USB_HC_Init+0x14c>
      break;
 800622a:	bf00      	nop
 800622c:	e000      	b.n	8006230 <USB_HC_Init+0x14c>
      break;
 800622e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4413      	add	r3, r2
 8006238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	440a      	add	r2, r1
 8006246:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800624a:	f043 0302 	orr.w	r3, r3, #2
 800624e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006256:	699a      	ldr	r2, [r3, #24]
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	2101      	movs	r1, #1
 8006260:	fa01 f303 	lsl.w	r3, r1, r3
 8006264:	6939      	ldr	r1, [r7, #16]
 8006266:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800626a:	4313      	orrs	r3, r2
 800626c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800627a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800627e:	2b00      	cmp	r3, #0
 8006280:	da03      	bge.n	800628a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006286:	61bb      	str	r3, [r7, #24]
 8006288:	e001      	b.n	800628e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff feff 	bl	8006092 <USB_GetHostSpeed>
 8006294:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006296:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800629a:	2b02      	cmp	r3, #2
 800629c:	d106      	bne.n	80062ac <USB_HC_Init+0x1c8>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d003      	beq.n	80062ac <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	e001      	b.n	80062b0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062b0:	787b      	ldrb	r3, [r7, #1]
 80062b2:	059b      	lsls	r3, r3, #22
 80062b4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062b8:	78bb      	ldrb	r3, [r7, #2]
 80062ba:	02db      	lsls	r3, r3, #11
 80062bc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062c0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062c6:	049b      	lsls	r3, r3, #18
 80062c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80062d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	0159      	lsls	r1, r3, #5
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	440b      	add	r3, r1
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062ec:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80062ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d003      	beq.n	80062fe <USB_HC_Init+0x21a>
 80062f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d10f      	bne.n	800631e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4413      	add	r3, r2
 8006306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	440a      	add	r2, r1
 8006314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006318:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800631c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800631e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08c      	sub	sp, #48	; 0x30
 800632c:	af02      	add	r7, sp, #8
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	4613      	mov	r3, r2
 8006334:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006344:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634e:	2b00      	cmp	r3, #0
 8006350:	d02d      	beq.n	80063ae <USB_HC_StartXfer+0x86>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	791b      	ldrb	r3, [r3, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d129      	bne.n	80063ae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d117      	bne.n	8006390 <USB_HC_StartXfer+0x68>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	79db      	ldrb	r3, [r3, #7]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <USB_HC_StartXfer+0x48>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	79db      	ldrb	r3, [r3, #7]
 800636c:	2b02      	cmp	r3, #2
 800636e:	d10f      	bne.n	8006390 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	4413      	add	r3, r2
 8006378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	6a3a      	ldr	r2, [r7, #32]
 8006384:	440a      	add	r2, r1
 8006386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10b      	bne.n	80063ae <USB_HC_StartXfer+0x86>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	795b      	ldrb	r3, [r3, #5]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d107      	bne.n	80063ae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	4619      	mov	r1, r3
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fa0f 	bl	80067c8 <USB_DoPing>
      return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e0f8      	b.n	80065a0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d018      	beq.n	80063e8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	8912      	ldrh	r2, [r2, #8]
 80063be:	4413      	add	r3, r2
 80063c0:	3b01      	subs	r3, #1
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	8912      	ldrh	r2, [r2, #8]
 80063c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80063ca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80063cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063ce:	8b7b      	ldrh	r3, [r7, #26]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d90b      	bls.n	80063ec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80063d4:	8b7b      	ldrh	r3, [r7, #26]
 80063d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	8912      	ldrh	r2, [r2, #8]
 80063de:	fb03 f202 	mul.w	r2, r3, r2
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	611a      	str	r2, [r3, #16]
 80063e6:	e001      	b.n	80063ec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80063e8:	2301      	movs	r3, #1
 80063ea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	78db      	ldrb	r3, [r3, #3]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	8912      	ldrh	r2, [r2, #8]
 80063fa:	fb03 f202 	mul.w	r2, r3, r2
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	611a      	str	r2, [r3, #16]
 8006402:	e003      	b.n	800640c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	695a      	ldr	r2, [r3, #20]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006414:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006416:	04d9      	lsls	r1, r3, #19
 8006418:	4b63      	ldr	r3, [pc, #396]	; (80065a8 <USB_HC_StartXfer+0x280>)
 800641a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800641c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	7a9b      	ldrb	r3, [r3, #10]
 8006422:	075b      	lsls	r3, r3, #29
 8006424:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006428:	69f9      	ldr	r1, [r7, #28]
 800642a:	0148      	lsls	r0, r1, #5
 800642c:	6a39      	ldr	r1, [r7, #32]
 800642e:	4401      	add	r1, r0
 8006430:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006434:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006436:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	68d9      	ldr	r1, [r3, #12]
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	4413      	add	r3, r2
 800644a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644e:	460a      	mov	r2, r1
 8006450:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	bf0c      	ite	eq
 8006462:	2301      	moveq	r3, #1
 8006464:	2300      	movne	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	4413      	add	r3, r2
 8006472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	440a      	add	r2, r1
 8006480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006484:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006488:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	7e7b      	ldrb	r3, [r7, #25]
 800649a:	075b      	lsls	r3, r3, #29
 800649c:	69f9      	ldr	r1, [r7, #28]
 800649e:	0148      	lsls	r0, r1, #5
 80064a0:	6a39      	ldr	r1, [r7, #32]
 80064a2:	4401      	add	r1, r0
 80064a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80064a8:	4313      	orrs	r3, r2
 80064aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064c2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	78db      	ldrb	r3, [r3, #3]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	e003      	b.n	80064de <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064dc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064e4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	461a      	mov	r2, r3
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	e04e      	b.n	80065a0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	78db      	ldrb	r3, [r3, #3]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d149      	bne.n	800659e <USB_HC_StartXfer+0x276>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d045      	beq.n	800659e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	79db      	ldrb	r3, [r3, #7]
 8006516:	2b03      	cmp	r3, #3
 8006518:	d830      	bhi.n	800657c <USB_HC_StartXfer+0x254>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <USB_HC_StartXfer+0x1f8>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006531 	.word	0x08006531
 8006524:	08006555 	.word	0x08006555
 8006528:	08006531 	.word	0x08006531
 800652c:	08006555 	.word	0x08006555
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	3303      	adds	r3, #3
 8006536:	089b      	lsrs	r3, r3, #2
 8006538:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800653a:	8afa      	ldrh	r2, [r7, #22]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	b29b      	uxth	r3, r3
 8006542:	429a      	cmp	r2, r3
 8006544:	d91c      	bls.n	8006580 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	619a      	str	r2, [r3, #24]
        }
        break;
 8006552:	e015      	b.n	8006580 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	3303      	adds	r3, #3
 800655a:	089b      	lsrs	r3, r3, #2
 800655c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800655e:	8afa      	ldrh	r2, [r7, #22]
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	b29b      	uxth	r3, r3
 800656a:	429a      	cmp	r2, r3
 800656c:	d90a      	bls.n	8006584 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	619a      	str	r2, [r3, #24]
        }
        break;
 800657a:	e003      	b.n	8006584 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800657c:	bf00      	nop
 800657e:	e002      	b.n	8006586 <USB_HC_StartXfer+0x25e>
        break;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <USB_HC_StartXfer+0x25e>
        break;
 8006584:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	68d9      	ldr	r1, [r3, #12]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	785a      	ldrb	r2, [r3, #1]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	b29b      	uxth	r3, r3
 8006594:	2000      	movs	r0, #0
 8006596:	9000      	str	r0, [sp, #0]
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff fb31 	bl	8005c00 <USB_WritePacket>
  }

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3728      	adds	r7, #40	; 0x28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	1ff80000 	.word	0x1ff80000

080065ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	b29b      	uxth	r3, r3
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b089      	sub	sp, #36	; 0x24
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	460b      	mov	r3, r1
 80065d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80065de:	78fb      	ldrb	r3, [r7, #3]
 80065e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	0c9b      	lsrs	r3, r3, #18
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	0fdb      	lsrs	r3, r3, #31
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0320 	and.w	r3, r3, #32
 800661a:	2b20      	cmp	r3, #32
 800661c:	d104      	bne.n	8006628 <USB_HC_Halt+0x5a>
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	e0c8      	b.n	80067ba <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <USB_HC_Halt+0x66>
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b02      	cmp	r3, #2
 8006632:	d163      	bne.n	80066fc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	0151      	lsls	r1, r2, #5
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	440a      	add	r2, r1
 800664a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800664e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006652:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 80ab 	bne.w	80067b8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d133      	bne.n	80066d6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	440a      	add	r2, r1
 8006684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006688:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800668c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	0151      	lsls	r1, r2, #5
 80066a0:	69fa      	ldr	r2, [r7, #28]
 80066a2:	440a      	add	r2, r1
 80066a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066ac:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3301      	adds	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066ba:	d81d      	bhi.n	80066f8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066d2:	d0ec      	beq.n	80066ae <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066d4:	e070      	b.n	80067b8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	0151      	lsls	r1, r2, #5
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	440a      	add	r2, r1
 80066ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066f4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066f6:	e05f      	b.n	80067b8 <USB_HC_Halt+0x1ea>
            break;
 80066f8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066fa:	e05d      	b.n	80067b8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	4413      	add	r3, r2
 8006704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	69fa      	ldr	r2, [r7, #28]
 8006710:	440a      	add	r2, r1
 8006712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006716:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800671a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d133      	bne.n	8006794 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	0151      	lsls	r1, r2, #5
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	440a      	add	r2, r1
 8006742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800674a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	4413      	add	r3, r2
 8006754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	440a      	add	r2, r1
 8006762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800676a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006778:	d81d      	bhi.n	80067b6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	4413      	add	r3, r2
 8006782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800678c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006790:	d0ec      	beq.n	800676c <USB_HC_Halt+0x19e>
 8006792:	e011      	b.n	80067b8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	69fa      	ldr	r2, [r7, #28]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	e000      	b.n	80067b8 <USB_HC_Halt+0x1ea>
          break;
 80067b6:	bf00      	nop
    }
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3724      	adds	r7, #36	; 0x24
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80067dc:	2301      	movs	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	04da      	lsls	r2, r3, #19
 80067e4:	4b15      	ldr	r3, [pc, #84]	; (800683c <USB_DoPing+0x74>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067f8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	4413      	add	r3, r2
 8006802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006810:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006818:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	4413      	add	r3, r2
 8006822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006826:	461a      	mov	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	1ff80000 	.word	0x1ff80000

08006840 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff f911 	bl	8005a7c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800685a:	2110      	movs	r1, #16
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff f96b 	bl	8005b38 <USB_FlushTxFifo>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff f997 	bl	8005ba0 <USB_FlushRxFifo>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800687c:	2300      	movs	r3, #0
 800687e:	61bb      	str	r3, [r7, #24]
 8006880:	e01f      	b.n	80068c2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006898:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b6:	461a      	mov	r2, r3
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	3301      	adds	r3, #1
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b0f      	cmp	r3, #15
 80068c6:	d9dc      	bls.n	8006882 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068c8:	2300      	movs	r3, #0
 80068ca:	61bb      	str	r3, [r7, #24]
 80068cc:	e034      	b.n	8006938 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006902:	461a      	mov	r2, r3
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006914:	d80c      	bhi.n	8006930 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800692c:	d0ec      	beq.n	8006908 <USB_StopHost+0xc8>
 800692e:	e000      	b.n	8006932 <USB_StopHost+0xf2>
        break;
 8006930:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	3301      	adds	r3, #1
 8006936:	61bb      	str	r3, [r7, #24]
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2b0f      	cmp	r3, #15
 800693c:	d9c7      	bls.n	80068ce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006944:	461a      	mov	r2, r3
 8006946:	f04f 33ff 	mov.w	r3, #4294967295
 800694a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f04f 32ff 	mov.w	r2, #4294967295
 8006952:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff f880 	bl	8005a5a <USB_EnableGlobalInt>

  return ret;
 800695a:	7ffb      	ldrb	r3, [r7, #31]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3720      	adds	r7, #32
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006964:	b590      	push	{r4, r7, lr}
 8006966:	b089      	sub	sp, #36	; 0x24
 8006968:	af04      	add	r7, sp, #16
 800696a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800696c:	2301      	movs	r3, #1
 800696e:	2202      	movs	r2, #2
 8006970:	2102      	movs	r1, #2
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fc66 	bl	8007244 <USBH_FindInterface>
 8006978:	4603      	mov	r3, r0
 800697a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2bff      	cmp	r3, #255	; 0xff
 8006980:	d002      	beq.n	8006988 <USBH_CDC_InterfaceInit+0x24>
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d901      	bls.n	800698c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006988:	2302      	movs	r3, #2
 800698a:	e13d      	b.n	8006c08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fc3b 	bl	800720c <USBH_SelectInterface>
 8006996:	4603      	mov	r3, r0
 8006998:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80069a0:	2302      	movs	r3, #2
 80069a2:	e131      	b.n	8006c08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80069aa:	2050      	movs	r0, #80	; 0x50
 80069ac:	f002 fad2 	bl	8008f54 <malloc>
 80069b0:	4603      	mov	r3, r0
 80069b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80069c4:	2302      	movs	r3, #2
 80069c6:	e11f      	b.n	8006c08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80069c8:	2250      	movs	r2, #80	; 0x50
 80069ca:	2100      	movs	r1, #0
 80069cc:	68b8      	ldr	r0, [r7, #8]
 80069ce:	f002 fb7d 	bl	80090cc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	211a      	movs	r1, #26
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	4413      	add	r3, r2
 80069de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	b25b      	sxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da15      	bge.n	8006a16 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	211a      	movs	r1, #26
 80069f0:	fb01 f303 	mul.w	r3, r1, r3
 80069f4:	4413      	add	r3, r2
 80069f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	211a      	movs	r1, #26
 8006a06:	fb01 f303 	mul.w	r3, r1, r3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a10:	881a      	ldrh	r2, [r3, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	785b      	ldrb	r3, [r3, #1]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 ff2e 	bl	800887e <USBH_AllocPipe>
 8006a22:	4603      	mov	r3, r0
 8006a24:	461a      	mov	r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	7819      	ldrb	r1, [r3, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	7858      	ldrb	r0, [r3, #1]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	8952      	ldrh	r2, [r2, #10]
 8006a42:	9202      	str	r2, [sp, #8]
 8006a44:	2203      	movs	r2, #3
 8006a46:	9201      	str	r2, [sp, #4]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	4623      	mov	r3, r4
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fee6 	bl	8008820 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f002 f9f5 	bl	8008e4c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006a62:	2300      	movs	r3, #0
 8006a64:	2200      	movs	r2, #0
 8006a66:	210a      	movs	r1, #10
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fbeb 	bl	8007244 <USBH_FindInterface>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2bff      	cmp	r3, #255	; 0xff
 8006a76:	d002      	beq.n	8006a7e <USBH_CDC_InterfaceInit+0x11a>
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d901      	bls.n	8006a82 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e0c2      	b.n	8006c08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	211a      	movs	r1, #26
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	b25b      	sxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	da16      	bge.n	8006ac8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	211a      	movs	r1, #26
 8006aa0:	fb01 f303 	mul.w	r3, r1, r3
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006aaa:	781a      	ldrb	r2, [r3, #0]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	211a      	movs	r1, #26
 8006ab6:	fb01 f303 	mul.w	r3, r1, r3
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ac0:	881a      	ldrh	r2, [r3, #0]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	835a      	strh	r2, [r3, #26]
 8006ac6:	e015      	b.n	8006af4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	211a      	movs	r1, #26
 8006ace:	fb01 f303 	mul.w	r3, r1, r3
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ad8:	781a      	ldrb	r2, [r3, #0]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	211a      	movs	r1, #26
 8006ae4:	fb01 f303 	mul.w	r3, r1, r3
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006aee:	881a      	ldrh	r2, [r3, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	211a      	movs	r1, #26
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	4413      	add	r3, r2
 8006b00:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	b25b      	sxtb	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	da16      	bge.n	8006b3a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	211a      	movs	r1, #26
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	4413      	add	r3, r2
 8006b18:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b1c:	781a      	ldrb	r2, [r3, #0]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	211a      	movs	r1, #26
 8006b28:	fb01 f303 	mul.w	r3, r1, r3
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b32:	881a      	ldrh	r2, [r3, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	835a      	strh	r2, [r3, #26]
 8006b38:	e015      	b.n	8006b66 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	211a      	movs	r1, #26
 8006b40:	fb01 f303 	mul.w	r3, r1, r3
 8006b44:	4413      	add	r3, r2
 8006b46:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b4a:	781a      	ldrb	r2, [r3, #0]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	211a      	movs	r1, #26
 8006b56:	fb01 f303 	mul.w	r3, r1, r3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006b60:	881a      	ldrh	r2, [r3, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	7b9b      	ldrb	r3, [r3, #14]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 fe86 	bl	800887e <USBH_AllocPipe>
 8006b72:	4603      	mov	r3, r0
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	7bdb      	ldrb	r3, [r3, #15]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 fe7c 	bl	800887e <USBH_AllocPipe>
 8006b86:	4603      	mov	r3, r0
 8006b88:	461a      	mov	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	7b59      	ldrb	r1, [r3, #13]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	7b98      	ldrb	r0, [r3, #14]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	8b12      	ldrh	r2, [r2, #24]
 8006ba6:	9202      	str	r2, [sp, #8]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	9201      	str	r2, [sp, #4]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	4623      	mov	r3, r4
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fe34 	bl	8008820 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	7b19      	ldrb	r1, [r3, #12]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	7bd8      	ldrb	r0, [r3, #15]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	8b52      	ldrh	r2, [r2, #26]
 8006bd0:	9202      	str	r2, [sp, #8]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	9201      	str	r2, [sp, #4]
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	4623      	mov	r3, r4
 8006bda:	4602      	mov	r2, r0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 fe1f 	bl	8008820 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	7b5b      	ldrb	r3, [r3, #13]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f002 f92a 	bl	8008e4c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	7b1b      	ldrb	r3, [r3, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f002 f923 	bl	8008e4c <USBH_LL_SetToggle>

  return USBH_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd90      	pop	{r4, r7, pc}

08006c10 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00e      	beq.n	8006c48 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fe14 	bl	800885e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 fe3f 	bl	80088c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	7b1b      	ldrb	r3, [r3, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00e      	beq.n	8006c6e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	7b1b      	ldrb	r3, [r3, #12]
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fe01 	bl	800885e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	7b1b      	ldrb	r3, [r3, #12]
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fe2c 	bl	80088c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	7b5b      	ldrb	r3, [r3, #13]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00e      	beq.n	8006c94 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	7b5b      	ldrb	r3, [r3, #13]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 fdee 	bl	800885e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	7b5b      	ldrb	r3, [r3, #13]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f001 fe19 	bl	80088c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f002 f95b 	bl	8008f64 <free>
    phost->pActiveClass->pData = 0U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3340      	adds	r3, #64	; 0x40
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f8b1 	bl	8006e42 <GetLineCoding>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d105      	bne.n	8006cf6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cf0:	2102      	movs	r1, #2
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006cf6:	7afb      	ldrb	r3, [r7, #11]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d877      	bhi.n	8006e14 <USBH_CDC_Process+0x114>
 8006d24:	a201      	add	r2, pc, #4	; (adr r2, 8006d2c <USBH_CDC_Process+0x2c>)
 8006d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2a:	bf00      	nop
 8006d2c:	08006d41 	.word	0x08006d41
 8006d30:	08006d47 	.word	0x08006d47
 8006d34:	08006d77 	.word	0x08006d77
 8006d38:	08006deb 	.word	0x08006deb
 8006d3c:	08006df9 	.word	0x08006df9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]
      break;
 8006d44:	e06d      	b.n	8006e22 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f897 	bl	8006e80 <SetLineCoding>
 8006d52:	4603      	mov	r3, r0
 8006d54:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d64:	e058      	b.n	8006e18 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006d66:	7bbb      	ldrb	r3, [r7, #14]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d055      	beq.n	8006e18 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2204      	movs	r2, #4
 8006d70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006d74:	e050      	b.n	8006e18 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	3340      	adds	r3, #64	; 0x40
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f860 	bl	8006e42 <GetLineCoding>
 8006d82:	4603      	mov	r3, r0
 8006d84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d86:	7bbb      	ldrb	r3, [r7, #14]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d126      	bne.n	8006dda <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9e:	791b      	ldrb	r3, [r3, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d13b      	bne.n	8006e1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d133      	bne.n	8006e1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dbe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d12b      	bne.n	8006e1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dcc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d124      	bne.n	8006e1c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f958 	bl	8007088 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006dd8:	e020      	b.n	8006e1c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d01d      	beq.n	8006e1c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2204      	movs	r2, #4
 8006de4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006de8:	e018      	b.n	8006e1c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f867 	bl	8006ebe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f8da 	bl	8006faa <CDC_ProcessReception>
      break;
 8006df6:	e014      	b.n	8006e22 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 ffef 	bl	8007dde <USBH_ClrFeature>
 8006e00:	4603      	mov	r3, r0
 8006e02:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006e12:	e005      	b.n	8006e20 <USBH_CDC_Process+0x120>

    default:
      break;
 8006e14:	bf00      	nop
 8006e16:	e004      	b.n	8006e22 <USBH_CDC_Process+0x122>
      break;
 8006e18:	bf00      	nop
 8006e1a:	e002      	b.n	8006e22 <USBH_CDC_Process+0x122>
      break;
 8006e1c:	bf00      	nop
 8006e1e:	e000      	b.n	8006e22 <USBH_CDC_Process+0x122>
      break;
 8006e20:	bf00      	nop

  }

  return status;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	22a1      	movs	r2, #161	; 0xa1
 8006e50:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2221      	movs	r2, #33	; 0x21
 8006e56:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2207      	movs	r2, #7
 8006e68:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2207      	movs	r2, #7
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fa83 	bl	800837c <USBH_CtlReq>
 8006e76:	4603      	mov	r3, r0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2221      	movs	r2, #33	; 0x21
 8006e8e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2207      	movs	r2, #7
 8006ea6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2207      	movs	r2, #7
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 fa64 	bl	800837c <USBH_CtlReq>
 8006eb4:	4603      	mov	r3, r0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b086      	sub	sp, #24
 8006ec2:	af02      	add	r7, sp, #8
 8006ec4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d002      	beq.n	8006ee4 <CDC_ProcessTransmission+0x26>
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d023      	beq.n	8006f2a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006ee2:	e05e      	b.n	8006fa2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	8b12      	ldrh	r2, [r2, #24]
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d90b      	bls.n	8006f08 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	69d9      	ldr	r1, [r3, #28]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8b1a      	ldrh	r2, [r3, #24]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	7b5b      	ldrb	r3, [r3, #13]
 8006efc:	2001      	movs	r0, #1
 8006efe:	9000      	str	r0, [sp, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fc4a 	bl	800879a <USBH_BulkSendData>
 8006f06:	e00b      	b.n	8006f20 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	7b5b      	ldrb	r3, [r3, #13]
 8006f16:	2001      	movs	r0, #1
 8006f18:	9000      	str	r0, [sp, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 fc3d 	bl	800879a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f28:	e03b      	b.n	8006fa2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	7b5b      	ldrb	r3, [r3, #13]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 ff61 	bl	8008df8 <USBH_LL_GetURBState>
 8006f36:	4603      	mov	r3, r0
 8006f38:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d128      	bne.n	8006f92 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	8b12      	ldrh	r2, [r2, #24]
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d90e      	bls.n	8006f6a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	8b12      	ldrh	r2, [r2, #24]
 8006f54:	1a9a      	subs	r2, r3, r2
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	8b12      	ldrh	r2, [r2, #24]
 8006f62:	441a      	add	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	61da      	str	r2, [r3, #28]
 8006f68:	e002      	b.n	8006f70 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006f80:	e00e      	b.n	8006fa0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f868 	bl	8007060 <USBH_CDC_TransmitCallback>
      break;
 8006f90:	e006      	b.n	8006fa0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006f92:	7afb      	ldrb	r3, [r7, #11]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d103      	bne.n	8006fa0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fa0:	bf00      	nop
  }
}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b086      	sub	sp, #24
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d002      	beq.n	8006fd0 <CDC_ProcessReception+0x26>
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d00e      	beq.n	8006fec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006fce:	e043      	b.n	8007058 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	6a19      	ldr	r1, [r3, #32]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	8b5a      	ldrh	r2, [r3, #26]
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	7b1b      	ldrb	r3, [r3, #12]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 fc01 	bl	80087e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2204      	movs	r2, #4
 8006fe6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006fea:	e035      	b.n	8007058 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	7b1b      	ldrb	r3, [r3, #12]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 ff00 	bl	8008df8 <USBH_LL_GetURBState>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ffc:	7cfb      	ldrb	r3, [r7, #19]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d129      	bne.n	8007056 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	7b1b      	ldrb	r3, [r3, #12]
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 fe63 	bl	8008cd4 <USBH_LL_GetLastXferSize>
 800700e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	429a      	cmp	r2, r3
 8007018:	d016      	beq.n	8007048 <CDC_ProcessReception+0x9e>
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	8b5b      	ldrh	r3, [r3, #26]
 800701e:	461a      	mov	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4293      	cmp	r3, r2
 8007024:	d910      	bls.n	8007048 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1ad2      	subs	r2, r2, r3
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	6a1a      	ldr	r2, [r3, #32]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	441a      	add	r2, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2203      	movs	r2, #3
 8007042:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007046:	e006      	b.n	8007056 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f80f 	bl	8007074 <USBH_CDC_ReceiveCallback>
      break;
 8007056:	bf00      	nop
  }
}
 8007058:	bf00      	nop
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80070b0:	2302      	movs	r3, #2
 80070b2:	e029      	b.n	8007108 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	79fa      	ldrb	r2, [r7, #7]
 80070b8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f81f 	bl	8007110 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f001 fd33 	bl	8008b6c <USBH_LL_Init>

  return USBH_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	e009      	b.n	8007136 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	33e0      	adds	r3, #224	; 0xe0
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	2200      	movs	r2, #0
 800712e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3301      	adds	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b0f      	cmp	r3, #15
 800713a:	d9f2      	bls.n	8007122 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	e009      	b.n	8007156 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4413      	add	r3, r2
 8007148:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3301      	adds	r3, #1
 8007154:	60fb      	str	r3, [r7, #12]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800715c:	d3f1      	bcc.n	8007142 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2240      	movs	r2, #64	; 0x40
 8007182:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d016      	beq.n	80071fa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10e      	bne.n	80071f4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071dc:	1c59      	adds	r1, r3, #1
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	33de      	adds	r3, #222	; 0xde
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]
 80071f2:	e004      	b.n	80071fe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80071f4:	2302      	movs	r3, #2
 80071f6:	73fb      	strb	r3, [r7, #15]
 80071f8:	e001      	b.n	80071fe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80071fa:	2302      	movs	r3, #2
 80071fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	429a      	cmp	r2, r3
 8007226:	d204      	bcs.n	8007232 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	78fa      	ldrb	r2, [r7, #3]
 800722c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007230:	e001      	b.n	8007236 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007236:	7bfb      	ldrb	r3, [r7, #15]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	4608      	mov	r0, r1
 800724e:	4611      	mov	r1, r2
 8007250:	461a      	mov	r2, r3
 8007252:	4603      	mov	r3, r0
 8007254:	70fb      	strb	r3, [r7, #3]
 8007256:	460b      	mov	r3, r1
 8007258:	70bb      	strb	r3, [r7, #2]
 800725a:	4613      	mov	r3, r2
 800725c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800726c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800726e:	e025      	b.n	80072bc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	221a      	movs	r2, #26
 8007274:	fb02 f303 	mul.w	r3, r2, r3
 8007278:	3308      	adds	r3, #8
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4413      	add	r3, r2
 800727e:	3302      	adds	r3, #2
 8007280:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	795b      	ldrb	r3, [r3, #5]
 8007286:	78fa      	ldrb	r2, [r7, #3]
 8007288:	429a      	cmp	r2, r3
 800728a:	d002      	beq.n	8007292 <USBH_FindInterface+0x4e>
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	2bff      	cmp	r3, #255	; 0xff
 8007290:	d111      	bne.n	80072b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007296:	78ba      	ldrb	r2, [r7, #2]
 8007298:	429a      	cmp	r2, r3
 800729a:	d002      	beq.n	80072a2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800729c:	78bb      	ldrb	r3, [r7, #2]
 800729e:	2bff      	cmp	r3, #255	; 0xff
 80072a0:	d109      	bne.n	80072b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80072a6:	787a      	ldrb	r2, [r7, #1]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d002      	beq.n	80072b2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80072ac:	787b      	ldrb	r3, [r7, #1]
 80072ae:	2bff      	cmp	r3, #255	; 0xff
 80072b0:	d101      	bne.n	80072b6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	e006      	b.n	80072c4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	3301      	adds	r3, #1
 80072ba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d9d6      	bls.n	8007270 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80072c2:	23ff      	movs	r3, #255	; 0xff
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 fc83 	bl	8008be4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80072de:	2101      	movs	r1, #1
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 fd9c 	bl	8008e1e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af04      	add	r7, sp, #16
 80072f6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80072f8:	2302      	movs	r3, #2
 80072fa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b01      	cmp	r3, #1
 800730a:	d102      	bne.n	8007312 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2203      	movs	r2, #3
 8007310:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b0b      	cmp	r3, #11
 800731a:	f200 81be 	bhi.w	800769a <USBH_Process+0x3aa>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <USBH_Process+0x34>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007355 	.word	0x08007355
 8007328:	08007387 	.word	0x08007387
 800732c:	080073ef 	.word	0x080073ef
 8007330:	08007635 	.word	0x08007635
 8007334:	0800769b 	.word	0x0800769b
 8007338:	08007493 	.word	0x08007493
 800733c:	080075db 	.word	0x080075db
 8007340:	080074c9 	.word	0x080074c9
 8007344:	080074e9 	.word	0x080074e9
 8007348:	08007509 	.word	0x08007509
 800734c:	0800754d 	.word	0x0800754d
 8007350:	0800761d 	.word	0x0800761d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 819e 	beq.w	800769e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007368:	20c8      	movs	r0, #200	; 0xc8
 800736a:	f001 fd9f 	bl	8008eac <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 fc95 	bl	8008c9e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007384:	e18b      	b.n	800769e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800738c:	2b01      	cmp	r3, #1
 800738e:	d107      	bne.n	80073a0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2202      	movs	r2, #2
 800739c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800739e:	e18d      	b.n	80076bc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073aa:	d914      	bls.n	80073d6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073b2:	3301      	adds	r3, #1
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d903      	bls.n	80073ce <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	220d      	movs	r2, #13
 80073ca:	701a      	strb	r2, [r3, #0]
      break;
 80073cc:	e176      	b.n	80076bc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]
      break;
 80073d4:	e172      	b.n	80076bc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073dc:	f103 020a 	add.w	r2, r3, #10
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80073e6:	200a      	movs	r0, #10
 80073e8:	f001 fd60 	bl	8008eac <USBH_Delay>
      break;
 80073ec:	e166      	b.n	80076bc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d005      	beq.n	8007404 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073fe:	2104      	movs	r1, #4
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007404:	2064      	movs	r0, #100	; 0x64
 8007406:	f001 fd51 	bl	8008eac <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fc20 	bl	8008c50 <USBH_LL_GetSpeed>
 8007410:	4603      	mov	r3, r0
 8007412:	461a      	mov	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2205      	movs	r2, #5
 800741e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007420:	2100      	movs	r1, #0
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 fa2b 	bl	800887e <USBH_AllocPipe>
 8007428:	4603      	mov	r3, r0
 800742a:	461a      	mov	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007430:	2180      	movs	r1, #128	; 0x80
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 fa23 	bl	800887e <USBH_AllocPipe>
 8007438:	4603      	mov	r3, r0
 800743a:	461a      	mov	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	7919      	ldrb	r1, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007454:	b292      	uxth	r2, r2
 8007456:	9202      	str	r2, [sp, #8]
 8007458:	2200      	movs	r2, #0
 800745a:	9201      	str	r2, [sp, #4]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	4603      	mov	r3, r0
 8007460:	2280      	movs	r2, #128	; 0x80
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 f9dc 	bl	8008820 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	7959      	ldrb	r1, [r3, #5]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800747c:	b292      	uxth	r2, r2
 800747e:	9202      	str	r2, [sp, #8]
 8007480:	2200      	movs	r2, #0
 8007482:	9201      	str	r2, [sp, #4]
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	4603      	mov	r3, r0
 8007488:	2200      	movs	r2, #0
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 f9c8 	bl	8008820 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007490:	e114      	b.n	80076bc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f918 	bl	80076c8 <USBH_HandleEnum>
 8007498:	4603      	mov	r3, r0
 800749a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f040 80fe 	bne.w	80076a2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d103      	bne.n	80074c0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2208      	movs	r2, #8
 80074bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074be:	e0f0      	b.n	80076a2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2207      	movs	r2, #7
 80074c4:	701a      	strb	r2, [r3, #0]
      break;
 80074c6:	e0ec      	b.n	80076a2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 80e9 	beq.w	80076a6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074da:	2101      	movs	r1, #1
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2208      	movs	r2, #8
 80074e4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80074e6:	e0de      	b.n	80076a6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fc2c 	bl	8007d50 <USBH_SetCfg>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 80d5 	bne.w	80076aa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2209      	movs	r2, #9
 8007504:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007506:	e0d0      	b.n	80076aa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800750e:	f003 0320 	and.w	r3, r3, #32
 8007512:	2b00      	cmp	r3, #0
 8007514:	d016      	beq.n	8007544 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007516:	2101      	movs	r1, #1
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fc3c 	bl	8007d96 <USBH_SetFeature>
 800751e:	4603      	mov	r3, r0
 8007520:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d103      	bne.n	8007532 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	220a      	movs	r2, #10
 800752e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007530:	e0bd      	b.n	80076ae <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b03      	cmp	r3, #3
 8007538:	f040 80b9 	bne.w	80076ae <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	220a      	movs	r2, #10
 8007540:	701a      	strb	r2, [r3, #0]
      break;
 8007542:	e0b4      	b.n	80076ae <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	220a      	movs	r2, #10
 8007548:	701a      	strb	r2, [r3, #0]
      break;
 800754a:	e0b0      	b.n	80076ae <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 80ad 	beq.w	80076b2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007560:	2300      	movs	r3, #0
 8007562:	73fb      	strb	r3, [r7, #15]
 8007564:	e016      	b.n	8007594 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007566:	7bfa      	ldrb	r2, [r7, #15]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	32de      	adds	r2, #222	; 0xde
 800756c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007570:	791a      	ldrb	r2, [r3, #4]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007578:	429a      	cmp	r2, r3
 800757a:	d108      	bne.n	800758e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800757c:	7bfa      	ldrb	r2, [r7, #15]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	32de      	adds	r2, #222	; 0xde
 8007582:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800758c:	e005      	b.n	800759a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	3301      	adds	r3, #1
 8007592:	73fb      	strb	r3, [r7, #15]
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0e5      	beq.n	8007566 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d016      	beq.n	80075d2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	4798      	blx	r3
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2206      	movs	r2, #6
 80075ba:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075c2:	2103      	movs	r1, #3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075c8:	e073      	b.n	80076b2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	220d      	movs	r2, #13
 80075ce:	701a      	strb	r2, [r3, #0]
      break;
 80075d0:	e06f      	b.n	80076b2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	220d      	movs	r2, #13
 80075d6:	701a      	strb	r2, [r3, #0]
      break;
 80075d8:	e06b      	b.n	80076b2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d017      	beq.n	8007614 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	4798      	blx	r3
 80075f0:	4603      	mov	r3, r0
 80075f2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d103      	bne.n	8007604 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	220b      	movs	r2, #11
 8007600:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007602:	e058      	b.n	80076b6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007604:	7bbb      	ldrb	r3, [r7, #14]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b02      	cmp	r3, #2
 800760a:	d154      	bne.n	80076b6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	220d      	movs	r2, #13
 8007610:	701a      	strb	r2, [r3, #0]
      break;
 8007612:	e050      	b.n	80076b6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	220d      	movs	r2, #13
 8007618:	701a      	strb	r2, [r3, #0]
      break;
 800761a:	e04c      	b.n	80076b6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d049      	beq.n	80076ba <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
      }
      break;
 8007632:	e042      	b.n	80076ba <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff fd67 	bl	8007110 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007648:	2b00      	cmp	r3, #0
 800764a:	d009      	beq.n	8007660 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007666:	2b00      	cmp	r3, #0
 8007668:	d005      	beq.n	8007676 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007670:	2105      	movs	r1, #5
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b01      	cmp	r3, #1
 8007680:	d107      	bne.n	8007692 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff fe20 	bl	80072d0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007690:	e014      	b.n	80076bc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 faa6 	bl	8008be4 <USBH_LL_Start>
      break;
 8007698:	e010      	b.n	80076bc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800769a:	bf00      	nop
 800769c:	e00e      	b.n	80076bc <USBH_Process+0x3cc>
      break;
 800769e:	bf00      	nop
 80076a0:	e00c      	b.n	80076bc <USBH_Process+0x3cc>
      break;
 80076a2:	bf00      	nop
 80076a4:	e00a      	b.n	80076bc <USBH_Process+0x3cc>
    break;
 80076a6:	bf00      	nop
 80076a8:	e008      	b.n	80076bc <USBH_Process+0x3cc>
      break;
 80076aa:	bf00      	nop
 80076ac:	e006      	b.n	80076bc <USBH_Process+0x3cc>
      break;
 80076ae:	bf00      	nop
 80076b0:	e004      	b.n	80076bc <USBH_Process+0x3cc>
      break;
 80076b2:	bf00      	nop
 80076b4:	e002      	b.n	80076bc <USBH_Process+0x3cc>
      break;
 80076b6:	bf00      	nop
 80076b8:	e000      	b.n	80076bc <USBH_Process+0x3cc>
      break;
 80076ba:	bf00      	nop
  }
  return USBH_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop

080076c8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b088      	sub	sp, #32
 80076cc:	af04      	add	r7, sp, #16
 80076ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80076d0:	2301      	movs	r3, #1
 80076d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b07      	cmp	r3, #7
 80076de:	f200 81c1 	bhi.w	8007a64 <USBH_HandleEnum+0x39c>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <USBH_HandleEnum+0x20>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	08007709 	.word	0x08007709
 80076ec:	080077c7 	.word	0x080077c7
 80076f0:	08007831 	.word	0x08007831
 80076f4:	080078bf 	.word	0x080078bf
 80076f8:	08007929 	.word	0x08007929
 80076fc:	08007999 	.word	0x08007999
 8007700:	080079df 	.word	0x080079df
 8007704:	08007a25 	.word	0x08007a25
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007708:	2108      	movs	r1, #8
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa50 	bl	8007bb0 <USBH_Get_DevDesc>
 8007710:	4603      	mov	r3, r0
 8007712:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007714:	7bbb      	ldrb	r3, [r7, #14]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d130      	bne.n	800777c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7919      	ldrb	r1, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800773e:	b292      	uxth	r2, r2
 8007740:	9202      	str	r2, [sp, #8]
 8007742:	2200      	movs	r2, #0
 8007744:	9201      	str	r2, [sp, #4]
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	4603      	mov	r3, r0
 800774a:	2280      	movs	r2, #128	; 0x80
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 f867 	bl	8008820 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	7959      	ldrb	r1, [r3, #5]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007766:	b292      	uxth	r2, r2
 8007768:	9202      	str	r2, [sp, #8]
 800776a:	2200      	movs	r2, #0
 800776c:	9201      	str	r2, [sp, #4]
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	4603      	mov	r3, r0
 8007772:	2200      	movs	r2, #0
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f853 	bl	8008820 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800777a:	e175      	b.n	8007a68 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	2b03      	cmp	r3, #3
 8007780:	f040 8172 	bne.w	8007a68 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800778a:	3301      	adds	r3, #1
 800778c:	b2da      	uxtb	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800779a:	2b03      	cmp	r3, #3
 800779c:	d903      	bls.n	80077a6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	220d      	movs	r2, #13
 80077a2:	701a      	strb	r2, [r3, #0]
      break;
 80077a4:	e160      	b.n	8007a68 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	795b      	ldrb	r3, [r3, #5]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 f887 	bl	80088c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	791b      	ldrb	r3, [r3, #4]
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 f881 	bl	80088c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]
      break;
 80077c4:	e150      	b.n	8007a68 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80077c6:	2112      	movs	r1, #18
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f9f1 	bl	8007bb0 <USBH_Get_DevDesc>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d103      	bne.n	80077e0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077de:	e145      	b.n	8007a6c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	f040 8142 	bne.w	8007a6c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ee:	3301      	adds	r3, #1
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d903      	bls.n	800780a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	220d      	movs	r2, #13
 8007806:	701a      	strb	r2, [r3, #0]
      break;
 8007808:	e130      	b.n	8007a6c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	795b      	ldrb	r3, [r3, #5]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 f855 	bl	80088c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	791b      	ldrb	r3, [r3, #4]
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 f84f 	bl	80088c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	701a      	strb	r2, [r3, #0]
      break;
 800782e:	e11d      	b.n	8007a6c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007830:	2101      	movs	r1, #1
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa68 	bl	8007d08 <USBH_SetAddress>
 8007838:	4603      	mov	r3, r0
 800783a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d132      	bne.n	80078a8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007842:	2002      	movs	r0, #2
 8007844:	f001 fb32 	bl	8008eac <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2203      	movs	r2, #3
 8007854:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	7919      	ldrb	r1, [r3, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800786a:	b292      	uxth	r2, r2
 800786c:	9202      	str	r2, [sp, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	9201      	str	r2, [sp, #4]
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	4603      	mov	r3, r0
 8007876:	2280      	movs	r2, #128	; 0x80
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 ffd1 	bl	8008820 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	7959      	ldrb	r1, [r3, #5]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007892:	b292      	uxth	r2, r2
 8007894:	9202      	str	r2, [sp, #8]
 8007896:	2200      	movs	r2, #0
 8007898:	9201      	str	r2, [sp, #4]
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	4603      	mov	r3, r0
 800789e:	2200      	movs	r2, #0
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 ffbd 	bl	8008820 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078a6:	e0e3      	b.n	8007a70 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	f040 80e0 	bne.w	8007a70 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	220d      	movs	r2, #13
 80078b4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	705a      	strb	r2, [r3, #1]
      break;
 80078bc:	e0d8      	b.n	8007a70 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80078be:	2109      	movs	r1, #9
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f99d 	bl	8007c00 <USBH_Get_CfgDesc>
 80078c6:	4603      	mov	r3, r0
 80078c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d103      	bne.n	80078d8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2204      	movs	r2, #4
 80078d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078d6:	e0cd      	b.n	8007a74 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	2b03      	cmp	r3, #3
 80078dc:	f040 80ca 	bne.w	8007a74 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078e6:	3301      	adds	r3, #1
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d903      	bls.n	8007902 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	220d      	movs	r2, #13
 80078fe:	701a      	strb	r2, [r3, #0]
      break;
 8007900:	e0b8      	b.n	8007a74 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	795b      	ldrb	r3, [r3, #5]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 ffd9 	bl	80088c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	791b      	ldrb	r3, [r3, #4]
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 ffd3 	bl	80088c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
      break;
 8007926:	e0a5      	b.n	8007a74 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f965 	bl	8007c00 <USBH_Get_CfgDesc>
 8007936:	4603      	mov	r3, r0
 8007938:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d103      	bne.n	8007948 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2205      	movs	r2, #5
 8007944:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007946:	e097      	b.n	8007a78 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b03      	cmp	r3, #3
 800794c:	f040 8094 	bne.w	8007a78 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007956:	3301      	adds	r3, #1
 8007958:	b2da      	uxtb	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007966:	2b03      	cmp	r3, #3
 8007968:	d903      	bls.n	8007972 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	220d      	movs	r2, #13
 800796e:	701a      	strb	r2, [r3, #0]
      break;
 8007970:	e082      	b.n	8007a78 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	795b      	ldrb	r3, [r3, #5]
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 ffa1 	bl	80088c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	791b      	ldrb	r3, [r3, #4]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 ff9b 	bl	80088c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
      break;
 8007996:	e06f      	b.n	8007a78 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d019      	beq.n	80079d6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80079ae:	23ff      	movs	r3, #255	; 0xff
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f949 	bl	8007c48 <USBH_Get_StringDesc>
 80079b6:	4603      	mov	r3, r0
 80079b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d103      	bne.n	80079c8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2206      	movs	r2, #6
 80079c4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80079c6:	e059      	b.n	8007a7c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d156      	bne.n	8007a7c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2206      	movs	r2, #6
 80079d2:	705a      	strb	r2, [r3, #1]
      break;
 80079d4:	e052      	b.n	8007a7c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2206      	movs	r2, #6
 80079da:	705a      	strb	r2, [r3, #1]
      break;
 80079dc:	e04e      	b.n	8007a7c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d019      	beq.n	8007a1c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80079f4:	23ff      	movs	r3, #255	; 0xff
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f926 	bl	8007c48 <USBH_Get_StringDesc>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d103      	bne.n	8007a0e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2207      	movs	r2, #7
 8007a0a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a0c:	e038      	b.n	8007a80 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d135      	bne.n	8007a80 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2207      	movs	r2, #7
 8007a18:	705a      	strb	r2, [r3, #1]
      break;
 8007a1a:	e031      	b.n	8007a80 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2207      	movs	r2, #7
 8007a20:	705a      	strb	r2, [r3, #1]
      break;
 8007a22:	e02d      	b.n	8007a80 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d017      	beq.n	8007a5e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a3a:	23ff      	movs	r3, #255	; 0xff
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f903 	bl	8007c48 <USBH_Get_StringDesc>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007a50:	e018      	b.n	8007a84 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	2b03      	cmp	r3, #3
 8007a56:	d115      	bne.n	8007a84 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a5c:	e012      	b.n	8007a84 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]
      break;
 8007a62:	e00f      	b.n	8007a84 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007a64:	bf00      	nop
 8007a66:	e00e      	b.n	8007a86 <USBH_HandleEnum+0x3be>
      break;
 8007a68:	bf00      	nop
 8007a6a:	e00c      	b.n	8007a86 <USBH_HandleEnum+0x3be>
      break;
 8007a6c:	bf00      	nop
 8007a6e:	e00a      	b.n	8007a86 <USBH_HandleEnum+0x3be>
      break;
 8007a70:	bf00      	nop
 8007a72:	e008      	b.n	8007a86 <USBH_HandleEnum+0x3be>
      break;
 8007a74:	bf00      	nop
 8007a76:	e006      	b.n	8007a86 <USBH_HandleEnum+0x3be>
      break;
 8007a78:	bf00      	nop
 8007a7a:	e004      	b.n	8007a86 <USBH_HandleEnum+0x3be>
      break;
 8007a7c:	bf00      	nop
 8007a7e:	e002      	b.n	8007a86 <USBH_HandleEnum+0x3be>
      break;
 8007a80:	bf00      	nop
 8007a82:	e000      	b.n	8007a86 <USBH_HandleEnum+0x3be>
      break;
 8007a84:	bf00      	nop
  }
  return Status;
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f804 	bl	8007ad2 <USBH_HandleSof>
}
 8007aca:	bf00      	nop
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b0b      	cmp	r3, #11
 8007ae2:	d10a      	bne.n	8007afa <USBH_HandleSof+0x28>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	4798      	blx	r3
  }
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007b12:	bf00      	nop
}
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b2e:	bf00      	nop
}
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 f846 	bl	8008c1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	791b      	ldrb	r3, [r3, #4]
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fe93 	bl	80088c0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	795b      	ldrb	r3, [r3, #5]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fe8d 	bl	80088c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af02      	add	r7, sp, #8
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bce:	2100      	movs	r1, #0
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f864 	bl	8007c9e <USBH_GetDescriptor>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10a      	bne.n	8007bf6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bec:	78fa      	ldrb	r2, [r7, #3]
 8007bee:	b292      	uxth	r2, r2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	f000 f919 	bl	8007e28 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	331c      	adds	r3, #28
 8007c10:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007c12:	887b      	ldrh	r3, [r7, #2]
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f83d 	bl	8007c9e <USBH_GetDescriptor>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d107      	bne.n	8007c3e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007c2e:	887b      	ldrh	r3, [r7, #2]
 8007c30:	461a      	mov	r2, r3
 8007c32:	68b9      	ldr	r1, [r7, #8]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f989 	bl	8007f4c <USBH_ParseCfgDesc>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b088      	sub	sp, #32
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	607a      	str	r2, [r7, #4]
 8007c52:	461a      	mov	r2, r3
 8007c54:	460b      	mov	r3, r1
 8007c56:	72fb      	strb	r3, [r7, #11]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007c5c:	7afb      	ldrb	r3, [r7, #11]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c64:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007c6c:	893b      	ldrh	r3, [r7, #8]
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	460b      	mov	r3, r1
 8007c72:	2100      	movs	r1, #0
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f812 	bl	8007c9e <USBH_GetDescriptor>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d107      	bne.n	8007c94 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c8a:	893a      	ldrh	r2, [r7, #8]
 8007c8c:	6879      	ldr	r1, [r7, #4]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fb26 	bl	80082e0 <USBH_ParseStringDesc>
  }

  return status;
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	607b      	str	r3, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	72fb      	strb	r3, [r7, #11]
 8007cac:	4613      	mov	r3, r2
 8007cae:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	789b      	ldrb	r3, [r3, #2]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d11c      	bne.n	8007cf2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2206      	movs	r2, #6
 8007cc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	893a      	ldrh	r2, [r7, #8]
 8007cce:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007cd0:	893b      	ldrh	r3, [r7, #8]
 8007cd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cda:	d104      	bne.n	8007ce6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f240 4209 	movw	r2, #1033	; 0x409
 8007ce2:	829a      	strh	r2, [r3, #20]
 8007ce4:	e002      	b.n	8007cec <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8b3a      	ldrh	r2, [r7, #24]
 8007cf0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007cf2:	8b3b      	ldrh	r3, [r7, #24]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 fb3f 	bl	800837c <USBH_CtlReq>
 8007cfe:	4603      	mov	r3, r0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	789b      	ldrb	r3, [r3, #2]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d10f      	bne.n	8007d3c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2205      	movs	r2, #5
 8007d26:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2100      	movs	r1, #0
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fb1b 	bl	800837c <USBH_CtlReq>
 8007d46:	4603      	mov	r3, r0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	789b      	ldrb	r3, [r3, #2]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d10e      	bne.n	8007d82 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2209      	movs	r2, #9
 8007d6e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	887a      	ldrh	r2, [r7, #2]
 8007d74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d82:	2200      	movs	r2, #0
 8007d84:	2100      	movs	r1, #0
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 faf8 	bl	800837c <USBH_CtlReq>
 8007d8c:	4603      	mov	r3, r0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	460b      	mov	r3, r1
 8007da0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	789b      	ldrb	r3, [r3, #2]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d10f      	bne.n	8007dca <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2203      	movs	r2, #3
 8007db4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2100      	movs	r1, #0
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fad4 	bl	800837c <USBH_CtlReq>
 8007dd4:	4603      	mov	r3, r0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	460b      	mov	r3, r1
 8007de8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	789b      	ldrb	r3, [r3, #2]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d10f      	bne.n	8007e12 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2202      	movs	r2, #2
 8007df6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007e12:	2200      	movs	r2, #0
 8007e14:	2100      	movs	r1, #0
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fab0 	bl	800837c <USBH_CtlReq>
 8007e1c:	4603      	mov	r3, r0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	4613      	mov	r3, r2
 8007e34:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	781a      	ldrb	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	785a      	ldrb	r2, [r3, #1]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	3302      	adds	r3, #2
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	3303      	adds	r3, #3
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	021b      	lsls	r3, r3, #8
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	791a      	ldrb	r2, [r3, #4]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	795a      	ldrb	r2, [r3, #5]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	799a      	ldrb	r2, [r3, #6]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	79da      	ldrb	r2, [r3, #7]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	79db      	ldrb	r3, [r3, #7]
 8007e86:	2b20      	cmp	r3, #32
 8007e88:	dc0f      	bgt.n	8007eaa <USBH_ParseDevDesc+0x82>
 8007e8a:	2b08      	cmp	r3, #8
 8007e8c:	db14      	blt.n	8007eb8 <USBH_ParseDevDesc+0x90>
 8007e8e:	3b08      	subs	r3, #8
 8007e90:	4a2d      	ldr	r2, [pc, #180]	; (8007f48 <USBH_ParseDevDesc+0x120>)
 8007e92:	fa22 f303 	lsr.w	r3, r2, r3
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bf14      	ite	ne
 8007e9e:	2301      	movne	r3, #1
 8007ea0:	2300      	moveq	r3, #0
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <USBH_ParseDevDesc+0x86>
 8007ea8:	e006      	b.n	8007eb8 <USBH_ParseDevDesc+0x90>
 8007eaa:	2b40      	cmp	r3, #64	; 0x40
 8007eac:	d104      	bne.n	8007eb8 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	79da      	ldrb	r2, [r3, #7]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	71da      	strb	r2, [r3, #7]
      break;
 8007eb6:	e003      	b.n	8007ec0 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2240      	movs	r2, #64	; 0x40
 8007ebc:	71da      	strb	r2, [r3, #7]
      break;
 8007ebe:	bf00      	nop
  }

  if (length > 8U)
 8007ec0:	88fb      	ldrh	r3, [r7, #6]
 8007ec2:	2b08      	cmp	r3, #8
 8007ec4:	d939      	bls.n	8007f3a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	3309      	adds	r3, #9
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	4313      	orrs	r3, r2
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	330a      	adds	r3, #10
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	330b      	adds	r3, #11
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	330c      	adds	r3, #12
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	330d      	adds	r3, #13
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	021b      	lsls	r3, r3, #8
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	4313      	orrs	r3, r2
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	7b9a      	ldrb	r2, [r3, #14]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	7bda      	ldrb	r2, [r3, #15]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	7c1a      	ldrb	r2, [r3, #16]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	7c5a      	ldrb	r2, [r3, #17]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	745a      	strb	r2, [r3, #17]
  }
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	01000101 	.word	0x01000101

08007f4c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08c      	sub	sp, #48	; 0x30
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f60:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	781a      	ldrb	r2, [r3, #0]
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	785a      	ldrb	r2, [r3, #1]
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	3302      	adds	r3, #2
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	3303      	adds	r3, #3
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	021b      	lsls	r3, r3, #8
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa8:	bf28      	it	cs
 8007faa:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	791a      	ldrb	r2, [r3, #4]
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	795a      	ldrb	r2, [r3, #5]
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	799a      	ldrb	r2, [r3, #6]
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	79da      	ldrb	r2, [r3, #7]
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	7a1a      	ldrb	r2, [r3, #8]
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b09      	cmp	r3, #9
 8007fe2:	d002      	beq.n	8007fea <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	2209      	movs	r2, #9
 8007fe8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007fea:	88fb      	ldrh	r3, [r7, #6]
 8007fec:	2b09      	cmp	r3, #9
 8007fee:	f240 809d 	bls.w	800812c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007ff2:	2309      	movs	r3, #9
 8007ff4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ffa:	e081      	b.n	8008100 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ffc:	f107 0316 	add.w	r3, r7, #22
 8008000:	4619      	mov	r1, r3
 8008002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008004:	f000 f99f 	bl	8008346 <USBH_GetNextDesc>
 8008008:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800800a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800c:	785b      	ldrb	r3, [r3, #1]
 800800e:	2b04      	cmp	r3, #4
 8008010:	d176      	bne.n	8008100 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b09      	cmp	r3, #9
 8008018:	d002      	beq.n	8008020 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	2209      	movs	r2, #9
 800801e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008024:	221a      	movs	r2, #26
 8008026:	fb02 f303 	mul.w	r3, r2, r3
 800802a:	3308      	adds	r3, #8
 800802c:	6a3a      	ldr	r2, [r7, #32]
 800802e:	4413      	add	r3, r2
 8008030:	3302      	adds	r3, #2
 8008032:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008036:	69f8      	ldr	r0, [r7, #28]
 8008038:	f000 f87e 	bl	8008138 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008042:	2300      	movs	r3, #0
 8008044:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008046:	e043      	b.n	80080d0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008048:	f107 0316 	add.w	r3, r7, #22
 800804c:	4619      	mov	r1, r3
 800804e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008050:	f000 f979 	bl	8008346 <USBH_GetNextDesc>
 8008054:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008058:	785b      	ldrb	r3, [r3, #1]
 800805a:	2b05      	cmp	r3, #5
 800805c:	d138      	bne.n	80080d0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	795b      	ldrb	r3, [r3, #5]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d10f      	bne.n	8008086 <USBH_ParseCfgDesc+0x13a>
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	799b      	ldrb	r3, [r3, #6]
 800806a:	2b02      	cmp	r3, #2
 800806c:	d10b      	bne.n	8008086 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	79db      	ldrb	r3, [r3, #7]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10f      	bne.n	8008096 <USBH_ParseCfgDesc+0x14a>
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b09      	cmp	r3, #9
 800807c:	d00b      	beq.n	8008096 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	2209      	movs	r2, #9
 8008082:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008084:	e007      	b.n	8008096 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b07      	cmp	r3, #7
 800808c:	d004      	beq.n	8008098 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008090:	2207      	movs	r2, #7
 8008092:	701a      	strb	r2, [r3, #0]
 8008094:	e000      	b.n	8008098 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008096:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800809c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80080a0:	3201      	adds	r2, #1
 80080a2:	00d2      	lsls	r2, r2, #3
 80080a4:	211a      	movs	r1, #26
 80080a6:	fb01 f303 	mul.w	r3, r1, r3
 80080aa:	4413      	add	r3, r2
 80080ac:	3308      	adds	r3, #8
 80080ae:	6a3a      	ldr	r2, [r7, #32]
 80080b0:	4413      	add	r3, r2
 80080b2:	3304      	adds	r3, #4
 80080b4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80080b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080b8:	69b9      	ldr	r1, [r7, #24]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 f86b 	bl	8008196 <USBH_ParseEPDesc>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80080c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080ca:	3301      	adds	r3, #1
 80080cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	791b      	ldrb	r3, [r3, #4]
 80080d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80080d8:	429a      	cmp	r2, r3
 80080da:	d204      	bcs.n	80080e6 <USBH_ParseCfgDesc+0x19a>
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	885a      	ldrh	r2, [r3, #2]
 80080e0:	8afb      	ldrh	r3, [r7, #22]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d8b0      	bhi.n	8008048 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	791b      	ldrb	r3, [r3, #4]
 80080ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d201      	bcs.n	80080f6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e01c      	b.n	8008130 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80080f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080fa:	3301      	adds	r3, #1
 80080fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008104:	2b01      	cmp	r3, #1
 8008106:	d805      	bhi.n	8008114 <USBH_ParseCfgDesc+0x1c8>
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	885a      	ldrh	r2, [r3, #2]
 800810c:	8afb      	ldrh	r3, [r7, #22]
 800810e:	429a      	cmp	r2, r3
 8008110:	f63f af74 	bhi.w	8007ffc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	791b      	ldrb	r3, [r3, #4]
 8008118:	2b02      	cmp	r3, #2
 800811a:	bf28      	it	cs
 800811c:	2302      	movcs	r3, #2
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008124:	429a      	cmp	r2, r3
 8008126:	d201      	bcs.n	800812c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008128:	2303      	movs	r3, #3
 800812a:	e001      	b.n	8008130 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800812c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008130:	4618      	mov	r0, r3
 8008132:	3730      	adds	r7, #48	; 0x30
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781a      	ldrb	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	785a      	ldrb	r2, [r3, #1]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	789a      	ldrb	r2, [r3, #2]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	78da      	ldrb	r2, [r3, #3]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	791a      	ldrb	r2, [r3, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	795a      	ldrb	r2, [r3, #5]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	799a      	ldrb	r2, [r3, #6]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	79da      	ldrb	r2, [r3, #7]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	7a1a      	ldrb	r2, [r3, #8]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	721a      	strb	r2, [r3, #8]
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008196:	b480      	push	{r7}
 8008198:	b087      	sub	sp, #28
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	781a      	ldrb	r2, [r3, #0]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	785a      	ldrb	r2, [r3, #1]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	789a      	ldrb	r2, [r3, #2]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	78da      	ldrb	r2, [r3, #3]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3304      	adds	r3, #4
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3305      	adds	r3, #5
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	021b      	lsls	r3, r3, #8
 80081d8:	b29b      	uxth	r3, r3
 80081da:	4313      	orrs	r3, r2
 80081dc:	b29a      	uxth	r2, r3
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	799a      	ldrb	r2, [r3, #6]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	889b      	ldrh	r3, [r3, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d102      	bne.n	80081f8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80081f2:	2303      	movs	r3, #3
 80081f4:	75fb      	strb	r3, [r7, #23]
 80081f6:	e033      	b.n	8008260 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	889b      	ldrh	r3, [r3, #4]
 80081fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008200:	f023 0307 	bic.w	r3, r3, #7
 8008204:	b29a      	uxth	r2, r3
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	889b      	ldrh	r3, [r3, #4]
 800820e:	b21a      	sxth	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3304      	adds	r3, #4
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	b299      	uxth	r1, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3305      	adds	r3, #5
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	b29b      	uxth	r3, r3
 8008224:	430b      	orrs	r3, r1
 8008226:	b29b      	uxth	r3, r3
 8008228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800822c:	2b00      	cmp	r3, #0
 800822e:	d110      	bne.n	8008252 <USBH_ParseEPDesc+0xbc>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	3304      	adds	r3, #4
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	b299      	uxth	r1, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3305      	adds	r3, #5
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	b29b      	uxth	r3, r3
 8008244:	430b      	orrs	r3, r1
 8008246:	b29b      	uxth	r3, r3
 8008248:	b21b      	sxth	r3, r3
 800824a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800824e:	b21b      	sxth	r3, r3
 8008250:	e001      	b.n	8008256 <USBH_ParseEPDesc+0xc0>
 8008252:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008256:	4313      	orrs	r3, r2
 8008258:	b21b      	sxth	r3, r3
 800825a:	b29a      	uxth	r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008266:	2b00      	cmp	r3, #0
 8008268:	d116      	bne.n	8008298 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	78db      	ldrb	r3, [r3, #3]
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	2b01      	cmp	r3, #1
 8008274:	d005      	beq.n	8008282 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	78db      	ldrb	r3, [r3, #3]
 800827a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800827e:	2b03      	cmp	r3, #3
 8008280:	d127      	bne.n	80082d2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	799b      	ldrb	r3, [r3, #6]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <USBH_ParseEPDesc+0xfc>
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	799b      	ldrb	r3, [r3, #6]
 800828e:	2b10      	cmp	r3, #16
 8008290:	d91f      	bls.n	80082d2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008292:	2303      	movs	r3, #3
 8008294:	75fb      	strb	r3, [r7, #23]
 8008296:	e01c      	b.n	80082d2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	78db      	ldrb	r3, [r3, #3]
 800829c:	f003 0303 	and.w	r3, r3, #3
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d10a      	bne.n	80082ba <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	799b      	ldrb	r3, [r3, #6]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <USBH_ParseEPDesc+0x11e>
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	799b      	ldrb	r3, [r3, #6]
 80082b0:	2b10      	cmp	r3, #16
 80082b2:	d90e      	bls.n	80082d2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80082b4:	2303      	movs	r3, #3
 80082b6:	75fb      	strb	r3, [r7, #23]
 80082b8:	e00b      	b.n	80082d2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	78db      	ldrb	r3, [r3, #3]
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d105      	bne.n	80082d2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	799b      	ldrb	r3, [r3, #6]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80082ce:	2303      	movs	r3, #3
 80082d0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	371c      	adds	r7, #28
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	4613      	mov	r3, r2
 80082ec:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3301      	adds	r3, #1
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d120      	bne.n	800833a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	1e9a      	subs	r2, r3, #2
 80082fe:	88fb      	ldrh	r3, [r7, #6]
 8008300:	4293      	cmp	r3, r2
 8008302:	bf28      	it	cs
 8008304:	4613      	movcs	r3, r2
 8008306:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3302      	adds	r3, #2
 800830c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800830e:	2300      	movs	r3, #0
 8008310:	82fb      	strh	r3, [r7, #22]
 8008312:	e00b      	b.n	800832c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008314:	8afb      	ldrh	r3, [r7, #22]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	4413      	add	r3, r2
 800831a:	781a      	ldrb	r2, [r3, #0]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	3301      	adds	r3, #1
 8008324:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008326:	8afb      	ldrh	r3, [r7, #22]
 8008328:	3302      	adds	r3, #2
 800832a:	82fb      	strh	r3, [r7, #22]
 800832c:	8afa      	ldrh	r2, [r7, #22]
 800832e:	8abb      	ldrh	r3, [r7, #20]
 8008330:	429a      	cmp	r2, r3
 8008332:	d3ef      	bcc.n	8008314 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2200      	movs	r2, #0
 8008338:	701a      	strb	r2, [r3, #0]
  }
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008346:	b480      	push	{r7}
 8008348:	b085      	sub	sp, #20
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	881a      	ldrh	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	b29b      	uxth	r3, r3
 800835a:	4413      	add	r3, r2
 800835c:	b29a      	uxth	r2, r3
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4413      	add	r3, r2
 800836c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800836e:	68fb      	ldr	r3, [r7, #12]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	4613      	mov	r3, r2
 8008388:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800838a:	2301      	movs	r3, #1
 800838c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	789b      	ldrb	r3, [r3, #2]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d002      	beq.n	800839c <USBH_CtlReq+0x20>
 8008396:	2b02      	cmp	r3, #2
 8008398:	d00f      	beq.n	80083ba <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800839a:	e027      	b.n	80083ec <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	88fa      	ldrh	r2, [r7, #6]
 80083a6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2201      	movs	r2, #1
 80083ac:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2202      	movs	r2, #2
 80083b2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80083b4:	2301      	movs	r3, #1
 80083b6:	75fb      	strb	r3, [r7, #23]
      break;
 80083b8:	e018      	b.n	80083ec <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 f81c 	bl	80083f8 <USBH_HandleControl>
 80083c0:	4603      	mov	r3, r0
 80083c2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <USBH_CtlReq+0x54>
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d106      	bne.n	80083de <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	761a      	strb	r2, [r3, #24]
      break;
 80083dc:	e005      	b.n	80083ea <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d102      	bne.n	80083ea <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	709a      	strb	r2, [r3, #2]
      break;
 80083ea:	bf00      	nop
  }
  return status;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
	...

080083f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af02      	add	r7, sp, #8
 80083fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008400:	2301      	movs	r3, #1
 8008402:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008404:	2300      	movs	r3, #0
 8008406:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	7e1b      	ldrb	r3, [r3, #24]
 800840c:	3b01      	subs	r3, #1
 800840e:	2b0a      	cmp	r3, #10
 8008410:	f200 8156 	bhi.w	80086c0 <USBH_HandleControl+0x2c8>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <USBH_HandleControl+0x24>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008449 	.word	0x08008449
 8008420:	08008463 	.word	0x08008463
 8008424:	080084cd 	.word	0x080084cd
 8008428:	080084f3 	.word	0x080084f3
 800842c:	0800852b 	.word	0x0800852b
 8008430:	08008555 	.word	0x08008555
 8008434:	080085a7 	.word	0x080085a7
 8008438:	080085c9 	.word	0x080085c9
 800843c:	08008605 	.word	0x08008605
 8008440:	0800862b 	.word	0x0800862b
 8008444:	08008669 	.word	0x08008669
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f103 0110 	add.w	r1, r3, #16
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	795b      	ldrb	r3, [r3, #5]
 8008452:	461a      	mov	r2, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f943 	bl	80086e0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2202      	movs	r2, #2
 800845e:	761a      	strb	r2, [r3, #24]
      break;
 8008460:	e139      	b.n	80086d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	795b      	ldrb	r3, [r3, #5]
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fcc5 	bl	8008df8 <USBH_LL_GetURBState>
 800846e:	4603      	mov	r3, r0
 8008470:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d11e      	bne.n	80084b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	7c1b      	ldrb	r3, [r3, #16]
 800847c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008480:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	8adb      	ldrh	r3, [r3, #22]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800848a:	7b7b      	ldrb	r3, [r7, #13]
 800848c:	2b80      	cmp	r3, #128	; 0x80
 800848e:	d103      	bne.n	8008498 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2203      	movs	r2, #3
 8008494:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008496:	e115      	b.n	80086c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2205      	movs	r2, #5
 800849c:	761a      	strb	r2, [r3, #24]
      break;
 800849e:	e111      	b.n	80086c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80084a0:	7b7b      	ldrb	r3, [r7, #13]
 80084a2:	2b80      	cmp	r3, #128	; 0x80
 80084a4:	d103      	bne.n	80084ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2209      	movs	r2, #9
 80084aa:	761a      	strb	r2, [r3, #24]
      break;
 80084ac:	e10a      	b.n	80086c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2207      	movs	r2, #7
 80084b2:	761a      	strb	r2, [r3, #24]
      break;
 80084b4:	e106      	b.n	80086c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b04      	cmp	r3, #4
 80084ba:	d003      	beq.n	80084c4 <USBH_HandleControl+0xcc>
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	f040 8100 	bne.w	80086c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	220b      	movs	r2, #11
 80084c8:	761a      	strb	r2, [r3, #24]
      break;
 80084ca:	e0fb      	b.n	80086c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6899      	ldr	r1, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	899a      	ldrh	r2, [r3, #12]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	791b      	ldrb	r3, [r3, #4]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f93a 	bl	800875e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2204      	movs	r2, #4
 80084ee:	761a      	strb	r2, [r3, #24]
      break;
 80084f0:	e0f1      	b.n	80086d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	791b      	ldrb	r3, [r3, #4]
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fc7d 	bl	8008df8 <USBH_LL_GetURBState>
 80084fe:	4603      	mov	r3, r0
 8008500:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d102      	bne.n	800850e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2209      	movs	r2, #9
 800850c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	2b05      	cmp	r3, #5
 8008512:	d102      	bne.n	800851a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008514:	2303      	movs	r3, #3
 8008516:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008518:	e0d6      	b.n	80086c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	2b04      	cmp	r3, #4
 800851e:	f040 80d3 	bne.w	80086c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	220b      	movs	r2, #11
 8008526:	761a      	strb	r2, [r3, #24]
      break;
 8008528:	e0ce      	b.n	80086c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6899      	ldr	r1, [r3, #8]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	899a      	ldrh	r2, [r3, #12]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	795b      	ldrb	r3, [r3, #5]
 8008536:	2001      	movs	r0, #1
 8008538:	9000      	str	r0, [sp, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f8ea 	bl	8008714 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008546:	b29a      	uxth	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2206      	movs	r2, #6
 8008550:	761a      	strb	r2, [r3, #24]
      break;
 8008552:	e0c0      	b.n	80086d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	795b      	ldrb	r3, [r3, #5]
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fc4c 	bl	8008df8 <USBH_LL_GetURBState>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d103      	bne.n	8008572 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2207      	movs	r2, #7
 800856e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008570:	e0ac      	b.n	80086cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b05      	cmp	r3, #5
 8008576:	d105      	bne.n	8008584 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	220c      	movs	r2, #12
 800857c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800857e:	2303      	movs	r3, #3
 8008580:	73fb      	strb	r3, [r7, #15]
      break;
 8008582:	e0a3      	b.n	80086cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d103      	bne.n	8008592 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2205      	movs	r2, #5
 800858e:	761a      	strb	r2, [r3, #24]
      break;
 8008590:	e09c      	b.n	80086cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b04      	cmp	r3, #4
 8008596:	f040 8099 	bne.w	80086cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	220b      	movs	r2, #11
 800859e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80085a0:	2302      	movs	r3, #2
 80085a2:	73fb      	strb	r3, [r7, #15]
      break;
 80085a4:	e092      	b.n	80086cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	791b      	ldrb	r3, [r3, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	2100      	movs	r1, #0
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f8d5 	bl	800875e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2208      	movs	r2, #8
 80085c4:	761a      	strb	r2, [r3, #24]

      break;
 80085c6:	e086      	b.n	80086d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	791b      	ldrb	r3, [r3, #4]
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fc12 	bl	8008df8 <USBH_LL_GetURBState>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d105      	bne.n	80085ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	220d      	movs	r2, #13
 80085e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085e8:	e072      	b.n	80086d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d103      	bne.n	80085f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	220b      	movs	r2, #11
 80085f4:	761a      	strb	r2, [r3, #24]
      break;
 80085f6:	e06b      	b.n	80086d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	2b05      	cmp	r3, #5
 80085fc:	d168      	bne.n	80086d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80085fe:	2303      	movs	r3, #3
 8008600:	73fb      	strb	r3, [r7, #15]
      break;
 8008602:	e065      	b.n	80086d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	795b      	ldrb	r3, [r3, #5]
 8008608:	2201      	movs	r2, #1
 800860a:	9200      	str	r2, [sp, #0]
 800860c:	2200      	movs	r2, #0
 800860e:	2100      	movs	r1, #0
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f87f 	bl	8008714 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800861c:	b29a      	uxth	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	220a      	movs	r2, #10
 8008626:	761a      	strb	r2, [r3, #24]
      break;
 8008628:	e055      	b.n	80086d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	795b      	ldrb	r3, [r3, #5]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fbe1 	bl	8008df8 <USBH_LL_GetURBState>
 8008636:	4603      	mov	r3, r0
 8008638:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d105      	bne.n	800864c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	220d      	movs	r2, #13
 8008648:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800864a:	e043      	b.n	80086d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d103      	bne.n	800865a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2209      	movs	r2, #9
 8008656:	761a      	strb	r2, [r3, #24]
      break;
 8008658:	e03c      	b.n	80086d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	2b04      	cmp	r3, #4
 800865e:	d139      	bne.n	80086d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	220b      	movs	r2, #11
 8008664:	761a      	strb	r2, [r3, #24]
      break;
 8008666:	e035      	b.n	80086d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	7e5b      	ldrb	r3, [r3, #25]
 800866c:	3301      	adds	r3, #1
 800866e:	b2da      	uxtb	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	765a      	strb	r2, [r3, #25]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	7e5b      	ldrb	r3, [r3, #25]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d806      	bhi.n	800868a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008688:	e025      	b.n	80086d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008690:	2106      	movs	r1, #6
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	795b      	ldrb	r3, [r3, #5]
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f90c 	bl	80088c0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	791b      	ldrb	r3, [r3, #4]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f906 	bl	80088c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80086ba:	2302      	movs	r3, #2
 80086bc:	73fb      	strb	r3, [r7, #15]
      break;
 80086be:	e00a      	b.n	80086d6 <USBH_HandleControl+0x2de>

    default:
      break;
 80086c0:	bf00      	nop
 80086c2:	e008      	b.n	80086d6 <USBH_HandleControl+0x2de>
      break;
 80086c4:	bf00      	nop
 80086c6:	e006      	b.n	80086d6 <USBH_HandleControl+0x2de>
      break;
 80086c8:	bf00      	nop
 80086ca:	e004      	b.n	80086d6 <USBH_HandleControl+0x2de>
      break;
 80086cc:	bf00      	nop
 80086ce:	e002      	b.n	80086d6 <USBH_HandleControl+0x2de>
      break;
 80086d0:	bf00      	nop
 80086d2:	e000      	b.n	80086d6 <USBH_HandleControl+0x2de>
      break;
 80086d4:	bf00      	nop
  }

  return status;
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af04      	add	r7, sp, #16
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086ee:	79f9      	ldrb	r1, [r7, #7]
 80086f0:	2300      	movs	r3, #0
 80086f2:	9303      	str	r3, [sp, #12]
 80086f4:	2308      	movs	r3, #8
 80086f6:	9302      	str	r3, [sp, #8]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	2300      	movs	r3, #0
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	2300      	movs	r3, #0
 8008702:	2200      	movs	r2, #0
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 fb46 	bl	8008d96 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af04      	add	r7, sp, #16
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	4611      	mov	r1, r2
 8008720:	461a      	mov	r2, r3
 8008722:	460b      	mov	r3, r1
 8008724:	80fb      	strh	r3, [r7, #6]
 8008726:	4613      	mov	r3, r2
 8008728:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008738:	7979      	ldrb	r1, [r7, #5]
 800873a:	7e3b      	ldrb	r3, [r7, #24]
 800873c:	9303      	str	r3, [sp, #12]
 800873e:	88fb      	ldrh	r3, [r7, #6]
 8008740:	9302      	str	r3, [sp, #8]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	2301      	movs	r3, #1
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	2300      	movs	r3, #0
 800874c:	2200      	movs	r2, #0
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 fb21 	bl	8008d96 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b088      	sub	sp, #32
 8008762:	af04      	add	r7, sp, #16
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	4611      	mov	r1, r2
 800876a:	461a      	mov	r2, r3
 800876c:	460b      	mov	r3, r1
 800876e:	80fb      	strh	r3, [r7, #6]
 8008770:	4613      	mov	r3, r2
 8008772:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008774:	7979      	ldrb	r1, [r7, #5]
 8008776:	2300      	movs	r3, #0
 8008778:	9303      	str	r3, [sp, #12]
 800877a:	88fb      	ldrh	r3, [r7, #6]
 800877c:	9302      	str	r3, [sp, #8]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	2301      	movs	r3, #1
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	2300      	movs	r3, #0
 8008788:	2201      	movs	r2, #1
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 fb03 	bl	8008d96 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008790:	2300      	movs	r3, #0

}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b088      	sub	sp, #32
 800879e:	af04      	add	r7, sp, #16
 80087a0:	60f8      	str	r0, [r7, #12]
 80087a2:	60b9      	str	r1, [r7, #8]
 80087a4:	4611      	mov	r1, r2
 80087a6:	461a      	mov	r2, r3
 80087a8:	460b      	mov	r3, r1
 80087aa:	80fb      	strh	r3, [r7, #6]
 80087ac:	4613      	mov	r3, r2
 80087ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087be:	7979      	ldrb	r1, [r7, #5]
 80087c0:	7e3b      	ldrb	r3, [r7, #24]
 80087c2:	9303      	str	r3, [sp, #12]
 80087c4:	88fb      	ldrh	r3, [r7, #6]
 80087c6:	9302      	str	r3, [sp, #8]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	9301      	str	r3, [sp, #4]
 80087cc:	2301      	movs	r3, #1
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	2302      	movs	r3, #2
 80087d2:	2200      	movs	r2, #0
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 fade 	bl	8008d96 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af04      	add	r7, sp, #16
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	4611      	mov	r1, r2
 80087f0:	461a      	mov	r2, r3
 80087f2:	460b      	mov	r3, r1
 80087f4:	80fb      	strh	r3, [r7, #6]
 80087f6:	4613      	mov	r3, r2
 80087f8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087fa:	7979      	ldrb	r1, [r7, #5]
 80087fc:	2300      	movs	r3, #0
 80087fe:	9303      	str	r3, [sp, #12]
 8008800:	88fb      	ldrh	r3, [r7, #6]
 8008802:	9302      	str	r3, [sp, #8]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	2301      	movs	r3, #1
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	2302      	movs	r3, #2
 800880e:	2201      	movs	r2, #1
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 fac0 	bl	8008d96 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af04      	add	r7, sp, #16
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	4608      	mov	r0, r1
 800882a:	4611      	mov	r1, r2
 800882c:	461a      	mov	r2, r3
 800882e:	4603      	mov	r3, r0
 8008830:	70fb      	strb	r3, [r7, #3]
 8008832:	460b      	mov	r3, r1
 8008834:	70bb      	strb	r3, [r7, #2]
 8008836:	4613      	mov	r3, r2
 8008838:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800883a:	7878      	ldrb	r0, [r7, #1]
 800883c:	78ba      	ldrb	r2, [r7, #2]
 800883e:	78f9      	ldrb	r1, [r7, #3]
 8008840:	8b3b      	ldrh	r3, [r7, #24]
 8008842:	9302      	str	r3, [sp, #8]
 8008844:	7d3b      	ldrb	r3, [r7, #20]
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	7c3b      	ldrb	r3, [r7, #16]
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	4603      	mov	r3, r0
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fa53 	bl	8008cfa <USBH_LL_OpenPipe>

  return USBH_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800886a:	78fb      	ldrb	r3, [r7, #3]
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fa72 	bl	8008d58 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	460b      	mov	r3, r1
 8008888:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f836 	bl	80088fc <USBH_GetFreePipe>
 8008890:	4603      	mov	r3, r0
 8008892:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008894:	89fb      	ldrh	r3, [r7, #14]
 8008896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800889a:	4293      	cmp	r3, r2
 800889c:	d00a      	beq.n	80088b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800889e:	78fa      	ldrb	r2, [r7, #3]
 80088a0:	89fb      	ldrh	r3, [r7, #14]
 80088a2:	f003 030f 	and.w	r3, r3, #15
 80088a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	33e0      	adds	r3, #224	; 0xe0
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80088b4:	89fb      	ldrh	r3, [r7, #14]
 80088b6:	b2db      	uxtb	r3, r3
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	2b0f      	cmp	r3, #15
 80088d0:	d80d      	bhi.n	80088ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80088d2:	78fb      	ldrb	r3, [r7, #3]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	33e0      	adds	r3, #224	; 0xe0
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	78fb      	ldrb	r3, [r7, #3]
 80088e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80088e4:	6879      	ldr	r1, [r7, #4]
 80088e6:	33e0      	adds	r3, #224	; 0xe0
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	440b      	add	r3, r1
 80088ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
 800890c:	e00f      	b.n	800892e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	33e0      	adds	r3, #224	; 0xe0
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d102      	bne.n	8008928 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	b29b      	uxth	r3, r3
 8008926:	e007      	b.n	8008938 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	3301      	adds	r3, #1
 800892c:	73fb      	strb	r3, [r7, #15]
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	2b0f      	cmp	r3, #15
 8008932:	d9ec      	bls.n	800890e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008934:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008948:	2201      	movs	r2, #1
 800894a:	490e      	ldr	r1, [pc, #56]	; (8008984 <MX_USB_HOST_Init+0x40>)
 800894c:	480e      	ldr	r0, [pc, #56]	; (8008988 <MX_USB_HOST_Init+0x44>)
 800894e:	f7fe fba5 	bl	800709c <USBH_Init>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008958:	f7f8 f8a6 	bl	8000aa8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800895c:	490b      	ldr	r1, [pc, #44]	; (800898c <MX_USB_HOST_Init+0x48>)
 800895e:	480a      	ldr	r0, [pc, #40]	; (8008988 <MX_USB_HOST_Init+0x44>)
 8008960:	f7fe fc2a 	bl	80071b8 <USBH_RegisterClass>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800896a:	f7f8 f89d 	bl	8000aa8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800896e:	4806      	ldr	r0, [pc, #24]	; (8008988 <MX_USB_HOST_Init+0x44>)
 8008970:	f7fe fcae 	bl	80072d0 <USBH_Start>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800897a:	f7f8 f895 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800897e:	bf00      	nop
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	080089a5 	.word	0x080089a5
 8008988:	20000220 	.word	0x20000220
 800898c:	2000000c 	.word	0x2000000c

08008990 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008994:	4802      	ldr	r0, [pc, #8]	; (80089a0 <MX_USB_HOST_Process+0x10>)
 8008996:	f7fe fcab 	bl	80072f0 <USBH_Process>
}
 800899a:	bf00      	nop
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20000220 	.word	0x20000220

080089a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	3b01      	subs	r3, #1
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d819      	bhi.n	80089ec <USBH_UserProcess+0x48>
 80089b8:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <USBH_UserProcess+0x1c>)
 80089ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089be:	bf00      	nop
 80089c0:	080089ed 	.word	0x080089ed
 80089c4:	080089dd 	.word	0x080089dd
 80089c8:	080089ed 	.word	0x080089ed
 80089cc:	080089e5 	.word	0x080089e5
 80089d0:	080089d5 	.word	0x080089d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80089d4:	4b09      	ldr	r3, [pc, #36]	; (80089fc <USBH_UserProcess+0x58>)
 80089d6:	2203      	movs	r2, #3
 80089d8:	701a      	strb	r2, [r3, #0]
  break;
 80089da:	e008      	b.n	80089ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80089dc:	4b07      	ldr	r3, [pc, #28]	; (80089fc <USBH_UserProcess+0x58>)
 80089de:	2202      	movs	r2, #2
 80089e0:	701a      	strb	r2, [r3, #0]
  break;
 80089e2:	e004      	b.n	80089ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80089e4:	4b05      	ldr	r3, [pc, #20]	; (80089fc <USBH_UserProcess+0x58>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	701a      	strb	r2, [r3, #0]
  break;
 80089ea:	e000      	b.n	80089ee <USBH_UserProcess+0x4a>

  default:
  break;
 80089ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80089ee:	bf00      	nop
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	200005f8 	.word	0x200005f8

08008a00 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08a      	sub	sp, #40	; 0x28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a08:	f107 0314 	add.w	r3, r7, #20
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	605a      	str	r2, [r3, #4]
 8008a12:	609a      	str	r2, [r3, #8]
 8008a14:	60da      	str	r2, [r3, #12]
 8008a16:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a20:	d147      	bne.n	8008ab2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a22:	2300      	movs	r3, #0
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	4b25      	ldr	r3, [pc, #148]	; (8008abc <HAL_HCD_MspInit+0xbc>)
 8008a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2a:	4a24      	ldr	r2, [pc, #144]	; (8008abc <HAL_HCD_MspInit+0xbc>)
 8008a2c:	f043 0301 	orr.w	r3, r3, #1
 8008a30:	6313      	str	r3, [r2, #48]	; 0x30
 8008a32:	4b22      	ldr	r3, [pc, #136]	; (8008abc <HAL_HCD_MspInit+0xbc>)
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	613b      	str	r3, [r7, #16]
 8008a3c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a44:	2300      	movs	r3, #0
 8008a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a4c:	f107 0314 	add.w	r3, r7, #20
 8008a50:	4619      	mov	r1, r3
 8008a52:	481b      	ldr	r0, [pc, #108]	; (8008ac0 <HAL_HCD_MspInit+0xc0>)
 8008a54:	f7f8 fcee 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a58:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a66:	2303      	movs	r3, #3
 8008a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a6a:	230a      	movs	r3, #10
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a6e:	f107 0314 	add.w	r3, r7, #20
 8008a72:	4619      	mov	r1, r3
 8008a74:	4812      	ldr	r0, [pc, #72]	; (8008ac0 <HAL_HCD_MspInit+0xc0>)
 8008a76:	f7f8 fcdd 	bl	8001434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a7a:	4b10      	ldr	r3, [pc, #64]	; (8008abc <HAL_HCD_MspInit+0xbc>)
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7e:	4a0f      	ldr	r2, [pc, #60]	; (8008abc <HAL_HCD_MspInit+0xbc>)
 8008a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a84:	6353      	str	r3, [r2, #52]	; 0x34
 8008a86:	2300      	movs	r3, #0
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	4b0c      	ldr	r3, [pc, #48]	; (8008abc <HAL_HCD_MspInit+0xbc>)
 8008a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a8e:	4a0b      	ldr	r2, [pc, #44]	; (8008abc <HAL_HCD_MspInit+0xbc>)
 8008a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a94:	6453      	str	r3, [r2, #68]	; 0x44
 8008a96:	4b09      	ldr	r3, [pc, #36]	; (8008abc <HAL_HCD_MspInit+0xbc>)
 8008a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	2043      	movs	r0, #67	; 0x43
 8008aa8:	f7f8 fbfb 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008aac:	2043      	movs	r0, #67	; 0x43
 8008aae:	f7f8 fc14 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ab2:	bf00      	nop
 8008ab4:	3728      	adds	r7, #40	; 0x28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	40023800 	.word	0x40023800
 8008ac0:	40020000 	.word	0x40020000

08008ac4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe ffeb 	bl	8007aae <USBH_LL_IncTimer>
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff f823 	bl	8007b3a <USBH_LL_Connect>
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7ff f82c 	bl	8007b68 <USBH_LL_Disconnect>
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
 8008b24:	4613      	mov	r3, r2
 8008b26:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe ffdd 	bl	8007b02 <USBH_LL_PortEnabled>
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe ffdd 	bl	8007b1e <USBH_LL_PortDisabled>
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d12a      	bne.n	8008bd4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008b7e:	4a18      	ldr	r2, [pc, #96]	; (8008be0 <USBH_LL_Init+0x74>)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a15      	ldr	r2, [pc, #84]	; (8008be0 <USBH_LL_Init+0x74>)
 8008b8a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b8e:	4b14      	ldr	r3, [pc, #80]	; (8008be0 <USBH_LL_Init+0x74>)
 8008b90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008b96:	4b12      	ldr	r3, [pc, #72]	; (8008be0 <USBH_LL_Init+0x74>)
 8008b98:	2208      	movs	r2, #8
 8008b9a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008b9c:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <USBH_LL_Init+0x74>)
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ba2:	4b0f      	ldr	r3, [pc, #60]	; (8008be0 <USBH_LL_Init+0x74>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ba8:	4b0d      	ldr	r3, [pc, #52]	; (8008be0 <USBH_LL_Init+0x74>)
 8008baa:	2202      	movs	r2, #2
 8008bac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bae:	4b0c      	ldr	r3, [pc, #48]	; (8008be0 <USBH_LL_Init+0x74>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008bb4:	480a      	ldr	r0, [pc, #40]	; (8008be0 <USBH_LL_Init+0x74>)
 8008bb6:	f7f8 fdda 	bl	800176e <HAL_HCD_Init>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008bc0:	f7f7 ff72 	bl	8000aa8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008bc4:	4806      	ldr	r0, [pc, #24]	; (8008be0 <USBH_LL_Init+0x74>)
 8008bc6:	f7f9 f9be 	bl	8001f46 <HAL_HCD_GetCurrentFrame>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7fe ff5e 	bl	8007a90 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	200005fc 	.word	0x200005fc

08008be4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7f9 f92d 	bl	8001e5a <HAL_HCD_Start>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 f95c 	bl	8008ec4 <USBH_Get_USB_Status>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7f9 f935 	bl	8001ea0 <HAL_HCD_Stop>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 f941 	bl	8008ec4 <USBH_Get_USB_Status>
 8008c42:	4603      	mov	r3, r0
 8008c44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7f9 f97d 	bl	8001f62 <HAL_HCD_GetCurrentSpeed>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d00c      	beq.n	8008c88 <USBH_LL_GetSpeed+0x38>
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d80d      	bhi.n	8008c8e <USBH_LL_GetSpeed+0x3e>
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <USBH_LL_GetSpeed+0x2c>
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d003      	beq.n	8008c82 <USBH_LL_GetSpeed+0x32>
 8008c7a:	e008      	b.n	8008c8e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c80:	e008      	b.n	8008c94 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008c82:	2301      	movs	r3, #1
 8008c84:	73fb      	strb	r3, [r7, #15]
    break;
 8008c86:	e005      	b.n	8008c94 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008c88:	2302      	movs	r3, #2
 8008c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c8c:	e002      	b.n	8008c94 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	73fb      	strb	r3, [r7, #15]
    break;
 8008c92:	bf00      	nop
  }
  return  speed;
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7f9 f910 	bl	8001eda <HAL_HCD_ResetPort>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 f8ff 	bl	8008ec4 <USBH_Get_USB_Status>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ce6:	78fa      	ldrb	r2, [r7, #3]
 8008ce8:	4611      	mov	r1, r2
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7f9 f917 	bl	8001f1e <HAL_HCD_HC_GetXferCount>
 8008cf0:	4603      	mov	r3, r0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cfa:	b590      	push	{r4, r7, lr}
 8008cfc:	b089      	sub	sp, #36	; 0x24
 8008cfe:	af04      	add	r7, sp, #16
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	4608      	mov	r0, r1
 8008d04:	4611      	mov	r1, r2
 8008d06:	461a      	mov	r2, r3
 8008d08:	4603      	mov	r3, r0
 8008d0a:	70fb      	strb	r3, [r7, #3]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70bb      	strb	r3, [r7, #2]
 8008d10:	4613      	mov	r3, r2
 8008d12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008d22:	787c      	ldrb	r4, [r7, #1]
 8008d24:	78ba      	ldrb	r2, [r7, #2]
 8008d26:	78f9      	ldrb	r1, [r7, #3]
 8008d28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d2a:	9302      	str	r3, [sp, #8]
 8008d2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	4623      	mov	r3, r4
 8008d3a:	f7f8 fd7a 	bl	8001832 <HAL_HCD_HC_Init>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 f8bd 	bl	8008ec4 <USBH_Get_USB_Status>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd90      	pop	{r4, r7, pc}

08008d58 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d72:	78fa      	ldrb	r2, [r7, #3]
 8008d74:	4611      	mov	r1, r2
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7f8 fdea 	bl	8001950 <HAL_HCD_HC_Halt>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 f89e 	bl	8008ec4 <USBH_Get_USB_Status>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008d96:	b590      	push	{r4, r7, lr}
 8008d98:	b089      	sub	sp, #36	; 0x24
 8008d9a:	af04      	add	r7, sp, #16
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	4608      	mov	r0, r1
 8008da0:	4611      	mov	r1, r2
 8008da2:	461a      	mov	r2, r3
 8008da4:	4603      	mov	r3, r0
 8008da6:	70fb      	strb	r3, [r7, #3]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70bb      	strb	r3, [r7, #2]
 8008dac:	4613      	mov	r3, r2
 8008dae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008dbe:	787c      	ldrb	r4, [r7, #1]
 8008dc0:	78ba      	ldrb	r2, [r7, #2]
 8008dc2:	78f9      	ldrb	r1, [r7, #3]
 8008dc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008dc8:	9303      	str	r3, [sp, #12]
 8008dca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008dcc:	9302      	str	r3, [sp, #8]
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	4623      	mov	r3, r4
 8008dda:	f7f8 fddd 	bl	8001998 <HAL_HCD_HC_SubmitRequest>
 8008dde:	4603      	mov	r3, r0
 8008de0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 f86d 	bl	8008ec4 <USBH_Get_USB_Status>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd90      	pop	{r4, r7, pc}

08008df8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e0a:	78fa      	ldrb	r2, [r7, #3]
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7f9 f871 	bl	8001ef6 <HAL_HCD_HC_GetURBState>
 8008e14:	4603      	mov	r3, r0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d103      	bne.n	8008e3c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f000 f870 	bl	8008f1c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008e3c:	20c8      	movs	r0, #200	; 0xc8
 8008e3e:	f7f8 f931 	bl	80010a4 <HAL_Delay>
  return USBH_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e62:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	212c      	movs	r1, #44	; 0x2c
 8008e6a:	fb01 f303 	mul.w	r3, r1, r3
 8008e6e:	4413      	add	r3, r2
 8008e70:	333b      	adds	r3, #59	; 0x3b
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d009      	beq.n	8008e8c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	212c      	movs	r1, #44	; 0x2c
 8008e7e:	fb01 f303 	mul.w	r3, r1, r3
 8008e82:	4413      	add	r3, r2
 8008e84:	3354      	adds	r3, #84	; 0x54
 8008e86:	78ba      	ldrb	r2, [r7, #2]
 8008e88:	701a      	strb	r2, [r3, #0]
 8008e8a:	e008      	b.n	8008e9e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	212c      	movs	r1, #44	; 0x2c
 8008e92:	fb01 f303 	mul.w	r3, r1, r3
 8008e96:	4413      	add	r3, r2
 8008e98:	3355      	adds	r3, #85	; 0x55
 8008e9a:	78ba      	ldrb	r2, [r7, #2]
 8008e9c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7f8 f8f5 	bl	80010a4 <HAL_Delay>
}
 8008eba:	bf00      	nop
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d817      	bhi.n	8008f08 <USBH_Get_USB_Status+0x44>
 8008ed8:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <USBH_Get_USB_Status+0x1c>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008ef1 	.word	0x08008ef1
 8008ee4:	08008ef7 	.word	0x08008ef7
 8008ee8:	08008efd 	.word	0x08008efd
 8008eec:	08008f03 	.word	0x08008f03
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef4:	e00b      	b.n	8008f0e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	73fb      	strb	r3, [r7, #15]
    break;
 8008efa:	e008      	b.n	8008f0e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
    break;
 8008f00:	e005      	b.n	8008f0e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008f02:	2302      	movs	r3, #2
 8008f04:	73fb      	strb	r3, [r7, #15]
    break;
 8008f06:	e002      	b.n	8008f0e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0c:	bf00      	nop
  }
  return usb_status;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	4603      	mov	r3, r0
 8008f24:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008f26:	79fb      	ldrb	r3, [r7, #7]
 8008f28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008f2a:	79fb      	ldrb	r3, [r7, #7]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d102      	bne.n	8008f36 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008f30:	2300      	movs	r3, #0
 8008f32:	73fb      	strb	r3, [r7, #15]
 8008f34:	e001      	b.n	8008f3a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008f36:	2301      	movs	r3, #1
 8008f38:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	2101      	movs	r1, #1
 8008f40:	4803      	ldr	r0, [pc, #12]	; (8008f50 <MX_DriverVbusFS+0x34>)
 8008f42:	f7f8 fbfb 	bl	800173c <HAL_GPIO_WritePin>
}
 8008f46:	bf00      	nop
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	40020800 	.word	0x40020800

08008f54 <malloc>:
 8008f54:	4b02      	ldr	r3, [pc, #8]	; (8008f60 <malloc+0xc>)
 8008f56:	4601      	mov	r1, r0
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	f000 b82b 	b.w	8008fb4 <_malloc_r>
 8008f5e:	bf00      	nop
 8008f60:	20000078 	.word	0x20000078

08008f64 <free>:
 8008f64:	4b02      	ldr	r3, [pc, #8]	; (8008f70 <free+0xc>)
 8008f66:	4601      	mov	r1, r0
 8008f68:	6818      	ldr	r0, [r3, #0]
 8008f6a:	f000 b8f3 	b.w	8009154 <_free_r>
 8008f6e:	bf00      	nop
 8008f70:	20000078 	.word	0x20000078

08008f74 <sbrk_aligned>:
 8008f74:	b570      	push	{r4, r5, r6, lr}
 8008f76:	4e0e      	ldr	r6, [pc, #56]	; (8008fb0 <sbrk_aligned+0x3c>)
 8008f78:	460c      	mov	r4, r1
 8008f7a:	6831      	ldr	r1, [r6, #0]
 8008f7c:	4605      	mov	r5, r0
 8008f7e:	b911      	cbnz	r1, 8008f86 <sbrk_aligned+0x12>
 8008f80:	f000 f8ac 	bl	80090dc <_sbrk_r>
 8008f84:	6030      	str	r0, [r6, #0]
 8008f86:	4621      	mov	r1, r4
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f000 f8a7 	bl	80090dc <_sbrk_r>
 8008f8e:	1c43      	adds	r3, r0, #1
 8008f90:	d00a      	beq.n	8008fa8 <sbrk_aligned+0x34>
 8008f92:	1cc4      	adds	r4, r0, #3
 8008f94:	f024 0403 	bic.w	r4, r4, #3
 8008f98:	42a0      	cmp	r0, r4
 8008f9a:	d007      	beq.n	8008fac <sbrk_aligned+0x38>
 8008f9c:	1a21      	subs	r1, r4, r0
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	f000 f89c 	bl	80090dc <_sbrk_r>
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	d101      	bne.n	8008fac <sbrk_aligned+0x38>
 8008fa8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fac:	4620      	mov	r0, r4
 8008fae:	bd70      	pop	{r4, r5, r6, pc}
 8008fb0:	20000904 	.word	0x20000904

08008fb4 <_malloc_r>:
 8008fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb8:	1ccd      	adds	r5, r1, #3
 8008fba:	f025 0503 	bic.w	r5, r5, #3
 8008fbe:	3508      	adds	r5, #8
 8008fc0:	2d0c      	cmp	r5, #12
 8008fc2:	bf38      	it	cc
 8008fc4:	250c      	movcc	r5, #12
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	4607      	mov	r7, r0
 8008fca:	db01      	blt.n	8008fd0 <_malloc_r+0x1c>
 8008fcc:	42a9      	cmp	r1, r5
 8008fce:	d905      	bls.n	8008fdc <_malloc_r+0x28>
 8008fd0:	230c      	movs	r3, #12
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	2600      	movs	r6, #0
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090b0 <_malloc_r+0xfc>
 8008fe0:	f000 f868 	bl	80090b4 <__malloc_lock>
 8008fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8008fe8:	461c      	mov	r4, r3
 8008fea:	bb5c      	cbnz	r4, 8009044 <_malloc_r+0x90>
 8008fec:	4629      	mov	r1, r5
 8008fee:	4638      	mov	r0, r7
 8008ff0:	f7ff ffc0 	bl	8008f74 <sbrk_aligned>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	d155      	bne.n	80090a6 <_malloc_r+0xf2>
 8008ffa:	f8d8 4000 	ldr.w	r4, [r8]
 8008ffe:	4626      	mov	r6, r4
 8009000:	2e00      	cmp	r6, #0
 8009002:	d145      	bne.n	8009090 <_malloc_r+0xdc>
 8009004:	2c00      	cmp	r4, #0
 8009006:	d048      	beq.n	800909a <_malloc_r+0xe6>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	4631      	mov	r1, r6
 800900c:	4638      	mov	r0, r7
 800900e:	eb04 0903 	add.w	r9, r4, r3
 8009012:	f000 f863 	bl	80090dc <_sbrk_r>
 8009016:	4581      	cmp	r9, r0
 8009018:	d13f      	bne.n	800909a <_malloc_r+0xe6>
 800901a:	6821      	ldr	r1, [r4, #0]
 800901c:	1a6d      	subs	r5, r5, r1
 800901e:	4629      	mov	r1, r5
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff ffa7 	bl	8008f74 <sbrk_aligned>
 8009026:	3001      	adds	r0, #1
 8009028:	d037      	beq.n	800909a <_malloc_r+0xe6>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	442b      	add	r3, r5
 800902e:	6023      	str	r3, [r4, #0]
 8009030:	f8d8 3000 	ldr.w	r3, [r8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d038      	beq.n	80090aa <_malloc_r+0xf6>
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	42a2      	cmp	r2, r4
 800903c:	d12b      	bne.n	8009096 <_malloc_r+0xe2>
 800903e:	2200      	movs	r2, #0
 8009040:	605a      	str	r2, [r3, #4]
 8009042:	e00f      	b.n	8009064 <_malloc_r+0xb0>
 8009044:	6822      	ldr	r2, [r4, #0]
 8009046:	1b52      	subs	r2, r2, r5
 8009048:	d41f      	bmi.n	800908a <_malloc_r+0xd6>
 800904a:	2a0b      	cmp	r2, #11
 800904c:	d917      	bls.n	800907e <_malloc_r+0xca>
 800904e:	1961      	adds	r1, r4, r5
 8009050:	42a3      	cmp	r3, r4
 8009052:	6025      	str	r5, [r4, #0]
 8009054:	bf18      	it	ne
 8009056:	6059      	strne	r1, [r3, #4]
 8009058:	6863      	ldr	r3, [r4, #4]
 800905a:	bf08      	it	eq
 800905c:	f8c8 1000 	streq.w	r1, [r8]
 8009060:	5162      	str	r2, [r4, r5]
 8009062:	604b      	str	r3, [r1, #4]
 8009064:	4638      	mov	r0, r7
 8009066:	f104 060b 	add.w	r6, r4, #11
 800906a:	f000 f829 	bl	80090c0 <__malloc_unlock>
 800906e:	f026 0607 	bic.w	r6, r6, #7
 8009072:	1d23      	adds	r3, r4, #4
 8009074:	1af2      	subs	r2, r6, r3
 8009076:	d0ae      	beq.n	8008fd6 <_malloc_r+0x22>
 8009078:	1b9b      	subs	r3, r3, r6
 800907a:	50a3      	str	r3, [r4, r2]
 800907c:	e7ab      	b.n	8008fd6 <_malloc_r+0x22>
 800907e:	42a3      	cmp	r3, r4
 8009080:	6862      	ldr	r2, [r4, #4]
 8009082:	d1dd      	bne.n	8009040 <_malloc_r+0x8c>
 8009084:	f8c8 2000 	str.w	r2, [r8]
 8009088:	e7ec      	b.n	8009064 <_malloc_r+0xb0>
 800908a:	4623      	mov	r3, r4
 800908c:	6864      	ldr	r4, [r4, #4]
 800908e:	e7ac      	b.n	8008fea <_malloc_r+0x36>
 8009090:	4634      	mov	r4, r6
 8009092:	6876      	ldr	r6, [r6, #4]
 8009094:	e7b4      	b.n	8009000 <_malloc_r+0x4c>
 8009096:	4613      	mov	r3, r2
 8009098:	e7cc      	b.n	8009034 <_malloc_r+0x80>
 800909a:	230c      	movs	r3, #12
 800909c:	603b      	str	r3, [r7, #0]
 800909e:	4638      	mov	r0, r7
 80090a0:	f000 f80e 	bl	80090c0 <__malloc_unlock>
 80090a4:	e797      	b.n	8008fd6 <_malloc_r+0x22>
 80090a6:	6025      	str	r5, [r4, #0]
 80090a8:	e7dc      	b.n	8009064 <_malloc_r+0xb0>
 80090aa:	605b      	str	r3, [r3, #4]
 80090ac:	deff      	udf	#255	; 0xff
 80090ae:	bf00      	nop
 80090b0:	20000900 	.word	0x20000900

080090b4 <__malloc_lock>:
 80090b4:	4801      	ldr	r0, [pc, #4]	; (80090bc <__malloc_lock+0x8>)
 80090b6:	f000 b84b 	b.w	8009150 <__retarget_lock_acquire_recursive>
 80090ba:	bf00      	nop
 80090bc:	20000a44 	.word	0x20000a44

080090c0 <__malloc_unlock>:
 80090c0:	4801      	ldr	r0, [pc, #4]	; (80090c8 <__malloc_unlock+0x8>)
 80090c2:	f000 b846 	b.w	8009152 <__retarget_lock_release_recursive>
 80090c6:	bf00      	nop
 80090c8:	20000a44 	.word	0x20000a44

080090cc <memset>:
 80090cc:	4402      	add	r2, r0
 80090ce:	4603      	mov	r3, r0
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d100      	bne.n	80090d6 <memset+0xa>
 80090d4:	4770      	bx	lr
 80090d6:	f803 1b01 	strb.w	r1, [r3], #1
 80090da:	e7f9      	b.n	80090d0 <memset+0x4>

080090dc <_sbrk_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d06      	ldr	r5, [pc, #24]	; (80090f8 <_sbrk_r+0x1c>)
 80090e0:	2300      	movs	r3, #0
 80090e2:	4604      	mov	r4, r0
 80090e4:	4608      	mov	r0, r1
 80090e6:	602b      	str	r3, [r5, #0]
 80090e8:	f7f7 fef8 	bl	8000edc <_sbrk>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	d102      	bne.n	80090f6 <_sbrk_r+0x1a>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	b103      	cbz	r3, 80090f6 <_sbrk_r+0x1a>
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	20000a40 	.word	0x20000a40

080090fc <__errno>:
 80090fc:	4b01      	ldr	r3, [pc, #4]	; (8009104 <__errno+0x8>)
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20000078 	.word	0x20000078

08009108 <__libc_init_array>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	4d0d      	ldr	r5, [pc, #52]	; (8009140 <__libc_init_array+0x38>)
 800910c:	4c0d      	ldr	r4, [pc, #52]	; (8009144 <__libc_init_array+0x3c>)
 800910e:	1b64      	subs	r4, r4, r5
 8009110:	10a4      	asrs	r4, r4, #2
 8009112:	2600      	movs	r6, #0
 8009114:	42a6      	cmp	r6, r4
 8009116:	d109      	bne.n	800912c <__libc_init_array+0x24>
 8009118:	4d0b      	ldr	r5, [pc, #44]	; (8009148 <__libc_init_array+0x40>)
 800911a:	4c0c      	ldr	r4, [pc, #48]	; (800914c <__libc_init_array+0x44>)
 800911c:	f000 f866 	bl	80091ec <_init>
 8009120:	1b64      	subs	r4, r4, r5
 8009122:	10a4      	asrs	r4, r4, #2
 8009124:	2600      	movs	r6, #0
 8009126:	42a6      	cmp	r6, r4
 8009128:	d105      	bne.n	8009136 <__libc_init_array+0x2e>
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009130:	4798      	blx	r3
 8009132:	3601      	adds	r6, #1
 8009134:	e7ee      	b.n	8009114 <__libc_init_array+0xc>
 8009136:	f855 3b04 	ldr.w	r3, [r5], #4
 800913a:	4798      	blx	r3
 800913c:	3601      	adds	r6, #1
 800913e:	e7f2      	b.n	8009126 <__libc_init_array+0x1e>
 8009140:	08009240 	.word	0x08009240
 8009144:	08009240 	.word	0x08009240
 8009148:	08009240 	.word	0x08009240
 800914c:	08009244 	.word	0x08009244

08009150 <__retarget_lock_acquire_recursive>:
 8009150:	4770      	bx	lr

08009152 <__retarget_lock_release_recursive>:
 8009152:	4770      	bx	lr

08009154 <_free_r>:
 8009154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009156:	2900      	cmp	r1, #0
 8009158:	d044      	beq.n	80091e4 <_free_r+0x90>
 800915a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915e:	9001      	str	r0, [sp, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	f1a1 0404 	sub.w	r4, r1, #4
 8009166:	bfb8      	it	lt
 8009168:	18e4      	addlt	r4, r4, r3
 800916a:	f7ff ffa3 	bl	80090b4 <__malloc_lock>
 800916e:	4a1e      	ldr	r2, [pc, #120]	; (80091e8 <_free_r+0x94>)
 8009170:	9801      	ldr	r0, [sp, #4]
 8009172:	6813      	ldr	r3, [r2, #0]
 8009174:	b933      	cbnz	r3, 8009184 <_free_r+0x30>
 8009176:	6063      	str	r3, [r4, #4]
 8009178:	6014      	str	r4, [r2, #0]
 800917a:	b003      	add	sp, #12
 800917c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009180:	f7ff bf9e 	b.w	80090c0 <__malloc_unlock>
 8009184:	42a3      	cmp	r3, r4
 8009186:	d908      	bls.n	800919a <_free_r+0x46>
 8009188:	6825      	ldr	r5, [r4, #0]
 800918a:	1961      	adds	r1, r4, r5
 800918c:	428b      	cmp	r3, r1
 800918e:	bf01      	itttt	eq
 8009190:	6819      	ldreq	r1, [r3, #0]
 8009192:	685b      	ldreq	r3, [r3, #4]
 8009194:	1949      	addeq	r1, r1, r5
 8009196:	6021      	streq	r1, [r4, #0]
 8009198:	e7ed      	b.n	8009176 <_free_r+0x22>
 800919a:	461a      	mov	r2, r3
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	b10b      	cbz	r3, 80091a4 <_free_r+0x50>
 80091a0:	42a3      	cmp	r3, r4
 80091a2:	d9fa      	bls.n	800919a <_free_r+0x46>
 80091a4:	6811      	ldr	r1, [r2, #0]
 80091a6:	1855      	adds	r5, r2, r1
 80091a8:	42a5      	cmp	r5, r4
 80091aa:	d10b      	bne.n	80091c4 <_free_r+0x70>
 80091ac:	6824      	ldr	r4, [r4, #0]
 80091ae:	4421      	add	r1, r4
 80091b0:	1854      	adds	r4, r2, r1
 80091b2:	42a3      	cmp	r3, r4
 80091b4:	6011      	str	r1, [r2, #0]
 80091b6:	d1e0      	bne.n	800917a <_free_r+0x26>
 80091b8:	681c      	ldr	r4, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	6053      	str	r3, [r2, #4]
 80091be:	440c      	add	r4, r1
 80091c0:	6014      	str	r4, [r2, #0]
 80091c2:	e7da      	b.n	800917a <_free_r+0x26>
 80091c4:	d902      	bls.n	80091cc <_free_r+0x78>
 80091c6:	230c      	movs	r3, #12
 80091c8:	6003      	str	r3, [r0, #0]
 80091ca:	e7d6      	b.n	800917a <_free_r+0x26>
 80091cc:	6825      	ldr	r5, [r4, #0]
 80091ce:	1961      	adds	r1, r4, r5
 80091d0:	428b      	cmp	r3, r1
 80091d2:	bf04      	itt	eq
 80091d4:	6819      	ldreq	r1, [r3, #0]
 80091d6:	685b      	ldreq	r3, [r3, #4]
 80091d8:	6063      	str	r3, [r4, #4]
 80091da:	bf04      	itt	eq
 80091dc:	1949      	addeq	r1, r1, r5
 80091de:	6021      	streq	r1, [r4, #0]
 80091e0:	6054      	str	r4, [r2, #4]
 80091e2:	e7ca      	b.n	800917a <_free_r+0x26>
 80091e4:	b003      	add	sp, #12
 80091e6:	bd30      	pop	{r4, r5, pc}
 80091e8:	20000900 	.word	0x20000900

080091ec <_init>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr

080091f8 <_fini>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	bf00      	nop
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr
